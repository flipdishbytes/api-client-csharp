/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns></returns>
        void ArchiveGroup (string appId, string catalogItemId);

        /// <summary>
        /// Archive Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArchiveGroupWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Create a Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>RestApiResultGroup</returns>
        RestApiResultGroup CreateGroup (string appId, CreateGroup createGroup);

        /// <summary>
        /// Create a Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>ApiResponse of RestApiResultGroup</returns>
        ApiResponse<RestApiResultGroup> CreateGroupWithHttpInfo (string appId, CreateGroup createGroup);
        /// <summary>
        /// Duplicate Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns></returns>
        void DuplicateGroup (string appId, string catalogItemId);

        /// <summary>
        /// Duplicate Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DuplicateGroupWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Get group by Id
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Group</returns>
        Group GetGroupById (string appId, string catalogItemId);

        /// <summary>
        /// Get group by Id
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupByIdWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Get paginated groups by app name id filtered by types
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultGroup</returns>
        RestApiPaginationResultGroup GetGroups (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get paginated groups by app name id filtered by types
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultGroup</returns>
        ApiResponse<RestApiPaginationResultGroup> GetGroupsWithHttpInfo (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns></returns>
        void UpdateGroup (string appId, string catalogItemId, UpdateGroup updateGroup);

        /// <summary>
        /// Update Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupWithHttpInfo (string appId, string catalogItemId, UpdateGroup updateGroup);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Archive Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArchiveGroupAsync (string appId, string catalogItemId);

        /// <summary>
        /// Archive Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveGroupAsyncWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Create a Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>Task of RestApiResultGroup</returns>
        System.Threading.Tasks.Task<RestApiResultGroup> CreateGroupAsync (string appId, CreateGroup createGroup);

        /// <summary>
        /// Create a Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>Task of ApiResponse (RestApiResultGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultGroup>> CreateGroupAsyncWithHttpInfo (string appId, CreateGroup createGroup);
        /// <summary>
        /// Duplicate Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DuplicateGroupAsync (string appId, string catalogItemId);

        /// <summary>
        /// Duplicate Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DuplicateGroupAsyncWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Get group by Id
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupByIdAsync (string appId, string catalogItemId);

        /// <summary>
        /// Get group by Id
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupByIdAsyncWithHttpInfo (string appId, string catalogItemId);
        /// <summary>
        /// Get paginated groups by app name id filtered by types
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultGroup</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultGroup> GetGroupsAsync (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get paginated groups by app name id filtered by types
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultGroup>> GetGroupsAsyncWithHttpInfo (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupAsync (string appId, string catalogItemId, UpdateGroup updateGroup);

        /// <summary>
        /// Update Catalog Group
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupAsyncWithHttpInfo (string appId, string catalogItemId, UpdateGroup updateGroup);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogGroupsApi : ICatalogGroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogGroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogGroupsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Archive Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns></returns>
        public void ArchiveGroup (string appId, string catalogItemId)
        {
             ArchiveGroupWithHttpInfo(appId, catalogItemId);
        }

        /// <summary>
        /// Archive Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArchiveGroupWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->ArchiveGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->ArchiveGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Archive Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArchiveGroupAsync (string appId, string catalogItemId)
        {
             await ArchiveGroupAsyncWithHttpInfo(appId, catalogItemId);

        }

        /// <summary>
        /// Archive Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveGroupAsyncWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->ArchiveGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->ArchiveGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>RestApiResultGroup</returns>
        public RestApiResultGroup CreateGroup (string appId, CreateGroup createGroup)
        {
             ApiResponse<RestApiResultGroup> localVarResponse = CreateGroupWithHttpInfo(appId, createGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>ApiResponse of RestApiResultGroup</returns>
        public ApiResponse< RestApiResultGroup > CreateGroupWithHttpInfo (string appId, CreateGroup createGroup)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->CreateGroup");
            // verify the required parameter 'createGroup' is set
            if (createGroup == null)
                throw new ApiException(400, "Missing required parameter 'createGroup' when calling CatalogGroupsApi->CreateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (createGroup != null && createGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultGroup)));
        }

        /// <summary>
        /// Create a Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>Task of RestApiResultGroup</returns>
        public async System.Threading.Tasks.Task<RestApiResultGroup> CreateGroupAsync (string appId, CreateGroup createGroup)
        {
             ApiResponse<RestApiResultGroup> localVarResponse = await CreateGroupAsyncWithHttpInfo(appId, createGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="createGroup"></param>
        /// <returns>Task of ApiResponse (RestApiResultGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultGroup>> CreateGroupAsyncWithHttpInfo (string appId, CreateGroup createGroup)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->CreateGroup");
            // verify the required parameter 'createGroup' is set
            if (createGroup == null)
                throw new ApiException(400, "Missing required parameter 'createGroup' when calling CatalogGroupsApi->CreateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (createGroup != null && createGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultGroup)));
        }

        /// <summary>
        /// Duplicate Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns></returns>
        public void DuplicateGroup (string appId, string catalogItemId)
        {
             DuplicateGroupWithHttpInfo(appId, catalogItemId);
        }

        /// <summary>
        /// Duplicate Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DuplicateGroupWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->DuplicateGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->DuplicateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Duplicate Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DuplicateGroupAsync (string appId, string catalogItemId)
        {
             await DuplicateGroupAsyncWithHttpInfo(appId, catalogItemId);

        }

        /// <summary>
        /// Duplicate Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DuplicateGroupAsyncWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->DuplicateGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->DuplicateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get group by Id [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Group</returns>
        public Group GetGroupById (string appId, string catalogItemId)
        {
             ApiResponse<Group> localVarResponse = GetGroupByIdWithHttpInfo(appId, catalogItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group by Id [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>ApiResponse of Group</returns>
        public ApiResponse< Group > GetGroupByIdWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->GetGroupById");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->GetGroupById");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Get group by Id [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupByIdAsync (string appId, string catalogItemId)
        {
             ApiResponse<Group> localVarResponse = await GetGroupByIdAsyncWithHttpInfo(appId, catalogItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group by Id [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupByIdAsyncWithHttpInfo (string appId, string catalogItemId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->GetGroupById");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->GetGroupById");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Get paginated groups by app name id filtered by types [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultGroup</returns>
        public RestApiPaginationResultGroup GetGroups (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultGroup> localVarResponse = GetGroupsWithHttpInfo(appId, groupTypes, searchTerm, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated groups by app name id filtered by types [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultGroup</returns>
        public ApiResponse< RestApiPaginationResultGroup > GetGroupsWithHttpInfo (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->GetGroups");
            // verify the required parameter 'groupTypes' is set
            if (groupTypes == null)
                throw new ApiException(400, "Missing required parameter 'groupTypes' when calling CatalogGroupsApi->GetGroups");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupTypes", groupTypes)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultGroup)));
        }

        /// <summary>
        /// Get paginated groups by app name id filtered by types [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultGroup</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultGroup> GetGroupsAsync (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultGroup> localVarResponse = await GetGroupsAsyncWithHttpInfo(appId, groupTypes, searchTerm, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get paginated groups by app name id filtered by types [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupTypes"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultGroup>> GetGroupsAsyncWithHttpInfo (string appId, List<string> groupTypes, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->GetGroups");
            // verify the required parameter 'groupTypes' is set
            if (groupTypes == null)
                throw new ApiException(400, "Missing required parameter 'groupTypes' when calling CatalogGroupsApi->GetGroups");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupTypes", groupTypes)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultGroup)));
        }

        /// <summary>
        /// Update Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns></returns>
        public void UpdateGroup (string appId, string catalogItemId, UpdateGroup updateGroup)
        {
             UpdateGroupWithHttpInfo(appId, catalogItemId, updateGroup);
        }

        /// <summary>
        /// Update Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGroupWithHttpInfo (string appId, string catalogItemId, UpdateGroup updateGroup)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->UpdateGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->UpdateGroup");
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
                throw new ApiException(400, "Missing required parameter 'updateGroup' when calling CatalogGroupsApi->UpdateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter
            if (updateGroup != null && updateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupAsync (string appId, string catalogItemId, UpdateGroup updateGroup)
        {
             await UpdateGroupAsyncWithHttpInfo(appId, catalogItemId, updateGroup);

        }

        /// <summary>
        /// Update Catalog Group [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="catalogItemId"></param>
        /// <param name="updateGroup"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupAsyncWithHttpInfo (string appId, string catalogItemId, UpdateGroup updateGroup)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogGroupsApi->UpdateGroup");
            // verify the required parameter 'catalogItemId' is set
            if (catalogItemId == null)
                throw new ApiException(400, "Missing required parameter 'catalogItemId' when calling CatalogGroupsApi->UpdateGroup");
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
                throw new ApiException(400, "Missing required parameter 'updateGroup' when calling CatalogGroupsApi->UpdateGroup");

            var localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (catalogItemId != null) localVarPathParams.Add("catalogItemId", this.Configuration.ApiClient.ParameterToString(catalogItemId)); // path parameter
            if (updateGroup != null && updateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Store Kiosk Settings
    /// </summary>
    [DataContract]
    public partial class StoreKioskSettingModel :  IEquatable<StoreKioskSettingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreKioskSettingModel" /> class.
        /// </summary>
        /// <param name="kioskName">Name of the Kiosk.</param>
        /// <param name="requireCustomerName">Require customer name flag.</param>
        /// <param name="requireCustomerPhoneNumber">Require customer phone number flag.</param>
        /// <param name="requestTableNumber">Request table number flag.</param>
        /// <param name="offerDineInOrTakeawayOptions">Offer Dine-In/Takeaway option flag.</param>
        /// <param name="sortOrder">Order in which the Kiosks should be listed.</param>
        /// <param name="configId">Kiosk (Hydra) config id.</param>
        /// <param name="storeId">Id of the store (Physical Restaurant).</param>
        public StoreKioskSettingModel(string kioskName = default(string), bool? requireCustomerName = default(bool?), bool? requireCustomerPhoneNumber = default(bool?), bool? requestTableNumber = default(bool?), bool? offerDineInOrTakeawayOptions = default(bool?), int? sortOrder = default(int?), int? configId = default(int?), int? storeId = default(int?))
        {
            this.KioskName = kioskName;
            this.RequireCustomerName = requireCustomerName;
            this.RequireCustomerPhoneNumber = requireCustomerPhoneNumber;
            this.RequestTableNumber = requestTableNumber;
            this.OfferDineInOrTakeawayOptions = offerDineInOrTakeawayOptions;
            this.SortOrder = sortOrder;
            this.ConfigId = configId;
            this.StoreId = storeId;
        }
        
        /// <summary>
        /// Name of the Kiosk
        /// </summary>
        /// <value>Name of the Kiosk</value>
        [DataMember(Name="KioskName", EmitDefaultValue=false)]
        public string KioskName { get; set; }

        /// <summary>
        /// Require customer name flag
        /// </summary>
        /// <value>Require customer name flag</value>
        [DataMember(Name="RequireCustomerName", EmitDefaultValue=false)]
        public bool? RequireCustomerName { get; set; }

        /// <summary>
        /// Require customer phone number flag
        /// </summary>
        /// <value>Require customer phone number flag</value>
        [DataMember(Name="RequireCustomerPhoneNumber", EmitDefaultValue=false)]
        public bool? RequireCustomerPhoneNumber { get; set; }

        /// <summary>
        /// Request table number flag
        /// </summary>
        /// <value>Request table number flag</value>
        [DataMember(Name="RequestTableNumber", EmitDefaultValue=false)]
        public bool? RequestTableNumber { get; set; }

        /// <summary>
        /// Offer Dine-In/Takeaway option flag
        /// </summary>
        /// <value>Offer Dine-In/Takeaway option flag</value>
        [DataMember(Name="OfferDineInOrTakeawayOptions", EmitDefaultValue=false)]
        public bool? OfferDineInOrTakeawayOptions { get; set; }

        /// <summary>
        /// Order in which the Kiosks should be listed
        /// </summary>
        /// <value>Order in which the Kiosks should be listed</value>
        [DataMember(Name="SortOrder", EmitDefaultValue=false)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Kiosk (Hydra) config id
        /// </summary>
        /// <value>Kiosk (Hydra) config id</value>
        [DataMember(Name="ConfigId", EmitDefaultValue=false)]
        public int? ConfigId { get; set; }

        /// <summary>
        /// Id of the store (Physical Restaurant)
        /// </summary>
        /// <value>Id of the store (Physical Restaurant)</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreKioskSettingModel {\n");
            sb.Append("  KioskName: ").Append(KioskName).Append("\n");
            sb.Append("  RequireCustomerName: ").Append(RequireCustomerName).Append("\n");
            sb.Append("  RequireCustomerPhoneNumber: ").Append(RequireCustomerPhoneNumber).Append("\n");
            sb.Append("  RequestTableNumber: ").Append(RequestTableNumber).Append("\n");
            sb.Append("  OfferDineInOrTakeawayOptions: ").Append(OfferDineInOrTakeawayOptions).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  ConfigId: ").Append(ConfigId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreKioskSettingModel);
        }

        /// <summary>
        /// Returns true if StoreKioskSettingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreKioskSettingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreKioskSettingModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KioskName == input.KioskName ||
                    (this.KioskName != null &&
                    this.KioskName.Equals(input.KioskName))
                ) && 
                (
                    this.RequireCustomerName == input.RequireCustomerName ||
                    (this.RequireCustomerName != null &&
                    this.RequireCustomerName.Equals(input.RequireCustomerName))
                ) && 
                (
                    this.RequireCustomerPhoneNumber == input.RequireCustomerPhoneNumber ||
                    (this.RequireCustomerPhoneNumber != null &&
                    this.RequireCustomerPhoneNumber.Equals(input.RequireCustomerPhoneNumber))
                ) && 
                (
                    this.RequestTableNumber == input.RequestTableNumber ||
                    (this.RequestTableNumber != null &&
                    this.RequestTableNumber.Equals(input.RequestTableNumber))
                ) && 
                (
                    this.OfferDineInOrTakeawayOptions == input.OfferDineInOrTakeawayOptions ||
                    (this.OfferDineInOrTakeawayOptions != null &&
                    this.OfferDineInOrTakeawayOptions.Equals(input.OfferDineInOrTakeawayOptions))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.ConfigId == input.ConfigId ||
                    (this.ConfigId != null &&
                    this.ConfigId.Equals(input.ConfigId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KioskName != null)
                    hashCode = hashCode * 59 + this.KioskName.GetHashCode();
                if (this.RequireCustomerName != null)
                    hashCode = hashCode * 59 + this.RequireCustomerName.GetHashCode();
                if (this.RequireCustomerPhoneNumber != null)
                    hashCode = hashCode * 59 + this.RequireCustomerPhoneNumber.GetHashCode();
                if (this.RequestTableNumber != null)
                    hashCode = hashCode * 59 + this.RequestTableNumber.GetHashCode();
                if (this.OfferDineInOrTakeawayOptions != null)
                    hashCode = hashCode * 59 + this.OfferDineInOrTakeawayOptions.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.ConfigId != null)
                    hashCode = hashCode * 59 + this.ConfigId.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

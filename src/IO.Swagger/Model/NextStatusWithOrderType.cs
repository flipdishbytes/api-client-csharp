/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Next status by order type
    /// </summary>
    [DataContract]
    public partial class NextStatusWithOrderType :  IEquatable<NextStatusWithOrderType>, IValidatableObject
    {
        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 2,
            
            /// <summary>
            /// Enum Collection for value: Collection
            /// </summary>
            [EnumMember(Value = "Collection")]
            Collection = 3,
            
            /// <summary>
            /// Enum DineIn for value: DineIn
            /// </summary>
            [EnumMember(Value = "DineIn")]
            DineIn = 4
        }

        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [DataMember(Name="OrderType", EmitDefaultValue=false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NextStatusWithOrderType" /> class.
        /// </summary>
        /// <param name="orderType">Order type.</param>
        /// <param name="nextStatus">Next status id.</param>
        public NextStatusWithOrderType(OrderTypeEnum? orderType = default(OrderTypeEnum?), string nextStatus = default(string))
        {
            this.OrderType = orderType;
            this.NextStatus = nextStatus;
        }
        

        /// <summary>
        /// Next status id
        /// </summary>
        /// <value>Next status id</value>
        [DataMember(Name="NextStatus", EmitDefaultValue=false)]
        public string NextStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextStatusWithOrderType {\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  NextStatus: ").Append(NextStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextStatusWithOrderType);
        }

        /// <summary>
        /// Returns true if NextStatusWithOrderType instances are equal
        /// </summary>
        /// <param name="input">Instance of NextStatusWithOrderType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextStatusWithOrderType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.NextStatus == input.NextStatus ||
                    (this.NextStatus != null &&
                    this.NextStatus.Equals(input.NextStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.NextStatus != null)
                    hashCode = hashCode * 59 + this.NextStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

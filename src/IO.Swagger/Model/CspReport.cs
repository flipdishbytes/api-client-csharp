/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CspReport
    /// </summary>
    [DataContract]
    public partial class CspReport :  IEquatable<CspReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CspReport" /> class.
        /// </summary>
        /// <param name="documentUri">documentUri.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="violatedDirective">violatedDirective.</param>
        /// <param name="effectiveDirective">effectiveDirective.</param>
        /// <param name="originalPolicy">originalPolicy.</param>
        /// <param name="blockedUri">blockedUri.</param>
        /// <param name="statusCode">statusCode.</param>
        public CspReport(string documentUri = default(string), string referrer = default(string), string violatedDirective = default(string), string effectiveDirective = default(string), string originalPolicy = default(string), string blockedUri = default(string), int? statusCode = default(int?))
        {
            this.DocumentUri = documentUri;
            this.Referrer = referrer;
            this.ViolatedDirective = violatedDirective;
            this.EffectiveDirective = effectiveDirective;
            this.OriginalPolicy = originalPolicy;
            this.BlockedUri = blockedUri;
            this.StatusCode = statusCode;
        }
        
        /// <summary>
        /// Gets or Sets DocumentUri
        /// </summary>
        [DataMember(Name="Document-uri", EmitDefaultValue=false)]
        public string DocumentUri { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name="Referrer", EmitDefaultValue=false)]
        public string Referrer { get; set; }

        /// <summary>
        /// Gets or Sets ViolatedDirective
        /// </summary>
        [DataMember(Name="Violated-directive", EmitDefaultValue=false)]
        public string ViolatedDirective { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDirective
        /// </summary>
        [DataMember(Name="Effective-directive", EmitDefaultValue=false)]
        public string EffectiveDirective { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPolicy
        /// </summary>
        [DataMember(Name="Original-policy", EmitDefaultValue=false)]
        public string OriginalPolicy { get; set; }

        /// <summary>
        /// Gets or Sets BlockedUri
        /// </summary>
        [DataMember(Name="Blocked-uri", EmitDefaultValue=false)]
        public string BlockedUri { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="Status-code", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CspReport {\n");
            sb.Append("  DocumentUri: ").Append(DocumentUri).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  ViolatedDirective: ").Append(ViolatedDirective).Append("\n");
            sb.Append("  EffectiveDirective: ").Append(EffectiveDirective).Append("\n");
            sb.Append("  OriginalPolicy: ").Append(OriginalPolicy).Append("\n");
            sb.Append("  BlockedUri: ").Append(BlockedUri).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CspReport);
        }

        /// <summary>
        /// Returns true if CspReport instances are equal
        /// </summary>
        /// <param name="input">Instance of CspReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CspReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentUri == input.DocumentUri ||
                    (this.DocumentUri != null &&
                    this.DocumentUri.Equals(input.DocumentUri))
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.ViolatedDirective == input.ViolatedDirective ||
                    (this.ViolatedDirective != null &&
                    this.ViolatedDirective.Equals(input.ViolatedDirective))
                ) && 
                (
                    this.EffectiveDirective == input.EffectiveDirective ||
                    (this.EffectiveDirective != null &&
                    this.EffectiveDirective.Equals(input.EffectiveDirective))
                ) && 
                (
                    this.OriginalPolicy == input.OriginalPolicy ||
                    (this.OriginalPolicy != null &&
                    this.OriginalPolicy.Equals(input.OriginalPolicy))
                ) && 
                (
                    this.BlockedUri == input.BlockedUri ||
                    (this.BlockedUri != null &&
                    this.BlockedUri.Equals(input.BlockedUri))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentUri != null)
                    hashCode = hashCode * 59 + this.DocumentUri.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.ViolatedDirective != null)
                    hashCode = hashCode * 59 + this.ViolatedDirective.GetHashCode();
                if (this.EffectiveDirective != null)
                    hashCode = hashCode * 59 + this.EffectiveDirective.GetHashCode();
                if (this.OriginalPolicy != null)
                    hashCode = hashCode * 59 + this.OriginalPolicy.GetHashCode();
                if (this.BlockedUri != null)
                    hashCode = hashCode * 59 + this.BlockedUri.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

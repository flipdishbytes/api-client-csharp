/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the order data required for customer driver tracking
    /// </summary>
    [DataContract]
    public partial class CustomerDeliveryTrackingOrder :  IEquatable<CustomerDeliveryTrackingOrder>, IValidatableObject
    {
        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 113
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDeliveryTrackingOrder" /> class.
        /// </summary>
        /// <param name="orderId">Order Id.</param>
        /// <param name="address">Pretified address string in country format.</param>
        /// <param name="deliveryNotes">Delivery Notes.</param>
        /// <param name="storePhoneNumber">Phone number of the store.</param>
        /// <param name="appIconUrl">App Icon of the store.</param>
        /// <param name="orderTrackingCode">Order Tracking Code.</param>
        /// <param name="paymentMethodDescription">Payment method description i.e Cash/Card/iDeal/Paypal.</param>
        /// <param name="lastFourDigits">Last 4 digits of the card if applicable otherwise null.</param>
        /// <param name="orderLines">Order lines of the order.</param>
        /// <param name="totalAmount">Total amount for the order including tax.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="latitude">Customer Location Latitude.</param>
        /// <param name="longitude">Customer Location Longitude.</param>
        /// <param name="placed">Order placed time.</param>
        /// <param name="requestedFor">Order requested for.</param>
        /// <param name="driverId">Driver Id.</param>
        /// <param name="driverName">Driver Name.</param>
        /// <param name="driverImage">Driver Image.</param>
        /// <param name="estimatedMinutesForDelivery">estimatedMinutesForDelivery.</param>
        public CustomerDeliveryTrackingOrder(int? orderId = default(int?), string address = default(string), string deliveryNotes = default(string), string storePhoneNumber = default(string), string appIconUrl = default(string), string orderTrackingCode = default(string), string paymentMethodDescription = default(string), string lastFourDigits = default(string), List<CustomerDeliveryTrackingOrderLine> orderLines = default(List<CustomerDeliveryTrackingOrderLine>), double? totalAmount = default(double?), CurrencyEnum? currency = default(CurrencyEnum?), double? latitude = default(double?), double? longitude = default(double?), DateTime? placed = default(DateTime?), DateTime? requestedFor = default(DateTime?), int? driverId = default(int?), string driverName = default(string), string driverImage = default(string), int? estimatedMinutesForDelivery = default(int?))
        {
            this.OrderId = orderId;
            this.Address = address;
            this.DeliveryNotes = deliveryNotes;
            this.StorePhoneNumber = storePhoneNumber;
            this.AppIconUrl = appIconUrl;
            this.OrderTrackingCode = orderTrackingCode;
            this.PaymentMethodDescription = paymentMethodDescription;
            this.LastFourDigits = lastFourDigits;
            this.OrderLines = orderLines;
            this.TotalAmount = totalAmount;
            this.Currency = currency;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Placed = placed;
            this.RequestedFor = requestedFor;
            this.DriverId = driverId;
            this.DriverName = driverName;
            this.DriverImage = driverImage;
            this.EstimatedMinutesForDelivery = estimatedMinutesForDelivery;
        }
        
        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Pretified address string in country format
        /// </summary>
        /// <value>Pretified address string in country format</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Delivery Notes
        /// </summary>
        /// <value>Delivery Notes</value>
        [DataMember(Name="DeliveryNotes", EmitDefaultValue=false)]
        public string DeliveryNotes { get; set; }

        /// <summary>
        /// Phone number of the store
        /// </summary>
        /// <value>Phone number of the store</value>
        [DataMember(Name="StorePhoneNumber", EmitDefaultValue=false)]
        public string StorePhoneNumber { get; set; }

        /// <summary>
        /// App Icon of the store
        /// </summary>
        /// <value>App Icon of the store</value>
        [DataMember(Name="AppIconUrl", EmitDefaultValue=false)]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// Order Tracking Code
        /// </summary>
        /// <value>Order Tracking Code</value>
        [DataMember(Name="OrderTrackingCode", EmitDefaultValue=false)]
        public string OrderTrackingCode { get; set; }

        /// <summary>
        /// Payment method description i.e Cash/Card/iDeal/Paypal
        /// </summary>
        /// <value>Payment method description i.e Cash/Card/iDeal/Paypal</value>
        [DataMember(Name="PaymentMethodDescription", EmitDefaultValue=false)]
        public string PaymentMethodDescription { get; set; }

        /// <summary>
        /// Last 4 digits of the card if applicable otherwise null
        /// </summary>
        /// <value>Last 4 digits of the card if applicable otherwise null</value>
        [DataMember(Name="LastFourDigits", EmitDefaultValue=false)]
        public string LastFourDigits { get; set; }

        /// <summary>
        /// Order lines of the order
        /// </summary>
        /// <value>Order lines of the order</value>
        [DataMember(Name="OrderLines", EmitDefaultValue=false)]
        public List<CustomerDeliveryTrackingOrderLine> OrderLines { get; set; }

        /// <summary>
        /// Total amount for the order including tax
        /// </summary>
        /// <value>Total amount for the order including tax</value>
        [DataMember(Name="TotalAmount", EmitDefaultValue=false)]
        public double? TotalAmount { get; set; }


        /// <summary>
        /// Customer Location Latitude
        /// </summary>
        /// <value>Customer Location Latitude</value>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Customer Location Longitude
        /// </summary>
        /// <value>Customer Location Longitude</value>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Order placed time
        /// </summary>
        /// <value>Order placed time</value>
        [DataMember(Name="Placed", EmitDefaultValue=false)]
        public DateTime? Placed { get; set; }

        /// <summary>
        /// Order requested for
        /// </summary>
        /// <value>Order requested for</value>
        [DataMember(Name="RequestedFor", EmitDefaultValue=false)]
        public DateTime? RequestedFor { get; set; }

        /// <summary>
        /// Driver Id
        /// </summary>
        /// <value>Driver Id</value>
        [DataMember(Name="DriverId", EmitDefaultValue=false)]
        public int? DriverId { get; set; }

        /// <summary>
        /// Driver Name
        /// </summary>
        /// <value>Driver Name</value>
        [DataMember(Name="DriverName", EmitDefaultValue=false)]
        public string DriverName { get; set; }

        /// <summary>
        /// Driver Image
        /// </summary>
        /// <value>Driver Image</value>
        [DataMember(Name="DriverImage", EmitDefaultValue=false)]
        public string DriverImage { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedMinutesForDelivery
        /// </summary>
        [DataMember(Name="EstimatedMinutesForDelivery", EmitDefaultValue=false)]
        public int? EstimatedMinutesForDelivery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerDeliveryTrackingOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DeliveryNotes: ").Append(DeliveryNotes).Append("\n");
            sb.Append("  StorePhoneNumber: ").Append(StorePhoneNumber).Append("\n");
            sb.Append("  AppIconUrl: ").Append(AppIconUrl).Append("\n");
            sb.Append("  OrderTrackingCode: ").Append(OrderTrackingCode).Append("\n");
            sb.Append("  PaymentMethodDescription: ").Append(PaymentMethodDescription).Append("\n");
            sb.Append("  LastFourDigits: ").Append(LastFourDigits).Append("\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  DriverId: ").Append(DriverId).Append("\n");
            sb.Append("  DriverName: ").Append(DriverName).Append("\n");
            sb.Append("  DriverImage: ").Append(DriverImage).Append("\n");
            sb.Append("  EstimatedMinutesForDelivery: ").Append(EstimatedMinutesForDelivery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerDeliveryTrackingOrder);
        }

        /// <summary>
        /// Returns true if CustomerDeliveryTrackingOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerDeliveryTrackingOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDeliveryTrackingOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DeliveryNotes == input.DeliveryNotes ||
                    (this.DeliveryNotes != null &&
                    this.DeliveryNotes.Equals(input.DeliveryNotes))
                ) && 
                (
                    this.StorePhoneNumber == input.StorePhoneNumber ||
                    (this.StorePhoneNumber != null &&
                    this.StorePhoneNumber.Equals(input.StorePhoneNumber))
                ) && 
                (
                    this.AppIconUrl == input.AppIconUrl ||
                    (this.AppIconUrl != null &&
                    this.AppIconUrl.Equals(input.AppIconUrl))
                ) && 
                (
                    this.OrderTrackingCode == input.OrderTrackingCode ||
                    (this.OrderTrackingCode != null &&
                    this.OrderTrackingCode.Equals(input.OrderTrackingCode))
                ) && 
                (
                    this.PaymentMethodDescription == input.PaymentMethodDescription ||
                    (this.PaymentMethodDescription != null &&
                    this.PaymentMethodDescription.Equals(input.PaymentMethodDescription))
                ) && 
                (
                    this.LastFourDigits == input.LastFourDigits ||
                    (this.LastFourDigits != null &&
                    this.LastFourDigits.Equals(input.LastFourDigits))
                ) && 
                (
                    this.OrderLines == input.OrderLines ||
                    this.OrderLines != null &&
                    this.OrderLines.SequenceEqual(input.OrderLines)
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.RequestedFor == input.RequestedFor ||
                    (this.RequestedFor != null &&
                    this.RequestedFor.Equals(input.RequestedFor))
                ) && 
                (
                    this.DriverId == input.DriverId ||
                    (this.DriverId != null &&
                    this.DriverId.Equals(input.DriverId))
                ) && 
                (
                    this.DriverName == input.DriverName ||
                    (this.DriverName != null &&
                    this.DriverName.Equals(input.DriverName))
                ) && 
                (
                    this.DriverImage == input.DriverImage ||
                    (this.DriverImage != null &&
                    this.DriverImage.Equals(input.DriverImage))
                ) && 
                (
                    this.EstimatedMinutesForDelivery == input.EstimatedMinutesForDelivery ||
                    (this.EstimatedMinutesForDelivery != null &&
                    this.EstimatedMinutesForDelivery.Equals(input.EstimatedMinutesForDelivery))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DeliveryNotes != null)
                    hashCode = hashCode * 59 + this.DeliveryNotes.GetHashCode();
                if (this.StorePhoneNumber != null)
                    hashCode = hashCode * 59 + this.StorePhoneNumber.GetHashCode();
                if (this.AppIconUrl != null)
                    hashCode = hashCode * 59 + this.AppIconUrl.GetHashCode();
                if (this.OrderTrackingCode != null)
                    hashCode = hashCode * 59 + this.OrderTrackingCode.GetHashCode();
                if (this.PaymentMethodDescription != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDescription.GetHashCode();
                if (this.LastFourDigits != null)
                    hashCode = hashCode * 59 + this.LastFourDigits.GetHashCode();
                if (this.OrderLines != null)
                    hashCode = hashCode * 59 + this.OrderLines.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Placed != null)
                    hashCode = hashCode * 59 + this.Placed.GetHashCode();
                if (this.RequestedFor != null)
                    hashCode = hashCode * 59 + this.RequestedFor.GetHashCode();
                if (this.DriverId != null)
                    hashCode = hashCode * 59 + this.DriverId.GetHashCode();
                if (this.DriverName != null)
                    hashCode = hashCode * 59 + this.DriverName.GetHashCode();
                if (this.DriverImage != null)
                    hashCode = hashCode * 59 + this.DriverImage.GetHashCode();
                if (this.EstimatedMinutesForDelivery != null)
                    hashCode = hashCode * 59 + this.EstimatedMinutesForDelivery.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

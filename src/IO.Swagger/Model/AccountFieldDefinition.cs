/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents the format of a bank account field
    /// </summary>
    [DataContract]
    public partial class AccountFieldDefinition :  IEquatable<AccountFieldDefinition>, IValidatableObject
    {
        /// <summary>
        /// Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData
        /// </summary>
        /// <value>Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyEnum
        {
            
            /// <summary>
            /// Enum Iban for value: Iban
            /// </summary>
            [EnumMember(Value = "Iban")]
            Iban = 1,
            
            /// <summary>
            /// Enum AccountNumber for value: AccountNumber
            /// </summary>
            [EnumMember(Value = "AccountNumber")]
            AccountNumber = 2,
            
            /// <summary>
            /// Enum RoutingNumber for value: RoutingNumber
            /// </summary>
            [EnumMember(Value = "RoutingNumber")]
            RoutingNumber = 3,
            
            /// <summary>
            /// Enum BSB for value: BSB
            /// </summary>
            [EnumMember(Value = "BSB")]
            BSB = 4,
            
            /// <summary>
            /// Enum BranchCode for value: BranchCode
            /// </summary>
            [EnumMember(Value = "BranchCode")]
            BranchCode = 5,
            
            /// <summary>
            /// Enum BankCode for value: BankCode
            /// </summary>
            [EnumMember(Value = "BankCode")]
            BankCode = 6,
            
            /// <summary>
            /// Enum InstitutionNumber for value: InstitutionNumber
            /// </summary>
            [EnumMember(Value = "InstitutionNumber")]
            InstitutionNumber = 7,
            
            /// <summary>
            /// Enum TransitNumber for value: TransitNumber
            /// </summary>
            [EnumMember(Value = "TransitNumber")]
            TransitNumber = 8,
            
            /// <summary>
            /// Enum ClearingCode for value: ClearingCode
            /// </summary>
            [EnumMember(Value = "ClearingCode")]
            ClearingCode = 9,
            
            /// <summary>
            /// Enum IfscCode for value: IfscCode
            /// </summary>
            [EnumMember(Value = "IfscCode")]
            IfscCode = 10,
            
            /// <summary>
            /// Enum Clabe for value: Clabe
            /// </summary>
            [EnumMember(Value = "Clabe")]
            Clabe = 11,
            
            /// <summary>
            /// Enum SortCode for value: SortCode
            /// </summary>
            [EnumMember(Value = "SortCode")]
            SortCode = 12,
            
            /// <summary>
            /// Enum Swift for value: Swift
            /// </summary>
            [EnumMember(Value = "Swift")]
            Swift = 13
        }

        /// <summary>
        /// Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData
        /// </summary>
        /// <value>Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public KeyEnum? Key { get; set; }
        /// <summary>
        /// There are some fields that are of type known to the frontend (IBAN, Swift) - - for those frontend should use its own validation library, e.g. ibantools
        /// </summary>
        /// <value>There are some fields that are of type known to the frontend (IBAN, Swift) - - for those frontend should use its own validation library, e.g. ibantools</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Iban for value: Iban
            /// </summary>
            [EnumMember(Value = "Iban")]
            Iban = 2
        }

        /// <summary>
        /// There are some fields that are of type known to the frontend (IBAN, Swift) - - for those frontend should use its own validation library, e.g. ibantools
        /// </summary>
        /// <value>There are some fields that are of type known to the frontend (IBAN, Swift) - - for those frontend should use its own validation library, e.g. ibantools</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFieldDefinition" /> class.
        /// </summary>
        /// <param name="key">Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData.</param>
        /// <param name="displayName">Display name of the field.</param>
        /// <param name="type">There are some fields that are of type known to the frontend (IBAN, Swift) - - for those frontend should use its own validation library, e.g. ibantools.</param>
        /// <param name="minLength">Minimum length of the field.</param>
        /// <param name="maxLength">Maximum length of the field.</param>
        /// <param name="digitsOnly">Is the field digits (numeric) only.</param>
        /// <param name="regex">Regex for validating the field (if specified).</param>
        public AccountFieldDefinition(KeyEnum? key = default(KeyEnum?), string displayName = default(string), TypeEnum? type = default(TypeEnum?), int? minLength = default(int?), int? maxLength = default(int?), bool? digitsOnly = default(bool?), string regex = default(string))
        {
            this.Key = key;
            this.DisplayName = displayName;
            this.Type = type;
            this.MinLength = minLength;
            this.MaxLength = maxLength;
            this.DigitsOnly = digitsOnly;
            this.Regex = regex;
        }
        

        /// <summary>
        /// Display name of the field
        /// </summary>
        /// <value>Display name of the field</value>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }


        /// <summary>
        /// Minimum length of the field
        /// </summary>
        /// <value>Minimum length of the field</value>
        [DataMember(Name="MinLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Maximum length of the field
        /// </summary>
        /// <value>Maximum length of the field</value>
        [DataMember(Name="MaxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Is the field digits (numeric) only
        /// </summary>
        /// <value>Is the field digits (numeric) only</value>
        [DataMember(Name="DigitsOnly", EmitDefaultValue=false)]
        public bool? DigitsOnly { get; set; }

        /// <summary>
        /// Regex for validating the field (if specified)
        /// </summary>
        /// <value>Regex for validating the field (if specified)</value>
        [DataMember(Name="Regex", EmitDefaultValue=false)]
        public string Regex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountFieldDefinition {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  DigitsOnly: ").Append(DigitsOnly).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountFieldDefinition);
        }

        /// <summary>
        /// Returns true if AccountFieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountFieldDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.DigitsOnly == input.DigitsOnly ||
                    (this.DigitsOnly != null &&
                    this.DigitsOnly.Equals(input.DigitsOnly))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.DigitsOnly != null)
                    hashCode = hashCode * 59 + this.DigitsOnly.GetHashCode();
                if (this.Regex != null)
                    hashCode = hashCode * 59 + this.Regex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

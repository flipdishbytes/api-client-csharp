/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of Payment Terminal Transaction
    /// </summary>
    [DataContract]
    public partial class PaymentTerminalTransactionDetails :  IEquatable<PaymentTerminalTransactionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTerminalTransactionDetails" /> class.
        /// </summary>
        /// <param name="cardSchemeName">Card Type.</param>
        /// <param name="dateOfExpiry">Expirey Date on Card.</param>
        /// <param name="authCode">AuthCode.</param>
        /// <param name="transactionResult">State of Request, \&quot;PENDING\&quot; is not yet completed.</param>
        /// <param name="primaryAccountNumber">Masked PAN.</param>
        /// <param name="cardholderVerificationMethod">Type of Verification..</param>
        public PaymentTerminalTransactionDetails(string cardSchemeName = default(string), string dateOfExpiry = default(string), string authCode = default(string), string transactionResult = default(string), string primaryAccountNumber = default(string), string cardholderVerificationMethod = default(string))
        {
            this.CardSchemeName = cardSchemeName;
            this.DateOfExpiry = dateOfExpiry;
            this.AuthCode = authCode;
            this.TransactionResult = transactionResult;
            this.PrimaryAccountNumber = primaryAccountNumber;
            this.CardholderVerificationMethod = cardholderVerificationMethod;
        }
        
        /// <summary>
        /// Card Type
        /// </summary>
        /// <value>Card Type</value>
        [DataMember(Name="CardSchemeName", EmitDefaultValue=false)]
        public string CardSchemeName { get; set; }

        /// <summary>
        /// Expirey Date on Card
        /// </summary>
        /// <value>Expirey Date on Card</value>
        [DataMember(Name="DateOfExpiry", EmitDefaultValue=false)]
        public string DateOfExpiry { get; set; }

        /// <summary>
        /// AuthCode
        /// </summary>
        /// <value>AuthCode</value>
        [DataMember(Name="AuthCode", EmitDefaultValue=false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// State of Request, \&quot;PENDING\&quot; is not yet completed
        /// </summary>
        /// <value>State of Request, \&quot;PENDING\&quot; is not yet completed</value>
        [DataMember(Name="TransactionResult", EmitDefaultValue=false)]
        public string TransactionResult { get; set; }

        /// <summary>
        /// Masked PAN
        /// </summary>
        /// <value>Masked PAN</value>
        [DataMember(Name="PrimaryAccountNumber", EmitDefaultValue=false)]
        public string PrimaryAccountNumber { get; set; }

        /// <summary>
        /// Type of Verification.
        /// </summary>
        /// <value>Type of Verification.</value>
        [DataMember(Name="CardholderVerificationMethod", EmitDefaultValue=false)]
        public string CardholderVerificationMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentTerminalTransactionDetails {\n");
            sb.Append("  CardSchemeName: ").Append(CardSchemeName).Append("\n");
            sb.Append("  DateOfExpiry: ").Append(DateOfExpiry).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  TransactionResult: ").Append(TransactionResult).Append("\n");
            sb.Append("  PrimaryAccountNumber: ").Append(PrimaryAccountNumber).Append("\n");
            sb.Append("  CardholderVerificationMethod: ").Append(CardholderVerificationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentTerminalTransactionDetails);
        }

        /// <summary>
        /// Returns true if PaymentTerminalTransactionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentTerminalTransactionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentTerminalTransactionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardSchemeName == input.CardSchemeName ||
                    (this.CardSchemeName != null &&
                    this.CardSchemeName.Equals(input.CardSchemeName))
                ) && 
                (
                    this.DateOfExpiry == input.DateOfExpiry ||
                    (this.DateOfExpiry != null &&
                    this.DateOfExpiry.Equals(input.DateOfExpiry))
                ) && 
                (
                    this.AuthCode == input.AuthCode ||
                    (this.AuthCode != null &&
                    this.AuthCode.Equals(input.AuthCode))
                ) && 
                (
                    this.TransactionResult == input.TransactionResult ||
                    (this.TransactionResult != null &&
                    this.TransactionResult.Equals(input.TransactionResult))
                ) && 
                (
                    this.PrimaryAccountNumber == input.PrimaryAccountNumber ||
                    (this.PrimaryAccountNumber != null &&
                    this.PrimaryAccountNumber.Equals(input.PrimaryAccountNumber))
                ) && 
                (
                    this.CardholderVerificationMethod == input.CardholderVerificationMethod ||
                    (this.CardholderVerificationMethod != null &&
                    this.CardholderVerificationMethod.Equals(input.CardholderVerificationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardSchemeName != null)
                    hashCode = hashCode * 59 + this.CardSchemeName.GetHashCode();
                if (this.DateOfExpiry != null)
                    hashCode = hashCode * 59 + this.DateOfExpiry.GetHashCode();
                if (this.AuthCode != null)
                    hashCode = hashCode * 59 + this.AuthCode.GetHashCode();
                if (this.TransactionResult != null)
                    hashCode = hashCode * 59 + this.TransactionResult.GetHashCode();
                if (this.PrimaryAccountNumber != null)
                    hashCode = hashCode * 59 + this.PrimaryAccountNumber.GetHashCode();
                if (this.CardholderVerificationMethod != null)
                    hashCode = hashCode * 59 + this.CardholderVerificationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response with any menu elements that had issues being hidden/shown
    /// </summary>
    [DataContract]
    public partial class MenuElementListResponse :  IEquatable<MenuElementListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuElementListResponse" /> class.
        /// </summary>
        /// <param name="menuName">Menu Name.</param>
        /// <param name="menuElementName">Menu Item Name.</param>
        /// <param name="instanceCount">Menu Item Count.</param>
        /// <param name="isAvailable">Menu Item is hide or unhide.</param>
        /// <param name="items">List of Items.</param>
        public MenuElementListResponse(string menuName = default(string), string menuElementName = default(string), int? instanceCount = default(int?), bool? isAvailable = default(bool?), List<MenuElementListItemResponse> items = default(List<MenuElementListItemResponse>))
        {
            this.MenuName = menuName;
            this.MenuElementName = menuElementName;
            this.InstanceCount = instanceCount;
            this.IsAvailable = isAvailable;
            this.Items = items;
        }
        
        /// <summary>
        /// Menu Name
        /// </summary>
        /// <value>Menu Name</value>
        [DataMember(Name="MenuName", EmitDefaultValue=false)]
        public string MenuName { get; set; }

        /// <summary>
        /// Menu Item Name
        /// </summary>
        /// <value>Menu Item Name</value>
        [DataMember(Name="MenuElementName", EmitDefaultValue=false)]
        public string MenuElementName { get; set; }

        /// <summary>
        /// Menu Item Count
        /// </summary>
        /// <value>Menu Item Count</value>
        [DataMember(Name="InstanceCount", EmitDefaultValue=false)]
        public int? InstanceCount { get; set; }

        /// <summary>
        /// Menu Item is hide or unhide
        /// </summary>
        /// <value>Menu Item is hide or unhide</value>
        [DataMember(Name="IsAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// List of Items
        /// </summary>
        /// <value>List of Items</value>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<MenuElementListItemResponse> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuElementListResponse {\n");
            sb.Append("  MenuName: ").Append(MenuName).Append("\n");
            sb.Append("  MenuElementName: ").Append(MenuElementName).Append("\n");
            sb.Append("  InstanceCount: ").Append(InstanceCount).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MenuElementListResponse);
        }

        /// <summary>
        /// Returns true if MenuElementListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MenuElementListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuElementListResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MenuName == input.MenuName ||
                    (this.MenuName != null &&
                    this.MenuName.Equals(input.MenuName))
                ) && 
                (
                    this.MenuElementName == input.MenuElementName ||
                    (this.MenuElementName != null &&
                    this.MenuElementName.Equals(input.MenuElementName))
                ) && 
                (
                    this.InstanceCount == input.InstanceCount ||
                    (this.InstanceCount != null &&
                    this.InstanceCount.Equals(input.InstanceCount))
                ) && 
                (
                    this.IsAvailable == input.IsAvailable ||
                    (this.IsAvailable != null &&
                    this.IsAvailable.Equals(input.IsAvailable))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MenuName != null)
                    hashCode = hashCode * 59 + this.MenuName.GetHashCode();
                if (this.MenuElementName != null)
                    hashCode = hashCode * 59 + this.MenuElementName.GetHashCode();
                if (this.InstanceCount != null)
                    hashCode = hashCode * 59 + this.InstanceCount.GetHashCode();
                if (this.IsAvailable != null)
                    hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

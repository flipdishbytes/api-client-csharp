/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describes a supported country
    /// </summary>
    [DataContract]
    public partial class SupportedCountry :  IEquatable<SupportedCountry>, IValidatableObject
    {
        /// <summary>
        /// Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.
        /// </summary>
        /// <value>Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressLayoutEnum
        {
            
            /// <summary>
            /// Enum BuildingFirst for value: BuildingFirst
            /// </summary>
            [EnumMember(Value = "BuildingFirst")]
            BuildingFirst = 1,
            
            /// <summary>
            /// Enum AddressFirst for value: AddressFirst
            /// </summary>
            [EnumMember(Value = "AddressFirst")]
            AddressFirst = 2,
            
            /// <summary>
            /// Enum FullStreetAddressFirst for value: FullStreetAddressFirst
            /// </summary>
            [EnumMember(Value = "FullStreetAddressFirst")]
            FullStreetAddressFirst = 3
        }

        /// <summary>
        /// Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.
        /// </summary>
        /// <value>Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.</value>
        [DataMember(Name="AddressLayout", EmitDefaultValue=false)]
        public AddressLayoutEnum? AddressLayout { get; set; }
        /// <summary>
        /// Post code type
        /// </summary>
        /// <value>Post code type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PostCodeTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum PostCode for value: PostCode
            /// </summary>
            [EnumMember(Value = "PostCode")]
            PostCode = 2,
            
            /// <summary>
            /// Enum Zip for value: Zip
            /// </summary>
            [EnumMember(Value = "Zip")]
            Zip = 3
        }

        /// <summary>
        /// Post code type
        /// </summary>
        /// <value>Post code type</value>
        [DataMember(Name="PostCodeType", EmitDefaultValue=false)]
        public PostCodeTypeEnum? PostCodeType { get; set; }
        /// <summary>
        /// Supported region. This is not used.
        /// </summary>
        /// <value>Supported region. This is not used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportRegionEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum Spain for value: Spain
            /// </summary>
            [EnumMember(Value = "Spain")]
            Spain = 2,
            
            /// <summary>
            /// Enum Benelux for value: Benelux
            /// </summary>
            [EnumMember(Value = "Benelux")]
            Benelux = 3
        }

        /// <summary>
        /// Supported region. This is not used.
        /// </summary>
        /// <value>Supported region. This is not used.</value>
        [DataMember(Name="SupportRegion", EmitDefaultValue=false)]
        public SupportRegionEnum? SupportRegion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedCountry" /> class.
        /// </summary>
        /// <param name="countryCode">Country code.</param>
        /// <param name="name">Nice display name for a country.</param>
        /// <param name="phoneCode">Country internatinoal phone code prefix.</param>
        /// <param name="languageCode">Language code.</param>
        /// <param name="languageName">Language name.</param>
        /// <param name="otpNumber">The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer..</param>
        /// <param name="supportNumber">The store&#39;s support phone number, displayed to customers..</param>
        /// <param name="addressLayout">Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom..</param>
        /// <param name="postCodeType">Post code type.</param>
        /// <param name="supportRegion">Supported region. This is not used..</param>
        public SupportedCountry(string countryCode = default(string), string name = default(string), int? phoneCode = default(int?), string languageCode = default(string), string languageName = default(string), string otpNumber = default(string), string supportNumber = default(string), AddressLayoutEnum? addressLayout = default(AddressLayoutEnum?), PostCodeTypeEnum? postCodeType = default(PostCodeTypeEnum?), SupportRegionEnum? supportRegion = default(SupportRegionEnum?))
        {
            this.CountryCode = countryCode;
            this.Name = name;
            this.PhoneCode = phoneCode;
            this.LanguageCode = languageCode;
            this.LanguageName = languageName;
            this.OtpNumber = otpNumber;
            this.SupportNumber = supportNumber;
            this.AddressLayout = addressLayout;
            this.PostCodeType = postCodeType;
            this.SupportRegion = supportRegion;
        }
        
        /// <summary>
        /// Country code
        /// </summary>
        /// <value>Country code</value>
        [DataMember(Name="CountryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Nice display name for a country
        /// </summary>
        /// <value>Nice display name for a country</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Country internatinoal phone code prefix
        /// </summary>
        /// <value>Country internatinoal phone code prefix</value>
        [DataMember(Name="PhoneCode", EmitDefaultValue=false)]
        public int? PhoneCode { get; set; }

        /// <summary>
        /// Language code
        /// </summary>
        /// <value>Language code</value>
        [DataMember(Name="LanguageCode", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Language name
        /// </summary>
        /// <value>Language name</value>
        [DataMember(Name="LanguageName", EmitDefaultValue=false)]
        public string LanguageName { get; set; }

        /// <summary>
        /// The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer.
        /// </summary>
        /// <value>The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer.</value>
        [DataMember(Name="OtpNumber", EmitDefaultValue=false)]
        public string OtpNumber { get; set; }

        /// <summary>
        /// The store&#39;s support phone number, displayed to customers.
        /// </summary>
        /// <value>The store&#39;s support phone number, displayed to customers.</value>
        [DataMember(Name="SupportNumber", EmitDefaultValue=false)]
        public string SupportNumber { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupportedCountry {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneCode: ").Append(PhoneCode).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageName: ").Append(LanguageName).Append("\n");
            sb.Append("  OtpNumber: ").Append(OtpNumber).Append("\n");
            sb.Append("  SupportNumber: ").Append(SupportNumber).Append("\n");
            sb.Append("  AddressLayout: ").Append(AddressLayout).Append("\n");
            sb.Append("  PostCodeType: ").Append(PostCodeType).Append("\n");
            sb.Append("  SupportRegion: ").Append(SupportRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedCountry);
        }

        /// <summary>
        /// Returns true if SupportedCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedCountry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PhoneCode == input.PhoneCode ||
                    (this.PhoneCode != null &&
                    this.PhoneCode.Equals(input.PhoneCode))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.LanguageName == input.LanguageName ||
                    (this.LanguageName != null &&
                    this.LanguageName.Equals(input.LanguageName))
                ) && 
                (
                    this.OtpNumber == input.OtpNumber ||
                    (this.OtpNumber != null &&
                    this.OtpNumber.Equals(input.OtpNumber))
                ) && 
                (
                    this.SupportNumber == input.SupportNumber ||
                    (this.SupportNumber != null &&
                    this.SupportNumber.Equals(input.SupportNumber))
                ) && 
                (
                    this.AddressLayout == input.AddressLayout ||
                    (this.AddressLayout != null &&
                    this.AddressLayout.Equals(input.AddressLayout))
                ) && 
                (
                    this.PostCodeType == input.PostCodeType ||
                    (this.PostCodeType != null &&
                    this.PostCodeType.Equals(input.PostCodeType))
                ) && 
                (
                    this.SupportRegion == input.SupportRegion ||
                    (this.SupportRegion != null &&
                    this.SupportRegion.Equals(input.SupportRegion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PhoneCode != null)
                    hashCode = hashCode * 59 + this.PhoneCode.GetHashCode();
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                if (this.LanguageName != null)
                    hashCode = hashCode * 59 + this.LanguageName.GetHashCode();
                if (this.OtpNumber != null)
                    hashCode = hashCode * 59 + this.OtpNumber.GetHashCode();
                if (this.SupportNumber != null)
                    hashCode = hashCode * 59 + this.SupportNumber.GetHashCode();
                if (this.AddressLayout != null)
                    hashCode = hashCode * 59 + this.AddressLayout.GetHashCode();
                if (this.PostCodeType != null)
                    hashCode = hashCode * 59 + this.PostCodeType.GetHashCode();
                if (this.SupportRegion != null)
                    hashCode = hashCode * 59 + this.SupportRegion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

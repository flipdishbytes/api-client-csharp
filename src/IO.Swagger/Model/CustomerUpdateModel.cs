/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines a customer update model
    /// </summary>
    [DataContract]
    public partial class CustomerUpdateModel :  IEquatable<CustomerUpdateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerUpdateModel" /> class.
        /// </summary>
        /// <param name="cashOrdersEnabled">Customer can place cash orders.</param>
        /// <param name="cardOrdersEnabled">Customer can place card orders.</param>
        /// <param name="marketingEnabled">Customer can receive marketing.</param>
        public CustomerUpdateModel(bool? cashOrdersEnabled = default(bool?), bool? cardOrdersEnabled = default(bool?), bool? marketingEnabled = default(bool?))
        {
            this.CashOrdersEnabled = cashOrdersEnabled;
            this.CardOrdersEnabled = cardOrdersEnabled;
            this.MarketingEnabled = marketingEnabled;
        }
        
        /// <summary>
        /// Customer can place cash orders
        /// </summary>
        /// <value>Customer can place cash orders</value>
        [DataMember(Name="CashOrdersEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersEnabled { get; set; }

        /// <summary>
        /// Customer can place card orders
        /// </summary>
        /// <value>Customer can place card orders</value>
        [DataMember(Name="CardOrdersEnabled", EmitDefaultValue=false)]
        public bool? CardOrdersEnabled { get; set; }

        /// <summary>
        /// Customer can receive marketing
        /// </summary>
        /// <value>Customer can receive marketing</value>
        [DataMember(Name="MarketingEnabled", EmitDefaultValue=false)]
        public bool? MarketingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerUpdateModel {\n");
            sb.Append("  CashOrdersEnabled: ").Append(CashOrdersEnabled).Append("\n");
            sb.Append("  CardOrdersEnabled: ").Append(CardOrdersEnabled).Append("\n");
            sb.Append("  MarketingEnabled: ").Append(MarketingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerUpdateModel);
        }

        /// <summary>
        /// Returns true if CustomerUpdateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerUpdateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerUpdateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CashOrdersEnabled == input.CashOrdersEnabled ||
                    (this.CashOrdersEnabled != null &&
                    this.CashOrdersEnabled.Equals(input.CashOrdersEnabled))
                ) && 
                (
                    this.CardOrdersEnabled == input.CardOrdersEnabled ||
                    (this.CardOrdersEnabled != null &&
                    this.CardOrdersEnabled.Equals(input.CardOrdersEnabled))
                ) && 
                (
                    this.MarketingEnabled == input.MarketingEnabled ||
                    (this.MarketingEnabled != null &&
                    this.MarketingEnabled.Equals(input.MarketingEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashOrdersEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersEnabled.GetHashCode();
                if (this.CardOrdersEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrdersEnabled.GetHashCode();
                if (this.MarketingEnabled != null)
                    hashCode = hashCode * 59 + this.MarketingEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TelemetrySeriesProperty
    /// </summary>
    [DataContract]
    public partial class TelemetrySeriesProperty :  IEquatable<TelemetrySeriesProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetrySeriesProperty" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="intValues">intValues.</param>
        /// <param name="stringValues">stringValues.</param>
        /// <param name="doubleValues">doubleValues.</param>
        public TelemetrySeriesProperty(string name = default(string), string type = default(string), List<int?> intValues = default(List<int?>), List<string> stringValues = default(List<string>), List<double?> doubleValues = default(List<double?>))
        {
            this.Name = name;
            this.Type = type;
            this.IntValues = intValues;
            this.StringValues = stringValues;
            this.DoubleValues = doubleValues;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets IntValues
        /// </summary>
        [DataMember(Name="IntValues", EmitDefaultValue=false)]
        public List<int?> IntValues { get; set; }

        /// <summary>
        /// Gets or Sets StringValues
        /// </summary>
        [DataMember(Name="StringValues", EmitDefaultValue=false)]
        public List<string> StringValues { get; set; }

        /// <summary>
        /// Gets or Sets DoubleValues
        /// </summary>
        [DataMember(Name="DoubleValues", EmitDefaultValue=false)]
        public List<double?> DoubleValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetrySeriesProperty {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IntValues: ").Append(IntValues).Append("\n");
            sb.Append("  StringValues: ").Append(StringValues).Append("\n");
            sb.Append("  DoubleValues: ").Append(DoubleValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetrySeriesProperty);
        }

        /// <summary>
        /// Returns true if TelemetrySeriesProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetrySeriesProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetrySeriesProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IntValues == input.IntValues ||
                    this.IntValues != null &&
                    this.IntValues.SequenceEqual(input.IntValues)
                ) && 
                (
                    this.StringValues == input.StringValues ||
                    this.StringValues != null &&
                    this.StringValues.SequenceEqual(input.StringValues)
                ) && 
                (
                    this.DoubleValues == input.DoubleValues ||
                    this.DoubleValues != null &&
                    this.DoubleValues.SequenceEqual(input.DoubleValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IntValues != null)
                    hashCode = hashCode * 59 + this.IntValues.GetHashCode();
                if (this.StringValues != null)
                    hashCode = hashCode * 59 + this.StringValues.GetHashCode();
                if (this.DoubleValues != null)
                    hashCode = hashCode * 59 + this.DoubleValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

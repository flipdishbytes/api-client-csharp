/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Payout details for a single store
    /// </summary>
    [DataContract]
    public partial class PayoutStore :  IEquatable<PayoutStore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutStore" /> class.
        /// </summary>
        /// <param name="storeId">The id of the Store..</param>
        /// <param name="storeName">Name of the store.</param>
        /// <param name="amount">Amount of the payout for this Store.</param>
        /// <param name="revenue">Revenue details.</param>
        /// <param name="revenueAdjustments">Revenue Adjustments breakdown.</param>
        /// <param name="flipdishFees">Fees breakdown.</param>
        /// <param name="chargebacks">Chargebacks breakdown.</param>
        /// <param name="otherCharges">Breakdown of other charges.</param>
        /// <param name="balance">Period opening and closing balance.</param>
        public PayoutStore(int? storeId = default(int?), string storeName = default(string), double? amount = default(double?), RevenueDetail revenue = default(RevenueDetail), RevenueAdjustmentsDetails revenueAdjustments = default(RevenueAdjustmentsDetails), FlipdishFeesDetails flipdishFees = default(FlipdishFeesDetails), ChargebackDetails chargebacks = default(ChargebackDetails), OtherChargesDetails otherCharges = default(OtherChargesDetails), BalanceDetails balance = default(BalanceDetails))
        {
            this.StoreId = storeId;
            this.StoreName = storeName;
            this.Amount = amount;
            this.Revenue = revenue;
            this.RevenueAdjustments = revenueAdjustments;
            this.FlipdishFees = flipdishFees;
            this.Chargebacks = chargebacks;
            this.OtherCharges = otherCharges;
            this.Balance = balance;
        }
        
        /// <summary>
        /// The id of the Store.
        /// </summary>
        /// <value>The id of the Store.</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Name of the store
        /// </summary>
        /// <value>Name of the store</value>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Amount of the payout for this Store
        /// </summary>
        /// <value>Amount of the payout for this Store</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Revenue details (DEPRECATED: Use Revenue)
        /// </summary>
        /// <value>Revenue details (DEPRECATED: Use Revenue)</value>
        [DataMember(Name="OnlineRevenue", EmitDefaultValue=false)]
        public RevenueDetail OnlineRevenue { get; private set; }

        /// <summary>
        /// Revenue details
        /// </summary>
        /// <value>Revenue details</value>
        [DataMember(Name="Revenue", EmitDefaultValue=false)]
        public RevenueDetail Revenue { get; set; }

        /// <summary>
        /// Revenue Adjustments breakdown
        /// </summary>
        /// <value>Revenue Adjustments breakdown</value>
        [DataMember(Name="RevenueAdjustments", EmitDefaultValue=false)]
        public RevenueAdjustmentsDetails RevenueAdjustments { get; set; }

        /// <summary>
        /// Fees breakdown
        /// </summary>
        /// <value>Fees breakdown</value>
        [DataMember(Name="FlipdishFees", EmitDefaultValue=false)]
        public FlipdishFeesDetails FlipdishFees { get; set; }

        /// <summary>
        /// Chargebacks breakdown
        /// </summary>
        /// <value>Chargebacks breakdown</value>
        [DataMember(Name="Chargebacks", EmitDefaultValue=false)]
        public ChargebackDetails Chargebacks { get; set; }

        /// <summary>
        /// Breakdown of other charges
        /// </summary>
        /// <value>Breakdown of other charges</value>
        [DataMember(Name="OtherCharges", EmitDefaultValue=false)]
        public OtherChargesDetails OtherCharges { get; set; }

        /// <summary>
        /// Period opening and closing balance
        /// </summary>
        /// <value>Period opening and closing balance</value>
        [DataMember(Name="Balance", EmitDefaultValue=false)]
        public BalanceDetails Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutStore {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OnlineRevenue: ").Append(OnlineRevenue).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  RevenueAdjustments: ").Append(RevenueAdjustments).Append("\n");
            sb.Append("  FlipdishFees: ").Append(FlipdishFees).Append("\n");
            sb.Append("  Chargebacks: ").Append(Chargebacks).Append("\n");
            sb.Append("  OtherCharges: ").Append(OtherCharges).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutStore);
        }

        /// <summary>
        /// Returns true if PayoutStore instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutStore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutStore input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.OnlineRevenue == input.OnlineRevenue ||
                    (this.OnlineRevenue != null &&
                    this.OnlineRevenue.Equals(input.OnlineRevenue))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.RevenueAdjustments == input.RevenueAdjustments ||
                    (this.RevenueAdjustments != null &&
                    this.RevenueAdjustments.Equals(input.RevenueAdjustments))
                ) && 
                (
                    this.FlipdishFees == input.FlipdishFees ||
                    (this.FlipdishFees != null &&
                    this.FlipdishFees.Equals(input.FlipdishFees))
                ) && 
                (
                    this.Chargebacks == input.Chargebacks ||
                    (this.Chargebacks != null &&
                    this.Chargebacks.Equals(input.Chargebacks))
                ) && 
                (
                    this.OtherCharges == input.OtherCharges ||
                    (this.OtherCharges != null &&
                    this.OtherCharges.Equals(input.OtherCharges))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.OnlineRevenue != null)
                    hashCode = hashCode * 59 + this.OnlineRevenue.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.RevenueAdjustments != null)
                    hashCode = hashCode * 59 + this.RevenueAdjustments.GetHashCode();
                if (this.FlipdishFees != null)
                    hashCode = hashCode * 59 + this.FlipdishFees.GetHashCode();
                if (this.Chargebacks != null)
                    hashCode = hashCode * 59 + this.Chargebacks.GetHashCode();
                if (this.OtherCharges != null)
                    hashCode = hashCode * 59 + this.OtherCharges.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Stuart settings
    /// </summary>
    [DataContract]
    public partial class StuartSettings :  IEquatable<StuartSettings>, IValidatableObject
    {
        /// <summary>
        /// Package type
        /// </summary>
        /// <value>Package type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageTypeEnum
        {
            
            /// <summary>
            /// Enum Xsmall for value: Xsmall
            /// </summary>
            [EnumMember(Value = "Xsmall")]
            Xsmall = 1,
            
            /// <summary>
            /// Enum Small for value: Small
            /// </summary>
            [EnumMember(Value = "Small")]
            Small = 2,
            
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum Large for value: Large
            /// </summary>
            [EnumMember(Value = "Large")]
            Large = 4,
            
            /// <summary>
            /// Enum Xlarge for value: Xlarge
            /// </summary>
            [EnumMember(Value = "Xlarge")]
            Xlarge = 5
        }

        /// <summary>
        /// Package type
        /// </summary>
        /// <value>Package type</value>
        [DataMember(Name="PackageType", EmitDefaultValue=false)]
        public PackageTypeEnum? PackageType { get; set; }
        /// <summary>
        /// Transport type
        /// </summary>
        /// <value>Transport type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransportTypeEnum
        {
            
            /// <summary>
            /// Enum Bike for value: Bike
            /// </summary>
            [EnumMember(Value = "Bike")]
            Bike = 1,
            
            /// <summary>
            /// Enum Cargobike for value: Cargobike
            /// </summary>
            [EnumMember(Value = "Cargobike")]
            Cargobike = 2,
            
            /// <summary>
            /// Enum Cargobikexl for value: Cargobikexl
            /// </summary>
            [EnumMember(Value = "Cargobikexl")]
            Cargobikexl = 3,
            
            /// <summary>
            /// Enum Motorbike for value: Motorbike
            /// </summary>
            [EnumMember(Value = "Motorbike")]
            Motorbike = 4,
            
            /// <summary>
            /// Enum Motorbikexl for value: Motorbikexl
            /// </summary>
            [EnumMember(Value = "Motorbikexl")]
            Motorbikexl = 5,
            
            /// <summary>
            /// Enum Car for value: Car
            /// </summary>
            [EnumMember(Value = "Car")]
            Car = 6,
            
            /// <summary>
            /// Enum Van for value: Van
            /// </summary>
            [EnumMember(Value = "Van")]
            Van = 7
        }

        /// <summary>
        /// Transport type
        /// </summary>
        /// <value>Transport type</value>
        [DataMember(Name="TransportType", EmitDefaultValue=false)]
        public TransportTypeEnum? TransportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StuartSettings" /> class.
        /// </summary>
        /// <param name="clientId">Client Id.</param>
        /// <param name="clientSecret">Client Secret.</param>
        /// <param name="enabled">Enabled.</param>
        /// <param name="webhookUrlBasicAuthentication">Webhook url to settle in the Stuart portal.</param>
        /// <param name="overrideWebhookUrl">Override Flipdish Webhook Url.</param>
        /// <param name="minutesToPickupBeforeThanDeliveryTime">MinutesToPickupBeforeThanDeliveryTime.</param>
        /// <param name="packageType">Package type.</param>
        /// <param name="transportType">Transport type.</param>
        /// <param name="cancelOrderIfStuartCancelDelivery">Determines if Flipdish order should be cancel when Stuart cancels delivery.</param>
        /// <param name="transportPrices">transportPrices.</param>
        public StuartSettings(string clientId = default(string), string clientSecret = default(string), bool? enabled = default(bool?), string webhookUrlBasicAuthentication = default(string), bool? overrideWebhookUrl = default(bool?), int? minutesToPickupBeforeThanDeliveryTime = default(int?), PackageTypeEnum? packageType = default(PackageTypeEnum?), TransportTypeEnum? transportType = default(TransportTypeEnum?), bool? cancelOrderIfStuartCancelDelivery = default(bool?), StuartSettingsTransportPrices transportPrices = default(StuartSettingsTransportPrices))
        {
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.Enabled = enabled;
            this.WebhookUrlBasicAuthentication = webhookUrlBasicAuthentication;
            this.OverrideWebhookUrl = overrideWebhookUrl;
            this.MinutesToPickupBeforeThanDeliveryTime = minutesToPickupBeforeThanDeliveryTime;
            this.PackageType = packageType;
            this.TransportType = transportType;
            this.CancelOrderIfStuartCancelDelivery = cancelOrderIfStuartCancelDelivery;
            this.TransportPrices = transportPrices;
        }
        
        /// <summary>
        /// Client Id
        /// </summary>
        /// <value>Client Id</value>
        [DataMember(Name="ClientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Client Secret
        /// </summary>
        /// <value>Client Secret</value>
        [DataMember(Name="ClientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Enabled
        /// </summary>
        /// <value>Enabled</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Webhook url to settle in the Stuart portal
        /// </summary>
        /// <value>Webhook url to settle in the Stuart portal</value>
        [DataMember(Name="WebhookUrlBasicAuthentication", EmitDefaultValue=false)]
        public string WebhookUrlBasicAuthentication { get; set; }

        /// <summary>
        /// Override Flipdish Webhook Url
        /// </summary>
        /// <value>Override Flipdish Webhook Url</value>
        [DataMember(Name="OverrideWebhookUrl", EmitDefaultValue=false)]
        public bool? OverrideWebhookUrl { get; set; }

        /// <summary>
        /// MinutesToPickupBeforeThanDeliveryTime
        /// </summary>
        /// <value>MinutesToPickupBeforeThanDeliveryTime</value>
        [DataMember(Name="MinutesToPickupBeforeThanDeliveryTime", EmitDefaultValue=false)]
        public int? MinutesToPickupBeforeThanDeliveryTime { get; set; }



        /// <summary>
        /// Determines if Flipdish order should be cancel when Stuart cancels delivery
        /// </summary>
        /// <value>Determines if Flipdish order should be cancel when Stuart cancels delivery</value>
        [DataMember(Name="CancelOrderIfStuartCancelDelivery", EmitDefaultValue=false)]
        public bool? CancelOrderIfStuartCancelDelivery { get; set; }

        /// <summary>
        /// Gets or Sets TransportPrices
        /// </summary>
        [DataMember(Name="TransportPrices", EmitDefaultValue=false)]
        public StuartSettingsTransportPrices TransportPrices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StuartSettings {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  WebhookUrlBasicAuthentication: ").Append(WebhookUrlBasicAuthentication).Append("\n");
            sb.Append("  OverrideWebhookUrl: ").Append(OverrideWebhookUrl).Append("\n");
            sb.Append("  MinutesToPickupBeforeThanDeliveryTime: ").Append(MinutesToPickupBeforeThanDeliveryTime).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  CancelOrderIfStuartCancelDelivery: ").Append(CancelOrderIfStuartCancelDelivery).Append("\n");
            sb.Append("  TransportPrices: ").Append(TransportPrices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StuartSettings);
        }

        /// <summary>
        /// Returns true if StuartSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StuartSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StuartSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.WebhookUrlBasicAuthentication == input.WebhookUrlBasicAuthentication ||
                    (this.WebhookUrlBasicAuthentication != null &&
                    this.WebhookUrlBasicAuthentication.Equals(input.WebhookUrlBasicAuthentication))
                ) && 
                (
                    this.OverrideWebhookUrl == input.OverrideWebhookUrl ||
                    (this.OverrideWebhookUrl != null &&
                    this.OverrideWebhookUrl.Equals(input.OverrideWebhookUrl))
                ) && 
                (
                    this.MinutesToPickupBeforeThanDeliveryTime == input.MinutesToPickupBeforeThanDeliveryTime ||
                    (this.MinutesToPickupBeforeThanDeliveryTime != null &&
                    this.MinutesToPickupBeforeThanDeliveryTime.Equals(input.MinutesToPickupBeforeThanDeliveryTime))
                ) && 
                (
                    this.PackageType == input.PackageType ||
                    (this.PackageType != null &&
                    this.PackageType.Equals(input.PackageType))
                ) && 
                (
                    this.TransportType == input.TransportType ||
                    (this.TransportType != null &&
                    this.TransportType.Equals(input.TransportType))
                ) && 
                (
                    this.CancelOrderIfStuartCancelDelivery == input.CancelOrderIfStuartCancelDelivery ||
                    (this.CancelOrderIfStuartCancelDelivery != null &&
                    this.CancelOrderIfStuartCancelDelivery.Equals(input.CancelOrderIfStuartCancelDelivery))
                ) && 
                (
                    this.TransportPrices == input.TransportPrices ||
                    (this.TransportPrices != null &&
                    this.TransportPrices.Equals(input.TransportPrices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.WebhookUrlBasicAuthentication != null)
                    hashCode = hashCode * 59 + this.WebhookUrlBasicAuthentication.GetHashCode();
                if (this.OverrideWebhookUrl != null)
                    hashCode = hashCode * 59 + this.OverrideWebhookUrl.GetHashCode();
                if (this.MinutesToPickupBeforeThanDeliveryTime != null)
                    hashCode = hashCode * 59 + this.MinutesToPickupBeforeThanDeliveryTime.GetHashCode();
                if (this.PackageType != null)
                    hashCode = hashCode * 59 + this.PackageType.GetHashCode();
                if (this.TransportType != null)
                    hashCode = hashCode * 59 + this.TransportType.GetHashCode();
                if (this.CancelOrderIfStuartCancelDelivery != null)
                    hashCode = hashCode * 59 + this.CancelOrderIfStuartCancelDelivery.GetHashCode();
                if (this.TransportPrices != null)
                    hashCode = hashCode * 59 + this.TransportPrices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents one populated account field (its key and value)
    /// </summary>
    [DataContract]
    public partial class AccountFieldKeyValuePair :  IEquatable<AccountFieldKeyValuePair>, IValidatableObject
    {
        /// <summary>
        /// Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData
        /// </summary>
        /// <value>Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyEnum
        {
            
            /// <summary>
            /// Enum Iban for value: Iban
            /// </summary>
            [EnumMember(Value = "Iban")]
            Iban = 1,
            
            /// <summary>
            /// Enum AccountNumber for value: AccountNumber
            /// </summary>
            [EnumMember(Value = "AccountNumber")]
            AccountNumber = 2,
            
            /// <summary>
            /// Enum RoutingNumber for value: RoutingNumber
            /// </summary>
            [EnumMember(Value = "RoutingNumber")]
            RoutingNumber = 3,
            
            /// <summary>
            /// Enum BSB for value: BSB
            /// </summary>
            [EnumMember(Value = "BSB")]
            BSB = 4,
            
            /// <summary>
            /// Enum BranchCode for value: BranchCode
            /// </summary>
            [EnumMember(Value = "BranchCode")]
            BranchCode = 5,
            
            /// <summary>
            /// Enum BankCode for value: BankCode
            /// </summary>
            [EnumMember(Value = "BankCode")]
            BankCode = 6,
            
            /// <summary>
            /// Enum InstitutionNumber for value: InstitutionNumber
            /// </summary>
            [EnumMember(Value = "InstitutionNumber")]
            InstitutionNumber = 7,
            
            /// <summary>
            /// Enum TransitNumber for value: TransitNumber
            /// </summary>
            [EnumMember(Value = "TransitNumber")]
            TransitNumber = 8,
            
            /// <summary>
            /// Enum ClearingCode for value: ClearingCode
            /// </summary>
            [EnumMember(Value = "ClearingCode")]
            ClearingCode = 9,
            
            /// <summary>
            /// Enum IfscCode for value: IfscCode
            /// </summary>
            [EnumMember(Value = "IfscCode")]
            IfscCode = 10,
            
            /// <summary>
            /// Enum Clabe for value: Clabe
            /// </summary>
            [EnumMember(Value = "Clabe")]
            Clabe = 11,
            
            /// <summary>
            /// Enum SortCode for value: SortCode
            /// </summary>
            [EnumMember(Value = "SortCode")]
            SortCode = 12,
            
            /// <summary>
            /// Enum Swift for value: Swift
            /// </summary>
            [EnumMember(Value = "Swift")]
            Swift = 13
        }

        /// <summary>
        /// Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData
        /// </summary>
        /// <value>Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public KeyEnum? Key { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFieldKeyValuePair" /> class.
        /// </summary>
        /// <param name="key">Depending on the Key, the field&#39;s value will be stored in a different field in PayeeBankAccountData.</param>
        /// <param name="value">The value of the field.</param>
        public AccountFieldKeyValuePair(KeyEnum? key = default(KeyEnum?), string value = default(string))
        {
            this.Key = key;
            this.Value = value;
        }
        

        /// <summary>
        /// The value of the field
        /// </summary>
        /// <value>The value of the field</value>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountFieldKeyValuePair {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountFieldKeyValuePair);
        }

        /// <summary>
        /// Returns true if AccountFieldKeyValuePair instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountFieldKeyValuePair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountFieldKeyValuePair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

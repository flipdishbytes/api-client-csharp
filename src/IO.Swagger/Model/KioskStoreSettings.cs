/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of a kiosks store settings
    /// </summary>
    [DataContract]
    public partial class KioskStoreSettings :  IEquatable<KioskStoreSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KioskStoreSettings" /> class.
        /// </summary>
        /// <param name="storeKioskSettings">Kiosks store settings.</param>
        /// <param name="timezone">Kiosks timezone.</param>
        /// <param name="currentUtcTime">Servers current Utc time.</param>
        public KioskStoreSettings(List<StoreKioskSetting> storeKioskSettings = default(List<StoreKioskSetting>), string timezone = default(string), DateTime? currentUtcTime = default(DateTime?))
        {
            this.StoreKioskSettings = storeKioskSettings;
            this.Timezone = timezone;
            this.CurrentUtcTime = currentUtcTime;
        }
        
        /// <summary>
        /// Kiosks store settings
        /// </summary>
        /// <value>Kiosks store settings</value>
        [DataMember(Name="StoreKioskSettings", EmitDefaultValue=false)]
        public List<StoreKioskSetting> StoreKioskSettings { get; set; }

        /// <summary>
        /// Kiosks timezone
        /// </summary>
        /// <value>Kiosks timezone</value>
        [DataMember(Name="Timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Servers current Utc time
        /// </summary>
        /// <value>Servers current Utc time</value>
        [DataMember(Name="CurrentUtcTime", EmitDefaultValue=false)]
        public DateTime? CurrentUtcTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KioskStoreSettings {\n");
            sb.Append("  StoreKioskSettings: ").Append(StoreKioskSettings).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  CurrentUtcTime: ").Append(CurrentUtcTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KioskStoreSettings);
        }

        /// <summary>
        /// Returns true if KioskStoreSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of KioskStoreSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KioskStoreSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreKioskSettings == input.StoreKioskSettings ||
                    this.StoreKioskSettings != null &&
                    this.StoreKioskSettings.SequenceEqual(input.StoreKioskSettings)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.CurrentUtcTime == input.CurrentUtcTime ||
                    (this.CurrentUtcTime != null &&
                    this.CurrentUtcTime.Equals(input.CurrentUtcTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreKioskSettings != null)
                    hashCode = hashCode * 59 + this.StoreKioskSettings.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.CurrentUtcTime != null)
                    hashCode = hashCode * 59 + this.CurrentUtcTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

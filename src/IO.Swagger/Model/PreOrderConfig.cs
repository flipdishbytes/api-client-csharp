/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Pre Order Config
    /// </summary>
    [DataContract]
    public partial class PreOrderConfig :  IEquatable<PreOrderConfig>, IValidatableObject
    {
        /// <summary>
        /// Type of time displayed.
        /// </summary>
        /// <value>Type of time displayed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreOrderTimeDisplayTypeEnum
        {
            
            /// <summary>
            /// Enum SingleTime for value: SingleTime
            /// </summary>
            [EnumMember(Value = "SingleTime")]
            SingleTime = 1,
            
            /// <summary>
            /// Enum StartAndEndTime for value: StartAndEndTime
            /// </summary>
            [EnumMember(Value = "StartAndEndTime")]
            StartAndEndTime = 2,
            
            /// <summary>
            /// Enum DayOnly for value: DayOnly
            /// </summary>
            [EnumMember(Value = "DayOnly")]
            DayOnly = 3
        }

        /// <summary>
        /// Type of time displayed.
        /// </summary>
        /// <value>Type of time displayed.</value>
        [DataMember(Name="PreOrderTimeDisplayType", EmitDefaultValue=false)]
        public PreOrderTimeDisplayTypeEnum? PreOrderTimeDisplayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOrderConfig" /> class.
        /// </summary>
        /// <param name="leadTimeMinutes">Lead Time in Minutes.</param>
        /// <param name="intervalMinutes">Interval in minutes.</param>
        /// <param name="maxOrderAheadDays">Max Days to order ahead.</param>
        /// <param name="includeAsap">Show ASAP as option.</param>
        /// <param name="includeMoreGranularInitialTime">Granual Init&#39; Time.</param>
        /// <param name="cutOffTimePreviousDayBasic">Cut off time previous day.</param>
        /// <param name="cutOffTimeCurrentDayBasic">Cut off time current day.</param>
        /// <param name="preOrderTimeDisplayType">Type of time displayed..</param>
        /// <param name="alwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not..</param>
        /// <param name="requireExplicitSelectAlways">Force customer to select collection time..</param>
        public PreOrderConfig(int? leadTimeMinutes = default(int?), int? intervalMinutes = default(int?), int? maxOrderAheadDays = default(int?), bool? includeAsap = default(bool?), bool? includeMoreGranularInitialTime = default(bool?), string cutOffTimePreviousDayBasic = default(string), string cutOffTimeCurrentDayBasic = default(string), PreOrderTimeDisplayTypeEnum? preOrderTimeDisplayType = default(PreOrderTimeDisplayTypeEnum?), bool? alwaysAppearOpen = default(bool?), bool? requireExplicitSelectAlways = default(bool?))
        {
            this.LeadTimeMinutes = leadTimeMinutes;
            this.IntervalMinutes = intervalMinutes;
            this.MaxOrderAheadDays = maxOrderAheadDays;
            this.IncludeAsap = includeAsap;
            this.IncludeMoreGranularInitialTime = includeMoreGranularInitialTime;
            this.CutOffTimePreviousDayBasic = cutOffTimePreviousDayBasic;
            this.CutOffTimeCurrentDayBasic = cutOffTimeCurrentDayBasic;
            this.PreOrderTimeDisplayType = preOrderTimeDisplayType;
            this.AlwaysAppearOpen = alwaysAppearOpen;
            this.RequireExplicitSelectAlways = requireExplicitSelectAlways;
        }
        
        /// <summary>
        /// Lead Time in Minutes
        /// </summary>
        /// <value>Lead Time in Minutes</value>
        [DataMember(Name="LeadTimeMinutes", EmitDefaultValue=false)]
        public int? LeadTimeMinutes { get; set; }

        /// <summary>
        /// Interval in minutes
        /// </summary>
        /// <value>Interval in minutes</value>
        [DataMember(Name="IntervalMinutes", EmitDefaultValue=false)]
        public int? IntervalMinutes { get; set; }

        /// <summary>
        /// Max Days to order ahead
        /// </summary>
        /// <value>Max Days to order ahead</value>
        [DataMember(Name="MaxOrderAheadDays", EmitDefaultValue=false)]
        public int? MaxOrderAheadDays { get; set; }

        /// <summary>
        /// Show ASAP as option
        /// </summary>
        /// <value>Show ASAP as option</value>
        [DataMember(Name="IncludeAsap", EmitDefaultValue=false)]
        public bool? IncludeAsap { get; set; }

        /// <summary>
        /// Granual Init&#39; Time
        /// </summary>
        /// <value>Granual Init&#39; Time</value>
        [DataMember(Name="IncludeMoreGranularInitialTime", EmitDefaultValue=false)]
        public bool? IncludeMoreGranularInitialTime { get; set; }

        /// <summary>
        /// Cut off time previous day
        /// </summary>
        /// <value>Cut off time previous day</value>
        [DataMember(Name="CutOffTimePreviousDayBasic", EmitDefaultValue=false)]
        public string CutOffTimePreviousDayBasic { get; set; }

        /// <summary>
        /// Cut off time current day
        /// </summary>
        /// <value>Cut off time current day</value>
        [DataMember(Name="CutOffTimeCurrentDayBasic", EmitDefaultValue=false)]
        public string CutOffTimeCurrentDayBasic { get; set; }


        /// <summary>
        /// Specifies whether a customer can pre-order outside the store opening hours or not.
        /// </summary>
        /// <value>Specifies whether a customer can pre-order outside the store opening hours or not.</value>
        [DataMember(Name="AlwaysAppearOpen", EmitDefaultValue=false)]
        public bool? AlwaysAppearOpen { get; set; }

        /// <summary>
        /// Force customer to select collection time.
        /// </summary>
        /// <value>Force customer to select collection time.</value>
        [DataMember(Name="RequireExplicitSelectAlways", EmitDefaultValue=false)]
        public bool? RequireExplicitSelectAlways { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreOrderConfig {\n");
            sb.Append("  LeadTimeMinutes: ").Append(LeadTimeMinutes).Append("\n");
            sb.Append("  IntervalMinutes: ").Append(IntervalMinutes).Append("\n");
            sb.Append("  MaxOrderAheadDays: ").Append(MaxOrderAheadDays).Append("\n");
            sb.Append("  IncludeAsap: ").Append(IncludeAsap).Append("\n");
            sb.Append("  IncludeMoreGranularInitialTime: ").Append(IncludeMoreGranularInitialTime).Append("\n");
            sb.Append("  CutOffTimePreviousDayBasic: ").Append(CutOffTimePreviousDayBasic).Append("\n");
            sb.Append("  CutOffTimeCurrentDayBasic: ").Append(CutOffTimeCurrentDayBasic).Append("\n");
            sb.Append("  PreOrderTimeDisplayType: ").Append(PreOrderTimeDisplayType).Append("\n");
            sb.Append("  AlwaysAppearOpen: ").Append(AlwaysAppearOpen).Append("\n");
            sb.Append("  RequireExplicitSelectAlways: ").Append(RequireExplicitSelectAlways).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreOrderConfig);
        }

        /// <summary>
        /// Returns true if PreOrderConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of PreOrderConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreOrderConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeadTimeMinutes == input.LeadTimeMinutes ||
                    (this.LeadTimeMinutes != null &&
                    this.LeadTimeMinutes.Equals(input.LeadTimeMinutes))
                ) && 
                (
                    this.IntervalMinutes == input.IntervalMinutes ||
                    (this.IntervalMinutes != null &&
                    this.IntervalMinutes.Equals(input.IntervalMinutes))
                ) && 
                (
                    this.MaxOrderAheadDays == input.MaxOrderAheadDays ||
                    (this.MaxOrderAheadDays != null &&
                    this.MaxOrderAheadDays.Equals(input.MaxOrderAheadDays))
                ) && 
                (
                    this.IncludeAsap == input.IncludeAsap ||
                    (this.IncludeAsap != null &&
                    this.IncludeAsap.Equals(input.IncludeAsap))
                ) && 
                (
                    this.IncludeMoreGranularInitialTime == input.IncludeMoreGranularInitialTime ||
                    (this.IncludeMoreGranularInitialTime != null &&
                    this.IncludeMoreGranularInitialTime.Equals(input.IncludeMoreGranularInitialTime))
                ) && 
                (
                    this.CutOffTimePreviousDayBasic == input.CutOffTimePreviousDayBasic ||
                    (this.CutOffTimePreviousDayBasic != null &&
                    this.CutOffTimePreviousDayBasic.Equals(input.CutOffTimePreviousDayBasic))
                ) && 
                (
                    this.CutOffTimeCurrentDayBasic == input.CutOffTimeCurrentDayBasic ||
                    (this.CutOffTimeCurrentDayBasic != null &&
                    this.CutOffTimeCurrentDayBasic.Equals(input.CutOffTimeCurrentDayBasic))
                ) && 
                (
                    this.PreOrderTimeDisplayType == input.PreOrderTimeDisplayType ||
                    (this.PreOrderTimeDisplayType != null &&
                    this.PreOrderTimeDisplayType.Equals(input.PreOrderTimeDisplayType))
                ) && 
                (
                    this.AlwaysAppearOpen == input.AlwaysAppearOpen ||
                    (this.AlwaysAppearOpen != null &&
                    this.AlwaysAppearOpen.Equals(input.AlwaysAppearOpen))
                ) && 
                (
                    this.RequireExplicitSelectAlways == input.RequireExplicitSelectAlways ||
                    (this.RequireExplicitSelectAlways != null &&
                    this.RequireExplicitSelectAlways.Equals(input.RequireExplicitSelectAlways))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeadTimeMinutes != null)
                    hashCode = hashCode * 59 + this.LeadTimeMinutes.GetHashCode();
                if (this.IntervalMinutes != null)
                    hashCode = hashCode * 59 + this.IntervalMinutes.GetHashCode();
                if (this.MaxOrderAheadDays != null)
                    hashCode = hashCode * 59 + this.MaxOrderAheadDays.GetHashCode();
                if (this.IncludeAsap != null)
                    hashCode = hashCode * 59 + this.IncludeAsap.GetHashCode();
                if (this.IncludeMoreGranularInitialTime != null)
                    hashCode = hashCode * 59 + this.IncludeMoreGranularInitialTime.GetHashCode();
                if (this.CutOffTimePreviousDayBasic != null)
                    hashCode = hashCode * 59 + this.CutOffTimePreviousDayBasic.GetHashCode();
                if (this.CutOffTimeCurrentDayBasic != null)
                    hashCode = hashCode * 59 + this.CutOffTimeCurrentDayBasic.GetHashCode();
                if (this.PreOrderTimeDisplayType != null)
                    hashCode = hashCode * 59 + this.PreOrderTimeDisplayType.GetHashCode();
                if (this.AlwaysAppearOpen != null)
                    hashCode = hashCode * 59 + this.AlwaysAppearOpen.GetHashCode();
                if (this.RequireExplicitSelectAlways != null)
                    hashCode = hashCode * 59 + this.RequireExplicitSelectAlways.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Sales information
    /// </summary>
    [DataContract]
    public partial class RevenueDetail :  IEquatable<RevenueDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RevenueDetail" /> class.
        /// </summary>
        /// <param name="onlineSalesAmount">Online sales amount.</param>
        /// <param name="onlineSalesTax">Online sales tax.</param>
        /// <param name="onlineSalesIncludingTax">Online sales amount plus online sales tax.</param>
        /// <param name="onlineSalesFeesBaseAmount">Online sales base amount to calculate fees.</param>
        /// <param name="cashSalesAmount">Cash sales amount.</param>
        /// <param name="cashSalesTax">Cash sales tax.</param>
        /// <param name="cashSalesIncludingTax">Cash sales amount plus online sales tax.</param>
        /// <param name="cashSalesFeesBaseAmount">Online sales base amount to calculate fees.</param>
        /// <param name="totalSalesIncludingTax">Total Sales (online and cash) including tax.</param>
        /// <param name="onlineSalesDeliveryCharges">Delivery charges on online sales.</param>
        /// <param name="onlineSalesTips">Tips for online sales.</param>
        /// <param name="totalOnlineRevenue">Online sales plus online delivery charges and tips.</param>
        public RevenueDetail(double? onlineSalesAmount = default(double?), double? onlineSalesTax = default(double?), double? onlineSalesIncludingTax = default(double?), double? onlineSalesFeesBaseAmount = default(double?), double? cashSalesAmount = default(double?), double? cashSalesTax = default(double?), double? cashSalesIncludingTax = default(double?), double? cashSalesFeesBaseAmount = default(double?), double? totalSalesIncludingTax = default(double?), double? onlineSalesDeliveryCharges = default(double?), double? onlineSalesTips = default(double?), double? totalOnlineRevenue = default(double?))
        {
            this.OnlineSalesAmount = onlineSalesAmount;
            this.OnlineSalesTax = onlineSalesTax;
            this.OnlineSalesIncludingTax = onlineSalesIncludingTax;
            this.OnlineSalesFeesBaseAmount = onlineSalesFeesBaseAmount;
            this.CashSalesAmount = cashSalesAmount;
            this.CashSalesTax = cashSalesTax;
            this.CashSalesIncludingTax = cashSalesIncludingTax;
            this.CashSalesFeesBaseAmount = cashSalesFeesBaseAmount;
            this.TotalSalesIncludingTax = totalSalesIncludingTax;
            this.OnlineSalesDeliveryCharges = onlineSalesDeliveryCharges;
            this.OnlineSalesTips = onlineSalesTips;
            this.TotalOnlineRevenue = totalOnlineRevenue;
        }
        
        /// <summary>
        /// Online sales amount
        /// </summary>
        /// <value>Online sales amount</value>
        [DataMember(Name="OnlineSalesAmount", EmitDefaultValue=false)]
        public double? OnlineSalesAmount { get; set; }

        /// <summary>
        /// Online sales tax
        /// </summary>
        /// <value>Online sales tax</value>
        [DataMember(Name="OnlineSalesTax", EmitDefaultValue=false)]
        public double? OnlineSalesTax { get; set; }

        /// <summary>
        /// Online sales amount plus online sales tax
        /// </summary>
        /// <value>Online sales amount plus online sales tax</value>
        [DataMember(Name="OnlineSalesIncludingTax", EmitDefaultValue=false)]
        public double? OnlineSalesIncludingTax { get; set; }

        /// <summary>
        /// Online sales base amount to calculate fees
        /// </summary>
        /// <value>Online sales base amount to calculate fees</value>
        [DataMember(Name="OnlineSalesFeesBaseAmount", EmitDefaultValue=false)]
        public double? OnlineSalesFeesBaseAmount { get; set; }

        /// <summary>
        /// Cash sales amount
        /// </summary>
        /// <value>Cash sales amount</value>
        [DataMember(Name="CashSalesAmount", EmitDefaultValue=false)]
        public double? CashSalesAmount { get; set; }

        /// <summary>
        /// Cash sales tax
        /// </summary>
        /// <value>Cash sales tax</value>
        [DataMember(Name="CashSalesTax", EmitDefaultValue=false)]
        public double? CashSalesTax { get; set; }

        /// <summary>
        /// Cash sales amount plus online sales tax
        /// </summary>
        /// <value>Cash sales amount plus online sales tax</value>
        [DataMember(Name="CashSalesIncludingTax", EmitDefaultValue=false)]
        public double? CashSalesIncludingTax { get; set; }

        /// <summary>
        /// Online sales base amount to calculate fees
        /// </summary>
        /// <value>Online sales base amount to calculate fees</value>
        [DataMember(Name="CashSalesFeesBaseAmount", EmitDefaultValue=false)]
        public double? CashSalesFeesBaseAmount { get; set; }

        /// <summary>
        /// Total Sales (online and cash) including tax
        /// </summary>
        /// <value>Total Sales (online and cash) including tax</value>
        [DataMember(Name="TotalSalesIncludingTax", EmitDefaultValue=false)]
        public double? TotalSalesIncludingTax { get; set; }

        /// <summary>
        /// Delivery charges on online sales
        /// </summary>
        /// <value>Delivery charges on online sales</value>
        [DataMember(Name="OnlineSalesDeliveryCharges", EmitDefaultValue=false)]
        public double? OnlineSalesDeliveryCharges { get; set; }

        /// <summary>
        /// Tips for online sales
        /// </summary>
        /// <value>Tips for online sales</value>
        [DataMember(Name="OnlineSalesTips", EmitDefaultValue=false)]
        public double? OnlineSalesTips { get; set; }

        /// <summary>
        /// Online sales plus online delivery charges and tips
        /// </summary>
        /// <value>Online sales plus online delivery charges and tips</value>
        [DataMember(Name="TotalOnlineRevenue", EmitDefaultValue=false)]
        public double? TotalOnlineRevenue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RevenueDetail {\n");
            sb.Append("  OnlineSalesAmount: ").Append(OnlineSalesAmount).Append("\n");
            sb.Append("  OnlineSalesTax: ").Append(OnlineSalesTax).Append("\n");
            sb.Append("  OnlineSalesIncludingTax: ").Append(OnlineSalesIncludingTax).Append("\n");
            sb.Append("  OnlineSalesFeesBaseAmount: ").Append(OnlineSalesFeesBaseAmount).Append("\n");
            sb.Append("  CashSalesAmount: ").Append(CashSalesAmount).Append("\n");
            sb.Append("  CashSalesTax: ").Append(CashSalesTax).Append("\n");
            sb.Append("  CashSalesIncludingTax: ").Append(CashSalesIncludingTax).Append("\n");
            sb.Append("  CashSalesFeesBaseAmount: ").Append(CashSalesFeesBaseAmount).Append("\n");
            sb.Append("  TotalSalesIncludingTax: ").Append(TotalSalesIncludingTax).Append("\n");
            sb.Append("  OnlineSalesDeliveryCharges: ").Append(OnlineSalesDeliveryCharges).Append("\n");
            sb.Append("  OnlineSalesTips: ").Append(OnlineSalesTips).Append("\n");
            sb.Append("  TotalOnlineRevenue: ").Append(TotalOnlineRevenue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RevenueDetail);
        }

        /// <summary>
        /// Returns true if RevenueDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RevenueDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RevenueDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OnlineSalesAmount == input.OnlineSalesAmount ||
                    (this.OnlineSalesAmount != null &&
                    this.OnlineSalesAmount.Equals(input.OnlineSalesAmount))
                ) && 
                (
                    this.OnlineSalesTax == input.OnlineSalesTax ||
                    (this.OnlineSalesTax != null &&
                    this.OnlineSalesTax.Equals(input.OnlineSalesTax))
                ) && 
                (
                    this.OnlineSalesIncludingTax == input.OnlineSalesIncludingTax ||
                    (this.OnlineSalesIncludingTax != null &&
                    this.OnlineSalesIncludingTax.Equals(input.OnlineSalesIncludingTax))
                ) && 
                (
                    this.OnlineSalesFeesBaseAmount == input.OnlineSalesFeesBaseAmount ||
                    (this.OnlineSalesFeesBaseAmount != null &&
                    this.OnlineSalesFeesBaseAmount.Equals(input.OnlineSalesFeesBaseAmount))
                ) && 
                (
                    this.CashSalesAmount == input.CashSalesAmount ||
                    (this.CashSalesAmount != null &&
                    this.CashSalesAmount.Equals(input.CashSalesAmount))
                ) && 
                (
                    this.CashSalesTax == input.CashSalesTax ||
                    (this.CashSalesTax != null &&
                    this.CashSalesTax.Equals(input.CashSalesTax))
                ) && 
                (
                    this.CashSalesIncludingTax == input.CashSalesIncludingTax ||
                    (this.CashSalesIncludingTax != null &&
                    this.CashSalesIncludingTax.Equals(input.CashSalesIncludingTax))
                ) && 
                (
                    this.CashSalesFeesBaseAmount == input.CashSalesFeesBaseAmount ||
                    (this.CashSalesFeesBaseAmount != null &&
                    this.CashSalesFeesBaseAmount.Equals(input.CashSalesFeesBaseAmount))
                ) && 
                (
                    this.TotalSalesIncludingTax == input.TotalSalesIncludingTax ||
                    (this.TotalSalesIncludingTax != null &&
                    this.TotalSalesIncludingTax.Equals(input.TotalSalesIncludingTax))
                ) && 
                (
                    this.OnlineSalesDeliveryCharges == input.OnlineSalesDeliveryCharges ||
                    (this.OnlineSalesDeliveryCharges != null &&
                    this.OnlineSalesDeliveryCharges.Equals(input.OnlineSalesDeliveryCharges))
                ) && 
                (
                    this.OnlineSalesTips == input.OnlineSalesTips ||
                    (this.OnlineSalesTips != null &&
                    this.OnlineSalesTips.Equals(input.OnlineSalesTips))
                ) && 
                (
                    this.TotalOnlineRevenue == input.TotalOnlineRevenue ||
                    (this.TotalOnlineRevenue != null &&
                    this.TotalOnlineRevenue.Equals(input.TotalOnlineRevenue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OnlineSalesAmount != null)
                    hashCode = hashCode * 59 + this.OnlineSalesAmount.GetHashCode();
                if (this.OnlineSalesTax != null)
                    hashCode = hashCode * 59 + this.OnlineSalesTax.GetHashCode();
                if (this.OnlineSalesIncludingTax != null)
                    hashCode = hashCode * 59 + this.OnlineSalesIncludingTax.GetHashCode();
                if (this.OnlineSalesFeesBaseAmount != null)
                    hashCode = hashCode * 59 + this.OnlineSalesFeesBaseAmount.GetHashCode();
                if (this.CashSalesAmount != null)
                    hashCode = hashCode * 59 + this.CashSalesAmount.GetHashCode();
                if (this.CashSalesTax != null)
                    hashCode = hashCode * 59 + this.CashSalesTax.GetHashCode();
                if (this.CashSalesIncludingTax != null)
                    hashCode = hashCode * 59 + this.CashSalesIncludingTax.GetHashCode();
                if (this.CashSalesFeesBaseAmount != null)
                    hashCode = hashCode * 59 + this.CashSalesFeesBaseAmount.GetHashCode();
                if (this.TotalSalesIncludingTax != null)
                    hashCode = hashCode * 59 + this.TotalSalesIncludingTax.GetHashCode();
                if (this.OnlineSalesDeliveryCharges != null)
                    hashCode = hashCode * 59 + this.OnlineSalesDeliveryCharges.GetHashCode();
                if (this.OnlineSalesTips != null)
                    hashCode = hashCode * 59 + this.OnlineSalesTips.GetHashCode();
                if (this.TotalOnlineRevenue != null)
                    hashCode = hashCode * 59 + this.TotalOnlineRevenue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

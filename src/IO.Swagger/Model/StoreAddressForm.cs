/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Address form payload.
    /// </summary>
    [DataContract]
    public partial class StoreAddressForm :  IEquatable<StoreAddressForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreAddressForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreAddressForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreAddressForm" /> class.
        /// </summary>
        /// <param name="addressFields">The dynamic fields generated by the address form. (required).</param>
        /// <param name="countryCode">ISO 2 letters code for the country, should be the same as the form that generates the fields. (required).</param>
        public StoreAddressForm(Dictionary<string, Object> addressFields = default(Dictionary<string, Object>), string countryCode = default(string))
        {
            // to ensure "addressFields" is required (not null)
            if (addressFields == null)
            {
                throw new InvalidDataException("addressFields is a required property for StoreAddressForm and cannot be null");
            }
            else
            {
                this.AddressFields = addressFields;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for StoreAddressForm and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
        }
        
        /// <summary>
        /// The dynamic fields generated by the address form.
        /// </summary>
        /// <value>The dynamic fields generated by the address form.</value>
        [DataMember(Name="AddressFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> AddressFields { get; set; }

        /// <summary>
        /// ISO 2 letters code for the country, should be the same as the form that generates the fields.
        /// </summary>
        /// <value>ISO 2 letters code for the country, should be the same as the form that generates the fields.</value>
        [DataMember(Name="CountryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreAddressForm {\n");
            sb.Append("  AddressFields: ").Append(AddressFields).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreAddressForm);
        }

        /// <summary>
        /// Returns true if StoreAddressForm instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreAddressForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreAddressForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressFields == input.AddressFields ||
                    this.AddressFields != null &&
                    this.AddressFields.SequenceEqual(input.AddressFields)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressFields != null)
                    hashCode = hashCode * 59 + this.AddressFields.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

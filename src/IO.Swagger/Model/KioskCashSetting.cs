/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model containing result of Kiosk cash setting
    /// </summary>
    [DataContract]
    public partial class KioskCashSetting :  IEquatable<KioskCashSetting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KioskCashSetting" /> class.
        /// </summary>
        /// <param name="cashPaymentEnabled">Indicated whether cash payment is enabled or not eg: true.</param>
        public KioskCashSetting(bool? cashPaymentEnabled = default(bool?))
        {
            this.CashPaymentEnabled = cashPaymentEnabled;
        }
        
        /// <summary>
        /// Indicated whether cash payment is enabled or not eg: true
        /// </summary>
        /// <value>Indicated whether cash payment is enabled or not eg: true</value>
        [DataMember(Name="CashPaymentEnabled", EmitDefaultValue=false)]
        public bool? CashPaymentEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KioskCashSetting {\n");
            sb.Append("  CashPaymentEnabled: ").Append(CashPaymentEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KioskCashSetting);
        }

        /// <summary>
        /// Returns true if KioskCashSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of KioskCashSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KioskCashSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CashPaymentEnabled == input.CashPaymentEnabled ||
                    (this.CashPaymentEnabled != null &&
                    this.CashPaymentEnabled.Equals(input.CashPaymentEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashPaymentEnabled != null)
                    hashCode = hashCode * 59 + this.CashPaymentEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

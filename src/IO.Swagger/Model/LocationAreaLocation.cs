/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Representation of a Location i.e: (Table, Hotel Room, Car Park, etc )
    /// </summary>
    [DataContract]
    public partial class LocationAreaLocation :  IEquatable<LocationAreaLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAreaLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationAreaLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAreaLocation" /> class.
        /// </summary>
        /// <param name="locationId">Id of the Location (required).</param>
        /// <param name="locationName">Name of the Location (required).</param>
        /// <param name="displayOrder">The order that the Location should be displayed on the screen (required).</param>
        /// <param name="externalLocationId">Id of the Location on an external system.</param>
        /// <param name="isDeleted">Shows if the Location is deleted or not.</param>
        public LocationAreaLocation(int? locationId = default(int?), string locationName = default(string), int? displayOrder = default(int?), string externalLocationId = default(string), bool? isDeleted = default(bool?))
        {
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for LocationAreaLocation and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "locationName" is required (not null)
            if (locationName == null)
            {
                throw new InvalidDataException("locationName is a required property for LocationAreaLocation and cannot be null");
            }
            else
            {
                this.LocationName = locationName;
            }
            // to ensure "displayOrder" is required (not null)
            if (displayOrder == null)
            {
                throw new InvalidDataException("displayOrder is a required property for LocationAreaLocation and cannot be null");
            }
            else
            {
                this.DisplayOrder = displayOrder;
            }
            this.ExternalLocationId = externalLocationId;
            this.IsDeleted = isDeleted;
        }
        
        /// <summary>
        /// Id of the Location
        /// </summary>
        /// <value>Id of the Location</value>
        [DataMember(Name="LocationId", EmitDefaultValue=false)]
        public int? LocationId { get; set; }

        /// <summary>
        /// Name of the Location
        /// </summary>
        /// <value>Name of the Location</value>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// The order that the Location should be displayed on the screen
        /// </summary>
        /// <value>The order that the Location should be displayed on the screen</value>
        [DataMember(Name="DisplayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Id of the Location on an external system
        /// </summary>
        /// <value>Id of the Location on an external system</value>
        [DataMember(Name="ExternalLocationId", EmitDefaultValue=false)]
        public string ExternalLocationId { get; set; }

        /// <summary>
        /// Shows if the Location is deleted or not
        /// </summary>
        /// <value>Shows if the Location is deleted or not</value>
        [DataMember(Name="IsDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationAreaLocation {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  ExternalLocationId: ").Append(ExternalLocationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationAreaLocation);
        }

        /// <summary>
        /// Returns true if LocationAreaLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationAreaLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationAreaLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.ExternalLocationId == input.ExternalLocationId ||
                    (this.ExternalLocationId != null &&
                    this.ExternalLocationId.Equals(input.ExternalLocationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.ExternalLocationId != null)
                    hashCode = hashCode * 59 + this.ExternalLocationId.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

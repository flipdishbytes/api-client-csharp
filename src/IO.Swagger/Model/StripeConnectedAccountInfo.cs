/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents information about a Stripe connected account associated with a bank account
    /// </summary>
    [DataContract]
    public partial class StripeConnectedAccountInfo :  IEquatable<StripeConnectedAccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Stripe connected account status
        /// </summary>
        /// <value>Stripe connected account status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 1,
            
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 2,
            
            /// <summary>
            /// Enum AdditionalInformationRequired for value: AdditionalInformationRequired
            /// </summary>
            [EnumMember(Value = "AdditionalInformationRequired")]
            AdditionalInformationRequired = 3,
            
            /// <summary>
            /// Enum PendingVerification for value: PendingVerification
            /// </summary>
            [EnumMember(Value = "PendingVerification")]
            PendingVerification = 4,
            
            /// <summary>
            /// Enum Unverified for value: Unverified
            /// </summary>
            [EnumMember(Value = "Unverified")]
            Unverified = 5,
            
            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 6,
            
            /// <summary>
            /// Enum UpdateExternalAccount for value: UpdateExternalAccount
            /// </summary>
            [EnumMember(Value = "UpdateExternalAccount")]
            UpdateExternalAccount = 7
        }

        /// <summary>
        /// Stripe connected account status
        /// </summary>
        /// <value>Stripe connected account status</value>
        [DataMember(Name="AccountStatus", EmitDefaultValue=false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// Current status of the Card Payment capability of the account
        /// </summary>
        /// <value>Current status of the Card Payment capability of the account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardPaymentStatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 1,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 3,
            
            /// <summary>
            /// Enum Unrequested for value: Unrequested
            /// </summary>
            [EnumMember(Value = "Unrequested")]
            Unrequested = 4
        }

        /// <summary>
        /// Current status of the Card Payment capability of the account
        /// </summary>
        /// <value>Current status of the Card Payment capability of the account</value>
        [DataMember(Name="CardPaymentStatus", EmitDefaultValue=false)]
        public CardPaymentStatusEnum? CardPaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StripeConnectedAccountInfo" /> class.
        /// </summary>
        /// <param name="accountStatus">Stripe connected account status.</param>
        /// <param name="stripeId">Stripe connected account id.</param>
        /// <param name="cardPaymentStatus">Current status of the Card Payment capability of the account.</param>
        public StripeConnectedAccountInfo(AccountStatusEnum? accountStatus = default(AccountStatusEnum?), string stripeId = default(string), CardPaymentStatusEnum? cardPaymentStatus = default(CardPaymentStatusEnum?))
        {
            this.AccountStatus = accountStatus;
            this.StripeId = stripeId;
            this.CardPaymentStatus = cardPaymentStatus;
        }
        

        /// <summary>
        /// Stripe connected account id
        /// </summary>
        /// <value>Stripe connected account id</value>
        [DataMember(Name="StripeId", EmitDefaultValue=false)]
        public string StripeId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StripeConnectedAccountInfo {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  StripeId: ").Append(StripeId).Append("\n");
            sb.Append("  CardPaymentStatus: ").Append(CardPaymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StripeConnectedAccountInfo);
        }

        /// <summary>
        /// Returns true if StripeConnectedAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StripeConnectedAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StripeConnectedAccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.StripeId == input.StripeId ||
                    (this.StripeId != null &&
                    this.StripeId.Equals(input.StripeId))
                ) && 
                (
                    this.CardPaymentStatus == input.CardPaymentStatus ||
                    (this.CardPaymentStatus != null &&
                    this.CardPaymentStatus.Equals(input.CardPaymentStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.StripeId != null)
                    hashCode = hashCode * 59 + this.StripeId.GetHashCode();
                if (this.CardPaymentStatus != null)
                    hashCode = hashCode * 59 + this.CardPaymentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

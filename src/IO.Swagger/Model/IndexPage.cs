/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Index Page
    /// </summary>
    [DataContract]
    public partial class IndexPage :  IEquatable<IndexPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexPage" /> class.
        /// </summary>
        /// <param name="testimonials">Testimonials.</param>
        /// <param name="images">Images.</param>
        /// <param name="aboutSectionEnabled">About section enabled.</param>
        /// <param name="aboutSectionTitle">About section title.</param>
        /// <param name="aboutSectionSubtitle">About section sub-title.</param>
        /// <param name="aboutSectionLeftTitle">About section title left.</param>
        /// <param name="aboutSectionLeftBody">About section text left.</param>
        /// <param name="aboutSectionRightTitle">About section title right.</param>
        /// <param name="aboutSectionRightBody">About section text right.</param>
        /// <param name="openingHoursEnabled">Opening hours section Enabled.</param>
        /// <param name="menuPreviewEnabled">Menu Preview section Enabled.</param>
        /// <param name="galleryEnabled">Gallery section enabled.</param>
        /// <param name="testimonialsEnabled">Testimonials section Enabled.</param>
        /// <param name="contactFormEnabled">Contact Form section Enabled.</param>
        /// <param name="contactFormEmail">Contact Form Email.</param>
        /// <param name="mapEnabled">Map section Enabled.</param>
        public IndexPage(List<WebsiteTestimonial> testimonials = default(List<WebsiteTestimonial>), List<WebsiteImage> images = default(List<WebsiteImage>), bool? aboutSectionEnabled = default(bool?), string aboutSectionTitle = default(string), string aboutSectionSubtitle = default(string), string aboutSectionLeftTitle = default(string), string aboutSectionLeftBody = default(string), string aboutSectionRightTitle = default(string), string aboutSectionRightBody = default(string), bool? openingHoursEnabled = default(bool?), bool? menuPreviewEnabled = default(bool?), bool? galleryEnabled = default(bool?), bool? testimonialsEnabled = default(bool?), bool? contactFormEnabled = default(bool?), string contactFormEmail = default(string), bool? mapEnabled = default(bool?))
        {
            this.Testimonials = testimonials;
            this.Images = images;
            this.AboutSectionEnabled = aboutSectionEnabled;
            this.AboutSectionTitle = aboutSectionTitle;
            this.AboutSectionSubtitle = aboutSectionSubtitle;
            this.AboutSectionLeftTitle = aboutSectionLeftTitle;
            this.AboutSectionLeftBody = aboutSectionLeftBody;
            this.AboutSectionRightTitle = aboutSectionRightTitle;
            this.AboutSectionRightBody = aboutSectionRightBody;
            this.OpeningHoursEnabled = openingHoursEnabled;
            this.MenuPreviewEnabled = menuPreviewEnabled;
            this.GalleryEnabled = galleryEnabled;
            this.TestimonialsEnabled = testimonialsEnabled;
            this.ContactFormEnabled = contactFormEnabled;
            this.ContactFormEmail = contactFormEmail;
            this.MapEnabled = mapEnabled;
        }
        
        /// <summary>
        /// Testimonials
        /// </summary>
        /// <value>Testimonials</value>
        [DataMember(Name="Testimonials", EmitDefaultValue=false)]
        public List<WebsiteTestimonial> Testimonials { get; set; }

        /// <summary>
        /// Images
        /// </summary>
        /// <value>Images</value>
        [DataMember(Name="Images", EmitDefaultValue=false)]
        public List<WebsiteImage> Images { get; set; }

        /// <summary>
        /// About section enabled
        /// </summary>
        /// <value>About section enabled</value>
        [DataMember(Name="AboutSectionEnabled", EmitDefaultValue=false)]
        public bool? AboutSectionEnabled { get; set; }

        /// <summary>
        /// About section title
        /// </summary>
        /// <value>About section title</value>
        [DataMember(Name="AboutSectionTitle", EmitDefaultValue=false)]
        public string AboutSectionTitle { get; set; }

        /// <summary>
        /// About section sub-title
        /// </summary>
        /// <value>About section sub-title</value>
        [DataMember(Name="AboutSectionSubtitle", EmitDefaultValue=false)]
        public string AboutSectionSubtitle { get; set; }

        /// <summary>
        /// About section title left
        /// </summary>
        /// <value>About section title left</value>
        [DataMember(Name="AboutSectionLeftTitle", EmitDefaultValue=false)]
        public string AboutSectionLeftTitle { get; set; }

        /// <summary>
        /// About section text left
        /// </summary>
        /// <value>About section text left</value>
        [DataMember(Name="AboutSectionLeftBody", EmitDefaultValue=false)]
        public string AboutSectionLeftBody { get; set; }

        /// <summary>
        /// About section title right
        /// </summary>
        /// <value>About section title right</value>
        [DataMember(Name="AboutSectionRightTitle", EmitDefaultValue=false)]
        public string AboutSectionRightTitle { get; set; }

        /// <summary>
        /// About section text right
        /// </summary>
        /// <value>About section text right</value>
        [DataMember(Name="AboutSectionRightBody", EmitDefaultValue=false)]
        public string AboutSectionRightBody { get; set; }

        /// <summary>
        /// Opening hours section Enabled
        /// </summary>
        /// <value>Opening hours section Enabled</value>
        [DataMember(Name="OpeningHoursEnabled", EmitDefaultValue=false)]
        public bool? OpeningHoursEnabled { get; set; }

        /// <summary>
        /// Menu Preview section Enabled
        /// </summary>
        /// <value>Menu Preview section Enabled</value>
        [DataMember(Name="MenuPreviewEnabled", EmitDefaultValue=false)]
        public bool? MenuPreviewEnabled { get; set; }

        /// <summary>
        /// Gallery section enabled
        /// </summary>
        /// <value>Gallery section enabled</value>
        [DataMember(Name="GalleryEnabled", EmitDefaultValue=false)]
        public bool? GalleryEnabled { get; set; }

        /// <summary>
        /// Testimonials section Enabled
        /// </summary>
        /// <value>Testimonials section Enabled</value>
        [DataMember(Name="TestimonialsEnabled", EmitDefaultValue=false)]
        public bool? TestimonialsEnabled { get; set; }

        /// <summary>
        /// Contact Form section Enabled
        /// </summary>
        /// <value>Contact Form section Enabled</value>
        [DataMember(Name="ContactFormEnabled", EmitDefaultValue=false)]
        public bool? ContactFormEnabled { get; set; }

        /// <summary>
        /// Contact Form Email
        /// </summary>
        /// <value>Contact Form Email</value>
        [DataMember(Name="ContactFormEmail", EmitDefaultValue=false)]
        public string ContactFormEmail { get; set; }

        /// <summary>
        /// Map section Enabled
        /// </summary>
        /// <value>Map section Enabled</value>
        [DataMember(Name="MapEnabled", EmitDefaultValue=false)]
        public bool? MapEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndexPage {\n");
            sb.Append("  Testimonials: ").Append(Testimonials).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  AboutSectionEnabled: ").Append(AboutSectionEnabled).Append("\n");
            sb.Append("  AboutSectionTitle: ").Append(AboutSectionTitle).Append("\n");
            sb.Append("  AboutSectionSubtitle: ").Append(AboutSectionSubtitle).Append("\n");
            sb.Append("  AboutSectionLeftTitle: ").Append(AboutSectionLeftTitle).Append("\n");
            sb.Append("  AboutSectionLeftBody: ").Append(AboutSectionLeftBody).Append("\n");
            sb.Append("  AboutSectionRightTitle: ").Append(AboutSectionRightTitle).Append("\n");
            sb.Append("  AboutSectionRightBody: ").Append(AboutSectionRightBody).Append("\n");
            sb.Append("  OpeningHoursEnabled: ").Append(OpeningHoursEnabled).Append("\n");
            sb.Append("  MenuPreviewEnabled: ").Append(MenuPreviewEnabled).Append("\n");
            sb.Append("  GalleryEnabled: ").Append(GalleryEnabled).Append("\n");
            sb.Append("  TestimonialsEnabled: ").Append(TestimonialsEnabled).Append("\n");
            sb.Append("  ContactFormEnabled: ").Append(ContactFormEnabled).Append("\n");
            sb.Append("  ContactFormEmail: ").Append(ContactFormEmail).Append("\n");
            sb.Append("  MapEnabled: ").Append(MapEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexPage);
        }

        /// <summary>
        /// Returns true if IndexPage instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Testimonials == input.Testimonials ||
                    this.Testimonials != null &&
                    this.Testimonials.SequenceEqual(input.Testimonials)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.AboutSectionEnabled == input.AboutSectionEnabled ||
                    (this.AboutSectionEnabled != null &&
                    this.AboutSectionEnabled.Equals(input.AboutSectionEnabled))
                ) && 
                (
                    this.AboutSectionTitle == input.AboutSectionTitle ||
                    (this.AboutSectionTitle != null &&
                    this.AboutSectionTitle.Equals(input.AboutSectionTitle))
                ) && 
                (
                    this.AboutSectionSubtitle == input.AboutSectionSubtitle ||
                    (this.AboutSectionSubtitle != null &&
                    this.AboutSectionSubtitle.Equals(input.AboutSectionSubtitle))
                ) && 
                (
                    this.AboutSectionLeftTitle == input.AboutSectionLeftTitle ||
                    (this.AboutSectionLeftTitle != null &&
                    this.AboutSectionLeftTitle.Equals(input.AboutSectionLeftTitle))
                ) && 
                (
                    this.AboutSectionLeftBody == input.AboutSectionLeftBody ||
                    (this.AboutSectionLeftBody != null &&
                    this.AboutSectionLeftBody.Equals(input.AboutSectionLeftBody))
                ) && 
                (
                    this.AboutSectionRightTitle == input.AboutSectionRightTitle ||
                    (this.AboutSectionRightTitle != null &&
                    this.AboutSectionRightTitle.Equals(input.AboutSectionRightTitle))
                ) && 
                (
                    this.AboutSectionRightBody == input.AboutSectionRightBody ||
                    (this.AboutSectionRightBody != null &&
                    this.AboutSectionRightBody.Equals(input.AboutSectionRightBody))
                ) && 
                (
                    this.OpeningHoursEnabled == input.OpeningHoursEnabled ||
                    (this.OpeningHoursEnabled != null &&
                    this.OpeningHoursEnabled.Equals(input.OpeningHoursEnabled))
                ) && 
                (
                    this.MenuPreviewEnabled == input.MenuPreviewEnabled ||
                    (this.MenuPreviewEnabled != null &&
                    this.MenuPreviewEnabled.Equals(input.MenuPreviewEnabled))
                ) && 
                (
                    this.GalleryEnabled == input.GalleryEnabled ||
                    (this.GalleryEnabled != null &&
                    this.GalleryEnabled.Equals(input.GalleryEnabled))
                ) && 
                (
                    this.TestimonialsEnabled == input.TestimonialsEnabled ||
                    (this.TestimonialsEnabled != null &&
                    this.TestimonialsEnabled.Equals(input.TestimonialsEnabled))
                ) && 
                (
                    this.ContactFormEnabled == input.ContactFormEnabled ||
                    (this.ContactFormEnabled != null &&
                    this.ContactFormEnabled.Equals(input.ContactFormEnabled))
                ) && 
                (
                    this.ContactFormEmail == input.ContactFormEmail ||
                    (this.ContactFormEmail != null &&
                    this.ContactFormEmail.Equals(input.ContactFormEmail))
                ) && 
                (
                    this.MapEnabled == input.MapEnabled ||
                    (this.MapEnabled != null &&
                    this.MapEnabled.Equals(input.MapEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Testimonials != null)
                    hashCode = hashCode * 59 + this.Testimonials.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.AboutSectionEnabled != null)
                    hashCode = hashCode * 59 + this.AboutSectionEnabled.GetHashCode();
                if (this.AboutSectionTitle != null)
                    hashCode = hashCode * 59 + this.AboutSectionTitle.GetHashCode();
                if (this.AboutSectionSubtitle != null)
                    hashCode = hashCode * 59 + this.AboutSectionSubtitle.GetHashCode();
                if (this.AboutSectionLeftTitle != null)
                    hashCode = hashCode * 59 + this.AboutSectionLeftTitle.GetHashCode();
                if (this.AboutSectionLeftBody != null)
                    hashCode = hashCode * 59 + this.AboutSectionLeftBody.GetHashCode();
                if (this.AboutSectionRightTitle != null)
                    hashCode = hashCode * 59 + this.AboutSectionRightTitle.GetHashCode();
                if (this.AboutSectionRightBody != null)
                    hashCode = hashCode * 59 + this.AboutSectionRightBody.GetHashCode();
                if (this.OpeningHoursEnabled != null)
                    hashCode = hashCode * 59 + this.OpeningHoursEnabled.GetHashCode();
                if (this.MenuPreviewEnabled != null)
                    hashCode = hashCode * 59 + this.MenuPreviewEnabled.GetHashCode();
                if (this.GalleryEnabled != null)
                    hashCode = hashCode * 59 + this.GalleryEnabled.GetHashCode();
                if (this.TestimonialsEnabled != null)
                    hashCode = hashCode * 59 + this.TestimonialsEnabled.GetHashCode();
                if (this.ContactFormEnabled != null)
                    hashCode = hashCode * 59 + this.ContactFormEnabled.GetHashCode();
                if (this.ContactFormEmail != null)
                    hashCode = hashCode * 59 + this.ContactFormEmail.GetHashCode();
                if (this.MapEnabled != null)
                    hashCode = hashCode * 59 + this.MapEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

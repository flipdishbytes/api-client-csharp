/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Store end of day report
    /// </summary>
    [DataContract]
    public partial class StoreEndOfDayReport :  IEquatable<StoreEndOfDayReport>, IValidatableObject
    {
        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 113
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreEndOfDayReport" /> class.
        /// </summary>
        /// <param name="storeId">Store Id.</param>
        /// <param name="storeName">Store name.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="orderCount">Order Count.</param>
        /// <param name="orderValue">Order Value.</param>
        /// <param name="orderValueExcludingDeliveryFees">Order Value Excluding Delivery Fees.</param>
        /// <param name="collectionOrderCount">Collection Order Count.</param>
        /// <param name="collectionCashOrderCount">Collection Cash Order Count.</param>
        /// <param name="collectionPaidOnlineOrderCount">Collection Paid Online Order Count.</param>
        /// <param name="collectionOrderValue">Collection Order Value.</param>
        /// <param name="collectionCashOrderValue">Collection Cash Order Value.</param>
        /// <param name="collectionPaidOnlineOrderValue">Collection Paid Online Order Value.</param>
        /// <param name="deliveryOrderCount">Delivery Order Count.</param>
        /// <param name="deliveryCashOrderCount">Delivery Cash Order Count.</param>
        /// <param name="deliveryPaidOnlineOrderCount">Delivery Paid Online Order Count.</param>
        /// <param name="deliveryOrderValue">Delivery Order Value.</param>
        /// <param name="deliveryCashOrderValue">Delivery Cash Order Value.</param>
        /// <param name="deliveryPaidOnlineOrderValue">Delivery Paid Online Order Value.</param>
        /// <param name="paidOnlineOrderCount">Paid Online Order Count.</param>
        /// <param name="cashOrderCount">Cash Order Count.</param>
        /// <param name="paidOnlineOrderValue">Paid Online Order Value.</param>
        /// <param name="cashOrderValue">Cash Order Value.</param>
        /// <param name="paidOnlineOrderValueExcludingDeliveryFees">Paid Online Order Value Excluding Delivery Fees.</param>
        /// <param name="cashOrderValueExcludingDeliveryFees">Cash Order Value Excluding Delivery Fees.</param>
        /// <param name="startTime">Start Time.</param>
        /// <param name="endTime">End Time.</param>
        public StoreEndOfDayReport(int? storeId = default(int?), string storeName = default(string), CurrencyEnum? currency = default(CurrencyEnum?), int? orderCount = default(int?), double? orderValue = default(double?), double? orderValueExcludingDeliveryFees = default(double?), int? collectionOrderCount = default(int?), int? collectionCashOrderCount = default(int?), int? collectionPaidOnlineOrderCount = default(int?), double? collectionOrderValue = default(double?), double? collectionCashOrderValue = default(double?), double? collectionPaidOnlineOrderValue = default(double?), int? deliveryOrderCount = default(int?), int? deliveryCashOrderCount = default(int?), int? deliveryPaidOnlineOrderCount = default(int?), double? deliveryOrderValue = default(double?), double? deliveryCashOrderValue = default(double?), double? deliveryPaidOnlineOrderValue = default(double?), int? paidOnlineOrderCount = default(int?), int? cashOrderCount = default(int?), double? paidOnlineOrderValue = default(double?), double? cashOrderValue = default(double?), double? paidOnlineOrderValueExcludingDeliveryFees = default(double?), double? cashOrderValueExcludingDeliveryFees = default(double?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?))
        {
            this.StoreId = storeId;
            this.StoreName = storeName;
            this.Currency = currency;
            this.OrderCount = orderCount;
            this.OrderValue = orderValue;
            this.OrderValueExcludingDeliveryFees = orderValueExcludingDeliveryFees;
            this.CollectionOrderCount = collectionOrderCount;
            this.CollectionCashOrderCount = collectionCashOrderCount;
            this.CollectionPaidOnlineOrderCount = collectionPaidOnlineOrderCount;
            this.CollectionOrderValue = collectionOrderValue;
            this.CollectionCashOrderValue = collectionCashOrderValue;
            this.CollectionPaidOnlineOrderValue = collectionPaidOnlineOrderValue;
            this.DeliveryOrderCount = deliveryOrderCount;
            this.DeliveryCashOrderCount = deliveryCashOrderCount;
            this.DeliveryPaidOnlineOrderCount = deliveryPaidOnlineOrderCount;
            this.DeliveryOrderValue = deliveryOrderValue;
            this.DeliveryCashOrderValue = deliveryCashOrderValue;
            this.DeliveryPaidOnlineOrderValue = deliveryPaidOnlineOrderValue;
            this.PaidOnlineOrderCount = paidOnlineOrderCount;
            this.CashOrderCount = cashOrderCount;
            this.PaidOnlineOrderValue = paidOnlineOrderValue;
            this.CashOrderValue = cashOrderValue;
            this.PaidOnlineOrderValueExcludingDeliveryFees = paidOnlineOrderValueExcludingDeliveryFees;
            this.CashOrderValueExcludingDeliveryFees = cashOrderValueExcludingDeliveryFees;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }
        
        /// <summary>
        /// Store Id
        /// </summary>
        /// <value>Store Id</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Store name
        /// </summary>
        /// <value>Store name</value>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }


        /// <summary>
        /// Order Count
        /// </summary>
        /// <value>Order Count</value>
        [DataMember(Name="OrderCount", EmitDefaultValue=false)]
        public int? OrderCount { get; set; }

        /// <summary>
        /// Order Value
        /// </summary>
        /// <value>Order Value</value>
        [DataMember(Name="OrderValue", EmitDefaultValue=false)]
        public double? OrderValue { get; set; }

        /// <summary>
        /// Order Value Excluding Delivery Fees
        /// </summary>
        /// <value>Order Value Excluding Delivery Fees</value>
        [DataMember(Name="OrderValueExcludingDeliveryFees", EmitDefaultValue=false)]
        public double? OrderValueExcludingDeliveryFees { get; set; }

        /// <summary>
        /// Collection Order Count
        /// </summary>
        /// <value>Collection Order Count</value>
        [DataMember(Name="CollectionOrderCount", EmitDefaultValue=false)]
        public int? CollectionOrderCount { get; set; }

        /// <summary>
        /// Collection Cash Order Count
        /// </summary>
        /// <value>Collection Cash Order Count</value>
        [DataMember(Name="CollectionCashOrderCount", EmitDefaultValue=false)]
        public int? CollectionCashOrderCount { get; set; }

        /// <summary>
        /// Collection Paid Online Order Count
        /// </summary>
        /// <value>Collection Paid Online Order Count</value>
        [DataMember(Name="CollectionPaidOnlineOrderCount", EmitDefaultValue=false)]
        public int? CollectionPaidOnlineOrderCount { get; set; }

        /// <summary>
        /// Collection Order Value
        /// </summary>
        /// <value>Collection Order Value</value>
        [DataMember(Name="CollectionOrderValue", EmitDefaultValue=false)]
        public double? CollectionOrderValue { get; set; }

        /// <summary>
        /// Collection Cash Order Value
        /// </summary>
        /// <value>Collection Cash Order Value</value>
        [DataMember(Name="CollectionCashOrderValue", EmitDefaultValue=false)]
        public double? CollectionCashOrderValue { get; set; }

        /// <summary>
        /// Collection Paid Online Order Value
        /// </summary>
        /// <value>Collection Paid Online Order Value</value>
        [DataMember(Name="CollectionPaidOnlineOrderValue", EmitDefaultValue=false)]
        public double? CollectionPaidOnlineOrderValue { get; set; }

        /// <summary>
        /// Delivery Order Count
        /// </summary>
        /// <value>Delivery Order Count</value>
        [DataMember(Name="DeliveryOrderCount", EmitDefaultValue=false)]
        public int? DeliveryOrderCount { get; set; }

        /// <summary>
        /// Delivery Cash Order Count
        /// </summary>
        /// <value>Delivery Cash Order Count</value>
        [DataMember(Name="DeliveryCashOrderCount", EmitDefaultValue=false)]
        public int? DeliveryCashOrderCount { get; set; }

        /// <summary>
        /// Delivery Paid Online Order Count
        /// </summary>
        /// <value>Delivery Paid Online Order Count</value>
        [DataMember(Name="DeliveryPaidOnlineOrderCount", EmitDefaultValue=false)]
        public int? DeliveryPaidOnlineOrderCount { get; set; }

        /// <summary>
        /// Delivery Order Value
        /// </summary>
        /// <value>Delivery Order Value</value>
        [DataMember(Name="DeliveryOrderValue", EmitDefaultValue=false)]
        public double? DeliveryOrderValue { get; set; }

        /// <summary>
        /// Delivery Cash Order Value
        /// </summary>
        /// <value>Delivery Cash Order Value</value>
        [DataMember(Name="DeliveryCashOrderValue", EmitDefaultValue=false)]
        public double? DeliveryCashOrderValue { get; set; }

        /// <summary>
        /// Delivery Paid Online Order Value
        /// </summary>
        /// <value>Delivery Paid Online Order Value</value>
        [DataMember(Name="DeliveryPaidOnlineOrderValue", EmitDefaultValue=false)]
        public double? DeliveryPaidOnlineOrderValue { get; set; }

        /// <summary>
        /// Paid Online Order Count
        /// </summary>
        /// <value>Paid Online Order Count</value>
        [DataMember(Name="PaidOnlineOrderCount", EmitDefaultValue=false)]
        public int? PaidOnlineOrderCount { get; set; }

        /// <summary>
        /// Cash Order Count
        /// </summary>
        /// <value>Cash Order Count</value>
        [DataMember(Name="CashOrderCount", EmitDefaultValue=false)]
        public int? CashOrderCount { get; set; }

        /// <summary>
        /// Paid Online Order Value
        /// </summary>
        /// <value>Paid Online Order Value</value>
        [DataMember(Name="PaidOnlineOrderValue", EmitDefaultValue=false)]
        public double? PaidOnlineOrderValue { get; set; }

        /// <summary>
        /// Cash Order Value
        /// </summary>
        /// <value>Cash Order Value</value>
        [DataMember(Name="CashOrderValue", EmitDefaultValue=false)]
        public double? CashOrderValue { get; set; }

        /// <summary>
        /// Paid Online Order Value Excluding Delivery Fees
        /// </summary>
        /// <value>Paid Online Order Value Excluding Delivery Fees</value>
        [DataMember(Name="PaidOnlineOrderValueExcludingDeliveryFees", EmitDefaultValue=false)]
        public double? PaidOnlineOrderValueExcludingDeliveryFees { get; set; }

        /// <summary>
        /// Cash Order Value Excluding Delivery Fees
        /// </summary>
        /// <value>Cash Order Value Excluding Delivery Fees</value>
        [DataMember(Name="CashOrderValueExcludingDeliveryFees", EmitDefaultValue=false)]
        public double? CashOrderValueExcludingDeliveryFees { get; set; }

        /// <summary>
        /// Start Time
        /// </summary>
        /// <value>Start Time</value>
        [DataMember(Name="StartTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// End Time
        /// </summary>
        /// <value>End Time</value>
        [DataMember(Name="EndTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreEndOfDayReport {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  OrderValue: ").Append(OrderValue).Append("\n");
            sb.Append("  OrderValueExcludingDeliveryFees: ").Append(OrderValueExcludingDeliveryFees).Append("\n");
            sb.Append("  CollectionOrderCount: ").Append(CollectionOrderCount).Append("\n");
            sb.Append("  CollectionCashOrderCount: ").Append(CollectionCashOrderCount).Append("\n");
            sb.Append("  CollectionPaidOnlineOrderCount: ").Append(CollectionPaidOnlineOrderCount).Append("\n");
            sb.Append("  CollectionOrderValue: ").Append(CollectionOrderValue).Append("\n");
            sb.Append("  CollectionCashOrderValue: ").Append(CollectionCashOrderValue).Append("\n");
            sb.Append("  CollectionPaidOnlineOrderValue: ").Append(CollectionPaidOnlineOrderValue).Append("\n");
            sb.Append("  DeliveryOrderCount: ").Append(DeliveryOrderCount).Append("\n");
            sb.Append("  DeliveryCashOrderCount: ").Append(DeliveryCashOrderCount).Append("\n");
            sb.Append("  DeliveryPaidOnlineOrderCount: ").Append(DeliveryPaidOnlineOrderCount).Append("\n");
            sb.Append("  DeliveryOrderValue: ").Append(DeliveryOrderValue).Append("\n");
            sb.Append("  DeliveryCashOrderValue: ").Append(DeliveryCashOrderValue).Append("\n");
            sb.Append("  DeliveryPaidOnlineOrderValue: ").Append(DeliveryPaidOnlineOrderValue).Append("\n");
            sb.Append("  PaidOnlineOrderCount: ").Append(PaidOnlineOrderCount).Append("\n");
            sb.Append("  CashOrderCount: ").Append(CashOrderCount).Append("\n");
            sb.Append("  PaidOnlineOrderValue: ").Append(PaidOnlineOrderValue).Append("\n");
            sb.Append("  CashOrderValue: ").Append(CashOrderValue).Append("\n");
            sb.Append("  PaidOnlineOrderValueExcludingDeliveryFees: ").Append(PaidOnlineOrderValueExcludingDeliveryFees).Append("\n");
            sb.Append("  CashOrderValueExcludingDeliveryFees: ").Append(CashOrderValueExcludingDeliveryFees).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreEndOfDayReport);
        }

        /// <summary>
        /// Returns true if StoreEndOfDayReport instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreEndOfDayReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreEndOfDayReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.OrderValue == input.OrderValue ||
                    (this.OrderValue != null &&
                    this.OrderValue.Equals(input.OrderValue))
                ) && 
                (
                    this.OrderValueExcludingDeliveryFees == input.OrderValueExcludingDeliveryFees ||
                    (this.OrderValueExcludingDeliveryFees != null &&
                    this.OrderValueExcludingDeliveryFees.Equals(input.OrderValueExcludingDeliveryFees))
                ) && 
                (
                    this.CollectionOrderCount == input.CollectionOrderCount ||
                    (this.CollectionOrderCount != null &&
                    this.CollectionOrderCount.Equals(input.CollectionOrderCount))
                ) && 
                (
                    this.CollectionCashOrderCount == input.CollectionCashOrderCount ||
                    (this.CollectionCashOrderCount != null &&
                    this.CollectionCashOrderCount.Equals(input.CollectionCashOrderCount))
                ) && 
                (
                    this.CollectionPaidOnlineOrderCount == input.CollectionPaidOnlineOrderCount ||
                    (this.CollectionPaidOnlineOrderCount != null &&
                    this.CollectionPaidOnlineOrderCount.Equals(input.CollectionPaidOnlineOrderCount))
                ) && 
                (
                    this.CollectionOrderValue == input.CollectionOrderValue ||
                    (this.CollectionOrderValue != null &&
                    this.CollectionOrderValue.Equals(input.CollectionOrderValue))
                ) && 
                (
                    this.CollectionCashOrderValue == input.CollectionCashOrderValue ||
                    (this.CollectionCashOrderValue != null &&
                    this.CollectionCashOrderValue.Equals(input.CollectionCashOrderValue))
                ) && 
                (
                    this.CollectionPaidOnlineOrderValue == input.CollectionPaidOnlineOrderValue ||
                    (this.CollectionPaidOnlineOrderValue != null &&
                    this.CollectionPaidOnlineOrderValue.Equals(input.CollectionPaidOnlineOrderValue))
                ) && 
                (
                    this.DeliveryOrderCount == input.DeliveryOrderCount ||
                    (this.DeliveryOrderCount != null &&
                    this.DeliveryOrderCount.Equals(input.DeliveryOrderCount))
                ) && 
                (
                    this.DeliveryCashOrderCount == input.DeliveryCashOrderCount ||
                    (this.DeliveryCashOrderCount != null &&
                    this.DeliveryCashOrderCount.Equals(input.DeliveryCashOrderCount))
                ) && 
                (
                    this.DeliveryPaidOnlineOrderCount == input.DeliveryPaidOnlineOrderCount ||
                    (this.DeliveryPaidOnlineOrderCount != null &&
                    this.DeliveryPaidOnlineOrderCount.Equals(input.DeliveryPaidOnlineOrderCount))
                ) && 
                (
                    this.DeliveryOrderValue == input.DeliveryOrderValue ||
                    (this.DeliveryOrderValue != null &&
                    this.DeliveryOrderValue.Equals(input.DeliveryOrderValue))
                ) && 
                (
                    this.DeliveryCashOrderValue == input.DeliveryCashOrderValue ||
                    (this.DeliveryCashOrderValue != null &&
                    this.DeliveryCashOrderValue.Equals(input.DeliveryCashOrderValue))
                ) && 
                (
                    this.DeliveryPaidOnlineOrderValue == input.DeliveryPaidOnlineOrderValue ||
                    (this.DeliveryPaidOnlineOrderValue != null &&
                    this.DeliveryPaidOnlineOrderValue.Equals(input.DeliveryPaidOnlineOrderValue))
                ) && 
                (
                    this.PaidOnlineOrderCount == input.PaidOnlineOrderCount ||
                    (this.PaidOnlineOrderCount != null &&
                    this.PaidOnlineOrderCount.Equals(input.PaidOnlineOrderCount))
                ) && 
                (
                    this.CashOrderCount == input.CashOrderCount ||
                    (this.CashOrderCount != null &&
                    this.CashOrderCount.Equals(input.CashOrderCount))
                ) && 
                (
                    this.PaidOnlineOrderValue == input.PaidOnlineOrderValue ||
                    (this.PaidOnlineOrderValue != null &&
                    this.PaidOnlineOrderValue.Equals(input.PaidOnlineOrderValue))
                ) && 
                (
                    this.CashOrderValue == input.CashOrderValue ||
                    (this.CashOrderValue != null &&
                    this.CashOrderValue.Equals(input.CashOrderValue))
                ) && 
                (
                    this.PaidOnlineOrderValueExcludingDeliveryFees == input.PaidOnlineOrderValueExcludingDeliveryFees ||
                    (this.PaidOnlineOrderValueExcludingDeliveryFees != null &&
                    this.PaidOnlineOrderValueExcludingDeliveryFees.Equals(input.PaidOnlineOrderValueExcludingDeliveryFees))
                ) && 
                (
                    this.CashOrderValueExcludingDeliveryFees == input.CashOrderValueExcludingDeliveryFees ||
                    (this.CashOrderValueExcludingDeliveryFees != null &&
                    this.CashOrderValueExcludingDeliveryFees.Equals(input.CashOrderValueExcludingDeliveryFees))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.OrderValue != null)
                    hashCode = hashCode * 59 + this.OrderValue.GetHashCode();
                if (this.OrderValueExcludingDeliveryFees != null)
                    hashCode = hashCode * 59 + this.OrderValueExcludingDeliveryFees.GetHashCode();
                if (this.CollectionOrderCount != null)
                    hashCode = hashCode * 59 + this.CollectionOrderCount.GetHashCode();
                if (this.CollectionCashOrderCount != null)
                    hashCode = hashCode * 59 + this.CollectionCashOrderCount.GetHashCode();
                if (this.CollectionPaidOnlineOrderCount != null)
                    hashCode = hashCode * 59 + this.CollectionPaidOnlineOrderCount.GetHashCode();
                if (this.CollectionOrderValue != null)
                    hashCode = hashCode * 59 + this.CollectionOrderValue.GetHashCode();
                if (this.CollectionCashOrderValue != null)
                    hashCode = hashCode * 59 + this.CollectionCashOrderValue.GetHashCode();
                if (this.CollectionPaidOnlineOrderValue != null)
                    hashCode = hashCode * 59 + this.CollectionPaidOnlineOrderValue.GetHashCode();
                if (this.DeliveryOrderCount != null)
                    hashCode = hashCode * 59 + this.DeliveryOrderCount.GetHashCode();
                if (this.DeliveryCashOrderCount != null)
                    hashCode = hashCode * 59 + this.DeliveryCashOrderCount.GetHashCode();
                if (this.DeliveryPaidOnlineOrderCount != null)
                    hashCode = hashCode * 59 + this.DeliveryPaidOnlineOrderCount.GetHashCode();
                if (this.DeliveryOrderValue != null)
                    hashCode = hashCode * 59 + this.DeliveryOrderValue.GetHashCode();
                if (this.DeliveryCashOrderValue != null)
                    hashCode = hashCode * 59 + this.DeliveryCashOrderValue.GetHashCode();
                if (this.DeliveryPaidOnlineOrderValue != null)
                    hashCode = hashCode * 59 + this.DeliveryPaidOnlineOrderValue.GetHashCode();
                if (this.PaidOnlineOrderCount != null)
                    hashCode = hashCode * 59 + this.PaidOnlineOrderCount.GetHashCode();
                if (this.CashOrderCount != null)
                    hashCode = hashCode * 59 + this.CashOrderCount.GetHashCode();
                if (this.PaidOnlineOrderValue != null)
                    hashCode = hashCode * 59 + this.PaidOnlineOrderValue.GetHashCode();
                if (this.CashOrderValue != null)
                    hashCode = hashCode * 59 + this.CashOrderValue.GetHashCode();
                if (this.PaidOnlineOrderValueExcludingDeliveryFees != null)
                    hashCode = hashCode * 59 + this.PaidOnlineOrderValueExcludingDeliveryFees.GetHashCode();
                if (this.CashOrderValueExcludingDeliveryFees != null)
                    hashCode = hashCode * 59 + this.CashOrderValueExcludingDeliveryFees.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

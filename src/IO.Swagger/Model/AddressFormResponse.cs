/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A response of a dyanmic form definition.
    /// </summary>
    [DataContract]
    public partial class AddressFormResponse :  IEquatable<AddressFormResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressFormResponse" /> class.
        /// </summary>
        /// <param name="formData">List of field definitions..</param>
        /// <param name="countryCode">ISO two letter code..</param>
        /// <param name="language">ISO culture code..</param>
        /// <param name="displayFormat">Templates used to format form fields when displaying items in a list..</param>
        public AddressFormResponse(List<DynamicFormField> formData = default(List<DynamicFormField>), string countryCode = default(string), string language = default(string), AddressFormDisplayFormat displayFormat = default(AddressFormDisplayFormat))
        {
            this.FormData = formData;
            this.CountryCode = countryCode;
            this.Language = language;
            this.DisplayFormat = displayFormat;
        }
        
        /// <summary>
        /// List of field definitions.
        /// </summary>
        /// <value>List of field definitions.</value>
        [DataMember(Name="FormData", EmitDefaultValue=false)]
        public List<DynamicFormField> FormData { get; set; }

        /// <summary>
        /// ISO two letter code.
        /// </summary>
        /// <value>ISO two letter code.</value>
        [DataMember(Name="CountryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO culture code.
        /// </summary>
        /// <value>ISO culture code.</value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Templates used to format form fields when displaying items in a list.
        /// </summary>
        /// <value>Templates used to format form fields when displaying items in a list.</value>
        [DataMember(Name="DisplayFormat", EmitDefaultValue=false)]
        public AddressFormDisplayFormat DisplayFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressFormResponse {\n");
            sb.Append("  FormData: ").Append(FormData).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  DisplayFormat: ").Append(DisplayFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressFormResponse);
        }

        /// <summary>
        /// Returns true if AddressFormResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressFormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressFormResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormData == input.FormData ||
                    this.FormData != null &&
                    this.FormData.SequenceEqual(input.FormData)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.DisplayFormat == input.DisplayFormat ||
                    (this.DisplayFormat != null &&
                    this.DisplayFormat.Equals(input.DisplayFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormData != null)
                    hashCode = hashCode * 59 + this.FormData.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.DisplayFormat != null)
                    hashCode = hashCode * 59 + this.DisplayFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

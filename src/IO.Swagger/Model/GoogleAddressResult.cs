/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GoogleAddressResult
    /// </summary>
    [DataContract]
    public partial class GoogleAddressResult :  IEquatable<GoogleAddressResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleAddressResult" /> class.
        /// </summary>
        /// <param name="addressComponents">addressComponents.</param>
        /// <param name="formattedAddress">formattedAddress.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="placeId">placeId.</param>
        /// <param name="types">types.</param>
        public GoogleAddressResult(List<GoogleAddressComponent> addressComponents = default(List<GoogleAddressComponent>), string formattedAddress = default(string), GoogleGeometry geometry = default(GoogleGeometry), string placeId = default(string), List<string> types = default(List<string>))
        {
            this.AddressComponents = addressComponents;
            this.FormattedAddress = formattedAddress;
            this.Geometry = geometry;
            this.PlaceId = placeId;
            this.Types = types;
        }
        
        /// <summary>
        /// Gets or Sets AddressComponents
        /// </summary>
        [DataMember(Name="Address_components", EmitDefaultValue=false)]
        public List<GoogleAddressComponent> AddressComponents { get; set; }

        /// <summary>
        /// Gets or Sets FormattedAddress
        /// </summary>
        [DataMember(Name="Formatted_address", EmitDefaultValue=false)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="Geometry", EmitDefaultValue=false)]
        public GoogleGeometry Geometry { get; set; }

        /// <summary>
        /// Gets or Sets PlaceId
        /// </summary>
        [DataMember(Name="Place_id", EmitDefaultValue=false)]
        public string PlaceId { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name="Types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoogleAddressResult {\n");
            sb.Append("  AddressComponents: ").Append(AddressComponents).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  PlaceId: ").Append(PlaceId).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoogleAddressResult);
        }

        /// <summary>
        /// Returns true if GoogleAddressResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GoogleAddressResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleAddressResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressComponents == input.AddressComponents ||
                    this.AddressComponents != null &&
                    this.AddressComponents.SequenceEqual(input.AddressComponents)
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.PlaceId == input.PlaceId ||
                    (this.PlaceId != null &&
                    this.PlaceId.Equals(input.PlaceId))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressComponents != null)
                    hashCode = hashCode * 59 + this.AddressComponents.GetHashCode();
                if (this.FormattedAddress != null)
                    hashCode = hashCode * 59 + this.FormattedAddress.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.PlaceId != null)
                    hashCode = hashCode * 59 + this.PlaceId.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

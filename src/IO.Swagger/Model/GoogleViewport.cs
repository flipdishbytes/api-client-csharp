/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GoogleViewport
    /// </summary>
    [DataContract]
    public partial class GoogleViewport :  IEquatable<GoogleViewport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleViewport" /> class.
        /// </summary>
        /// <param name="northeast">northeast.</param>
        /// <param name="southwest">southwest.</param>
        public GoogleViewport(GoogleCoordinates northeast = default(GoogleCoordinates), GoogleCoordinates southwest = default(GoogleCoordinates))
        {
            this.Northeast = northeast;
            this.Southwest = southwest;
        }
        
        /// <summary>
        /// Gets or Sets Northeast
        /// </summary>
        [DataMember(Name="Northeast", EmitDefaultValue=false)]
        public GoogleCoordinates Northeast { get; set; }

        /// <summary>
        /// Gets or Sets Southwest
        /// </summary>
        [DataMember(Name="Southwest", EmitDefaultValue=false)]
        public GoogleCoordinates Southwest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoogleViewport {\n");
            sb.Append("  Northeast: ").Append(Northeast).Append("\n");
            sb.Append("  Southwest: ").Append(Southwest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoogleViewport);
        }

        /// <summary>
        /// Returns true if GoogleViewport instances are equal
        /// </summary>
        /// <param name="input">Instance of GoogleViewport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleViewport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Northeast == input.Northeast ||
                    (this.Northeast != null &&
                    this.Northeast.Equals(input.Northeast))
                ) && 
                (
                    this.Southwest == input.Southwest ||
                    (this.Southwest != null &&
                    this.Southwest.Equals(input.Southwest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Northeast != null)
                    hashCode = hashCode * 59 + this.Northeast.GetHashCode();
                if (this.Southwest != null)
                    hashCode = hashCode * 59 + this.Southwest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

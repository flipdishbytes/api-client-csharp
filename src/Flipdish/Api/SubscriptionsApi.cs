/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Object</returns>
        Object SubscriptionsCancelSubscription (int? subscriptionId);

        /// <summary>
        /// Cancel the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionsCancelSubscriptionWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get the card linked to the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>RestApiResultCard</returns>
        RestApiResultCard SubscriptionsGetCard (int? subscriptionId);

        /// <summary>
        /// Get the card linked to the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>ApiResponse of RestApiResultCard</returns>
        ApiResponse<RestApiResultCard> SubscriptionsGetCardWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get avaialble plans for currency&#39;s user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultSubscriptionPlansResponse</returns>
        RestApiResultSubscriptionPlansResponse SubscriptionsGetPlansByCurrency ();

        /// <summary>
        /// Get avaialble plans for currency&#39;s user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultSubscriptionPlansResponse</returns>
        ApiResponse<RestApiResultSubscriptionPlansResponse> SubscriptionsGetPlansByCurrencyWithHttpInfo ();
        /// <summary>
        /// Get the subscription including the payment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>RestApiResultSubscription</returns>
        RestApiResultSubscription SubscriptionsGetSubscription (int? subscriptionId);

        /// <summary>
        /// Get the subscription including the payment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>ApiResponse of RestApiResultSubscription</returns>
        ApiResponse<RestApiResultSubscription> SubscriptionsGetSubscriptionWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get subscription by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>RestApiResultSubscription</returns>
        RestApiResultSubscription SubscriptionsGetUserSubscriptionByAppId (string appId);

        /// <summary>
        /// Get subscription by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>ApiResponse of RestApiResultSubscription</returns>
        ApiResponse<RestApiResultSubscription> SubscriptionsGetUserSubscriptionByAppIdWithHttpInfo (string appId);
        /// <summary>
        /// Add a new card and replace the old one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Object</returns>
        Object SubscriptionsReplaceOldCardWithNewCard (int? subscriptionId, CardWithToken card);

        /// <summary>
        /// Add a new card and replace the old one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionsReplaceOldCardWithNewCardWithHttpInfo (int? subscriptionId, CardWithToken card);
        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Object</returns>
        Object SubscriptionsSubscribe (SubscriptionWithToken subscription);

        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionsSubscribeWithHttpInfo (SubscriptionWithToken subscription);
        /// <summary>
        /// Update card expiring date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>RestApiResultCard</returns>
        RestApiResultCard SubscriptionsUpdateCardExpiringDate (int? subscriptionId, CardBase card);

        /// <summary>
        /// Update card expiring date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>ApiResponse of RestApiResultCard</returns>
        ApiResponse<RestApiResultCard> SubscriptionsUpdateCardExpiringDateWithHttpInfo (int? subscriptionId, CardBase card);
        /// <summary>
        /// Update the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Object</returns>
        Object SubscriptionsUpdateSubscription (int? subscriptionId, SubscriptionBase subscription);

        /// <summary>
        /// Update the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionsUpdateSubscriptionWithHttpInfo (int? subscriptionId, SubscriptionBase subscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionsCancelSubscriptionAsync (int? subscriptionId);

        /// <summary>
        /// Cancel the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsCancelSubscriptionAsyncWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get the card linked to the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of RestApiResultCard</returns>
        System.Threading.Tasks.Task<RestApiResultCard> SubscriptionsGetCardAsync (int? subscriptionId);

        /// <summary>
        /// Get the card linked to the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultCard>> SubscriptionsGetCardAsyncWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get avaialble plans for currency&#39;s user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultSubscriptionPlansResponse</returns>
        System.Threading.Tasks.Task<RestApiResultSubscriptionPlansResponse> SubscriptionsGetPlansByCurrencyAsync ();

        /// <summary>
        /// Get avaialble plans for currency&#39;s user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultSubscriptionPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscriptionPlansResponse>> SubscriptionsGetPlansByCurrencyAsyncWithHttpInfo ();
        /// <summary>
        /// Get the subscription including the payment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>Task of RestApiResultSubscription</returns>
        System.Threading.Tasks.Task<RestApiResultSubscription> SubscriptionsGetSubscriptionAsync (int? subscriptionId);

        /// <summary>
        /// Get the subscription including the payment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscription>> SubscriptionsGetSubscriptionAsyncWithHttpInfo (int? subscriptionId);
        /// <summary>
        /// Get subscription by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>Task of RestApiResultSubscription</returns>
        System.Threading.Tasks.Task<RestApiResultSubscription> SubscriptionsGetUserSubscriptionByAppIdAsync (string appId);

        /// <summary>
        /// Get subscription by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscription>> SubscriptionsGetUserSubscriptionByAppIdAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Add a new card and replace the old one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionsReplaceOldCardWithNewCardAsync (int? subscriptionId, CardWithToken card);

        /// <summary>
        /// Add a new card and replace the old one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsReplaceOldCardWithNewCardAsyncWithHttpInfo (int? subscriptionId, CardWithToken card);
        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionsSubscribeAsync (SubscriptionWithToken subscription);

        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsSubscribeAsyncWithHttpInfo (SubscriptionWithToken subscription);
        /// <summary>
        /// Update card expiring date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>Task of RestApiResultCard</returns>
        System.Threading.Tasks.Task<RestApiResultCard> SubscriptionsUpdateCardExpiringDateAsync (int? subscriptionId, CardBase card);

        /// <summary>
        /// Update card expiring date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>Task of ApiResponse (RestApiResultCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultCard>> SubscriptionsUpdateCardExpiringDateAsyncWithHttpInfo (int? subscriptionId, CardBase card);
        /// <summary>
        /// Update the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionsUpdateSubscriptionAsync (int? subscriptionId, SubscriptionBase subscription);

        /// <summary>
        /// Update the subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsUpdateSubscriptionAsyncWithHttpInfo (int? subscriptionId, SubscriptionBase subscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Object</returns>
        public Object SubscriptionsCancelSubscription (int? subscriptionId)
        {
             ApiResponse<Object> localVarResponse = SubscriptionsCancelSubscriptionWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionsCancelSubscriptionWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsCancelSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsCancelSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionsCancelSubscriptionAsync (int? subscriptionId)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionsCancelSubscriptionAsyncWithHttpInfo(subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsCancelSubscriptionAsyncWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsCancelSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsCancelSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the card linked to the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>RestApiResultCard</returns>
        public RestApiResultCard SubscriptionsGetCard (int? subscriptionId)
        {
             ApiResponse<RestApiResultCard> localVarResponse = SubscriptionsGetCardWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the card linked to the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>ApiResponse of RestApiResultCard</returns>
        public ApiResponse< RestApiResultCard > SubscriptionsGetCardWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsGetCard");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCard)));
        }

        /// <summary>
        /// Get the card linked to the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of RestApiResultCard</returns>
        public async System.Threading.Tasks.Task<RestApiResultCard> SubscriptionsGetCardAsync (int? subscriptionId)
        {
             ApiResponse<RestApiResultCard> localVarResponse = await SubscriptionsGetCardAsyncWithHttpInfo(subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the card linked to the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultCard>> SubscriptionsGetCardAsyncWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsGetCard");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCard)));
        }

        /// <summary>
        /// Get avaialble plans for currency&#39;s user 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultSubscriptionPlansResponse</returns>
        public RestApiResultSubscriptionPlansResponse SubscriptionsGetPlansByCurrency ()
        {
             ApiResponse<RestApiResultSubscriptionPlansResponse> localVarResponse = SubscriptionsGetPlansByCurrencyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get avaialble plans for currency&#39;s user 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultSubscriptionPlansResponse</returns>
        public ApiResponse< RestApiResultSubscriptionPlansResponse > SubscriptionsGetPlansByCurrencyWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/subscriptions/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetPlansByCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscriptionPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscriptionPlansResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscriptionPlansResponse)));
        }

        /// <summary>
        /// Get avaialble plans for currency&#39;s user 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultSubscriptionPlansResponse</returns>
        public async System.Threading.Tasks.Task<RestApiResultSubscriptionPlansResponse> SubscriptionsGetPlansByCurrencyAsync ()
        {
             ApiResponse<RestApiResultSubscriptionPlansResponse> localVarResponse = await SubscriptionsGetPlansByCurrencyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get avaialble plans for currency&#39;s user 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultSubscriptionPlansResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscriptionPlansResponse>> SubscriptionsGetPlansByCurrencyAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/subscriptions/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetPlansByCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscriptionPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscriptionPlansResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscriptionPlansResponse)));
        }

        /// <summary>
        /// Get the subscription including the payment history 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>RestApiResultSubscription</returns>
        public RestApiResultSubscription SubscriptionsGetSubscription (int? subscriptionId)
        {
             ApiResponse<RestApiResultSubscription> localVarResponse = SubscriptionsGetSubscriptionWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the subscription including the payment history 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>ApiResponse of RestApiResultSubscription</returns>
        public ApiResponse< RestApiResultSubscription > SubscriptionsGetSubscriptionWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsGetSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscription)));
        }

        /// <summary>
        /// Get the subscription including the payment history 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>Task of RestApiResultSubscription</returns>
        public async System.Threading.Tasks.Task<RestApiResultSubscription> SubscriptionsGetSubscriptionAsync (int? subscriptionId)
        {
             ApiResponse<RestApiResultSubscription> localVarResponse = await SubscriptionsGetSubscriptionAsyncWithHttpInfo(subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the subscription including the payment history 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscription>> SubscriptionsGetSubscriptionAsyncWithHttpInfo (int? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsGetSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscription)));
        }

        /// <summary>
        /// Get subscription by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>RestApiResultSubscription</returns>
        public RestApiResultSubscription SubscriptionsGetUserSubscriptionByAppId (string appId)
        {
             ApiResponse<RestApiResultSubscription> localVarResponse = SubscriptionsGetUserSubscriptionByAppIdWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>ApiResponse of RestApiResultSubscription</returns>
        public ApiResponse< RestApiResultSubscription > SubscriptionsGetUserSubscriptionByAppIdWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling SubscriptionsApi->SubscriptionsGetUserSubscriptionByAppId");

            var localVarPath = "/api/v1.0/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appId", appId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetUserSubscriptionByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscription)));
        }

        /// <summary>
        /// Get subscription by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>Task of RestApiResultSubscription</returns>
        public async System.Threading.Tasks.Task<RestApiResultSubscription> SubscriptionsGetUserSubscriptionByAppIdAsync (string appId)
        {
             ApiResponse<RestApiResultSubscription> localVarResponse = await SubscriptionsGetUserSubscriptionByAppIdAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The string app identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSubscription>> SubscriptionsGetUserSubscriptionByAppIdAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling SubscriptionsApi->SubscriptionsGetUserSubscriptionByAppId");

            var localVarPath = "/api/v1.0/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appId", appId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsGetUserSubscriptionByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSubscription)));
        }

        /// <summary>
        /// Add a new card and replace the old one 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Object</returns>
        public Object SubscriptionsReplaceOldCardWithNewCard (int? subscriptionId, CardWithToken card)
        {
             ApiResponse<Object> localVarResponse = SubscriptionsReplaceOldCardWithNewCardWithHttpInfo(subscriptionId, card);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new card and replace the old one 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionsReplaceOldCardWithNewCardWithHttpInfo (int? subscriptionId, CardWithToken card)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsReplaceOldCardWithNewCard");
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling SubscriptionsApi->SubscriptionsReplaceOldCardWithNewCard");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsReplaceOldCardWithNewCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add a new card and replace the old one 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionsReplaceOldCardWithNewCardAsync (int? subscriptionId, CardWithToken card)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionsReplaceOldCardWithNewCardAsyncWithHttpInfo(subscriptionId, card);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new card and replace the old one 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Token Id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsReplaceOldCardWithNewCardAsyncWithHttpInfo (int? subscriptionId, CardWithToken card)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsReplaceOldCardWithNewCard");
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling SubscriptionsApi->SubscriptionsReplaceOldCardWithNewCard");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsReplaceOldCardWithNewCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Object</returns>
        public Object SubscriptionsSubscribe (SubscriptionWithToken subscription)
        {
             ApiResponse<Object> localVarResponse = SubscriptionsSubscribeWithHttpInfo(subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionsSubscribeWithHttpInfo (SubscriptionWithToken subscription)
        {
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->SubscriptionsSubscribe");

            var localVarPath = "/api/v1.0/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null && subscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionsSubscribeAsync (SubscriptionWithToken subscription)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionsSubscribeAsyncWithHttpInfo(subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscription">Data necessary to create a new subscription</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsSubscribeAsyncWithHttpInfo (SubscriptionWithToken subscription)
        {
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->SubscriptionsSubscribe");

            var localVarPath = "/api/v1.0/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null && subscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update card expiring date 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>RestApiResultCard</returns>
        public RestApiResultCard SubscriptionsUpdateCardExpiringDate (int? subscriptionId, CardBase card)
        {
             ApiResponse<RestApiResultCard> localVarResponse = SubscriptionsUpdateCardExpiringDateWithHttpInfo(subscriptionId, card);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update card expiring date 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>ApiResponse of RestApiResultCard</returns>
        public ApiResponse< RestApiResultCard > SubscriptionsUpdateCardExpiringDateWithHttpInfo (int? subscriptionId, CardBase card)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsUpdateCardExpiringDate");
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling SubscriptionsApi->SubscriptionsUpdateCardExpiringDate");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsUpdateCardExpiringDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCard)));
        }

        /// <summary>
        /// Update card expiring date 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>Task of RestApiResultCard</returns>
        public async System.Threading.Tasks.Task<RestApiResultCard> SubscriptionsUpdateCardExpiringDateAsync (int? subscriptionId, CardBase card)
        {
             ApiResponse<RestApiResultCard> localVarResponse = await SubscriptionsUpdateCardExpiringDateAsyncWithHttpInfo(subscriptionId, card);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update card expiring date 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="card">Data to update card expiring date</param>
        /// <returns>Task of ApiResponse (RestApiResultCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultCard>> SubscriptionsUpdateCardExpiringDateAsyncWithHttpInfo (int? subscriptionId, CardBase card)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsUpdateCardExpiringDate");
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling SubscriptionsApi->SubscriptionsUpdateCardExpiringDate");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsUpdateCardExpiringDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCard)));
        }

        /// <summary>
        /// Update the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Object</returns>
        public Object SubscriptionsUpdateSubscription (int? subscriptionId, SubscriptionBase subscription)
        {
             ApiResponse<Object> localVarResponse = SubscriptionsUpdateSubscriptionWithHttpInfo(subscriptionId, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionsUpdateSubscriptionWithHttpInfo (int? subscriptionId, SubscriptionBase subscription)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsUpdateSubscription");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->SubscriptionsUpdateSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (subscription != null && subscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsUpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionsUpdateSubscriptionAsync (int? subscriptionId, SubscriptionBase subscription)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionsUpdateSubscriptionAsyncWithHttpInfo(subscriptionId, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">Subscription identifier</param>
        /// <param name="subscription">Data to update the subscription</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsUpdateSubscriptionAsyncWithHttpInfo (int? subscriptionId, SubscriptionBase subscription)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->SubscriptionsUpdateSubscription");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling SubscriptionsApi->SubscriptionsUpdateSubscription");

            var localVarPath = "/api/v1.0/subscriptions/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (subscription != null && subscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsUpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}

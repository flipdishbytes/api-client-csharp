/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>RestApiResultClientDeviceEnrollmentResult</returns>
        RestApiResultClientDeviceEnrollmentResult AssignDevice (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>ApiResponse of RestApiResultClientDeviceEnrollmentResult</returns>
        ApiResponse<RestApiResultClientDeviceEnrollmentResult> AssignDeviceWithHttpInfo (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>RestApiResultClientDeviceEnrollmentResult</returns>
        RestApiResultClientDeviceEnrollmentResult EnrollDevice (string appId, ClientDeviceEnroll deviceEnrollmentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>ApiResponse of RestApiResultClientDeviceEnrollmentResult</returns>
        ApiResponse<RestApiResultClientDeviceEnrollmentResult> EnrollDeviceWithHttpInfo (string appId, ClientDeviceEnroll deviceEnrollmentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultClientDevice</returns>
        RestApiResultClientDevice GetDeviceDetails (string appId, string deviceModel, string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultClientDevice</returns>
        ApiResponse<RestApiResultClientDevice> GetDeviceDetailsWithHttpInfo (string appId, string deviceModel, string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>RestApiArrayResultClientDeviceSummary</returns>
        RestApiArrayResultClientDeviceSummary SearchDevices (string appId, int? storeId = null, string deviceModel = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultClientDeviceSummary</returns>
        ApiResponse<RestApiArrayResultClientDeviceSummary> SearchDevicesWithHttpInfo (string appId, int? storeId = null, string deviceModel = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>Task of RestApiResultClientDeviceEnrollmentResult</returns>
        System.Threading.Tasks.Task<RestApiResultClientDeviceEnrollmentResult> AssignDeviceAsync (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDeviceEnrollmentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDeviceEnrollmentResult>> AssignDeviceAsyncWithHttpInfo (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>Task of RestApiResultClientDeviceEnrollmentResult</returns>
        System.Threading.Tasks.Task<RestApiResultClientDeviceEnrollmentResult> EnrollDeviceAsync (string appId, ClientDeviceEnroll deviceEnrollmentRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDeviceEnrollmentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDeviceEnrollmentResult>> EnrollDeviceAsyncWithHttpInfo (string appId, ClientDeviceEnroll deviceEnrollmentRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultClientDevice</returns>
        System.Threading.Tasks.Task<RestApiResultClientDevice> GetDeviceDetailsAsync (string appId, string deviceModel, string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDevice>> GetDeviceDetailsAsyncWithHttpInfo (string appId, string deviceModel, string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>Task of RestApiArrayResultClientDeviceSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultClientDeviceSummary> SearchDevicesAsync (string appId, int? storeId = null, string deviceModel = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultClientDeviceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultClientDeviceSummary>> SearchDevicesAsyncWithHttpInfo (string appId, int? storeId = null, string deviceModel = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>RestApiResultClientDeviceEnrollmentResult</returns>
        public RestApiResultClientDeviceEnrollmentResult AssignDevice (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest)
        {
             ApiResponse<RestApiResultClientDeviceEnrollmentResult> localVarResponse = AssignDeviceWithHttpInfo(appId, assignDeviceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>ApiResponse of RestApiResultClientDeviceEnrollmentResult</returns>
        public ApiResponse< RestApiResultClientDeviceEnrollmentResult > AssignDeviceWithHttpInfo (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->AssignDevice");
            // verify the required parameter 'assignDeviceRequest' is set
            if (assignDeviceRequest == null)
                throw new ApiException(400, "Missing required parameter 'assignDeviceRequest' when calling DeviceApi->AssignDevice");

            var localVarPath = "./api/v1.0/{appId}/devices/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (assignDeviceRequest != null && assignDeviceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignDeviceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignDeviceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDeviceEnrollmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDeviceEnrollmentResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDeviceEnrollmentResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>Task of RestApiResultClientDeviceEnrollmentResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultClientDeviceEnrollmentResult> AssignDeviceAsync (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest)
        {
             ApiResponse<RestApiResultClientDeviceEnrollmentResult> localVarResponse = await AssignDeviceAsyncWithHttpInfo(appId, assignDeviceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="assignDeviceRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDeviceEnrollmentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDeviceEnrollmentResult>> AssignDeviceAsyncWithHttpInfo (string appId, ClientDeviceAssignEnrolledDevice assignDeviceRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->AssignDevice");
            // verify the required parameter 'assignDeviceRequest' is set
            if (assignDeviceRequest == null)
                throw new ApiException(400, "Missing required parameter 'assignDeviceRequest' when calling DeviceApi->AssignDevice");

            var localVarPath = "./api/v1.0/{appId}/devices/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (assignDeviceRequest != null && assignDeviceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignDeviceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignDeviceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDeviceEnrollmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDeviceEnrollmentResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDeviceEnrollmentResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>RestApiResultClientDeviceEnrollmentResult</returns>
        public RestApiResultClientDeviceEnrollmentResult EnrollDevice (string appId, ClientDeviceEnroll deviceEnrollmentRequest)
        {
             ApiResponse<RestApiResultClientDeviceEnrollmentResult> localVarResponse = EnrollDeviceWithHttpInfo(appId, deviceEnrollmentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>ApiResponse of RestApiResultClientDeviceEnrollmentResult</returns>
        public ApiResponse< RestApiResultClientDeviceEnrollmentResult > EnrollDeviceWithHttpInfo (string appId, ClientDeviceEnroll deviceEnrollmentRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->EnrollDevice");
            // verify the required parameter 'deviceEnrollmentRequest' is set
            if (deviceEnrollmentRequest == null)
                throw new ApiException(400, "Missing required parameter 'deviceEnrollmentRequest' when calling DeviceApi->EnrollDevice");

            var localVarPath = "./api/v1.0/{appId}/devices/enroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceEnrollmentRequest != null && deviceEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deviceEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceEnrollmentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnrollDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDeviceEnrollmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDeviceEnrollmentResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDeviceEnrollmentResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>Task of RestApiResultClientDeviceEnrollmentResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultClientDeviceEnrollmentResult> EnrollDeviceAsync (string appId, ClientDeviceEnroll deviceEnrollmentRequest)
        {
             ApiResponse<RestApiResultClientDeviceEnrollmentResult> localVarResponse = await EnrollDeviceAsyncWithHttpInfo(appId, deviceEnrollmentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDeviceEnrollmentResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDeviceEnrollmentResult>> EnrollDeviceAsyncWithHttpInfo (string appId, ClientDeviceEnroll deviceEnrollmentRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->EnrollDevice");
            // verify the required parameter 'deviceEnrollmentRequest' is set
            if (deviceEnrollmentRequest == null)
                throw new ApiException(400, "Missing required parameter 'deviceEnrollmentRequest' when calling DeviceApi->EnrollDevice");

            var localVarPath = "./api/v1.0/{appId}/devices/enroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceEnrollmentRequest != null && deviceEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deviceEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceEnrollmentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnrollDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDeviceEnrollmentResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDeviceEnrollmentResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDeviceEnrollmentResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultClientDevice</returns>
        public RestApiResultClientDevice GetDeviceDetails (string appId, string deviceModel, string deviceId)
        {
             ApiResponse<RestApiResultClientDevice> localVarResponse = GetDeviceDetailsWithHttpInfo(appId, deviceModel, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultClientDevice</returns>
        public ApiResponse< RestApiResultClientDevice > GetDeviceDetailsWithHttpInfo (string appId, string deviceModel, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->GetDeviceDetails");
            // verify the required parameter 'deviceModel' is set
            if (deviceModel == null)
                throw new ApiException(400, "Missing required parameter 'deviceModel' when calling DeviceApi->GetDeviceDetails");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetDeviceDetails");

            var localVarPath = "./api/v1.0/{appId}/devices/device/{deviceModel}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceModel != null) localVarPathParams.Add("deviceModel", this.Configuration.ApiClient.ParameterToString(deviceModel)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDevice)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultClientDevice</returns>
        public async System.Threading.Tasks.Task<RestApiResultClientDevice> GetDeviceDetailsAsync (string appId, string deviceModel, string deviceId)
        {
             ApiResponse<RestApiResultClientDevice> localVarResponse = await GetDeviceDetailsAsyncWithHttpInfo(appId, deviceModel, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceModel"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultClientDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultClientDevice>> GetDeviceDetailsAsyncWithHttpInfo (string appId, string deviceModel, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->GetDeviceDetails");
            // verify the required parameter 'deviceModel' is set
            if (deviceModel == null)
                throw new ApiException(400, "Missing required parameter 'deviceModel' when calling DeviceApi->GetDeviceDetails");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceApi->GetDeviceDetails");

            var localVarPath = "./api/v1.0/{appId}/devices/device/{deviceModel}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceModel != null) localVarPathParams.Add("deviceModel", this.Configuration.ApiClient.ParameterToString(deviceModel)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultClientDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultClientDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultClientDevice)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>RestApiArrayResultClientDeviceSummary</returns>
        public RestApiArrayResultClientDeviceSummary SearchDevices (string appId, int? storeId = null, string deviceModel = null)
        {
             ApiResponse<RestApiArrayResultClientDeviceSummary> localVarResponse = SearchDevicesWithHttpInfo(appId, storeId, deviceModel);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultClientDeviceSummary</returns>
        public ApiResponse< RestApiArrayResultClientDeviceSummary > SearchDevicesWithHttpInfo (string appId, int? storeId = null, string deviceModel = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->SearchDevices");

            var localVarPath = "./api/v1.0/{appId}/devices/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (deviceModel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceModel", deviceModel)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultClientDeviceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultClientDeviceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultClientDeviceSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>Task of RestApiArrayResultClientDeviceSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultClientDeviceSummary> SearchDevicesAsync (string appId, int? storeId = null, string deviceModel = null)
        {
             ApiResponse<RestApiArrayResultClientDeviceSummary> localVarResponse = await SearchDevicesAsyncWithHttpInfo(appId, storeId, deviceModel);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceModel"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultClientDeviceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultClientDeviceSummary>> SearchDevicesAsyncWithHttpInfo (string appId, int? storeId = null, string deviceModel = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeviceApi->SearchDevices");

            var localVarPath = "./api/v1.0/{appId}/devices/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (deviceModel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceModel", deviceModel)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultClientDeviceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultClientDeviceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultClientDeviceSummary)));
        }

    }
}

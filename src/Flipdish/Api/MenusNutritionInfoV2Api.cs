/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenusNutritionInfoV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        Object AddOrUpdateMenuItemNutritionInfoV2 (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddOrUpdateMenuItemNutritionInfoV2WithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);
        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        Object AddOrUpdateMenuItemOptionSetItemNutritionInfoV2 (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddOrUpdateMenuItemOptionSetItemNutritionInfoV2WithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);
        /// <summary>
        /// Get allergens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>RestApiArrayResultAllergen</returns>
        RestApiArrayResultAllergen GetAllergensV2 (string appId, string languageId = null);

        /// <summary>
        /// Get allergens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultAllergen</returns>
        ApiResponse<RestApiArrayResultAllergen> GetAllergensV2WithHttpInfo (string appId, string languageId = null);
        /// <summary>
        /// Get menu nutrition by menuId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>RestApiResultNutritionInfoV2</returns>
        RestApiResultNutritionInfoV2 GetMenuNutritionInfoV2ByMenuId (string appId, int? menuId, string languageId = null);

        /// <summary>
        /// Get menu nutrition by menuId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultNutritionInfoV2</returns>
        ApiResponse<RestApiResultNutritionInfoV2> GetMenuNutritionInfoV2ByMenuIdWithHttpInfo (string appId, int? menuId, string languageId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddOrUpdateMenuItemNutritionInfoV2Async (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrUpdateMenuItemNutritionInfoV2AsyncWithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);
        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddOrUpdateMenuItemOptionSetItemNutritionInfoV2Async (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrUpdateMenuItemOptionSetItemNutritionInfoV2AsyncWithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId);
        /// <summary>
        /// Get allergens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of RestApiArrayResultAllergen</returns>
        System.Threading.Tasks.Task<RestApiArrayResultAllergen> GetAllergensV2Async (string appId, string languageId = null);

        /// <summary>
        /// Get allergens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultAllergen)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultAllergen>> GetAllergensV2AsyncWithHttpInfo (string appId, string languageId = null);
        /// <summary>
        /// Get menu nutrition by menuId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of RestApiResultNutritionInfoV2</returns>
        System.Threading.Tasks.Task<RestApiResultNutritionInfoV2> GetMenuNutritionInfoV2ByMenuIdAsync (string appId, int? menuId, string languageId = null);

        /// <summary>
        /// Get menu nutrition by menuId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultNutritionInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultNutritionInfoV2>> GetMenuNutritionInfoV2ByMenuIdAsyncWithHttpInfo (string appId, int? menuId, string languageId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenusNutritionInfoV2Api : IMenusNutritionInfoV2Api
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusNutritionInfoV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public MenusNutritionInfoV2Api(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusNutritionInfoV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenusNutritionInfoV2Api(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        public Object AddOrUpdateMenuItemNutritionInfoV2 (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
             ApiResponse<Object> localVarResponse = AddOrUpdateMenuItemNutritionInfoV2WithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddOrUpdateMenuItemNutritionInfoV2WithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new ApiException(400, "Missing required parameter 'publicId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'addOrUpdateModel' is set
            if (addOrUpdateModel == null)
                throw new ApiException(400, "Missing required parameter 'addOrUpdateModel' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/menuItem/{publicId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (publicId != null) localVarPathParams.Add("publicId", this.Configuration.ApiClient.ParameterToString(publicId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (addOrUpdateModel != null && addOrUpdateModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOrUpdateModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOrUpdateModel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateMenuItemNutritionInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddOrUpdateMenuItemNutritionInfoV2Async (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
             ApiResponse<Object> localVarResponse = await AddOrUpdateMenuItemNutritionInfoV2AsyncWithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update menuitem nutrition info by menu item&#39;s publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrUpdateMenuItemNutritionInfoV2AsyncWithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new ApiException(400, "Missing required parameter 'publicId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'addOrUpdateModel' is set
            if (addOrUpdateModel == null)
                throw new ApiException(400, "Missing required parameter 'addOrUpdateModel' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemNutritionInfoV2");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/menuItem/{publicId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (publicId != null) localVarPathParams.Add("publicId", this.Configuration.ApiClient.ParameterToString(publicId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (addOrUpdateModel != null && addOrUpdateModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOrUpdateModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOrUpdateModel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateMenuItemNutritionInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        public Object AddOrUpdateMenuItemOptionSetItemNutritionInfoV2 (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
             ApiResponse<Object> localVarResponse = AddOrUpdateMenuItemOptionSetItemNutritionInfoV2WithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddOrUpdateMenuItemOptionSetItemNutritionInfoV2WithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new ApiException(400, "Missing required parameter 'publicId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'addOrUpdateModel' is set
            if (addOrUpdateModel == null)
                throw new ApiException(400, "Missing required parameter 'addOrUpdateModel' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/menuItemOption/{publicId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (publicId != null) localVarPathParams.Add("publicId", this.Configuration.ApiClient.ParameterToString(publicId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (addOrUpdateModel != null && addOrUpdateModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOrUpdateModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOrUpdateModel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateMenuItemOptionSetItemNutritionInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddOrUpdateMenuItemOptionSetItemNutritionInfoV2Async (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
             ApiResponse<Object> localVarResponse = await AddOrUpdateMenuItemOptionSetItemNutritionInfoV2AsyncWithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update menuitem option set item&#39;s nutrition info by its publicId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="publicId">Menu item option set item&#39;s publicId</param>
        /// <param name="addOrUpdateModel">Allergen ids</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrUpdateMenuItemOptionSetItemNutritionInfoV2AsyncWithHttpInfo (int? menuId, string publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, string appId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new ApiException(400, "Missing required parameter 'publicId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'addOrUpdateModel' is set
            if (addOrUpdateModel == null)
                throw new ApiException(400, "Missing required parameter 'addOrUpdateModel' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->AddOrUpdateMenuItemOptionSetItemNutritionInfoV2");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/menuItemOption/{publicId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (publicId != null) localVarPathParams.Add("publicId", this.Configuration.ApiClient.ParameterToString(publicId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (addOrUpdateModel != null && addOrUpdateModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOrUpdateModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOrUpdateModel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateMenuItemOptionSetItemNutritionInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get allergens 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>RestApiArrayResultAllergen</returns>
        public RestApiArrayResultAllergen GetAllergensV2 (string appId, string languageId = null)
        {
             ApiResponse<RestApiArrayResultAllergen> localVarResponse = GetAllergensV2WithHttpInfo(appId, languageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get allergens 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultAllergen</returns>
        public ApiResponse< RestApiArrayResultAllergen > GetAllergensV2WithHttpInfo (string appId, string languageId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->GetAllergensV2");

            var localVarPath = "./api/v1.0/{appId}/menus/nutritionv2/allergens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (languageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languageId", languageId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllergensV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultAllergen>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultAllergen) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultAllergen)));
        }

        /// <summary>
        /// Get allergens 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of RestApiArrayResultAllergen</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultAllergen> GetAllergensV2Async (string appId, string languageId = null)
        {
             ApiResponse<RestApiArrayResultAllergen> localVarResponse = await GetAllergensV2AsyncWithHttpInfo(appId, languageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get allergens 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultAllergen)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultAllergen>> GetAllergensV2AsyncWithHttpInfo (string appId, string languageId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->GetAllergensV2");

            var localVarPath = "./api/v1.0/{appId}/menus/nutritionv2/allergens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (languageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languageId", languageId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllergensV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultAllergen>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultAllergen) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultAllergen)));
        }

        /// <summary>
        /// Get menu nutrition by menuId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>RestApiResultNutritionInfoV2</returns>
        public RestApiResultNutritionInfoV2 GetMenuNutritionInfoV2ByMenuId (string appId, int? menuId, string languageId = null)
        {
             ApiResponse<RestApiResultNutritionInfoV2> localVarResponse = GetMenuNutritionInfoV2ByMenuIdWithHttpInfo(appId, menuId, languageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu nutrition by menuId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultNutritionInfoV2</returns>
        public ApiResponse< RestApiResultNutritionInfoV2 > GetMenuNutritionInfoV2ByMenuIdWithHttpInfo (string appId, int? menuId, string languageId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->GetMenuNutritionInfoV2ByMenuId");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->GetMenuNutritionInfoV2ByMenuId");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (languageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languageId", languageId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuNutritionInfoV2ByMenuId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultNutritionInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultNutritionInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultNutritionInfoV2)));
        }

        /// <summary>
        /// Get menu nutrition by menuId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of RestApiResultNutritionInfoV2</returns>
        public async System.Threading.Tasks.Task<RestApiResultNutritionInfoV2> GetMenuNutritionInfoV2ByMenuIdAsync (string appId, int? menuId, string languageId = null)
        {
             ApiResponse<RestApiResultNutritionInfoV2> localVarResponse = await GetMenuNutritionInfoV2ByMenuIdAsyncWithHttpInfo(appId, menuId, languageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu nutrition by menuId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="languageId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultNutritionInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultNutritionInfoV2>> GetMenuNutritionInfoV2ByMenuIdAsyncWithHttpInfo (string appId, int? menuId, string languageId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusNutritionInfoV2Api->GetMenuNutritionInfoV2ByMenuId");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusNutritionInfoV2Api->GetMenuNutritionInfoV2ByMenuId");

            var localVarPath = "./api/v1.0/{appId}/menus/{menuId}/nutritionv2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (languageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languageId", languageId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuNutritionInfoV2ByMenuId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultNutritionInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultNutritionInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultNutritionInfoV2)));
        }

    }
}

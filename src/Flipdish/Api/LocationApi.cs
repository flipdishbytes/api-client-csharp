/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        Object CreateLocation (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateLocationWithHttpInfo (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        Object DeleteLocation (int? locationId, int? locationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteLocationWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>RestApiResultMappedLocation</returns>
        RestApiResultMappedLocation MapLocationToExternalId (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultMappedLocation</returns>
        ApiResponse<RestApiResultMappedLocation> MapLocationToExternalIdWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        Object MoveLocation (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MoveLocationWithHttpInfo (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultLocationAreaLocation</returns>
        RestApiResultLocationAreaLocation UpdateLocation (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultLocationAreaLocation</returns>
        ApiResponse<RestApiResultLocationAreaLocation> UpdateLocationWithHttpInfo (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateLocationAsync (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateLocationAsyncWithHttpInfo (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteLocationAsync (int? locationId, int? locationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationAsyncWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>Task of RestApiResultMappedLocation</returns>
        System.Threading.Tasks.Task<RestApiResultMappedLocation> MapLocationToExternalIdAsync (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultMappedLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMappedLocation>> MapLocationToExternalIdAsyncWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MoveLocationAsync (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveLocationAsyncWithHttpInfo (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultLocationAreaLocation</returns>
        System.Threading.Tasks.Task<RestApiResultLocationAreaLocation> UpdateLocationAsync (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultLocationAreaLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultLocationAreaLocation>> UpdateLocationAsyncWithHttpInfo (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationApi : ILocationApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        public Object CreateLocation (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = CreateLocationWithHttpInfo(createLocationInput, locationAreaId, appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateLocationWithHttpInfo (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'createLocationInput' is set
            if (createLocationInput == null)
                throw new ApiException(400, "Missing required parameter 'createLocationInput' when calling LocationApi->CreateLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->CreateLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->CreateLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->CreateLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (createLocationInput != null && createLocationInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLocationInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLocationInput; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateLocationAsync (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = await CreateLocationAsyncWithHttpInfo(createLocationInput, locationAreaId, appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateLocationAsyncWithHttpInfo (List<CreateLocation> createLocationInput, int? locationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'createLocationInput' is set
            if (createLocationInput == null)
                throw new ApiException(400, "Missing required parameter 'createLocationInput' when calling LocationApi->CreateLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->CreateLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->CreateLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->CreateLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (createLocationInput != null && createLocationInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLocationInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLocationInput; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        public Object DeleteLocation (int? locationId, int? locationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = DeleteLocationWithHttpInfo(locationId, locationAreaId, appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteLocationWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->DeleteLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteLocationAsync (int? locationId, int? locationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = await DeleteLocationAsyncWithHttpInfo(locationId, locationAreaId, appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationAsyncWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->DeleteLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->DeleteLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>RestApiResultMappedLocation</returns>
        public RestApiResultMappedLocation MapLocationToExternalId (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null)
        {
             ApiResponse<RestApiResultMappedLocation> localVarResponse = MapLocationToExternalIdWithHttpInfo(locationId, locationAreaId, appId, storeId, externalLocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultMappedLocation</returns>
        public ApiResponse< RestApiResultMappedLocation > MapLocationToExternalIdWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->MapLocationToExternalId");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/map-external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (externalLocationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalLocationId", externalLocationId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MapLocationToExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMappedLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMappedLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMappedLocation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>Task of RestApiResultMappedLocation</returns>
        public async System.Threading.Tasks.Task<RestApiResultMappedLocation> MapLocationToExternalIdAsync (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null)
        {
             ApiResponse<RestApiResultMappedLocation> localVarResponse = await MapLocationToExternalIdAsyncWithHttpInfo(locationId, locationAreaId, appId, storeId, externalLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="externalLocationId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultMappedLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMappedLocation>> MapLocationToExternalIdAsyncWithHttpInfo (int? locationId, int? locationAreaId, string appId, int? storeId, string externalLocationId = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->MapLocationToExternalId");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->MapLocationToExternalId");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/map-external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (externalLocationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalLocationId", externalLocationId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MapLocationToExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMappedLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMappedLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMappedLocation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Object</returns>
        public Object MoveLocation (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = MoveLocationWithHttpInfo(locationId, locationAreaId, newLocationAreaId, appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MoveLocationWithHttpInfo (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'newLocationAreaId' is set
            if (newLocationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'newLocationAreaId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->MoveLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (newLocationAreaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newLocationAreaId", newLocationAreaId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MoveLocationAsync (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId)
        {
             ApiResponse<Object> localVarResponse = await MoveLocationAsyncWithHttpInfo(locationId, locationAreaId, newLocationAreaId, appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="newLocationAreaId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MoveLocationAsyncWithHttpInfo (int? locationId, int? locationAreaId, int? newLocationAreaId, string appId, int? storeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'newLocationAreaId' is set
            if (newLocationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'newLocationAreaId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->MoveLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->MoveLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (newLocationAreaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newLocationAreaId", newLocationAreaId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultLocationAreaLocation</returns>
        public RestApiResultLocationAreaLocation UpdateLocation (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId)
        {
             ApiResponse<RestApiResultLocationAreaLocation> localVarResponse = UpdateLocationWithHttpInfo(updateLocationInput, locationAreaId, locationId, appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultLocationAreaLocation</returns>
        public ApiResponse< RestApiResultLocationAreaLocation > UpdateLocationWithHttpInfo (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId)
        {
            // verify the required parameter 'updateLocationInput' is set
            if (updateLocationInput == null)
                throw new ApiException(400, "Missing required parameter 'updateLocationInput' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->UpdateLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (updateLocationInput != null && updateLocationInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateLocationInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateLocationInput; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLocationAreaLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultLocationAreaLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLocationAreaLocation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultLocationAreaLocation</returns>
        public async System.Threading.Tasks.Task<RestApiResultLocationAreaLocation> UpdateLocationAsync (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId)
        {
             ApiResponse<RestApiResultLocationAreaLocation> localVarResponse = await UpdateLocationAsyncWithHttpInfo(updateLocationInput, locationAreaId, locationId, appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLocationInput"></param>
        /// <param name="locationAreaId"></param>
        /// <param name="locationId"></param>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultLocationAreaLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultLocationAreaLocation>> UpdateLocationAsyncWithHttpInfo (CreateLocation updateLocationInput, int? locationAreaId, int? locationId, string appId, int? storeId)
        {
            // verify the required parameter 'updateLocationInput' is set
            if (updateLocationInput == null)
                throw new ApiException(400, "Missing required parameter 'updateLocationInput' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'locationAreaId' is set
            if (locationAreaId == null)
                throw new ApiException(400, "Missing required parameter 'locationAreaId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LocationApi->UpdateLocation");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling LocationApi->UpdateLocation");

            var localVarPath = "./api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationAreaId != null) localVarPathParams.Add("locationAreaId", this.Configuration.ApiClient.ParameterToString(locationAreaId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (updateLocationInput != null && updateLocationInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateLocationInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateLocationInput; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLocationAreaLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultLocationAreaLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLocationAreaLocation)));
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create store with Store Group identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore CreateStore (int? storeGroupId, StoreCreateBase store);

        /// <summary>
        /// Create store with Store Group identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> CreateStoreWithHttpInfo (int? storeGroupId, StoreCreateBase store);
        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiArrayResultProcessingFeeConfig</returns>
        RestApiArrayResultProcessingFeeConfig GetProcessingFeeConfigsByStoreId (int? storeId, string appNameId = null);

        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultProcessingFeeConfig</returns>
        ApiResponse<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdWithHttpInfo (int? storeId, string appNameId = null);
        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiResultProcessingFeeConfig</returns>
        RestApiResultProcessingFeeConfig GetProcessingFeeConfigsByStoreIdAndPaymentAccountType (int? storeId, string paymentAccountType, string appNameId = null);

        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiResultProcessingFeeConfig</returns>
        ApiResponse<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null);
        /// <summary>
        /// Get store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore GetStoreById (int? storeId);

        /// <summary>
        /// Get store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> GetStoreByIdWithHttpInfo (int? storeId);
        /// <summary>
        /// Get all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        RestApiPaginationResultStore GetStores (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);

        /// <summary>
        /// Get all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        ApiResponse<RestApiPaginationResultStore> GetStoresWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);
        /// <summary>
        /// Update store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore UpdateStore (int? storeId, StoreBase store);

        /// <summary>
        /// Update store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> UpdateStoreWithHttpInfo (int? storeId, StoreBase store);
        /// <summary>
        /// Update store address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>RestApiResultStoreAddress</returns>
        RestApiResultStoreAddress UpdateStoreAddress (int? storeId, StoreAddressBase storeAddress);

        /// <summary>
        /// Update store address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>ApiResponse of RestApiResultStoreAddress</returns>
        ApiResponse<RestApiResultStoreAddress> UpdateStoreAddressWithHttpInfo (int? storeId, StoreAddressBase storeAddress);
        /// <summary>
        /// Update store address coordinates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiResultCoordinates</returns>
        RestApiResultCoordinates UpdateStoreAddressCoordinates (int? storeId, Coordinates coordinates, string appNameId = null);

        /// <summary>
        /// Update store address coordinates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiResultCoordinates</returns>
        ApiResponse<RestApiResultCoordinates> UpdateStoreAddressCoordinatesWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create store with Store Group identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> CreateStoreAsync (int? storeGroupId, StoreCreateBase store);

        /// <summary>
        /// Create store with Store Group identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreAsyncWithHttpInfo (int? storeGroupId, StoreCreateBase store);
        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiArrayResultProcessingFeeConfig</returns>
        System.Threading.Tasks.Task<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAsync (int? storeId, string appNameId = null);

        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultProcessingFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo (int? storeId, string appNameId = null);
        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiResultProcessingFeeConfig</returns>
        System.Threading.Tasks.Task<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync (int? storeId, string paymentAccountType, string appNameId = null);

        /// <summary>
        /// Get processing fee configs by store identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultProcessingFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null);
        /// <summary>
        /// Get store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> GetStoreByIdAsync (int? storeId);

        /// <summary>
        /// Get store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> GetStoreByIdAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// Get all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresAsync (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);

        /// <summary>
        /// Get all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresAsyncWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);
        /// <summary>
        /// Update store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> UpdateStoreAsync (int? storeId, StoreBase store);

        /// <summary>
        /// Update store by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> UpdateStoreAsyncWithHttpInfo (int? storeId, StoreBase store);
        /// <summary>
        /// Update store address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>Task of RestApiResultStoreAddress</returns>
        System.Threading.Tasks.Task<RestApiResultStoreAddress> UpdateStoreAddressAsync (int? storeId, StoreAddressBase storeAddress);

        /// <summary>
        /// Update store address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreAddress>> UpdateStoreAddressAsyncWithHttpInfo (int? storeId, StoreAddressBase storeAddress);
        /// <summary>
        /// Update store address coordinates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiResultCoordinates</returns>
        System.Threading.Tasks.Task<RestApiResultCoordinates> UpdateStoreAddressCoordinatesAsync (int? storeId, Coordinates coordinates, string appNameId = null);

        /// <summary>
        /// Update store address coordinates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultCoordinates)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultCoordinates>> UpdateStoreAddressCoordinatesAsyncWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoresApi : IStoresApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoresApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create store with Store Group identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore CreateStore (int? storeGroupId, StoreCreateBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = CreateStoreWithHttpInfo(storeGroupId, store);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create store with Store Group identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > CreateStoreWithHttpInfo (int? storeGroupId, StoreCreateBase store)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStore");

            var localVarPath = "/api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Create store with Store Group identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> CreateStoreAsync (int? storeGroupId, StoreCreateBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await CreateStoreAsyncWithHttpInfo(storeGroupId, store);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create store with Store Group identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreAsyncWithHttpInfo (int? storeGroupId, StoreCreateBase store)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStore");

            var localVarPath = "/api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiArrayResultProcessingFeeConfig</returns>
        public RestApiArrayResultProcessingFeeConfig GetProcessingFeeConfigsByStoreId (int? storeId, string appNameId = null)
        {
             ApiResponse<RestApiArrayResultProcessingFeeConfig> localVarResponse = GetProcessingFeeConfigsByStoreIdWithHttpInfo(storeId, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultProcessingFeeConfig</returns>
        public ApiResponse< RestApiArrayResultProcessingFeeConfig > GetProcessingFeeConfigsByStoreIdWithHttpInfo (int? storeId, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreId");

            var localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultProcessingFeeConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultProcessingFeeConfig)));
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiArrayResultProcessingFeeConfig</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAsync (int? storeId, string appNameId = null)
        {
             ApiResponse<RestApiArrayResultProcessingFeeConfig> localVarResponse = await GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo(storeId, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultProcessingFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo (int? storeId, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreId");

            var localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultProcessingFeeConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultProcessingFeeConfig)));
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiResultProcessingFeeConfig</returns>
        public RestApiResultProcessingFeeConfig GetProcessingFeeConfigsByStoreIdAndPaymentAccountType (int? storeId, string paymentAccountType, string appNameId = null)
        {
             ApiResponse<RestApiResultProcessingFeeConfig> localVarResponse = GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(storeId, paymentAccountType, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiResultProcessingFeeConfig</returns>
        public ApiResponse< RestApiResultProcessingFeeConfig > GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
                throw new ApiException(400, "Missing required parameter 'paymentAccountType' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");

            var localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (paymentAccountType != null) localVarPathParams.Add("paymentAccountType", Configuration.ApiClient.ParameterToString(paymentAccountType)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreIdAndPaymentAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultProcessingFeeConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultProcessingFeeConfig)));
        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiResultProcessingFeeConfig</returns>
        public async System.Threading.Tasks.Task<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync (int? storeId, string paymentAccountType, string appNameId = null)
        {
             ApiResponse<RestApiResultProcessingFeeConfig> localVarResponse = await GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo(storeId, paymentAccountType, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get processing fee configs by store identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultProcessingFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
                throw new ApiException(400, "Missing required parameter 'paymentAccountType' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");

            var localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (paymentAccountType != null) localVarPathParams.Add("paymentAccountType", Configuration.ApiClient.ParameterToString(paymentAccountType)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreIdAndPaymentAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultProcessingFeeConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultProcessingFeeConfig)));
        }

        /// <summary>
        /// Get store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore GetStoreById (int? storeId)
        {
             ApiResponse<RestApiResultStore> localVarResponse = GetStoreByIdWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > GetStoreByIdWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreById");

            var localVarPath = "/api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Get store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> GetStoreByIdAsync (int? storeId)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await GetStoreByIdAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> GetStoreByIdAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreById");

            var localVarPath = "/api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Get all stores 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        public RestApiPaginationResultStore GetStores (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = GetStoresWithHttpInfo(searchQuery, page, limit, storeGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all stores 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        public ApiResponse< RestApiPaginationResultStore > GetStoresWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {

            var localVarPath = "/api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchQuery != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        /// Get all stores 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresAsync (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = await GetStoresAsyncWithHttpInfo(searchQuery, page, limit, storeGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all stores 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeGroupId">Store Group Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresAsyncWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {

            var localVarPath = "/api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchQuery != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        /// Update store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore UpdateStore (int? storeId, StoreBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = UpdateStoreWithHttpInfo(storeId, store);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > UpdateStoreWithHttpInfo (int? storeId, StoreBase store)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->UpdateStore");

            var localVarPath = "/api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Update store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> UpdateStoreAsync (int? storeId, StoreBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await UpdateStoreAsyncWithHttpInfo(storeId, store);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update store by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Group identifier</param>
        /// <param name="store">Store</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> UpdateStoreAsyncWithHttpInfo (int? storeId, StoreBase store)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->UpdateStore");

            var localVarPath = "/api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        /// Update store address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>RestApiResultStoreAddress</returns>
        public RestApiResultStoreAddress UpdateStoreAddress (int? storeId, StoreAddressBase storeAddress)
        {
             ApiResponse<RestApiResultStoreAddress> localVarResponse = UpdateStoreAddressWithHttpInfo(storeId, storeAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update store address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>ApiResponse of RestApiResultStoreAddress</returns>
        public ApiResponse< RestApiResultStoreAddress > UpdateStoreAddressWithHttpInfo (int? storeId, StoreAddressBase storeAddress)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddress");
            // verify the required parameter 'storeAddress' is set
            if (storeAddress == null)
                throw new ApiException(400, "Missing required parameter 'storeAddress' when calling StoresApi->UpdateStoreAddress");

            var localVarPath = "/api/v1.0/stores/{storeId}/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (storeAddress != null && storeAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeAddress; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreAddress)));
        }

        /// <summary>
        /// Update store address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>Task of RestApiResultStoreAddress</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreAddress> UpdateStoreAddressAsync (int? storeId, StoreAddressBase storeAddress)
        {
             ApiResponse<RestApiResultStoreAddress> localVarResponse = await UpdateStoreAddressAsyncWithHttpInfo(storeId, storeAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update store address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="storeAddress">Store address</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreAddress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreAddress>> UpdateStoreAddressAsyncWithHttpInfo (int? storeId, StoreAddressBase storeAddress)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddress");
            // verify the required parameter 'storeAddress' is set
            if (storeAddress == null)
                throw new ApiException(400, "Missing required parameter 'storeAddress' when calling StoresApi->UpdateStoreAddress");

            var localVarPath = "/api/v1.0/stores/{storeId}/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (storeAddress != null && storeAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeAddress; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreAddress)));
        }

        /// <summary>
        /// Update store address coordinates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>RestApiResultCoordinates</returns>
        public RestApiResultCoordinates UpdateStoreAddressCoordinates (int? storeId, Coordinates coordinates, string appNameId = null)
        {
             ApiResponse<RestApiResultCoordinates> localVarResponse = UpdateStoreAddressCoordinatesWithHttpInfo(storeId, coordinates, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update store address coordinates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>ApiResponse of RestApiResultCoordinates</returns>
        public ApiResponse< RestApiResultCoordinates > UpdateStoreAddressCoordinatesWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressCoordinates");
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling StoresApi->UpdateStoreAddressCoordinates");

            var localVarPath = "/api/v1.0/stores/{storeId}/address/coordinates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter
            if (coordinates != null && coordinates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(coordinates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coordinates; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressCoordinates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCoordinates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCoordinates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCoordinates)));
        }

        /// <summary>
        /// Update store address coordinates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of RestApiResultCoordinates</returns>
        public async System.Threading.Tasks.Task<RestApiResultCoordinates> UpdateStoreAddressCoordinatesAsync (int? storeId, Coordinates coordinates, string appNameId = null)
        {
             ApiResponse<RestApiResultCoordinates> localVarResponse = await UpdateStoreAddressCoordinatesAsyncWithHttpInfo(storeId, coordinates, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update store address coordinates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store identifier</param>
        /// <param name="coordinates">Store address coordinates</param>
        /// <param name="appNameId">App Name Id (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultCoordinates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultCoordinates>> UpdateStoreAddressCoordinatesAsyncWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressCoordinates");
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling StoresApi->UpdateStoreAddressCoordinates");

            var localVarPath = "/api/v1.0/stores/{storeId}/address/coordinates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter
            if (coordinates != null && coordinates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(coordinates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coordinates; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressCoordinates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCoordinates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCoordinates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCoordinates)));
        }

    }
}

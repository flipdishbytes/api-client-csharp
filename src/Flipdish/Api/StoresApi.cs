/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        void ArchiveStore (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArchiveStoreWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        RestApiArrayResultRestApiDefaultResponse AssignMenu (int? storeId, int? menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> AssignMenuWithHttpInfo (int? storeId, int? menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore CloneStore (int? storeId, StoreCloneSettings settings);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> CloneStoreWithHttpInfo (int? storeId, StoreCloneSettings settings);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>RestApiResultServiceCharge</returns>
        RestApiResultServiceCharge ConfigureStoreServiceCharge (int? storeId, ServiceCharge serviceCharge);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>ApiResponse of RestApiResultServiceCharge</returns>
        ApiResponse<RestApiResultServiceCharge> ConfigureStoreServiceChargeWithHttpInfo (int? storeId, ServiceCharge serviceCharge);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>RestApiResultBusinessHoursOverride</returns>
        RestApiResultBusinessHoursOverride CreateBusinessHoursOverrideByStoreId (int? storeId, BusinessHoursOverrideBase businessHoursOverride);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>ApiResponse of RestApiResultBusinessHoursOverride</returns>
        ApiResponse<RestApiResultBusinessHoursOverride> CreateBusinessHoursOverrideByStoreIdWithHttpInfo (int? storeId, BusinessHoursOverrideBase businessHoursOverride);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore CreateStore (int? storeGroupId, StoreCreateBase store);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> CreateStoreWithHttpInfo (int? storeGroupId, StoreCreateBase store);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore CreateStoreInProperty (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> CreateStoreInPropertyWithHttpInfo (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        RestApiArrayResultRestApiDefaultResponse DeleteBusinessHoursOverride (int? storeId, int? businessHoursOverrideId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> DeleteBusinessHoursOverrideWithHttpInfo (int? storeId, int? businessHoursOverrideId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultAssignedBankAccount</returns>
        RestApiResultAssignedBankAccount GetBankAccountForStore (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultAssignedBankAccount</returns>
        ApiResponse<RestApiResultAssignedBankAccount> GetBankAccountForStoreWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>RestApiArrayResultBusinessHoursPeriod</returns>
        RestApiArrayResultBusinessHoursPeriod GetBusinessHours (int? storeId, string deliveryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>ApiResponse of RestApiArrayResultBusinessHoursPeriod</returns>
        ApiResponse<RestApiArrayResultBusinessHoursPeriod> GetBusinessHoursWithHttpInfo (int? storeId, string deliveryType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultBusinessHoursOverride</returns>
        RestApiPaginationResultBusinessHoursOverride GetBusinessHoursOverrideByStoreId (int? storeId, DateTime? after = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultBusinessHoursOverride</returns>
        ApiResponse<RestApiPaginationResultBusinessHoursOverride> GetBusinessHoursOverrideByStoreIdWithHttpInfo (int? storeId, DateTime? after = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>RestApiResultStoreEndOfDayReport</returns>
        RestApiResultStoreEndOfDayReport GetEndOfDayReport (int? storeId, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultStoreEndOfDayReport</returns>
        ApiResponse<RestApiResultStoreEndOfDayReport> GetEndOfDayReportWithHttpInfo (int? storeId, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>RestApiResultPreOrderConfig</returns>
        RestApiResultPreOrderConfig GetPreOrderConfig (int? storeId, string deliveryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>ApiResponse of RestApiResultPreOrderConfig</returns>
        ApiResponse<RestApiResultPreOrderConfig> GetPreOrderConfigWithHttpInfo (int? storeId, string deliveryType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>RestApiArrayResultPreOrderTime</returns>
        RestApiArrayResultPreOrderTime GetPreOrderPreview (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultPreOrderTime</returns>
        ApiResponse<RestApiArrayResultPreOrderTime> GetPreOrderPreviewWithHttpInfo (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiArrayResultProcessingFeeConfig</returns>
        RestApiArrayResultProcessingFeeConfig GetProcessingFeeConfigsByStoreId (int? storeId, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultProcessingFeeConfig</returns>
        ApiResponse<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdWithHttpInfo (int? storeId, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiResultProcessingFeeConfig</returns>
        RestApiResultProcessingFeeConfig GetProcessingFeeConfigsByStoreIdAndPaymentAccountType (int? storeId, string paymentAccountType, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultProcessingFeeConfig</returns>
        ApiResponse<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore GetStoreById (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> GetStoreByIdWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        RestApiArrayResultStoreDeliveryZoneFeeConfig GetStoreDeliveryFeeConfig (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig> GetStoreDeliveryFeeConfigWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>StoreFeeConfig</returns>
        StoreFeeConfig GetStoreFeeConfig (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of StoreFeeConfig</returns>
        ApiResponse<StoreFeeConfig> GetStoreFeeConfigWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreHeader</returns>
        RestApiPaginationResultStoreHeader GetStoreHeadersByAppId (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreHeader</returns>
        ApiResponse<RestApiPaginationResultStoreHeader> GetStoreHeadersByAppIdWithHttpInfo (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultOrderLeadTimes</returns>
        RestApiResultOrderLeadTimes GetStoreLeadTimes (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultOrderLeadTimes</returns>
        ApiResponse<RestApiResultOrderLeadTimes> GetStoreLeadTimesWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultStoreStatistics</returns>
        RestApiArrayResultStoreStatistics GetStoreNetSales (string appId, List<int?> storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultStoreStatistics</returns>
        ApiResponse<RestApiArrayResultStoreStatistics> GetStoreNetSalesWithHttpInfo (string appId, List<int?> storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ServiceCharge</returns>
        ServiceCharge GetStoreServiceCharge (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of ServiceCharge</returns>
        ApiResponse<ServiceCharge> GetStoreServiceChargeWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        RestApiPaginationResultStore GetStores (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        ApiResponse<RestApiPaginationResultStore> GetStoresWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        RestApiPaginationResultStore GetStoresByAppId (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        ApiResponse<RestApiPaginationResultStore> GetStoresByAppIdWithHttpInfo (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreValidationConfig</returns>
        RestApiPaginationResultStoreValidationConfig GetStoresByStoreIdWithValidations (List<int?> storeId, string appId, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreValidationConfig</returns>
        ApiResponse<RestApiPaginationResultStoreValidationConfig> GetStoresByStoreIdWithValidationsWithHttpInfo (List<int?> storeId, string appId, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        void PublishStore (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PublishStoreWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns></returns>
        void PutStoreDeliveryFeeConfig (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutStoreDeliveryFeeConfigWithHttpInfo (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>RestApiResultBusinessHoursPeriod</returns>
        RestApiResultBusinessHoursPeriod SetBusinessHours (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>ApiResponse of RestApiResultBusinessHoursPeriod</returns>
        ApiResponse<RestApiResultBusinessHoursPeriod> SetBusinessHoursWithHttpInfo (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        RestApiArrayResultRestApiDefaultResponse SetPreOrdeEnabled (int? storeId, string deliveryType, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> SetPreOrdeEnabledWithHttpInfo (int? storeId, string deliveryType, bool? enabled);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>RestApiResultOrderLeadTimes</returns>
        RestApiResultOrderLeadTimes SetStoreLeadTimes (int? storeId, LeadTime leadTime);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>ApiResponse of RestApiResultOrderLeadTimes</returns>
        ApiResponse<RestApiResultOrderLeadTimes> SetStoreLeadTimesWithHttpInfo (int? storeId, LeadTime leadTime);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns></returns>
        void SupportedSalesChannelsTypes (string propertyId, int? storeId, List<string> salesChannelTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SupportedSalesChannelsTypesWithHttpInfo (string propertyId, int? storeId, List<string> salesChannelTypes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        void UnpublishStore (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnpublishStoreWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        RestApiArrayResultRestApiDefaultResponse UpdatePreOrderConfig (int? storeId, string deliveryType, PreOrderConfig preOrderConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> UpdatePreOrderConfigWithHttpInfo (int? storeId, string deliveryType, PreOrderConfig preOrderConfig);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>RestApiResultStore</returns>
        RestApiResultStore UpdateStore (int? storeId, StoreBase store);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        ApiResponse<RestApiResultStore> UpdateStoreWithHttpInfo (int? storeId, StoreBase store);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>RestApiResultStoreAddress</returns>
        RestApiResultStoreAddress UpdateStoreAddress (int? storeId, StoreAddressBase storeAddress);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>ApiResponse of RestApiResultStoreAddress</returns>
        ApiResponse<RestApiResultStoreAddress> UpdateStoreAddressWithHttpInfo (int? storeId, StoreAddressBase storeAddress);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiResultCoordinates</returns>
        RestApiResultCoordinates UpdateStoreAddressCoordinates (int? storeId, Coordinates coordinates, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultCoordinates</returns>
        ApiResponse<RestApiResultCoordinates> UpdateStoreAddressCoordinatesWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        Object UpdateStoreAddressForm (int? storeId, StoreAddressForm address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateStoreAddressFormWithHttpInfo (int? storeId, StoreAddressForm address);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArchiveStoreAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveStoreAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> AssignMenuAsync (int? storeId, int? menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> AssignMenuAsyncWithHttpInfo (int? storeId, int? menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> CloneStoreAsync (int? storeId, StoreCloneSettings settings);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CloneStoreAsyncWithHttpInfo (int? storeId, StoreCloneSettings settings);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>Task of RestApiResultServiceCharge</returns>
        System.Threading.Tasks.Task<RestApiResultServiceCharge> ConfigureStoreServiceChargeAsync (int? storeId, ServiceCharge serviceCharge);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>Task of ApiResponse (RestApiResultServiceCharge)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultServiceCharge>> ConfigureStoreServiceChargeAsyncWithHttpInfo (int? storeId, ServiceCharge serviceCharge);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>Task of RestApiResultBusinessHoursOverride</returns>
        System.Threading.Tasks.Task<RestApiResultBusinessHoursOverride> CreateBusinessHoursOverrideByStoreIdAsync (int? storeId, BusinessHoursOverrideBase businessHoursOverride);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>Task of ApiResponse (RestApiResultBusinessHoursOverride)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBusinessHoursOverride>> CreateBusinessHoursOverrideByStoreIdAsyncWithHttpInfo (int? storeId, BusinessHoursOverrideBase businessHoursOverride);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> CreateStoreAsync (int? storeGroupId, StoreCreateBase store);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreAsyncWithHttpInfo (int? storeGroupId, StoreCreateBase store);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> CreateStoreInPropertyAsync (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreInPropertyAsyncWithHttpInfo (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> DeleteBusinessHoursOverrideAsync (int? storeId, int? businessHoursOverrideId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> DeleteBusinessHoursOverrideAsyncWithHttpInfo (int? storeId, int? businessHoursOverrideId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultAssignedBankAccount</returns>
        System.Threading.Tasks.Task<RestApiResultAssignedBankAccount> GetBankAccountForStoreAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultAssignedBankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultAssignedBankAccount>> GetBankAccountForStoreAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of RestApiArrayResultBusinessHoursPeriod</returns>
        System.Threading.Tasks.Task<RestApiArrayResultBusinessHoursPeriod> GetBusinessHoursAsync (int? storeId, string deliveryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultBusinessHoursPeriod)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultBusinessHoursPeriod>> GetBusinessHoursAsyncWithHttpInfo (int? storeId, string deliveryType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultBusinessHoursOverride</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultBusinessHoursOverride> GetBusinessHoursOverrideByStoreIdAsync (int? storeId, DateTime? after = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultBusinessHoursOverride)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultBusinessHoursOverride>> GetBusinessHoursOverrideByStoreIdAsyncWithHttpInfo (int? storeId, DateTime? after = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>Task of RestApiResultStoreEndOfDayReport</returns>
        System.Threading.Tasks.Task<RestApiResultStoreEndOfDayReport> GetEndOfDayReportAsync (int? storeId, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreEndOfDayReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreEndOfDayReport>> GetEndOfDayReportAsyncWithHttpInfo (int? storeId, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of RestApiResultPreOrderConfig</returns>
        System.Threading.Tasks.Task<RestApiResultPreOrderConfig> GetPreOrderConfigAsync (int? storeId, string deliveryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of ApiResponse (RestApiResultPreOrderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultPreOrderConfig>> GetPreOrderConfigAsyncWithHttpInfo (int? storeId, string deliveryType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>Task of RestApiArrayResultPreOrderTime</returns>
        System.Threading.Tasks.Task<RestApiArrayResultPreOrderTime> GetPreOrderPreviewAsync (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultPreOrderTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultPreOrderTime>> GetPreOrderPreviewAsyncWithHttpInfo (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiArrayResultProcessingFeeConfig</returns>
        System.Threading.Tasks.Task<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAsync (int? storeId, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultProcessingFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo (int? storeId, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiResultProcessingFeeConfig</returns>
        System.Threading.Tasks.Task<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync (int? storeId, string paymentAccountType, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultProcessingFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> GetStoreByIdAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> GetStoreByIdAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        System.Threading.Tasks.Task<RestApiArrayResultStoreDeliveryZoneFeeConfig> GetStoreDeliveryFeeConfigAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreDeliveryZoneFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig>> GetStoreDeliveryFeeConfigAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of StoreFeeConfig</returns>
        System.Threading.Tasks.Task<StoreFeeConfig> GetStoreFeeConfigAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (StoreFeeConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoreFeeConfig>> GetStoreFeeConfigAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreHeader</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStoreHeader> GetStoreHeadersByAppIdAsync (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreHeader>> GetStoreHeadersByAppIdAsyncWithHttpInfo (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultOrderLeadTimes</returns>
        System.Threading.Tasks.Task<RestApiResultOrderLeadTimes> GetStoreLeadTimesAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOrderLeadTimes)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOrderLeadTimes>> GetStoreLeadTimesAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultStoreStatistics</returns>
        System.Threading.Tasks.Task<RestApiArrayResultStoreStatistics> GetStoreNetSalesAsync (string appId, List<int?> storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreStatistics>> GetStoreNetSalesAsyncWithHttpInfo (string appId, List<int?> storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ServiceCharge</returns>
        System.Threading.Tasks.Task<ServiceCharge> GetStoreServiceChargeAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (ServiceCharge)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceCharge>> GetStoreServiceChargeAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresAsync (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresAsyncWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresByAppIdAsync (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresByAppIdAsyncWithHttpInfo (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreValidationConfig</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStoreValidationConfig> GetStoresByStoreIdWithValidationsAsync (List<int?> storeId, string appId, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreValidationConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreValidationConfig>> GetStoresByStoreIdWithValidationsAsyncWithHttpInfo (List<int?> storeId, string appId, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PublishStoreAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PublishStoreAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutStoreDeliveryFeeConfigAsync (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutStoreDeliveryFeeConfigAsyncWithHttpInfo (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of RestApiResultBusinessHoursPeriod</returns>
        System.Threading.Tasks.Task<RestApiResultBusinessHoursPeriod> SetBusinessHoursAsync (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of ApiResponse (RestApiResultBusinessHoursPeriod)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBusinessHoursPeriod>> SetBusinessHoursAsyncWithHttpInfo (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> SetPreOrdeEnabledAsync (int? storeId, string deliveryType, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> SetPreOrdeEnabledAsyncWithHttpInfo (int? storeId, string deliveryType, bool? enabled);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>Task of RestApiResultOrderLeadTimes</returns>
        System.Threading.Tasks.Task<RestApiResultOrderLeadTimes> SetStoreLeadTimesAsync (int? storeId, LeadTime leadTime);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>Task of ApiResponse (RestApiResultOrderLeadTimes)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOrderLeadTimes>> SetStoreLeadTimesAsyncWithHttpInfo (int? storeId, LeadTime leadTime);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SupportedSalesChannelsTypesAsync (string propertyId, int? storeId, List<string> salesChannelTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SupportedSalesChannelsTypesAsyncWithHttpInfo (string propertyId, int? storeId, List<string> salesChannelTypes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnpublishStoreAsync (int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnpublishStoreAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> UpdatePreOrderConfigAsync (int? storeId, string deliveryType, PreOrderConfig preOrderConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> UpdatePreOrderConfigAsyncWithHttpInfo (int? storeId, string deliveryType, PreOrderConfig preOrderConfig);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>Task of RestApiResultStore</returns>
        System.Threading.Tasks.Task<RestApiResultStore> UpdateStoreAsync (int? storeId, StoreBase store);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> UpdateStoreAsyncWithHttpInfo (int? storeId, StoreBase store);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>Task of RestApiResultStoreAddress</returns>
        System.Threading.Tasks.Task<RestApiResultStoreAddress> UpdateStoreAddressAsync (int? storeId, StoreAddressBase storeAddress);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>Task of ApiResponse (RestApiResultStoreAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreAddress>> UpdateStoreAddressAsyncWithHttpInfo (int? storeId, StoreAddressBase storeAddress);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiResultCoordinates</returns>
        System.Threading.Tasks.Task<RestApiResultCoordinates> UpdateStoreAddressCoordinatesAsync (int? storeId, Coordinates coordinates, string appNameId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultCoordinates)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultCoordinates>> UpdateStoreAddressCoordinatesAsyncWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateStoreAddressFormAsync (int? storeId, StoreAddressForm address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStoreAddressFormAsyncWithHttpInfo (int? storeId, StoreAddressForm address);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoresApi : IStoresApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoresApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public void ArchiveStore (int? storeId)
        {
             ArchiveStoreWithHttpInfo(storeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArchiveStoreWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->ArchiveStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArchiveStoreAsync (int? storeId)
        {
             await ArchiveStoreAsyncWithHttpInfo(storeId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveStoreAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->ArchiveStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        public RestApiArrayResultRestApiDefaultResponse AssignMenu (int? storeId, int? menuId)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = AssignMenuWithHttpInfo(storeId, menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        public ApiResponse< RestApiArrayResultRestApiDefaultResponse > AssignMenuWithHttpInfo (int? storeId, int? menuId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->AssignMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling StoresApi->AssignMenu");

            var localVarPath = "./api/v1.0/stores/{storeId}/menu/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> AssignMenuAsync (int? storeId, int? menuId)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = await AssignMenuAsyncWithHttpInfo(storeId, menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> AssignMenuAsyncWithHttpInfo (int? storeId, int? menuId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->AssignMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling StoresApi->AssignMenu");

            var localVarPath = "./api/v1.0/stores/{storeId}/menu/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore CloneStore (int? storeId, StoreCloneSettings settings)
        {
             ApiResponse<RestApiResultStore> localVarResponse = CloneStoreWithHttpInfo(storeId, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > CloneStoreWithHttpInfo (int? storeId, StoreCloneSettings settings)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CloneStore");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StoresApi->CloneStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> CloneStoreAsync (int? storeId, StoreCloneSettings settings)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await CloneStoreAsyncWithHttpInfo(storeId, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CloneStoreAsyncWithHttpInfo (int? storeId, StoreCloneSettings settings)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CloneStore");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StoresApi->CloneStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>RestApiResultServiceCharge</returns>
        public RestApiResultServiceCharge ConfigureStoreServiceCharge (int? storeId, ServiceCharge serviceCharge)
        {
             ApiResponse<RestApiResultServiceCharge> localVarResponse = ConfigureStoreServiceChargeWithHttpInfo(storeId, serviceCharge);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>ApiResponse of RestApiResultServiceCharge</returns>
        public ApiResponse< RestApiResultServiceCharge > ConfigureStoreServiceChargeWithHttpInfo (int? storeId, ServiceCharge serviceCharge)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->ConfigureStoreServiceCharge");
            // verify the required parameter 'serviceCharge' is set
            if (serviceCharge == null)
                throw new ApiException(400, "Missing required parameter 'serviceCharge' when calling StoresApi->ConfigureStoreServiceCharge");

            var localVarPath = "./api/v1.0/stores/{storeId}/servicecharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceCharge != null && serviceCharge.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(serviceCharge); // http body (model) parameter
            }
            else
            {
                localVarPostBody = serviceCharge; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureStoreServiceCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultServiceCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultServiceCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultServiceCharge)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>Task of RestApiResultServiceCharge</returns>
        public async System.Threading.Tasks.Task<RestApiResultServiceCharge> ConfigureStoreServiceChargeAsync (int? storeId, ServiceCharge serviceCharge)
        {
             ApiResponse<RestApiResultServiceCharge> localVarResponse = await ConfigureStoreServiceChargeAsyncWithHttpInfo(storeId, serviceCharge);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="serviceCharge"></param>
        /// <returns>Task of ApiResponse (RestApiResultServiceCharge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultServiceCharge>> ConfigureStoreServiceChargeAsyncWithHttpInfo (int? storeId, ServiceCharge serviceCharge)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->ConfigureStoreServiceCharge");
            // verify the required parameter 'serviceCharge' is set
            if (serviceCharge == null)
                throw new ApiException(400, "Missing required parameter 'serviceCharge' when calling StoresApi->ConfigureStoreServiceCharge");

            var localVarPath = "./api/v1.0/stores/{storeId}/servicecharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceCharge != null && serviceCharge.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(serviceCharge); // http body (model) parameter
            }
            else
            {
                localVarPostBody = serviceCharge; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureStoreServiceCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultServiceCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultServiceCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultServiceCharge)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>RestApiResultBusinessHoursOverride</returns>
        public RestApiResultBusinessHoursOverride CreateBusinessHoursOverrideByStoreId (int? storeId, BusinessHoursOverrideBase businessHoursOverride)
        {
             ApiResponse<RestApiResultBusinessHoursOverride> localVarResponse = CreateBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, businessHoursOverride);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>ApiResponse of RestApiResultBusinessHoursOverride</returns>
        public ApiResponse< RestApiResultBusinessHoursOverride > CreateBusinessHoursOverrideByStoreIdWithHttpInfo (int? storeId, BusinessHoursOverrideBase businessHoursOverride)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CreateBusinessHoursOverrideByStoreId");
            // verify the required parameter 'businessHoursOverride' is set
            if (businessHoursOverride == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursOverride' when calling StoresApi->CreateBusinessHoursOverrideByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (businessHoursOverride != null && businessHoursOverride.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursOverride); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursOverride; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessHoursOverrideByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBusinessHoursOverride>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultBusinessHoursOverride) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBusinessHoursOverride)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>Task of RestApiResultBusinessHoursOverride</returns>
        public async System.Threading.Tasks.Task<RestApiResultBusinessHoursOverride> CreateBusinessHoursOverrideByStoreIdAsync (int? storeId, BusinessHoursOverrideBase businessHoursOverride)
        {
             ApiResponse<RestApiResultBusinessHoursOverride> localVarResponse = await CreateBusinessHoursOverrideByStoreIdAsyncWithHttpInfo(storeId, businessHoursOverride);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverride"></param>
        /// <returns>Task of ApiResponse (RestApiResultBusinessHoursOverride)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBusinessHoursOverride>> CreateBusinessHoursOverrideByStoreIdAsyncWithHttpInfo (int? storeId, BusinessHoursOverrideBase businessHoursOverride)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CreateBusinessHoursOverrideByStoreId");
            // verify the required parameter 'businessHoursOverride' is set
            if (businessHoursOverride == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursOverride' when calling StoresApi->CreateBusinessHoursOverrideByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (businessHoursOverride != null && businessHoursOverride.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursOverride); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursOverride; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessHoursOverrideByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBusinessHoursOverride>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultBusinessHoursOverride) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBusinessHoursOverride)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore CreateStore (int? storeGroupId, StoreCreateBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = CreateStoreWithHttpInfo(storeGroupId, store);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > CreateStoreWithHttpInfo (int? storeGroupId, StoreCreateBase store)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStore");

            var localVarPath = "./api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> CreateStoreAsync (int? storeGroupId, StoreCreateBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await CreateStoreAsyncWithHttpInfo(storeGroupId, store);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="store"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreAsyncWithHttpInfo (int? storeGroupId, StoreCreateBase store)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStore");

            var localVarPath = "./api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore CreateStoreInProperty (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null)
        {
             ApiResponse<RestApiResultStore> localVarResponse = CreateStoreInPropertyWithHttpInfo(storeGroupId, propertyId, store, autoAssignMenu);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > CreateStoreInPropertyWithHttpInfo (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStoreInProperty");
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling StoresApi->CreateStoreInProperty");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStoreInProperty");

            var localVarPath = "./api/v1.0/properties/{propertyId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (autoAssignMenu != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoAssignMenu", autoAssignMenu)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreInProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> CreateStoreInPropertyAsync (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await CreateStoreInPropertyAsyncWithHttpInfo(storeGroupId, propertyId, store, autoAssignMenu);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId"></param>
        /// <param name="propertyId"></param>
        /// <param name="store"></param>
        /// <param name="autoAssignMenu"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> CreateStoreInPropertyAsyncWithHttpInfo (int? storeGroupId, string propertyId, StoreCreateBase store, bool? autoAssignMenu = null)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoresApi->CreateStoreInProperty");
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling StoresApi->CreateStoreInProperty");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->CreateStoreInProperty");

            var localVarPath = "./api/v1.0/properties/{propertyId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (autoAssignMenu != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoAssignMenu", autoAssignMenu)); // query parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreInProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        public RestApiArrayResultRestApiDefaultResponse DeleteBusinessHoursOverride (int? storeId, int? businessHoursOverrideId)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = DeleteBusinessHoursOverrideWithHttpInfo(storeId, businessHoursOverrideId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        public ApiResponse< RestApiArrayResultRestApiDefaultResponse > DeleteBusinessHoursOverrideWithHttpInfo (int? storeId, int? businessHoursOverrideId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->DeleteBusinessHoursOverride");
            // verify the required parameter 'businessHoursOverrideId' is set
            if (businessHoursOverrideId == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursOverrideId' when calling StoresApi->DeleteBusinessHoursOverride");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (businessHoursOverrideId != null) localVarPathParams.Add("businessHoursOverrideId", this.Configuration.ApiClient.ParameterToString(businessHoursOverrideId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessHoursOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> DeleteBusinessHoursOverrideAsync (int? storeId, int? businessHoursOverrideId)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = await DeleteBusinessHoursOverrideAsyncWithHttpInfo(storeId, businessHoursOverrideId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="businessHoursOverrideId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> DeleteBusinessHoursOverrideAsyncWithHttpInfo (int? storeId, int? businessHoursOverrideId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->DeleteBusinessHoursOverride");
            // verify the required parameter 'businessHoursOverrideId' is set
            if (businessHoursOverrideId == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursOverrideId' when calling StoresApi->DeleteBusinessHoursOverride");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (businessHoursOverrideId != null) localVarPathParams.Add("businessHoursOverrideId", this.Configuration.ApiClient.ParameterToString(businessHoursOverrideId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessHoursOverride", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultAssignedBankAccount</returns>
        public RestApiResultAssignedBankAccount GetBankAccountForStore (int? storeId)
        {
             ApiResponse<RestApiResultAssignedBankAccount> localVarResponse = GetBankAccountForStoreWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultAssignedBankAccount</returns>
        public ApiResponse< RestApiResultAssignedBankAccount > GetBankAccountForStoreWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBankAccountForStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/bankaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAssignedBankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAssignedBankAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAssignedBankAccount)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultAssignedBankAccount</returns>
        public async System.Threading.Tasks.Task<RestApiResultAssignedBankAccount> GetBankAccountForStoreAsync (int? storeId)
        {
             ApiResponse<RestApiResultAssignedBankAccount> localVarResponse = await GetBankAccountForStoreAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultAssignedBankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultAssignedBankAccount>> GetBankAccountForStoreAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBankAccountForStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/bankaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAssignedBankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAssignedBankAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAssignedBankAccount)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>RestApiArrayResultBusinessHoursPeriod</returns>
        public RestApiArrayResultBusinessHoursPeriod GetBusinessHours (int? storeId, string deliveryType)
        {
             ApiResponse<RestApiArrayResultBusinessHoursPeriod> localVarResponse = GetBusinessHoursWithHttpInfo(storeId, deliveryType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>ApiResponse of RestApiArrayResultBusinessHoursPeriod</returns>
        public ApiResponse< RestApiArrayResultBusinessHoursPeriod > GetBusinessHoursWithHttpInfo (int? storeId, string deliveryType)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBusinessHours");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetBusinessHours");

            var localVarPath = "./api/v1.0/stores/{storeId}/availability/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultBusinessHoursPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultBusinessHoursPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultBusinessHoursPeriod)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of RestApiArrayResultBusinessHoursPeriod</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultBusinessHoursPeriod> GetBusinessHoursAsync (int? storeId, string deliveryType)
        {
             ApiResponse<RestApiArrayResultBusinessHoursPeriod> localVarResponse = await GetBusinessHoursAsyncWithHttpInfo(storeId, deliveryType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultBusinessHoursPeriod)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultBusinessHoursPeriod>> GetBusinessHoursAsyncWithHttpInfo (int? storeId, string deliveryType)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBusinessHours");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetBusinessHours");

            var localVarPath = "./api/v1.0/stores/{storeId}/availability/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultBusinessHoursPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultBusinessHoursPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultBusinessHoursPeriod)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultBusinessHoursOverride</returns>
        public RestApiPaginationResultBusinessHoursOverride GetBusinessHoursOverrideByStoreId (int? storeId, DateTime? after = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultBusinessHoursOverride> localVarResponse = GetBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, after, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultBusinessHoursOverride</returns>
        public ApiResponse< RestApiPaginationResultBusinessHoursOverride > GetBusinessHoursOverrideByStoreIdWithHttpInfo (int? storeId, DateTime? after = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBusinessHoursOverrideByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHoursOverrideByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultBusinessHoursOverride>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultBusinessHoursOverride) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultBusinessHoursOverride)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultBusinessHoursOverride</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultBusinessHoursOverride> GetBusinessHoursOverrideByStoreIdAsync (int? storeId, DateTime? after = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultBusinessHoursOverride> localVarResponse = await GetBusinessHoursOverrideByStoreIdAsyncWithHttpInfo(storeId, after, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="after"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultBusinessHoursOverride)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultBusinessHoursOverride>> GetBusinessHoursOverrideByStoreIdAsyncWithHttpInfo (int? storeId, DateTime? after = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetBusinessHoursOverrideByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/businesshoursoverrides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHoursOverrideByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultBusinessHoursOverride>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultBusinessHoursOverride) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultBusinessHoursOverride)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>RestApiResultStoreEndOfDayReport</returns>
        public RestApiResultStoreEndOfDayReport GetEndOfDayReport (int? storeId, DateTime? date = null)
        {
             ApiResponse<RestApiResultStoreEndOfDayReport> localVarResponse = GetEndOfDayReportWithHttpInfo(storeId, date);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultStoreEndOfDayReport</returns>
        public ApiResponse< RestApiResultStoreEndOfDayReport > GetEndOfDayReportWithHttpInfo (int? storeId, DateTime? date = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetEndOfDayReport");

            var localVarPath = "./api/v1.0/stores/{storeId}/endofdayreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEndOfDayReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreEndOfDayReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStoreEndOfDayReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreEndOfDayReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>Task of RestApiResultStoreEndOfDayReport</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreEndOfDayReport> GetEndOfDayReportAsync (int? storeId, DateTime? date = null)
        {
             ApiResponse<RestApiResultStoreEndOfDayReport> localVarResponse = await GetEndOfDayReportAsyncWithHttpInfo(storeId, date);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreEndOfDayReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreEndOfDayReport>> GetEndOfDayReportAsyncWithHttpInfo (int? storeId, DateTime? date = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetEndOfDayReport");

            var localVarPath = "./api/v1.0/stores/{storeId}/endofdayreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEndOfDayReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreEndOfDayReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStoreEndOfDayReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreEndOfDayReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>RestApiResultPreOrderConfig</returns>
        public RestApiResultPreOrderConfig GetPreOrderConfig (int? storeId, string deliveryType)
        {
             ApiResponse<RestApiResultPreOrderConfig> localVarResponse = GetPreOrderConfigWithHttpInfo(storeId, deliveryType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>ApiResponse of RestApiResultPreOrderConfig</returns>
        public ApiResponse< RestApiResultPreOrderConfig > GetPreOrderConfigWithHttpInfo (int? storeId, string deliveryType)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetPreOrderConfig");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetPreOrderConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreOrderConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPreOrderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPreOrderConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPreOrderConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of RestApiResultPreOrderConfig</returns>
        public async System.Threading.Tasks.Task<RestApiResultPreOrderConfig> GetPreOrderConfigAsync (int? storeId, string deliveryType)
        {
             ApiResponse<RestApiResultPreOrderConfig> localVarResponse = await GetPreOrderConfigAsyncWithHttpInfo(storeId, deliveryType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <returns>Task of ApiResponse (RestApiResultPreOrderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultPreOrderConfig>> GetPreOrderConfigAsyncWithHttpInfo (int? storeId, string deliveryType)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetPreOrderConfig");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetPreOrderConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreOrderConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPreOrderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPreOrderConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPreOrderConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>RestApiArrayResultPreOrderTime</returns>
        public RestApiArrayResultPreOrderTime GetPreOrderPreview (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null)
        {
             ApiResponse<RestApiArrayResultPreOrderTime> localVarResponse = GetPreOrderPreviewWithHttpInfo(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultPreOrderTime</returns>
        public ApiResponse< RestApiArrayResultPreOrderTime > GetPreOrderPreviewWithHttpInfo (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetPreOrderPreview");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetPreOrderPreview");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (preOrderConfigLeadTimeMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.leadTimeMinutes", preOrderConfigLeadTimeMinutes)); // query parameter
            if (preOrderConfigIntervalMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.intervalMinutes", preOrderConfigIntervalMinutes)); // query parameter
            if (preOrderConfigMaxOrderAheadDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.maxOrderAheadDays", preOrderConfigMaxOrderAheadDays)); // query parameter
            if (preOrderConfigIncludeAsap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.includeAsap", preOrderConfigIncludeAsap)); // query parameter
            if (preOrderConfigIncludeMoreGranularInitialTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.includeMoreGranularInitialTime", preOrderConfigIncludeMoreGranularInitialTime)); // query parameter
            if (preOrderConfigCutOffTimePreviousDayBasic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.cutOffTimePreviousDayBasic", preOrderConfigCutOffTimePreviousDayBasic)); // query parameter
            if (preOrderConfigCutOffTimeCurrentDayBasic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.cutOffTimeCurrentDayBasic", preOrderConfigCutOffTimeCurrentDayBasic)); // query parameter
            if (preOrderConfigPreOrderTimeDisplayType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.preOrderTimeDisplayType", preOrderConfigPreOrderTimeDisplayType)); // query parameter
            if (preOrderConfigAlwaysAppearOpen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.alwaysAppearOpen", preOrderConfigAlwaysAppearOpen)); // query parameter
            if (preOrderConfigRequireExplicitSelectAlways != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.requireExplicitSelectAlways", preOrderConfigRequireExplicitSelectAlways)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreOrderPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultPreOrderTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultPreOrderTime) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultPreOrderTime)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>Task of RestApiArrayResultPreOrderTime</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultPreOrderTime> GetPreOrderPreviewAsync (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null)
        {
             ApiResponse<RestApiArrayResultPreOrderTime> localVarResponse = await GetPreOrderPreviewAsyncWithHttpInfo(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfigLeadTimeMinutes">Lead Time in Minutes (optional)</param>
        /// <param name="preOrderConfigIntervalMinutes">Interval in minutes (optional)</param>
        /// <param name="preOrderConfigMaxOrderAheadDays">Max Days to order ahead (optional)</param>
        /// <param name="preOrderConfigIncludeAsap">Show ASAP as option (optional)</param>
        /// <param name="preOrderConfigIncludeMoreGranularInitialTime">Granual Init&#39; Time (optional)</param>
        /// <param name="preOrderConfigCutOffTimePreviousDayBasic">Cut off time previous day (optional)</param>
        /// <param name="preOrderConfigCutOffTimeCurrentDayBasic">Cut off time current day (optional)</param>
        /// <param name="preOrderConfigPreOrderTimeDisplayType">Type of time displayed. (optional)</param>
        /// <param name="preOrderConfigAlwaysAppearOpen">Specifies whether a customer can pre-order outside the store opening hours or not. (optional)</param>
        /// <param name="preOrderConfigRequireExplicitSelectAlways">Force customer to select collection time. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultPreOrderTime)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultPreOrderTime>> GetPreOrderPreviewAsyncWithHttpInfo (int? storeId, string deliveryType, int? preOrderConfigLeadTimeMinutes = null, int? preOrderConfigIntervalMinutes = null, int? preOrderConfigMaxOrderAheadDays = null, bool? preOrderConfigIncludeAsap = null, bool? preOrderConfigIncludeMoreGranularInitialTime = null, string preOrderConfigCutOffTimePreviousDayBasic = null, string preOrderConfigCutOffTimeCurrentDayBasic = null, string preOrderConfigPreOrderTimeDisplayType = null, bool? preOrderConfigAlwaysAppearOpen = null, bool? preOrderConfigRequireExplicitSelectAlways = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetPreOrderPreview");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->GetPreOrderPreview");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (preOrderConfigLeadTimeMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.leadTimeMinutes", preOrderConfigLeadTimeMinutes)); // query parameter
            if (preOrderConfigIntervalMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.intervalMinutes", preOrderConfigIntervalMinutes)); // query parameter
            if (preOrderConfigMaxOrderAheadDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.maxOrderAheadDays", preOrderConfigMaxOrderAheadDays)); // query parameter
            if (preOrderConfigIncludeAsap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.includeAsap", preOrderConfigIncludeAsap)); // query parameter
            if (preOrderConfigIncludeMoreGranularInitialTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.includeMoreGranularInitialTime", preOrderConfigIncludeMoreGranularInitialTime)); // query parameter
            if (preOrderConfigCutOffTimePreviousDayBasic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.cutOffTimePreviousDayBasic", preOrderConfigCutOffTimePreviousDayBasic)); // query parameter
            if (preOrderConfigCutOffTimeCurrentDayBasic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.cutOffTimeCurrentDayBasic", preOrderConfigCutOffTimeCurrentDayBasic)); // query parameter
            if (preOrderConfigPreOrderTimeDisplayType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.preOrderTimeDisplayType", preOrderConfigPreOrderTimeDisplayType)); // query parameter
            if (preOrderConfigAlwaysAppearOpen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.alwaysAppearOpen", preOrderConfigAlwaysAppearOpen)); // query parameter
            if (preOrderConfigRequireExplicitSelectAlways != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preOrderConfig.requireExplicitSelectAlways", preOrderConfigRequireExplicitSelectAlways)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreOrderPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultPreOrderTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultPreOrderTime) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultPreOrderTime)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiArrayResultProcessingFeeConfig</returns>
        public RestApiArrayResultProcessingFeeConfig GetProcessingFeeConfigsByStoreId (int? storeId, string appNameId = null)
        {
             ApiResponse<RestApiArrayResultProcessingFeeConfig> localVarResponse = GetProcessingFeeConfigsByStoreIdWithHttpInfo(storeId, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultProcessingFeeConfig</returns>
        public ApiResponse< RestApiArrayResultProcessingFeeConfig > GetProcessingFeeConfigsByStoreIdWithHttpInfo (int? storeId, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/processingfeeconfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultProcessingFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultProcessingFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiArrayResultProcessingFeeConfig</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAsync (int? storeId, string appNameId = null)
        {
             ApiResponse<RestApiArrayResultProcessingFeeConfig> localVarResponse = await GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo(storeId, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultProcessingFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAsyncWithHttpInfo (int? storeId, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreId");

            var localVarPath = "./api/v1.0/stores/{storeId}/processingfeeconfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultProcessingFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultProcessingFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiResultProcessingFeeConfig</returns>
        public RestApiResultProcessingFeeConfig GetProcessingFeeConfigsByStoreIdAndPaymentAccountType (int? storeId, string paymentAccountType, string appNameId = null)
        {
             ApiResponse<RestApiResultProcessingFeeConfig> localVarResponse = GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(storeId, paymentAccountType, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultProcessingFeeConfig</returns>
        public ApiResponse< RestApiResultProcessingFeeConfig > GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
                throw new ApiException(400, "Missing required parameter 'paymentAccountType' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");

            var localVarPath = "./api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (paymentAccountType != null) localVarPathParams.Add("paymentAccountType", this.Configuration.ApiClient.ParameterToString(paymentAccountType)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreIdAndPaymentAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultProcessingFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultProcessingFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiResultProcessingFeeConfig</returns>
        public async System.Threading.Tasks.Task<RestApiResultProcessingFeeConfig> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync (int? storeId, string paymentAccountType, string appNameId = null)
        {
             ApiResponse<RestApiResultProcessingFeeConfig> localVarResponse = await GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo(storeId, paymentAccountType, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultProcessingFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultProcessingFeeConfig>> GetProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo (int? storeId, string paymentAccountType, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
                throw new ApiException(400, "Missing required parameter 'paymentAccountType' when calling StoresApi->GetProcessingFeeConfigsByStoreIdAndPaymentAccountType");

            var localVarPath = "./api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (paymentAccountType != null) localVarPathParams.Add("paymentAccountType", this.Configuration.ApiClient.ParameterToString(paymentAccountType)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessingFeeConfigsByStoreIdAndPaymentAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultProcessingFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultProcessingFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultProcessingFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore GetStoreById (int? storeId)
        {
             ApiResponse<RestApiResultStore> localVarResponse = GetStoreByIdWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > GetStoreByIdWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreById");

            var localVarPath = "./api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> GetStoreByIdAsync (int? storeId)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await GetStoreByIdAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> GetStoreByIdAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreById");

            var localVarPath = "./api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        public RestApiArrayResultStoreDeliveryZoneFeeConfig GetStoreDeliveryFeeConfig (int? storeId)
        {
             ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig> localVarResponse = GetStoreDeliveryFeeConfigWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        public ApiResponse< RestApiArrayResultStoreDeliveryZoneFeeConfig > GetStoreDeliveryFeeConfigWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreDeliveryFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig/deliveryZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreDeliveryFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultStoreDeliveryZoneFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreDeliveryZoneFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultStoreDeliveryZoneFeeConfig</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultStoreDeliveryZoneFeeConfig> GetStoreDeliveryFeeConfigAsync (int? storeId)
        {
             ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig> localVarResponse = await GetStoreDeliveryFeeConfigAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreDeliveryZoneFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig>> GetStoreDeliveryFeeConfigAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreDeliveryFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig/deliveryZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreDeliveryFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreDeliveryZoneFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultStoreDeliveryZoneFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreDeliveryZoneFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>StoreFeeConfig</returns>
        public StoreFeeConfig GetStoreFeeConfig (int? storeId)
        {
             ApiResponse<StoreFeeConfig> localVarResponse = GetStoreFeeConfigWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of StoreFeeConfig</returns>
        public ApiResponse< StoreFeeConfig > GetStoreFeeConfigWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StoreFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of StoreFeeConfig</returns>
        public async System.Threading.Tasks.Task<StoreFeeConfig> GetStoreFeeConfigAsync (int? storeId)
        {
             ApiResponse<StoreFeeConfig> localVarResponse = await GetStoreFeeConfigAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (StoreFeeConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoreFeeConfig>> GetStoreFeeConfigAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreFeeConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StoreFeeConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreFeeConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreHeader</returns>
        public RestApiPaginationResultStoreHeader GetStoreHeadersByAppId (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreHeader> localVarResponse = GetStoreHeadersByAppIdWithHttpInfo(appId, storeNameQuery, salesChannelType, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreHeader</returns>
        public ApiResponse< RestApiPaginationResultStoreHeader > GetStoreHeadersByAppIdWithHttpInfo (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoreHeadersByAppId");

            var localVarPath = "./api/v1.0/{appId}/stores/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeNameQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeNameQuery", storeNameQuery)); // query parameter
            if (salesChannelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "salesChannelType", salesChannelType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreHeadersByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStoreHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreHeader)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreHeader</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStoreHeader> GetStoreHeadersByAppIdAsync (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreHeader> localVarResponse = await GetStoreHeadersByAppIdAsyncWithHttpInfo(appId, storeNameQuery, salesChannelType, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeNameQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreHeader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreHeader>> GetStoreHeadersByAppIdAsyncWithHttpInfo (string appId, string storeNameQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoreHeadersByAppId");

            var localVarPath = "./api/v1.0/{appId}/stores/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeNameQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeNameQuery", storeNameQuery)); // query parameter
            if (salesChannelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "salesChannelType", salesChannelType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreHeadersByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStoreHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreHeader)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultOrderLeadTimes</returns>
        public RestApiResultOrderLeadTimes GetStoreLeadTimes (int? storeId)
        {
             ApiResponse<RestApiResultOrderLeadTimes> localVarResponse = GetStoreLeadTimesWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultOrderLeadTimes</returns>
        public ApiResponse< RestApiResultOrderLeadTimes > GetStoreLeadTimesWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreLeadTimes");

            var localVarPath = "./api/v1.0/stores/{storeId}/leadTimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreLeadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOrderLeadTimes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultOrderLeadTimes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOrderLeadTimes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultOrderLeadTimes</returns>
        public async System.Threading.Tasks.Task<RestApiResultOrderLeadTimes> GetStoreLeadTimesAsync (int? storeId)
        {
             ApiResponse<RestApiResultOrderLeadTimes> localVarResponse = await GetStoreLeadTimesAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOrderLeadTimes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOrderLeadTimes>> GetStoreLeadTimesAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreLeadTimes");

            var localVarPath = "./api/v1.0/stores/{storeId}/leadTimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreLeadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOrderLeadTimes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultOrderLeadTimes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOrderLeadTimes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultStoreStatistics</returns>
        public RestApiArrayResultStoreStatistics GetStoreNetSales (string appId, List<int?> storeId)
        {
             ApiResponse<RestApiArrayResultStoreStatistics> localVarResponse = GetStoreNetSalesWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultStoreStatistics</returns>
        public ApiResponse< RestApiArrayResultStoreStatistics > GetStoreNetSalesWithHttpInfo (string appId, List<int?> storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoreNetSales");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreNetSales");

            var localVarPath = "./api/v1.0/{appId}/stores/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreNetSales", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultStoreStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreStatistics)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultStoreStatistics</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultStoreStatistics> GetStoreNetSalesAsync (string appId, List<int?> storeId)
        {
             ApiResponse<RestApiArrayResultStoreStatistics> localVarResponse = await GetStoreNetSalesAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreStatistics>> GetStoreNetSalesAsyncWithHttpInfo (string appId, List<int?> storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoreNetSales");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreNetSales");

            var localVarPath = "./api/v1.0/{appId}/stores/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreNetSales", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultStoreStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreStatistics)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ServiceCharge</returns>
        public ServiceCharge GetStoreServiceCharge (int? storeId)
        {
             ApiResponse<ServiceCharge> localVarResponse = GetStoreServiceChargeWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of ServiceCharge</returns>
        public ApiResponse< ServiceCharge > GetStoreServiceChargeWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreServiceCharge");

            var localVarPath = "./api/v1.0/stores/{storeId}/servicecharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreServiceCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ServiceCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceCharge)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ServiceCharge</returns>
        public async System.Threading.Tasks.Task<ServiceCharge> GetStoreServiceChargeAsync (int? storeId)
        {
             ApiResponse<ServiceCharge> localVarResponse = await GetStoreServiceChargeAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (ServiceCharge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceCharge>> GetStoreServiceChargeAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoreServiceCharge");

            var localVarPath = "./api/v1.0/stores/{storeId}/servicecharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreServiceCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ServiceCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceCharge)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        public RestApiPaginationResultStore GetStores (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = GetStoresWithHttpInfo(searchQuery, page, limit, storeGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        public ApiResponse< RestApiPaginationResultStore > GetStoresWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {

            var localVarPath = "./api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresAsync (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = await GetStoresAsyncWithHttpInfo(searchQuery, page, limit, storeGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeGroupId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresAsyncWithHttpInfo (string searchQuery = null, int? page = null, int? limit = null, int? storeGroupId = null)
        {

            var localVarPath = "./api/v1.0/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStore</returns>
        public RestApiPaginationResultStore GetStoresByAppId (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = GetStoresByAppIdWithHttpInfo(appId, searchQuery, salesChannelType, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStore</returns>
        public ApiResponse< RestApiPaginationResultStore > GetStoresByAppIdWithHttpInfo (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoresByAppId");

            var localVarPath = "./api/v1.0/{appId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (salesChannelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "salesChannelType", salesChannelType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoresByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStore> GetStoresByAppIdAsync (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStore> localVarResponse = await GetStoresByAppIdAsyncWithHttpInfo(appId, searchQuery, salesChannelType, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="salesChannelType"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStore>> GetStoresByAppIdAsyncWithHttpInfo (string appId, string searchQuery = null, string salesChannelType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoresByAppId");

            var localVarPath = "./api/v1.0/{appId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (salesChannelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "salesChannelType", salesChannelType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoresByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreValidationConfig</returns>
        public RestApiPaginationResultStoreValidationConfig GetStoresByStoreIdWithValidations (List<int?> storeId, string appId, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreValidationConfig> localVarResponse = GetStoresByStoreIdWithValidationsWithHttpInfo(storeId, appId, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreValidationConfig</returns>
        public ApiResponse< RestApiPaginationResultStoreValidationConfig > GetStoresByStoreIdWithValidationsWithHttpInfo (List<int?> storeId, string appId, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoresByStoreIdWithValidations");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoresByStoreIdWithValidations");

            var localVarPath = "./api/v1.0/{appId}/storevalidation/kiosk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoresByStoreIdWithValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreValidationConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStoreValidationConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreValidationConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreValidationConfig</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStoreValidationConfig> GetStoresByStoreIdWithValidationsAsync (List<int?> storeId, string appId, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreValidationConfig> localVarResponse = await GetStoresByStoreIdWithValidationsAsyncWithHttpInfo(storeId, appId, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="appId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreValidationConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreValidationConfig>> GetStoresByStoreIdWithValidationsAsyncWithHttpInfo (List<int?> storeId, string appId, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->GetStoresByStoreIdWithValidations");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StoresApi->GetStoresByStoreIdWithValidations");

            var localVarPath = "./api/v1.0/{appId}/storevalidation/kiosk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoresByStoreIdWithValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreValidationConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultStoreValidationConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreValidationConfig)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public void PublishStore (int? storeId)
        {
             PublishStoreWithHttpInfo(storeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PublishStoreWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->PublishStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PublishStoreAsync (int? storeId)
        {
             await PublishStoreAsyncWithHttpInfo(storeId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PublishStoreAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->PublishStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns></returns>
        public void PutStoreDeliveryFeeConfig (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest)
        {
             PutStoreDeliveryFeeConfigWithHttpInfo(storeId, feeConfigUpdateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutStoreDeliveryFeeConfigWithHttpInfo (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->PutStoreDeliveryFeeConfig");
            // verify the required parameter 'feeConfigUpdateRequest' is set
            if (feeConfigUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'feeConfigUpdateRequest' when calling StoresApi->PutStoreDeliveryFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig/deliveryZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (feeConfigUpdateRequest != null && feeConfigUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeConfigUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeConfigUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStoreDeliveryFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutStoreDeliveryFeeConfigAsync (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest)
        {
             await PutStoreDeliveryFeeConfigAsyncWithHttpInfo(storeId, feeConfigUpdateRequest);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="feeConfigUpdateRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutStoreDeliveryFeeConfigAsyncWithHttpInfo (int? storeId, StoreDeliveryZoneFeeConfigUpdateRequest feeConfigUpdateRequest)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->PutStoreDeliveryFeeConfig");
            // verify the required parameter 'feeConfigUpdateRequest' is set
            if (feeConfigUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'feeConfigUpdateRequest' when calling StoresApi->PutStoreDeliveryFeeConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/feeConfig/deliveryZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (feeConfigUpdateRequest != null && feeConfigUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeConfigUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeConfigUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStoreDeliveryFeeConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>RestApiResultBusinessHoursPeriod</returns>
        public RestApiResultBusinessHoursPeriod SetBusinessHours (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod)
        {
             ApiResponse<RestApiResultBusinessHoursPeriod> localVarResponse = SetBusinessHoursWithHttpInfo(storeId, deliveryType, businessHoursPeriod);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>ApiResponse of RestApiResultBusinessHoursPeriod</returns>
        public ApiResponse< RestApiResultBusinessHoursPeriod > SetBusinessHoursWithHttpInfo (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetBusinessHours");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->SetBusinessHours");
            // verify the required parameter 'businessHoursPeriod' is set
            if (businessHoursPeriod == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursPeriod' when calling StoresApi->SetBusinessHours");

            var localVarPath = "./api/v1.0/stores/{storeId}/availability/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (businessHoursPeriod != null && businessHoursPeriod.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursPeriod); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursPeriod; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBusinessHoursPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultBusinessHoursPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBusinessHoursPeriod)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of RestApiResultBusinessHoursPeriod</returns>
        public async System.Threading.Tasks.Task<RestApiResultBusinessHoursPeriod> SetBusinessHoursAsync (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod)
        {
             ApiResponse<RestApiResultBusinessHoursPeriod> localVarResponse = await SetBusinessHoursAsyncWithHttpInfo(storeId, deliveryType, businessHoursPeriod);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of ApiResponse (RestApiResultBusinessHoursPeriod)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBusinessHoursPeriod>> SetBusinessHoursAsyncWithHttpInfo (int? storeId, string deliveryType, BusinessHoursPeriodBase businessHoursPeriod)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetBusinessHours");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->SetBusinessHours");
            // verify the required parameter 'businessHoursPeriod' is set
            if (businessHoursPeriod == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursPeriod' when calling StoresApi->SetBusinessHours");

            var localVarPath = "./api/v1.0/stores/{storeId}/availability/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (businessHoursPeriod != null && businessHoursPeriod.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursPeriod); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursPeriod; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBusinessHours", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBusinessHoursPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultBusinessHoursPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBusinessHoursPeriod)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        public RestApiArrayResultRestApiDefaultResponse SetPreOrdeEnabled (int? storeId, string deliveryType, bool? enabled)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = SetPreOrdeEnabledWithHttpInfo(storeId, deliveryType, enabled);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        public ApiResponse< RestApiArrayResultRestApiDefaultResponse > SetPreOrdeEnabledWithHttpInfo (int? storeId, string deliveryType, bool? enabled)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetPreOrdeEnabled");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->SetPreOrdeEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling StoresApi->SetPreOrdeEnabled");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPreOrdeEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> SetPreOrdeEnabledAsync (int? storeId, string deliveryType, bool? enabled)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = await SetPreOrdeEnabledAsyncWithHttpInfo(storeId, deliveryType, enabled);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> SetPreOrdeEnabledAsyncWithHttpInfo (int? storeId, string deliveryType, bool? enabled)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetPreOrdeEnabled");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->SetPreOrdeEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling StoresApi->SetPreOrdeEnabled");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPreOrdeEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>RestApiResultOrderLeadTimes</returns>
        public RestApiResultOrderLeadTimes SetStoreLeadTimes (int? storeId, LeadTime leadTime)
        {
             ApiResponse<RestApiResultOrderLeadTimes> localVarResponse = SetStoreLeadTimesWithHttpInfo(storeId, leadTime);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>ApiResponse of RestApiResultOrderLeadTimes</returns>
        public ApiResponse< RestApiResultOrderLeadTimes > SetStoreLeadTimesWithHttpInfo (int? storeId, LeadTime leadTime)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetStoreLeadTimes");
            // verify the required parameter 'leadTime' is set
            if (leadTime == null)
                throw new ApiException(400, "Missing required parameter 'leadTime' when calling StoresApi->SetStoreLeadTimes");

            var localVarPath = "./api/v1.0/stores/{storeId}/leadTimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (leadTime != null && leadTime.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leadTime); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leadTime; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStoreLeadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOrderLeadTimes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultOrderLeadTimes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOrderLeadTimes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>Task of RestApiResultOrderLeadTimes</returns>
        public async System.Threading.Tasks.Task<RestApiResultOrderLeadTimes> SetStoreLeadTimesAsync (int? storeId, LeadTime leadTime)
        {
             ApiResponse<RestApiResultOrderLeadTimes> localVarResponse = await SetStoreLeadTimesAsyncWithHttpInfo(storeId, leadTime);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="leadTime"></param>
        /// <returns>Task of ApiResponse (RestApiResultOrderLeadTimes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOrderLeadTimes>> SetStoreLeadTimesAsyncWithHttpInfo (int? storeId, LeadTime leadTime)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SetStoreLeadTimes");
            // verify the required parameter 'leadTime' is set
            if (leadTime == null)
                throw new ApiException(400, "Missing required parameter 'leadTime' when calling StoresApi->SetStoreLeadTimes");

            var localVarPath = "./api/v1.0/stores/{storeId}/leadTimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (leadTime != null && leadTime.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leadTime); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leadTime; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStoreLeadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOrderLeadTimes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultOrderLeadTimes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOrderLeadTimes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns></returns>
        public void SupportedSalesChannelsTypes (string propertyId, int? storeId, List<string> salesChannelTypes)
        {
             SupportedSalesChannelsTypesWithHttpInfo(propertyId, storeId, salesChannelTypes);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SupportedSalesChannelsTypesWithHttpInfo (string propertyId, int? storeId, List<string> salesChannelTypes)
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling StoresApi->SupportedSalesChannelsTypes");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SupportedSalesChannelsTypes");
            // verify the required parameter 'salesChannelTypes' is set
            if (salesChannelTypes == null)
                throw new ApiException(400, "Missing required parameter 'salesChannelTypes' when calling StoresApi->SupportedSalesChannelsTypes");

            var localVarPath = "./api/v1.0/properties/{propertyId}/stores/{storeId}/supportedSalesChannels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (salesChannelTypes != null && salesChannelTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(salesChannelTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = salesChannelTypes; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedSalesChannelsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SupportedSalesChannelsTypesAsync (string propertyId, int? storeId, List<string> salesChannelTypes)
        {
             await SupportedSalesChannelsTypesAsyncWithHttpInfo(propertyId, storeId, salesChannelTypes);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="storeId"></param>
        /// <param name="salesChannelTypes"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SupportedSalesChannelsTypesAsyncWithHttpInfo (string propertyId, int? storeId, List<string> salesChannelTypes)
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling StoresApi->SupportedSalesChannelsTypes");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->SupportedSalesChannelsTypes");
            // verify the required parameter 'salesChannelTypes' is set
            if (salesChannelTypes == null)
                throw new ApiException(400, "Missing required parameter 'salesChannelTypes' when calling StoresApi->SupportedSalesChannelsTypes");

            var localVarPath = "./api/v1.0/properties/{propertyId}/stores/{storeId}/supportedSalesChannels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (salesChannelTypes != null && salesChannelTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(salesChannelTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = salesChannelTypes; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedSalesChannelsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public void UnpublishStore (int? storeId)
        {
             UnpublishStoreWithHttpInfo(storeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnpublishStoreWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UnpublishStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/unpublish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnpublishStoreAsync (int? storeId)
        {
             await UnpublishStoreAsyncWithHttpInfo(storeId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnpublishStoreAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UnpublishStore");

            var localVarPath = "./api/v1.0/stores/{storeId}/unpublish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>RestApiArrayResultRestApiDefaultResponse</returns>
        public RestApiArrayResultRestApiDefaultResponse UpdatePreOrderConfig (int? storeId, string deliveryType, PreOrderConfig preOrderConfig)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = UpdatePreOrderConfigWithHttpInfo(storeId, deliveryType, preOrderConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestApiDefaultResponse</returns>
        public ApiResponse< RestApiArrayResultRestApiDefaultResponse > UpdatePreOrderConfigWithHttpInfo (int? storeId, string deliveryType, PreOrderConfig preOrderConfig)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdatePreOrderConfig");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->UpdatePreOrderConfig");
            // verify the required parameter 'preOrderConfig' is set
            if (preOrderConfig == null)
                throw new ApiException(400, "Missing required parameter 'preOrderConfig' when calling StoresApi->UpdatePreOrderConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (preOrderConfig != null && preOrderConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preOrderConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preOrderConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePreOrderConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>Task of RestApiArrayResultRestApiDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestApiDefaultResponse> UpdatePreOrderConfigAsync (int? storeId, string deliveryType, PreOrderConfig preOrderConfig)
        {
             ApiResponse<RestApiArrayResultRestApiDefaultResponse> localVarResponse = await UpdatePreOrderConfigAsyncWithHttpInfo(storeId, deliveryType, preOrderConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="deliveryType"></param>
        /// <param name="preOrderConfig"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestApiDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestApiDefaultResponse>> UpdatePreOrderConfigAsyncWithHttpInfo (int? storeId, string deliveryType, PreOrderConfig preOrderConfig)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdatePreOrderConfig");
            // verify the required parameter 'deliveryType' is set
            if (deliveryType == null)
                throw new ApiException(400, "Missing required parameter 'deliveryType' when calling StoresApi->UpdatePreOrderConfig");
            // verify the required parameter 'preOrderConfig' is set
            if (preOrderConfig == null)
                throw new ApiException(400, "Missing required parameter 'preOrderConfig' when calling StoresApi->UpdatePreOrderConfig");

            var localVarPath = "./api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryType != null) localVarPathParams.Add("deliveryType", this.Configuration.ApiClient.ParameterToString(deliveryType)); // path parameter
            if (preOrderConfig != null && preOrderConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preOrderConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preOrderConfig; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePreOrderConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestApiDefaultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestApiDefaultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestApiDefaultResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>RestApiResultStore</returns>
        public RestApiResultStore UpdateStore (int? storeId, StoreBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = UpdateStoreWithHttpInfo(storeId, store);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>ApiResponse of RestApiResultStore</returns>
        public ApiResponse< RestApiResultStore > UpdateStoreWithHttpInfo (int? storeId, StoreBase store)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->UpdateStore");

            var localVarPath = "./api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>Task of RestApiResultStore</returns>
        public async System.Threading.Tasks.Task<RestApiResultStore> UpdateStoreAsync (int? storeId, StoreBase store)
        {
             ApiResponse<RestApiResultStore> localVarResponse = await UpdateStoreAsyncWithHttpInfo(storeId, store);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="store"></param>
        /// <returns>Task of ApiResponse (RestApiResultStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStore>> UpdateStoreAsyncWithHttpInfo (int? storeId, StoreBase store)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStore");
            // verify the required parameter 'store' is set
            if (store == null)
                throw new ApiException(400, "Missing required parameter 'store' when calling StoresApi->UpdateStore");

            var localVarPath = "./api/v1.0/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (store != null && store.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(store); // http body (model) parameter
            }
            else
            {
                localVarPostBody = store; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>RestApiResultStoreAddress</returns>
        public RestApiResultStoreAddress UpdateStoreAddress (int? storeId, StoreAddressBase storeAddress)
        {
             ApiResponse<RestApiResultStoreAddress> localVarResponse = UpdateStoreAddressWithHttpInfo(storeId, storeAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>ApiResponse of RestApiResultStoreAddress</returns>
        public ApiResponse< RestApiResultStoreAddress > UpdateStoreAddressWithHttpInfo (int? storeId, StoreAddressBase storeAddress)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddress");
            // verify the required parameter 'storeAddress' is set
            if (storeAddress == null)
                throw new ApiException(400, "Missing required parameter 'storeAddress' when calling StoresApi->UpdateStoreAddress");

            var localVarPath = "./api/v1.0/stores/{storeId}/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (storeAddress != null && storeAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeAddress; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStoreAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreAddress)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>Task of RestApiResultStoreAddress</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreAddress> UpdateStoreAddressAsync (int? storeId, StoreAddressBase storeAddress)
        {
             ApiResponse<RestApiResultStoreAddress> localVarResponse = await UpdateStoreAddressAsyncWithHttpInfo(storeId, storeAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="storeAddress"></param>
        /// <returns>Task of ApiResponse (RestApiResultStoreAddress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreAddress>> UpdateStoreAddressAsyncWithHttpInfo (int? storeId, StoreAddressBase storeAddress)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddress");
            // verify the required parameter 'storeAddress' is set
            if (storeAddress == null)
                throw new ApiException(400, "Missing required parameter 'storeAddress' when calling StoresApi->UpdateStoreAddress");

            var localVarPath = "./api/v1.0/stores/{storeId}/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (storeAddress != null && storeAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeAddress; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultStoreAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreAddress)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>RestApiResultCoordinates</returns>
        public RestApiResultCoordinates UpdateStoreAddressCoordinates (int? storeId, Coordinates coordinates, string appNameId = null)
        {
             ApiResponse<RestApiResultCoordinates> localVarResponse = UpdateStoreAddressCoordinatesWithHttpInfo(storeId, coordinates, appNameId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultCoordinates</returns>
        public ApiResponse< RestApiResultCoordinates > UpdateStoreAddressCoordinatesWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressCoordinates");
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling StoresApi->UpdateStoreAddressCoordinates");

            var localVarPath = "./api/v1.0/stores/{storeId}/address/coordinates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter
            if (coordinates != null && coordinates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coordinates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coordinates; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressCoordinates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCoordinates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultCoordinates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCoordinates)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of RestApiResultCoordinates</returns>
        public async System.Threading.Tasks.Task<RestApiResultCoordinates> UpdateStoreAddressCoordinatesAsync (int? storeId, Coordinates coordinates, string appNameId = null)
        {
             ApiResponse<RestApiResultCoordinates> localVarResponse = await UpdateStoreAddressCoordinatesAsyncWithHttpInfo(storeId, coordinates, appNameId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="coordinates"></param>
        /// <param name="appNameId"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultCoordinates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultCoordinates>> UpdateStoreAddressCoordinatesAsyncWithHttpInfo (int? storeId, Coordinates coordinates, string appNameId = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressCoordinates");
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling StoresApi->UpdateStoreAddressCoordinates");

            var localVarPath = "./api/v1.0/stores/{storeId}/address/coordinates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (appNameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appNameId", appNameId)); // query parameter
            if (coordinates != null && coordinates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coordinates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coordinates; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressCoordinates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCoordinates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultCoordinates) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCoordinates)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        public Object UpdateStoreAddressForm (int? storeId, StoreAddressForm address)
        {
             ApiResponse<Object> localVarResponse = UpdateStoreAddressFormWithHttpInfo(storeId, address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateStoreAddressFormWithHttpInfo (int? storeId, StoreAddressForm address)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressForm");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling StoresApi->UpdateStoreAddressForm");

            var localVarPath = "./api/v1.0/stores/{storeId}/addressform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateStoreAddressFormAsync (int? storeId, StoreAddressForm address)
        {
             ApiResponse<Object> localVarResponse = await UpdateStoreAddressFormAsyncWithHttpInfo(storeId, address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId"></param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStoreAddressFormAsyncWithHttpInfo (int? storeId, StoreAddressForm address)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->UpdateStoreAddressForm");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling StoresApi->UpdateStoreAddressForm");

            var localVarPath = "./api/v1.0/stores/{storeId}/addressform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreAddressForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}

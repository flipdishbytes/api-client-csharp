/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuOptionSetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Object</returns>
        Object CreateMenuItemOptionSet (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet);

        /// <summary>
        /// Create menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet);
        /// <summary>
        /// Delete menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns></returns>
        void DeleteMenuItemOptionSet (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId);

        /// <summary>
        /// Delete menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId);
        /// <summary>
        /// Delete option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns></returns>
        void DeleteOptionSetImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Delete option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOptionSetImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Get menu item option set by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>RestApiResultMenuItemOptionSet</returns>
        RestApiResultMenuItemOptionSet GetMenuItemOptionSetById (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Get menu item option set by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuItemOptionSet</returns>
        ApiResponse<RestApiResultMenuItemOptionSet> GetMenuItemOptionSetByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Get menu item option sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>RestApiArrayResultMenuItemOptionSet</returns>
        RestApiArrayResultMenuItemOptionSet GetMenuItemOptionSets (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Get menu item option sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuItemOptionSet</returns>
        ApiResponse<RestApiArrayResultMenuItemOptionSet> GetMenuItemOptionSetsWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Update menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns></returns>
        void UpdateMenuItemOptionSet (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet);

        /// <summary>
        /// Update menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet);
        /// <summary>
        /// Upload menu item option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult UploadOptionSetImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image);

        /// <summary>
        /// Upload menu item option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> UploadOptionSetImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateMenuItemOptionSetAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet);

        /// <summary>
        /// Create menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet);
        /// <summary>
        /// Delete menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuItemOptionSetAsync (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId);

        /// <summary>
        /// Delete menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId);
        /// <summary>
        /// Delete option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOptionSetImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Delete option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionSetImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Get menu item option set by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>Task of RestApiResultMenuItemOptionSet</returns>
        System.Threading.Tasks.Task<RestApiResultMenuItemOptionSet> GetMenuItemOptionSetByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Get menu item option set by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuItemOptionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuItemOptionSet>> GetMenuItemOptionSetByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Get menu item option sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of RestApiArrayResultMenuItemOptionSet</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuItemOptionSet> GetMenuItemOptionSetsAsync (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Get menu item option sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuItemOptionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuItemOptionSet>> GetMenuItemOptionSetsAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Update menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuItemOptionSetAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet);

        /// <summary>
        /// Update menu item option set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet);
        /// <summary>
        /// Upload menu item option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> UploadOptionSetImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image);

        /// <summary>
        /// Upload menu item option set image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadOptionSetImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuOptionSetsApi : IMenuOptionSetsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuOptionSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuOptionSetsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuOptionSetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuOptionSetsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Object</returns>
        public Object CreateMenuItemOptionSet (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet)
        {
             ApiResponse<Object> localVarResponse = CreateMenuItemOptionSetWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuItemOptionSet' is set
            if (menuItemOptionSet == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSet' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (menuItemOptionSet != null && menuItemOptionSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSet; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateMenuItemOptionSetAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet)
        {
             ApiResponse<Object> localVarResponse = await CreateMenuItemOptionSetAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");
            // verify the required parameter 'menuItemOptionSet' is set
            if (menuItemOptionSet == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSet' when calling MenuOptionSetsApi->CreateMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (menuItemOptionSet != null && menuItemOptionSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSet; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns></returns>
        public void DeleteMenuItemOptionSet (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId)
        {
             DeleteMenuItemOptionSetWithHttpInfo(menuId, menuSectionItemId, menuSectionId, optionSetId);
        }

        /// <summary>
        /// Delete menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuItemOptionSetAsync (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId)
        {
             await DeleteMenuItemOptionSetAsyncWithHttpInfo(menuId, menuSectionItemId, menuSectionId, optionSetId);

        }

        /// <summary>
        /// Delete menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionItemId, int? menuSectionId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->DeleteMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns></returns>
        public void DeleteOptionSetImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             DeleteOptionSetImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
        }

        /// <summary>
        /// Delete option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOptionSetImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->DeleteOptionSetImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOptionSetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOptionSetImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             await DeleteOptionSetImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);

        }

        /// <summary>
        /// Delete option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionSetImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->DeleteOptionSetImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->DeleteOptionSetImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOptionSetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu item option set by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>RestApiResultMenuItemOptionSet</returns>
        public RestApiResultMenuItemOptionSet GetMenuItemOptionSetById (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             ApiResponse<RestApiResultMenuItemOptionSet> localVarResponse = GetMenuItemOptionSetByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item option set by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuItemOptionSet</returns>
        public ApiResponse< RestApiResultMenuItemOptionSet > GetMenuItemOptionSetByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuItemOptionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuItemOptionSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuItemOptionSet)));
        }

        /// <summary>
        /// Get menu item option set by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>Task of RestApiResultMenuItemOptionSet</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuItemOptionSet> GetMenuItemOptionSetByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             ApiResponse<RestApiResultMenuItemOptionSet> localVarResponse = await GetMenuItemOptionSetByIdAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item option set by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Menu item option set identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuItemOptionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuItemOptionSet>> GetMenuItemOptionSetByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->GetMenuItemOptionSetById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuItemOptionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuItemOptionSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuItemOptionSet)));
        }

        /// <summary>
        /// Get menu item option sets 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>RestApiArrayResultMenuItemOptionSet</returns>
        public RestApiArrayResultMenuItemOptionSet GetMenuItemOptionSets (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiArrayResultMenuItemOptionSet> localVarResponse = GetMenuItemOptionSetsWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item option sets 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuItemOptionSet</returns>
        public ApiResponse< RestApiArrayResultMenuItemOptionSet > GetMenuItemOptionSetsWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuItemOptionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuItemOptionSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuItemOptionSet)));
        }

        /// <summary>
        /// Get menu item option sets 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of RestApiArrayResultMenuItemOptionSet</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuItemOptionSet> GetMenuItemOptionSetsAsync (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiArrayResultMenuItemOptionSet> localVarResponse = await GetMenuItemOptionSetsAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item option sets 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuItemOptionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuItemOptionSet>> GetMenuItemOptionSetsAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->GetMenuItemOptionSets");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuItemOptionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuItemOptionSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuItemOptionSet)));
        }

        /// <summary>
        /// Update menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns></returns>
        public void UpdateMenuItemOptionSet (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet)
        {
             UpdateMenuItemOptionSetWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet);
        }

        /// <summary>
        /// Update menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuItemOptionSetWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuItemOptionSet' is set
            if (menuItemOptionSet == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSet' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSet != null && menuItemOptionSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSet; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuItemOptionSetAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet)
        {
             await UpdateMenuItemOptionSetAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet);

        }

        /// <summary>
        /// Update menu item option set 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSet">Menu item option set (delta)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuItemOptionSetAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetBase menuItemOptionSet)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");
            // verify the required parameter 'menuItemOptionSet' is set
            if (menuItemOptionSet == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSet' when calling MenuOptionSetsApi->UpdateMenuItemOptionSet");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSet != null && menuItemOptionSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSet; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuItemOptionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload menu item option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult UploadOptionSetImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = UploadOptionSetImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload menu item option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > UploadOptionSetImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuOptionSetsApi->UploadOptionSetImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadOptionSetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Upload menu item option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> UploadOptionSetImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await UploadOptionSetImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload menu item option set image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="image">Option set image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadOptionSetImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetsApi->UploadOptionSetImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuOptionSetsApi->UploadOptionSetImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadOptionSetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

    }
}

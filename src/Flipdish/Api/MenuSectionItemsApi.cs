/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuSectionItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clone menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>RestApiResultMenuSectionItem</returns>
        RestApiResultMenuSectionItem CloneMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Clone menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSectionItem</returns>
        ApiResponse<RestApiResultMenuSectionItem> CloneMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Create menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Object</returns>
        Object CreateMenuSectionItem (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem);

        /// <summary>
        /// Create menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem);
        /// <summary>
        /// Delete menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns></returns>
        void DeleteMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Delete menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Delete menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns></returns>
        void DeleteMenuSectionItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Delete menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuSectionItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Get menu item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>RestApiResultMenuSectionItem</returns>
        RestApiResultMenuSectionItem GetMenuItemById (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Get menu item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSectionItem</returns>
        ApiResponse<RestApiResultMenuSectionItem> GetMenuItemByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Get menu items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiArrayResultMenuSectionItem</returns>
        RestApiArrayResultMenuSectionItem GetMenuItems (int? menuId, int? menuSectionId);

        /// <summary>
        /// Get menu items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSectionItem</returns>
        ApiResponse<RestApiArrayResultMenuSectionItem> GetMenuItemsWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Update menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        void UpdateMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null);

        /// <summary>
        /// Update menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null);
        /// <summary>
        /// Upload menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult UploadMenuSectionItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image);

        /// <summary>
        /// Upload menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> UploadMenuSectionItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clone menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of RestApiResultMenuSectionItem</returns>
        System.Threading.Tasks.Task<RestApiResultMenuSectionItem> CloneMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Clone menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSectionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSectionItem>> CloneMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Create menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateMenuSectionItemAsync (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem);

        /// <summary>
        /// Create menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem);
        /// <summary>
        /// Delete menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Delete menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Delete menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuSectionItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Delete menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Get menu item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>Task of RestApiResultMenuSectionItem</returns>
        System.Threading.Tasks.Task<RestApiResultMenuSectionItem> GetMenuItemByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId);

        /// <summary>
        /// Get menu item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSectionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSectionItem>> GetMenuItemByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId);
        /// <summary>
        /// Get menu items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiArrayResultMenuSectionItem</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuSectionItem> GetMenuItemsAsync (int? menuId, int? menuSectionId);

        /// <summary>
        /// Get menu items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSectionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSectionItem>> GetMenuItemsAsyncWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Update menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null);

        /// <summary>
        /// Update menu section item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null);
        /// <summary>
        /// Upload menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> UploadMenuSectionItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image);

        /// <summary>
        /// Upload menu section item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuSectionItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuSectionItemsApi : IMenuSectionItemsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuSectionItemsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuSectionItemsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clone menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>RestApiResultMenuSectionItem</returns>
        public RestApiResultMenuSectionItem CloneMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiResultMenuSectionItem> localVarResponse = CloneMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSectionItem</returns>
        public ApiResponse< RestApiResultMenuSectionItem > CloneMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->CloneMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->CloneMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->CloneMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSectionItem)));
        }

        /// <summary>
        /// Clone menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of RestApiResultMenuSectionItem</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuSectionItem> CloneMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiResultMenuSectionItem> localVarResponse = await CloneMenuSectionItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSectionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSectionItem>> CloneMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->CloneMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->CloneMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->CloneMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSectionItem)));
        }

        /// <summary>
        /// Create menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Object</returns>
        public Object CreateMenuSectionItem (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem)
        {
             ApiResponse<Object> localVarResponse = CreateMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->CreateMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->CreateMenuSectionItem");
            // verify the required parameter 'menuSectionItem' is set
            if (menuSectionItem == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItem' when calling MenuSectionItemsApi->CreateMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItem != null && menuSectionItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateMenuSectionItemAsync (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem)
        {
             ApiResponse<Object> localVarResponse = await CreateMenuSectionItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItem">Menu section item</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionItemBase menuSectionItem)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->CreateMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->CreateMenuSectionItem");
            // verify the required parameter 'menuSectionItem' is set
            if (menuSectionItem == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItem' when calling MenuSectionItemsApi->CreateMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItem != null && menuSectionItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns></returns>
        public void DeleteMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             DeleteMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
        }

        /// <summary>
        /// Delete menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             await DeleteMenuSectionItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId);

        }

        /// <summary>
        /// Delete menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->DeleteMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns></returns>
        public void DeleteMenuSectionItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             DeleteMenuSectionItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
        }

        /// <summary>
        /// Delete menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuSectionItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuSectionItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             await DeleteMenuSectionItemImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId);

        }

        /// <summary>
        /// Delete menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->DeleteMenuSectionItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>RestApiResultMenuSectionItem</returns>
        public RestApiResultMenuSectionItem GetMenuItemById (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiResultMenuSectionItem> localVarResponse = GetMenuItemByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSectionItem</returns>
        public ApiResponse< RestApiResultMenuSectionItem > GetMenuItemByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->GetMenuItemById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->GetMenuItemById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->GetMenuItemById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSectionItem)));
        }

        /// <summary>
        /// Get menu item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>Task of RestApiResultMenuSectionItem</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuSectionItem> GetMenuItemByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
             ApiResponse<RestApiResultMenuSectionItem> localVarResponse = await GetMenuItemByIdAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSectionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSectionItem>> GetMenuItemByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->GetMenuItemById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->GetMenuItemById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->GetMenuItemById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSectionItem)));
        }

        /// <summary>
        /// Get menu items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiArrayResultMenuSectionItem</returns>
        public RestApiArrayResultMenuSectionItem GetMenuItems (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiArrayResultMenuSectionItem> localVarResponse = GetMenuItemsWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSectionItem</returns>
        public ApiResponse< RestApiArrayResultMenuSectionItem > GetMenuItemsWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->GetMenuItems");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->GetMenuItems");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSectionItem)));
        }

        /// <summary>
        /// Get menu items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiArrayResultMenuSectionItem</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuSectionItem> GetMenuItemsAsync (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiArrayResultMenuSectionItem> localVarResponse = await GetMenuItemsAsyncWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSectionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSectionItem>> GetMenuItemsAsyncWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->GetMenuItems");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->GetMenuItems");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSectionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSectionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSectionItem)));
        }

        /// <summary>
        /// Update menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        public void UpdateMenuSectionItem (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null)
        {
             UpdateMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter);
        }

        /// <summary>
        /// Update menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuSectionItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionItem' is set
            if (menuSectionItem == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItem' when calling MenuSectionItemsApi->UpdateMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuSectionItem != null && menuSectionItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuSectionItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null)
        {
             await UpdateMenuSectionItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter);

        }

        /// <summary>
        /// Update menu section item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="menuSectionItem">Menu section item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuSectionItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, MenuSectionItemBase menuSectionItem, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->UpdateMenuSectionItem");
            // verify the required parameter 'menuSectionItem' is set
            if (menuSectionItem == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItem' when calling MenuSectionItemsApi->UpdateMenuSectionItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuSectionItem != null && menuSectionItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuSectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult UploadMenuSectionItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = UploadMenuSectionItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > UploadMenuSectionItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuSectionItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Upload menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> UploadMenuSectionItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await UploadMenuSectionItemImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload menu section item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="image">Menu section item image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuSectionItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuSectionItemsApi->UploadMenuSectionItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuSectionItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

    }
}

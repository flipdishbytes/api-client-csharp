/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreDeveloperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update App store app verification
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns></returns>
        void AppVerificationUpdate (string oauthAppId, string appStoreAppId, string verificationStatus);

        /// <summary>
        /// Update App store app verification
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppVerificationUpdateWithHttpInfo (string oauthAppId, string appStoreAppId, string verificationStatus);
        /// <summary>
        /// Create App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>RestApiResultAppStoreApp</returns>
        RestApiResultAppStoreApp CreateAppStoreApp (string oauthAppId, CreateAppStoreApp createAppStoreApp);

        /// <summary>
        /// Create App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>ApiResponse of RestApiResultAppStoreApp</returns>
        ApiResponse<RestApiResultAppStoreApp> CreateAppStoreAppWithHttpInfo (string oauthAppId, CreateAppStoreApp createAppStoreApp);
        /// <summary>
        /// Delete App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult DeleteAppStoreApp (string oauthAppId, string appStoreAppId);

        /// <summary>
        /// Delete App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> DeleteAppStoreAppWithHttpInfo (string oauthAppId, string appStoreAppId);
        /// <summary>
        /// Get external function action signing key for app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns></returns>
        void GetExternalFunctionSigningKey (string oauthAppId, string appStoreAppId);

        /// <summary>
        /// Get external function action signing key for app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetExternalFunctionSigningKeyWithHttpInfo (string oauthAppId, string appStoreAppId);
        /// <summary>
        /// Update App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns></returns>
        void UpdateAppStoreApp (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp);

        /// <summary>
        /// Update App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAppStoreAppWithHttpInfo (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp);
        /// <summary>
        /// Upload the App store app logo \\ icon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns></returns>
        void UploadAppStoreAppLogo (string oauthAppId, string appStoreAppId, System.IO.Stream image);

        /// <summary>
        /// Upload the App store app logo \\ icon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadAppStoreAppLogoWithHttpInfo (string oauthAppId, string appStoreAppId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update App store app verification
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppVerificationUpdateAsync (string oauthAppId, string appStoreAppId, string verificationStatus);

        /// <summary>
        /// Update App store app verification
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppVerificationUpdateAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, string verificationStatus);
        /// <summary>
        /// Create App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>Task of RestApiResultAppStoreApp</returns>
        System.Threading.Tasks.Task<RestApiResultAppStoreApp> CreateAppStoreAppAsync (string oauthAppId, CreateAppStoreApp createAppStoreApp);

        /// <summary>
        /// Create App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>Task of ApiResponse (RestApiResultAppStoreApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultAppStoreApp>> CreateAppStoreAppAsyncWithHttpInfo (string oauthAppId, CreateAppStoreApp createAppStoreApp);
        /// <summary>
        /// Delete App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> DeleteAppStoreAppAsync (string oauthAppId, string appStoreAppId);

        /// <summary>
        /// Delete App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> DeleteAppStoreAppAsyncWithHttpInfo (string oauthAppId, string appStoreAppId);
        /// <summary>
        /// Get external function action signing key for app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetExternalFunctionSigningKeyAsync (string oauthAppId, string appStoreAppId);

        /// <summary>
        /// Get external function action signing key for app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalFunctionSigningKeyAsyncWithHttpInfo (string oauthAppId, string appStoreAppId);
        /// <summary>
        /// Update App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAppStoreAppAsync (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp);

        /// <summary>
        /// Update App store app
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAppStoreAppAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp);
        /// <summary>
        /// Upload the App store app logo \\ icon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadAppStoreAppLogoAsync (string oauthAppId, string appStoreAppId, System.IO.Stream image);

        /// <summary>
        /// Upload the App store app logo \\ icon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadAppStoreAppLogoAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppStoreDeveloperApi : IAppStoreDeveloperApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreDeveloperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppStoreDeveloperApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreDeveloperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppStoreDeveloperApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update App store app verification [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns></returns>
        public void AppVerificationUpdate (string oauthAppId, string appStoreAppId, string verificationStatus)
        {
             AppVerificationUpdateWithHttpInfo(oauthAppId, appStoreAppId, verificationStatus);
        }

        /// <summary>
        /// Update App store app verification [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppVerificationUpdateWithHttpInfo (string oauthAppId, string appStoreAppId, string verificationStatus)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->AppVerificationUpdate");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->AppVerificationUpdate");
            // verify the required parameter 'verificationStatus' is set
            if (verificationStatus == null)
                throw new ApiException(400, "Missing required parameter 'verificationStatus' when calling AppStoreDeveloperApi->AppVerificationUpdate");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (verificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationStatus", verificationStatus)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppVerificationUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update App store app verification [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppVerificationUpdateAsync (string oauthAppId, string appStoreAppId, string verificationStatus)
        {
             await AppVerificationUpdateAsyncWithHttpInfo(oauthAppId, appStoreAppId, verificationStatus);

        }

        /// <summary>
        /// Update App store app verification [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="verificationStatus">New verification status</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppVerificationUpdateAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, string verificationStatus)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->AppVerificationUpdate");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->AppVerificationUpdate");
            // verify the required parameter 'verificationStatus' is set
            if (verificationStatus == null)
                throw new ApiException(400, "Missing required parameter 'verificationStatus' when calling AppStoreDeveloperApi->AppVerificationUpdate");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (verificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verificationStatus", verificationStatus)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppVerificationUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>RestApiResultAppStoreApp</returns>
        public RestApiResultAppStoreApp CreateAppStoreApp (string oauthAppId, CreateAppStoreApp createAppStoreApp)
        {
             ApiResponse<RestApiResultAppStoreApp> localVarResponse = CreateAppStoreAppWithHttpInfo(oauthAppId, createAppStoreApp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>ApiResponse of RestApiResultAppStoreApp</returns>
        public ApiResponse< RestApiResultAppStoreApp > CreateAppStoreAppWithHttpInfo (string oauthAppId, CreateAppStoreApp createAppStoreApp)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->CreateAppStoreApp");
            // verify the required parameter 'createAppStoreApp' is set
            if (createAppStoreApp == null)
                throw new ApiException(400, "Missing required parameter 'createAppStoreApp' when calling AppStoreDeveloperApi->CreateAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (createAppStoreApp != null && createAppStoreApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAppStoreApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAppStoreApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppStoreApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppStoreApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppStoreApp)));
        }

        /// <summary>
        /// Create App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>Task of RestApiResultAppStoreApp</returns>
        public async System.Threading.Tasks.Task<RestApiResultAppStoreApp> CreateAppStoreAppAsync (string oauthAppId, CreateAppStoreApp createAppStoreApp)
        {
             ApiResponse<RestApiResultAppStoreApp> localVarResponse = await CreateAppStoreAppAsyncWithHttpInfo(oauthAppId, createAppStoreApp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="createAppStoreApp">App store app</param>
        /// <returns>Task of ApiResponse (RestApiResultAppStoreApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultAppStoreApp>> CreateAppStoreAppAsyncWithHttpInfo (string oauthAppId, CreateAppStoreApp createAppStoreApp)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->CreateAppStoreApp");
            // verify the required parameter 'createAppStoreApp' is set
            if (createAppStoreApp == null)
                throw new ApiException(400, "Missing required parameter 'createAppStoreApp' when calling AppStoreDeveloperApi->CreateAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (createAppStoreApp != null && createAppStoreApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAppStoreApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAppStoreApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppStoreApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppStoreApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppStoreApp)));
        }

        /// <summary>
        /// Delete App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult DeleteAppStoreApp (string oauthAppId, string appStoreAppId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = DeleteAppStoreAppWithHttpInfo(oauthAppId, appStoreAppId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > DeleteAppStoreAppWithHttpInfo (string oauthAppId, string appStoreAppId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->DeleteAppStoreApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->DeleteAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Delete App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> DeleteAppStoreAppAsync (string oauthAppId, string appStoreAppId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await DeleteAppStoreAppAsyncWithHttpInfo(oauthAppId, appStoreAppId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> DeleteAppStoreAppAsyncWithHttpInfo (string oauthAppId, string appStoreAppId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->DeleteAppStoreApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->DeleteAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get external function action signing key for app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns></returns>
        public void GetExternalFunctionSigningKey (string oauthAppId, string appStoreAppId)
        {
             GetExternalFunctionSigningKeyWithHttpInfo(oauthAppId, appStoreAppId);
        }

        /// <summary>
        /// Get external function action signing key for app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetExternalFunctionSigningKeyWithHttpInfo (string oauthAppId, string appStoreAppId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->GetExternalFunctionSigningKey");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->GetExternalFunctionSigningKey");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_function_signing_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalFunctionSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get external function action signing key for app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetExternalFunctionSigningKeyAsync (string oauthAppId, string appStoreAppId)
        {
             await GetExternalFunctionSigningKeyAsyncWithHttpInfo(oauthAppId, appStoreAppId);

        }

        /// <summary>
        /// Get external function action signing key for app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalFunctionSigningKeyAsyncWithHttpInfo (string oauthAppId, string appStoreAppId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->GetExternalFunctionSigningKey");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->GetExternalFunctionSigningKey");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_function_signing_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalFunctionSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns></returns>
        public void UpdateAppStoreApp (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp)
        {
             UpdateAppStoreAppWithHttpInfo(oauthAppId, appStoreAppId, appStoreApp);
        }

        /// <summary>
        /// Update App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAppStoreAppWithHttpInfo (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->UpdateAppStoreApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->UpdateAppStoreApp");
            // verify the required parameter 'appStoreApp' is set
            if (appStoreApp == null)
                throw new ApiException(400, "Missing required parameter 'appStoreApp' when calling AppStoreDeveloperApi->UpdateAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (appStoreApp != null && appStoreApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appStoreApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appStoreApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAppStoreAppAsync (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp)
        {
             await UpdateAppStoreAppAsyncWithHttpInfo(oauthAppId, appStoreAppId, appStoreApp);

        }

        /// <summary>
        /// Update App store app [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="appStoreApp">Update App store app</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAppStoreAppAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, UpdateAppStoreApp appStoreApp)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->UpdateAppStoreApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->UpdateAppStoreApp");
            // verify the required parameter 'appStoreApp' is set
            if (appStoreApp == null)
                throw new ApiException(400, "Missing required parameter 'appStoreApp' when calling AppStoreDeveloperApi->UpdateAppStoreApp");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (appStoreApp != null && appStoreApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appStoreApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appStoreApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppStoreApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload the App store app logo \\ icon 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns></returns>
        public void UploadAppStoreAppLogo (string oauthAppId, string appStoreAppId, System.IO.Stream image)
        {
             UploadAppStoreAppLogoWithHttpInfo(oauthAppId, appStoreAppId, image);
        }

        /// <summary>
        /// Upload the App store app logo \\ icon 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadAppStoreAppLogoWithHttpInfo (string oauthAppId, string appStoreAppId, System.IO.Stream image)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAppStoreAppLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload the App store app logo \\ icon 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadAppStoreAppLogoAsync (string oauthAppId, string appStoreAppId, System.IO.Stream image)
        {
             await UploadAppStoreAppLogoAsyncWithHttpInfo(oauthAppId, appStoreAppId, image);

        }

        /// <summary>
        /// Upload the App store app logo \\ icon 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appStoreAppId">App store app id</param>
        /// <param name="image">App Store App Logo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadAppStoreAppLogoAsyncWithHttpInfo (string oauthAppId, string appStoreAppId, System.IO.Stream image)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AppStoreDeveloperApi->UploadAppStoreAppLogo");

            var localVarPath = "./api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAppStoreAppLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        string ExportPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s orders as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        string ExportPayoutOrders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        string ExportPayoutOtherCharges (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPayoutOtherChargesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        string ExportPayoutRefunds (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPayoutRefundsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export payout&#39;s details as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        string ExportPayoutStores (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export payout&#39;s details as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportPayoutStoresWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Get Payout details broken down by Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>PayoutDetail</returns>
        PayoutDetail GetPayout (string appId, int? bankAccountId, int? payoutId);

        /// <summary>
        /// Get Payout details broken down by Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>ApiResponse of PayoutDetail</returns>
        ApiResponse<PayoutDetail> GetPayoutWithHttpInfo (string appId, int? bankAccountId, int? payoutId);
        /// <summary>
        /// Get list of payout&#39;s chargebacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutChargeback</returns>
        RestApiPaginationResultPayoutChargeback GetPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s chargebacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutChargeback</returns>
        ApiResponse<RestApiPaginationResultPayoutChargeback> GetPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutOrder</returns>
        RestApiPaginationResultPayoutOrder GetPayoutOrders (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutOrder</returns>
        ApiResponse<RestApiPaginationResultPayoutOrder> GetPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s other charges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutOtherCharge</returns>
        RestApiPaginationResultPayoutOtherCharge GetPayoutOtherCharges (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s other charges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutOtherCharge</returns>
        ApiResponse<RestApiPaginationResultPayoutOtherCharge> GetPayoutOtherChargesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s refunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutRefund</returns>
        RestApiPaginationResultPayoutRefund GetPayoutRefunds (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s refunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutRefund</returns>
        ApiResponse<RestApiPaginationResultPayoutRefund> GetPayoutRefundsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout summaries
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>RestApiArrayResultPayoutSummary</returns>
        RestApiArrayResultPayoutSummary GetPayoutSummaries (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null);

        /// <summary>
        /// Get list of payout summaries
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultPayoutSummary</returns>
        ApiResponse<RestApiArrayResultPayoutSummary> GetPayoutSummariesWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null);
        /// <summary>
        /// Get list of payouts
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayout</returns>
        RestApiPaginationResultPayout GetPayouts (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get list of payouts
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayout</returns>
        ApiResponse<RestApiPaginationResultPayout> GetPayoutsWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s orders as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPayoutOtherChargesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutOtherChargesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPayoutRefundsAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutRefundsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Export payout&#39;s details as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportPayoutStoresAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// Export payout&#39;s details as CSV
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutStoresAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// Get Payout details broken down by Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of PayoutDetail</returns>
        System.Threading.Tasks.Task<PayoutDetail> GetPayoutAsync (string appId, int? bankAccountId, int? payoutId);

        /// <summary>
        /// Get Payout details broken down by Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of ApiResponse (PayoutDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayoutDetail>> GetPayoutAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId);
        /// <summary>
        /// Get list of payout&#39;s chargebacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutChargeback</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutChargeback> GetPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s chargebacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutChargeback)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutChargeback>> GetPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutOrder</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutOrder> GetPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutOrder>> GetPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s other charges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutOtherCharge</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutOtherCharge> GetPayoutOtherChargesAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s other charges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutOtherCharge)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutOtherCharge>> GetPayoutOtherChargesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout&#39;s refunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutRefund</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutRefund> GetPayoutRefundsAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);

        /// <summary>
        /// Get list of payout&#39;s refunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutRefund)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutRefund>> GetPayoutRefundsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null);
        /// <summary>
        /// Get list of payout summaries
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of RestApiArrayResultPayoutSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultPayoutSummary> GetPayoutSummariesAsync (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null);

        /// <summary>
        /// Get list of payout summaries
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultPayoutSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultPayoutSummary>> GetPayoutSummariesAsyncWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null);
        /// <summary>
        /// Get list of payouts
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayout</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayout> GetPayoutsAsync (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get list of payouts
        /// </summary>
        /// <remarks>
        /// BETA - this endpoint is under development, do not use it in your production system
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayout)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayout>> GetPayoutsAsyncWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayoutsApi : IPayoutsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayoutsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayoutsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        public string ExportPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = ExportPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ExportPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutChargebacks");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = await ExportPayoutChargebacksAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a list of payout&#39;s chargebacks as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutChargebacks");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        public string ExportPayoutOrders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = ExportPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ExportPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutOrders");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = await ExportPayoutOrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a list of payout&#39;s orders as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutOrders");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        public string ExportPayoutOtherCharges (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = ExportPayoutOtherChargesWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ExportPayoutOtherChargesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutOtherCharges");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutOtherCharges");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutOtherCharges");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutOtherCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPayoutOtherChargesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = await ExportPayoutOtherChargesAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a list of payout&#39;s other charges as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutOtherChargesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutOtherCharges");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutOtherCharges");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutOtherCharges");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutOtherCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        public string ExportPayoutRefunds (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = ExportPayoutRefundsWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ExportPayoutRefundsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutRefunds");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutRefunds");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutRefunds");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPayoutRefundsAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = await ExportPayoutRefundsAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a list of payout&#39;s refunds as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutRefundsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutRefunds");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutRefunds");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutRefunds");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export payout&#39;s details as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>string</returns>
        public string ExportPayoutStores (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = ExportPayoutStoresWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export payout&#39;s details as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ExportPayoutStoresWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutStores");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutStores");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutStores");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export payout&#39;s details as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportPayoutStoresAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<string> localVarResponse = await ExportPayoutStoresAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export payout&#39;s details as CSV 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportPayoutStoresAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->ExportPayoutStores");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->ExportPayoutStores");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->ExportPayoutStores");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPayoutStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Payout details broken down by Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>PayoutDetail</returns>
        public PayoutDetail GetPayout (string appId, int? bankAccountId, int? payoutId)
        {
             ApiResponse<PayoutDetail> localVarResponse = GetPayoutWithHttpInfo(appId, bankAccountId, payoutId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payout details broken down by Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>ApiResponse of PayoutDetail</returns>
        public ApiResponse< PayoutDetail > GetPayoutWithHttpInfo (string appId, int? bankAccountId, int? payoutId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayout");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayout");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayout");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayoutDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayoutDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayoutDetail)));
        }

        /// <summary>
        /// Get Payout details broken down by Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of PayoutDetail</returns>
        public async System.Threading.Tasks.Task<PayoutDetail> GetPayoutAsync (string appId, int? bankAccountId, int? payoutId)
        {
             ApiResponse<PayoutDetail> localVarResponse = await GetPayoutAsyncWithHttpInfo(appId, bankAccountId, payoutId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payout details broken down by Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of ApiResponse (PayoutDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayoutDetail>> GetPayoutAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayout");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayout");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayout");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayoutDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayoutDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayoutDetail)));
        }

        /// <summary>
        /// Get list of payout&#39;s chargebacks 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutChargeback</returns>
        public RestApiPaginationResultPayoutChargeback GetPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutChargeback> localVarResponse = GetPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payout&#39;s chargebacks 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutChargeback</returns>
        public ApiResponse< RestApiPaginationResultPayoutChargeback > GetPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutChargebacks");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutChargeback>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutChargeback) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutChargeback)));
        }

        /// <summary>
        /// Get list of payout&#39;s chargebacks 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutChargeback</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutChargeback> GetPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutChargeback> localVarResponse = await GetPayoutChargebacksAsyncWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payout&#39;s chargebacks 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutChargeback)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutChargeback>> GetPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutChargebacks");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutChargeback>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutChargeback) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutChargeback)));
        }

        /// <summary>
        /// Get list of payout&#39;s orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutOrder</returns>
        public RestApiPaginationResultPayoutOrder GetPayoutOrders (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutOrder> localVarResponse = GetPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payout&#39;s orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutOrder</returns>
        public ApiResponse< RestApiPaginationResultPayoutOrder > GetPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutOrders");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutOrder)));
        }

        /// <summary>
        /// Get list of payout&#39;s orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutOrder</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutOrder> GetPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutOrder> localVarResponse = await GetPayoutOrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payout&#39;s orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutOrder>> GetPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutOrders");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutOrder)));
        }

        /// <summary>
        /// Get list of payout&#39;s other charges 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutOtherCharge</returns>
        public RestApiPaginationResultPayoutOtherCharge GetPayoutOtherCharges (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutOtherCharge> localVarResponse = GetPayoutOtherChargesWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payout&#39;s other charges 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutOtherCharge</returns>
        public ApiResponse< RestApiPaginationResultPayoutOtherCharge > GetPayoutOtherChargesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutOtherCharges");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutOtherCharges");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutOtherCharges");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutOtherCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutOtherCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutOtherCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutOtherCharge)));
        }

        /// <summary>
        /// Get list of payout&#39;s other charges 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutOtherCharge</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutOtherCharge> GetPayoutOtherChargesAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutOtherCharge> localVarResponse = await GetPayoutOtherChargesAsyncWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payout&#39;s other charges 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutOtherCharge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutOtherCharge>> GetPayoutOtherChargesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutOtherCharges");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutOtherCharges");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutOtherCharges");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutOtherCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutOtherCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutOtherCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutOtherCharge)));
        }

        /// <summary>
        /// Get list of payout&#39;s refunds 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutRefund</returns>
        public RestApiPaginationResultPayoutRefund GetPayoutRefunds (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutRefund> localVarResponse = GetPayoutRefundsWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payout&#39;s refunds 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutRefund</returns>
        public ApiResponse< RestApiPaginationResultPayoutRefund > GetPayoutRefundsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutRefunds");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutRefunds");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutRefunds");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutRefund>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutRefund) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutRefund)));
        }

        /// <summary>
        /// Get list of payout&#39;s refunds 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutRefund</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutRefund> GetPayoutRefundsAsync (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultPayoutRefund> localVarResponse = await GetPayoutRefundsAsyncWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payout&#39;s refunds 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutRefund)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutRefund>> GetPayoutRefundsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, int? page = null, int? limit = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutRefunds");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutsApi->GetPayoutRefunds");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutsApi->GetPayoutRefunds");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutRefund>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutRefund) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutRefund)));
        }

        /// <summary>
        /// Get list of payout summaries BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>RestApiArrayResultPayoutSummary</returns>
        public RestApiArrayResultPayoutSummary GetPayoutSummaries (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null)
        {
             ApiResponse<RestApiArrayResultPayoutSummary> localVarResponse = GetPayoutSummariesWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payout summaries BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultPayoutSummary</returns>
        public ApiResponse< RestApiArrayResultPayoutSummary > GetPayoutSummariesWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutSummaries");

            var localVarPath = "/api/v1.0/{appId}/payouts/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bankAccountId", bankAccountId)); // query parameter
            if (payeeBankAccountDataId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payeeBankAccountDataId", payeeBankAccountDataId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultPayoutSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultPayoutSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultPayoutSummary)));
        }

        /// <summary>
        /// Get list of payout summaries BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of RestApiArrayResultPayoutSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultPayoutSummary> GetPayoutSummariesAsync (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null)
        {
             ApiResponse<RestApiArrayResultPayoutSummary> localVarResponse = await GetPayoutSummariesAsyncWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payout summaries BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultPayoutSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultPayoutSummary>> GetPayoutSummariesAsyncWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayoutSummaries");

            var localVarPath = "/api/v1.0/{appId}/payouts/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bankAccountId", bankAccountId)); // query parameter
            if (payeeBankAccountDataId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payeeBankAccountDataId", payeeBankAccountDataId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultPayoutSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultPayoutSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultPayoutSummary)));
        }

        /// <summary>
        /// Get list of payouts BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayout</returns>
        public RestApiPaginationResultPayout GetPayouts (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayout> localVarResponse = GetPayoutsWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of payouts BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayout</returns>
        public ApiResponse< RestApiPaginationResultPayout > GetPayoutsWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayouts");

            var localVarPath = "/api/v1.0/{appId}/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bankAccountId", bankAccountId)); // query parameter
            if (payeeBankAccountDataId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payeeBankAccountDataId", payeeBankAccountDataId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayout)));
        }

        /// <summary>
        /// Get list of payouts BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayout</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayout> GetPayoutsAsync (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayout> localVarResponse = await GetPayoutsAsyncWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of payouts BETA - this endpoint is under development, do not use it in your production system
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"> (optional)</param>
        /// <param name="payeeBankAccountDataId">Deprecated (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayout>> GetPayoutsAsyncWithHttpInfo (string appId, int? bankAccountId = null, int? payeeBankAccountDataId = null, DateTime? startDate = null, DateTime? endDate = null, string status = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutsApi->GetPayouts");

            var localVarPath = "/api/v1.0/{appId}/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bankAccountId", bankAccountId)); // query parameter
            if (payeeBankAccountDataId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payeeBankAccountDataId", payeeBankAccountDataId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPayout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayout)));
        }

    }
}

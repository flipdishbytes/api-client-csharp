/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestaurantVouchersPayGreenApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        RestApiResultRestaurantVoucherPayGreenConfiguration CreatePayGreenConfiguration (string appId, CreatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> CreatePayGreenConfigurationWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Object</returns>
        Object DeletePayGreenConfiguration (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeletePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        RestApiArrayResultRestaurantVoucherEligibleStore GetElegibleStores (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> GetElegibleStoresWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        RestApiArrayResultRestaurantVoucherPayGreenConfiguration GetPayGreenConfigurations (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration> GetPayGreenConfigurationsWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary GetStoreAvailablePayGreenConfigurations (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        RestApiResultRestaurantVoucherPayGreenStoreConfiguration GetStorePayGreenConfiguration_ (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> GetStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        RestApiResultRestaurantVoucherPayGreenConfiguration ListPayGreenConfigurations (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> ListPayGreenConfigurationsWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        RestApiResultRestaurantVoucherPayGreenConfiguration UpdatePayGreenConfiguration (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> UpdatePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        RestApiResultRestaurantVoucherPayGreenStoreConfiguration UpdateStorePayGreenConfiguration_ (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> UpdateStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> CreatePayGreenConfigurationAsync (string appId, CreatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> CreatePayGreenConfigurationAsyncWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeletePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherEligibleStore> GetElegibleStoresAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherEligibleStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>> GetElegibleStoresAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPayGreenConfiguration> GetPayGreenConfigurationsAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPayGreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration>> GetPayGreenConfigurationsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsAsync (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary>> GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> GetStorePayGreenConfiguration_Async (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>> GetStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> ListPayGreenConfigurationsAsync (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> ListPayGreenConfigurationsAsyncWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> UpdatePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> UpdatePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> UpdateStorePayGreenConfiguration_Async (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>> UpdateStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestaurantVouchersPayGreenApi : IRestaurantVouchersPayGreenApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestaurantVouchersPayGreenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestaurantVouchersPayGreenApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestaurantVouchersPayGreenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestaurantVouchersPayGreenApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPayGreenConfiguration CreatePayGreenConfiguration (string appId, CreatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = CreatePayGreenConfigurationWithHttpInfo(appId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPayGreenConfiguration > CreatePayGreenConfigurationWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->CreatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->CreatePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> CreatePayGreenConfigurationAsync (string appId, CreatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = await CreatePayGreenConfigurationAsyncWithHttpInfo(appId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> CreatePayGreenConfigurationAsyncWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->CreatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->CreatePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Object</returns>
        public Object DeletePayGreenConfiguration (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<Object> localVarResponse = DeletePayGreenConfigurationWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeletePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->DeletePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->DeletePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeletePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<Object> localVarResponse = await DeletePayGreenConfigurationAsyncWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->DeletePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->DeletePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public RestApiArrayResultRestaurantVoucherEligibleStore GetElegibleStores (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> localVarResponse = GetElegibleStoresWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherEligibleStore > GetElegibleStoresWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetElegibleStores");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElegibleStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherEligibleStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherEligibleStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherEligibleStore> GetElegibleStoresAsync (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> localVarResponse = await GetElegibleStoresAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherEligibleStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>> GetElegibleStoresAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetElegibleStores");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElegibleStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherEligibleStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherEligibleStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        public RestApiArrayResultRestaurantVoucherPayGreenConfiguration GetPayGreenConfigurations (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration> localVarResponse = GetPayGreenConfigurationsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherPayGreenConfiguration > GetPayGreenConfigurationsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetPayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPayGreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPayGreenConfiguration> GetPayGreenConfigurationsAsync (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration> localVarResponse = await GetPayGreenConfigurationsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPayGreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration>> GetPayGreenConfigurationsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetPayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        public RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary GetStoreAvailablePayGreenConfigurations (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary> localVarResponse = GetStoreAvailablePayGreenConfigurationsWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary > GetStoreAvailablePayGreenConfigurationsWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetStoreAvailablePayGreenConfigurations");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->GetStoreAvailablePayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}/available-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreAvailablePayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsAsync (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary> localVarResponse = await GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary>> GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetStoreAvailablePayGreenConfigurations");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->GetStoreAvailablePayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}/available-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreAvailablePayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPayGreenConfigurationSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public RestApiResultRestaurantVoucherPayGreenStoreConfiguration GetStorePayGreenConfiguration_ (string appId, int? storeId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> localVarResponse = GetStorePayGreenConfiguration_WithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPayGreenStoreConfiguration > GetStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->GetStorePayGreenConfiguration_");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> GetStorePayGreenConfiguration_Async (string appId, int? storeId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> localVarResponse = await GetStorePayGreenConfiguration_AsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>> GetStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->GetStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->GetStorePayGreenConfiguration_");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPayGreenConfiguration ListPayGreenConfigurations (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = ListPayGreenConfigurationsWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPayGreenConfiguration > ListPayGreenConfigurationsWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->ListPayGreenConfigurations");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->ListPayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> ListPayGreenConfigurationsAsync (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = await ListPayGreenConfigurationsAsyncWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> ListPayGreenConfigurationsAsyncWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->ListPayGreenConfigurations");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->ListPayGreenConfigurations");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPayGreenConfiguration UpdatePayGreenConfiguration (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = UpdatePayGreenConfigurationWithHttpInfo(appId, paygreenConfigurationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPayGreenConfiguration > UpdatePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenConfiguration> UpdatePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration> localVarResponse = await UpdatePayGreenConfigurationAsyncWithHttpInfo(appId, paygreenConfigurationId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>> UpdatePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->UpdatePayGreenConfiguration");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public RestApiResultRestaurantVoucherPayGreenStoreConfiguration UpdateStorePayGreenConfiguration_ (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> localVarResponse = UpdateStorePayGreenConfiguration_WithHttpInfo(appId, storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPayGreenStoreConfiguration > UpdateStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPayGreenStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> UpdateStorePayGreenConfiguration_Async (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration> localVarResponse = await UpdateStorePayGreenConfiguration_AsyncWithHttpInfo(appId, storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPayGreenStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>> UpdateStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId, UpdateStorePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling RestaurantVouchersPayGreenApi->UpdateStorePayGreenConfiguration_");

            var localVarPath = "./api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPayGreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPayGreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPayGreenStoreConfiguration)));
        }

    }
}

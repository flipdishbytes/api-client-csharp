/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebsiteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>RestApiResultWebsiteTestimonial</returns>
        RestApiResultWebsiteTestimonial AddTestimonial (string appId, WebsiteTestimonialBase testimonial);

        /// <summary>
        /// Add a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>ApiResponse of RestApiResultWebsiteTestimonial</returns>
        ApiResponse<RestApiResultWebsiteTestimonial> AddTestimonialWithHttpInfo (string appId, WebsiteTestimonialBase testimonial);
        /// <summary>
        /// Delete a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns></returns>
        void DeleteTestimonial (string appId, int? testimonialId);

        /// <summary>
        /// Delete a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTestimonialWithHttpInfo (string appId, int? testimonialId);
        /// <summary>
        /// Delete Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns></returns>
        void DeleteWebsiteImage (string appId, int? imageId);

        /// <summary>
        /// Delete Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebsiteImageWithHttpInfo (string appId, int? imageId);
        /// <summary>
        /// Edit a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>RestApiResultWebsiteTestimonial</returns>
        RestApiResultWebsiteTestimonial EditTestimonial (string appId, int? testimonialId, WebsiteTestimonialBase testimonial);

        /// <summary>
        /// Edit a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>ApiResponse of RestApiResultWebsiteTestimonial</returns>
        ApiResponse<RestApiResultWebsiteTestimonial> EditTestimonialWithHttpInfo (string appId, int? testimonialId, WebsiteTestimonialBase testimonial);
        /// <summary>
        /// Get Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>RestApiResultIndexPage</returns>
        RestApiResultIndexPage GetIndexConfiguration (string appId);

        /// <summary>
        /// Get Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>ApiResponse of RestApiResultIndexPage</returns>
        ApiResponse<RestApiResultIndexPage> GetIndexConfigurationWithHttpInfo (string appId);
        /// <summary>
        /// Set Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>RestApiResultIndexPageBase</returns>
        RestApiResultIndexPageBase SetIndexConfiguration (string appId, IndexPageBase indexPage);

        /// <summary>
        /// Set Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>ApiResponse of RestApiResultIndexPageBase</returns>
        ApiResponse<RestApiResultIndexPageBase> SetIndexConfigurationWithHttpInfo (string appId, IndexPageBase indexPage);
        /// <summary>
        /// Upload Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>RestApiResultWebsiteImage</returns>
        RestApiResultWebsiteImage UploadWebsiteImage (string appId, string imageLocation, System.IO.Stream image);

        /// <summary>
        /// Upload Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>ApiResponse of RestApiResultWebsiteImage</returns>
        ApiResponse<RestApiResultWebsiteImage> UploadWebsiteImageWithHttpInfo (string appId, string imageLocation, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>Task of RestApiResultWebsiteTestimonial</returns>
        System.Threading.Tasks.Task<RestApiResultWebsiteTestimonial> AddTestimonialAsync (string appId, WebsiteTestimonialBase testimonial);

        /// <summary>
        /// Add a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteTestimonial)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteTestimonial>> AddTestimonialAsyncWithHttpInfo (string appId, WebsiteTestimonialBase testimonial);
        /// <summary>
        /// Delete a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTestimonialAsync (string appId, int? testimonialId);

        /// <summary>
        /// Delete a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTestimonialAsyncWithHttpInfo (string appId, int? testimonialId);
        /// <summary>
        /// Delete Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebsiteImageAsync (string appId, int? imageId);

        /// <summary>
        /// Delete Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebsiteImageAsyncWithHttpInfo (string appId, int? imageId);
        /// <summary>
        /// Edit a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>Task of RestApiResultWebsiteTestimonial</returns>
        System.Threading.Tasks.Task<RestApiResultWebsiteTestimonial> EditTestimonialAsync (string appId, int? testimonialId, WebsiteTestimonialBase testimonial);

        /// <summary>
        /// Edit a testimonial
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteTestimonial)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteTestimonial>> EditTestimonialAsyncWithHttpInfo (string appId, int? testimonialId, WebsiteTestimonialBase testimonial);
        /// <summary>
        /// Get Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>Task of RestApiResultIndexPage</returns>
        System.Threading.Tasks.Task<RestApiResultIndexPage> GetIndexConfigurationAsync (string appId);

        /// <summary>
        /// Get Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultIndexPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultIndexPage>> GetIndexConfigurationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Set Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>Task of RestApiResultIndexPageBase</returns>
        System.Threading.Tasks.Task<RestApiResultIndexPageBase> SetIndexConfigurationAsync (string appId, IndexPageBase indexPage);

        /// <summary>
        /// Set Index Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>Task of ApiResponse (RestApiResultIndexPageBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultIndexPageBase>> SetIndexConfigurationAsyncWithHttpInfo (string appId, IndexPageBase indexPage);
        /// <summary>
        /// Upload Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>Task of RestApiResultWebsiteImage</returns>
        System.Threading.Tasks.Task<RestApiResultWebsiteImage> UploadWebsiteImageAsync (string appId, string imageLocation, System.IO.Stream image);

        /// <summary>
        /// Upload Website Image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteImage>> UploadWebsiteImageAsyncWithHttpInfo (string appId, string imageLocation, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebsiteApi : IWebsiteApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebsiteApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebsiteApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>RestApiResultWebsiteTestimonial</returns>
        public RestApiResultWebsiteTestimonial AddTestimonial (string appId, WebsiteTestimonialBase testimonial)
        {
             ApiResponse<RestApiResultWebsiteTestimonial> localVarResponse = AddTestimonialWithHttpInfo(appId, testimonial);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>ApiResponse of RestApiResultWebsiteTestimonial</returns>
        public ApiResponse< RestApiResultWebsiteTestimonial > AddTestimonialWithHttpInfo (string appId, WebsiteTestimonialBase testimonial)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->AddTestimonial");
            // verify the required parameter 'testimonial' is set
            if (testimonial == null)
                throw new ApiException(400, "Missing required parameter 'testimonial' when calling WebsiteApi->AddTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonial != null && testimonial.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(testimonial); // http body (model) parameter
            }
            else
            {
                localVarPostBody = testimonial; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteTestimonial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteTestimonial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteTestimonial)));
        }

        /// <summary>
        /// Add a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>Task of RestApiResultWebsiteTestimonial</returns>
        public async System.Threading.Tasks.Task<RestApiResultWebsiteTestimonial> AddTestimonialAsync (string appId, WebsiteTestimonialBase testimonial)
        {
             ApiResponse<RestApiResultWebsiteTestimonial> localVarResponse = await AddTestimonialAsyncWithHttpInfo(appId, testimonial);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonial">Testimonial to be added</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteTestimonial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteTestimonial>> AddTestimonialAsyncWithHttpInfo (string appId, WebsiteTestimonialBase testimonial)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->AddTestimonial");
            // verify the required parameter 'testimonial' is set
            if (testimonial == null)
                throw new ApiException(400, "Missing required parameter 'testimonial' when calling WebsiteApi->AddTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonial != null && testimonial.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(testimonial); // http body (model) parameter
            }
            else
            {
                localVarPostBody = testimonial; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteTestimonial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteTestimonial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteTestimonial)));
        }

        /// <summary>
        /// Delete a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns></returns>
        public void DeleteTestimonial (string appId, int? testimonialId)
        {
             DeleteTestimonialWithHttpInfo(appId, testimonialId);
        }

        /// <summary>
        /// Delete a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTestimonialWithHttpInfo (string appId, int? testimonialId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->DeleteTestimonial");
            // verify the required parameter 'testimonialId' is set
            if (testimonialId == null)
                throw new ApiException(400, "Missing required parameter 'testimonialId' when calling WebsiteApi->DeleteTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonialId != null) localVarPathParams.Add("testimonialId", this.Configuration.ApiClient.ParameterToString(testimonialId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTestimonialAsync (string appId, int? testimonialId)
        {
             await DeleteTestimonialAsyncWithHttpInfo(appId, testimonialId);

        }

        /// <summary>
        /// Delete a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTestimonialAsyncWithHttpInfo (string appId, int? testimonialId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->DeleteTestimonial");
            // verify the required parameter 'testimonialId' is set
            if (testimonialId == null)
                throw new ApiException(400, "Missing required parameter 'testimonialId' when calling WebsiteApi->DeleteTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonialId != null) localVarPathParams.Add("testimonialId", this.Configuration.ApiClient.ParameterToString(testimonialId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns></returns>
        public void DeleteWebsiteImage (string appId, int? imageId)
        {
             DeleteWebsiteImageWithHttpInfo(appId, imageId);
        }

        /// <summary>
        /// Delete Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebsiteImageWithHttpInfo (string appId, int? imageId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->DeleteWebsiteImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling WebsiteApi->DeleteWebsiteImage");

            var localVarPath = "/api/v1.0/{appId}/website/image/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebsiteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebsiteImageAsync (string appId, int? imageId)
        {
             await DeleteWebsiteImageAsyncWithHttpInfo(appId, imageId);

        }

        /// <summary>
        /// Delete Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageId">Id of the image</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebsiteImageAsyncWithHttpInfo (string appId, int? imageId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->DeleteWebsiteImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling WebsiteApi->DeleteWebsiteImage");

            var localVarPath = "/api/v1.0/{appId}/website/image/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebsiteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>RestApiResultWebsiteTestimonial</returns>
        public RestApiResultWebsiteTestimonial EditTestimonial (string appId, int? testimonialId, WebsiteTestimonialBase testimonial)
        {
             ApiResponse<RestApiResultWebsiteTestimonial> localVarResponse = EditTestimonialWithHttpInfo(appId, testimonialId, testimonial);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>ApiResponse of RestApiResultWebsiteTestimonial</returns>
        public ApiResponse< RestApiResultWebsiteTestimonial > EditTestimonialWithHttpInfo (string appId, int? testimonialId, WebsiteTestimonialBase testimonial)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->EditTestimonial");
            // verify the required parameter 'testimonialId' is set
            if (testimonialId == null)
                throw new ApiException(400, "Missing required parameter 'testimonialId' when calling WebsiteApi->EditTestimonial");
            // verify the required parameter 'testimonial' is set
            if (testimonial == null)
                throw new ApiException(400, "Missing required parameter 'testimonial' when calling WebsiteApi->EditTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonialId != null) localVarPathParams.Add("testimonialId", this.Configuration.ApiClient.ParameterToString(testimonialId)); // path parameter
            if (testimonial != null && testimonial.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(testimonial); // http body (model) parameter
            }
            else
            {
                localVarPostBody = testimonial; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteTestimonial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteTestimonial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteTestimonial)));
        }

        /// <summary>
        /// Edit a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>Task of RestApiResultWebsiteTestimonial</returns>
        public async System.Threading.Tasks.Task<RestApiResultWebsiteTestimonial> EditTestimonialAsync (string appId, int? testimonialId, WebsiteTestimonialBase testimonial)
        {
             ApiResponse<RestApiResultWebsiteTestimonial> localVarResponse = await EditTestimonialAsyncWithHttpInfo(appId, testimonialId, testimonial);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a testimonial 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="testimonialId">Id of the testimonial to edit</param>
        /// <param name="testimonial">New values of the testimonial</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteTestimonial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteTestimonial>> EditTestimonialAsyncWithHttpInfo (string appId, int? testimonialId, WebsiteTestimonialBase testimonial)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->EditTestimonial");
            // verify the required parameter 'testimonialId' is set
            if (testimonialId == null)
                throw new ApiException(400, "Missing required parameter 'testimonialId' when calling WebsiteApi->EditTestimonial");
            // verify the required parameter 'testimonial' is set
            if (testimonial == null)
                throw new ApiException(400, "Missing required parameter 'testimonial' when calling WebsiteApi->EditTestimonial");

            var localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (testimonialId != null) localVarPathParams.Add("testimonialId", this.Configuration.ApiClient.ParameterToString(testimonialId)); // path parameter
            if (testimonial != null && testimonial.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(testimonial); // http body (model) parameter
            }
            else
            {
                localVarPostBody = testimonial; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTestimonial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteTestimonial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteTestimonial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteTestimonial)));
        }

        /// <summary>
        /// Get Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>RestApiResultIndexPage</returns>
        public RestApiResultIndexPage GetIndexConfiguration (string appId)
        {
             ApiResponse<RestApiResultIndexPage> localVarResponse = GetIndexConfigurationWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>ApiResponse of RestApiResultIndexPage</returns>
        public ApiResponse< RestApiResultIndexPage > GetIndexConfigurationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->GetIndexConfiguration");

            var localVarPath = "/api/v1.0/{appId}/website/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndexConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultIndexPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultIndexPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultIndexPage)));
        }

        /// <summary>
        /// Get Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>Task of RestApiResultIndexPage</returns>
        public async System.Threading.Tasks.Task<RestApiResultIndexPage> GetIndexConfigurationAsync (string appId)
        {
             ApiResponse<RestApiResultIndexPage> localVarResponse = await GetIndexConfigurationAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultIndexPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultIndexPage>> GetIndexConfigurationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->GetIndexConfiguration");

            var localVarPath = "/api/v1.0/{appId}/website/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndexConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultIndexPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultIndexPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultIndexPage)));
        }

        /// <summary>
        /// Set Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>RestApiResultIndexPageBase</returns>
        public RestApiResultIndexPageBase SetIndexConfiguration (string appId, IndexPageBase indexPage)
        {
             ApiResponse<RestApiResultIndexPageBase> localVarResponse = SetIndexConfigurationWithHttpInfo(appId, indexPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>ApiResponse of RestApiResultIndexPageBase</returns>
        public ApiResponse< RestApiResultIndexPageBase > SetIndexConfigurationWithHttpInfo (string appId, IndexPageBase indexPage)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->SetIndexConfiguration");
            // verify the required parameter 'indexPage' is set
            if (indexPage == null)
                throw new ApiException(400, "Missing required parameter 'indexPage' when calling WebsiteApi->SetIndexConfiguration");

            var localVarPath = "/api/v1.0/{appId}/website/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (indexPage != null && indexPage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(indexPage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = indexPage; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetIndexConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultIndexPageBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultIndexPageBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultIndexPageBase)));
        }

        /// <summary>
        /// Set Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>Task of RestApiResultIndexPageBase</returns>
        public async System.Threading.Tasks.Task<RestApiResultIndexPageBase> SetIndexConfigurationAsync (string appId, IndexPageBase indexPage)
        {
             ApiResponse<RestApiResultIndexPageBase> localVarResponse = await SetIndexConfigurationAsyncWithHttpInfo(appId, indexPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Index Configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="indexPage">New index page definition</param>
        /// <returns>Task of ApiResponse (RestApiResultIndexPageBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultIndexPageBase>> SetIndexConfigurationAsyncWithHttpInfo (string appId, IndexPageBase indexPage)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->SetIndexConfiguration");
            // verify the required parameter 'indexPage' is set
            if (indexPage == null)
                throw new ApiException(400, "Missing required parameter 'indexPage' when calling WebsiteApi->SetIndexConfiguration");

            var localVarPath = "/api/v1.0/{appId}/website/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (indexPage != null && indexPage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(indexPage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = indexPage; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetIndexConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultIndexPageBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultIndexPageBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultIndexPageBase)));
        }

        /// <summary>
        /// Upload Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>RestApiResultWebsiteImage</returns>
        public RestApiResultWebsiteImage UploadWebsiteImage (string appId, string imageLocation, System.IO.Stream image)
        {
             ApiResponse<RestApiResultWebsiteImage> localVarResponse = UploadWebsiteImageWithHttpInfo(appId, imageLocation, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>ApiResponse of RestApiResultWebsiteImage</returns>
        public ApiResponse< RestApiResultWebsiteImage > UploadWebsiteImageWithHttpInfo (string appId, string imageLocation, System.IO.Stream image)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->UploadWebsiteImage");
            // verify the required parameter 'imageLocation' is set
            if (imageLocation == null)
                throw new ApiException(400, "Missing required parameter 'imageLocation' when calling WebsiteApi->UploadWebsiteImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling WebsiteApi->UploadWebsiteImage");

            var localVarPath = "/api/v1.0/{appId}/website/image/{imageLocation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (imageLocation != null) localVarPathParams.Add("imageLocation", this.Configuration.ApiClient.ParameterToString(imageLocation)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadWebsiteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteImage)));
        }

        /// <summary>
        /// Upload Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>Task of RestApiResultWebsiteImage</returns>
        public async System.Threading.Tasks.Task<RestApiResultWebsiteImage> UploadWebsiteImageAsync (string appId, string imageLocation, System.IO.Stream image)
        {
             ApiResponse<RestApiResultWebsiteImage> localVarResponse = await UploadWebsiteImageAsyncWithHttpInfo(appId, imageLocation, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Website Image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="imageLocation">Section for which to upload the image</param>
        /// <param name="image">App Logo</param>
        /// <returns>Task of ApiResponse (RestApiResultWebsiteImage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultWebsiteImage>> UploadWebsiteImageAsyncWithHttpInfo (string appId, string imageLocation, System.IO.Stream image)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling WebsiteApi->UploadWebsiteImage");
            // verify the required parameter 'imageLocation' is set
            if (imageLocation == null)
                throw new ApiException(400, "Missing required parameter 'imageLocation' when calling WebsiteApi->UploadWebsiteImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling WebsiteApi->UploadWebsiteImage");

            var localVarPath = "/api/v1.0/{appId}/website/image/{imageLocation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (imageLocation != null) localVarPathParams.Add("imageLocation", this.Configuration.ApiClient.ParameterToString(imageLocation)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadWebsiteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultWebsiteImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultWebsiteImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultWebsiteImage)));
        }

    }
}

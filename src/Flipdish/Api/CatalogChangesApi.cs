/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogChangesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get menu pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPendingMenuChanges</returns>
        RestApiPaginationResultPendingMenuChanges GetPendingMenuChanges (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get menu pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPendingMenuChanges</returns>
        ApiResponse<RestApiPaginationResultPendingMenuChanges> GetPendingMenuChangesWithHttpInfo (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns></returns>
        void PublishPendingMenuChanges (string appId, PublishMenuChanges publishMenuChanges);

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PublishPendingMenuChangesWithHttpInfo (string appId, PublishMenuChanges publishMenuChanges);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get menu pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPendingMenuChanges</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPendingMenuChanges> GetPendingMenuChangesAsync (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get menu pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPendingMenuChanges)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPendingMenuChanges>> GetPendingMenuChangesAsyncWithHttpInfo (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PublishPendingMenuChangesAsync (string appId, PublishMenuChanges publishMenuChanges);

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PublishPendingMenuChangesAsyncWithHttpInfo (string appId, PublishMenuChanges publishMenuChanges);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogChangesApi : ICatalogChangesApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogChangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogChangesApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogChangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogChangesApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get menu pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPendingMenuChanges</returns>
        public RestApiPaginationResultPendingMenuChanges GetPendingMenuChanges (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPendingMenuChanges> localVarResponse = GetPendingMenuChangesWithHttpInfo(appId, menuId, catalogItemId, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPendingMenuChanges</returns>
        public ApiResponse< RestApiPaginationResultPendingMenuChanges > GetPendingMenuChangesWithHttpInfo (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogChangesApi->GetPendingMenuChanges");

            var localVarPath = "/api/v1.0/{appId}/menus/catalog-changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (catalogItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "catalogItemId", catalogItemId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingMenuChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPendingMenuChanges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPendingMenuChanges) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPendingMenuChanges)));
        }

        /// <summary>
        /// Get menu pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPendingMenuChanges</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPendingMenuChanges> GetPendingMenuChangesAsync (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPendingMenuChanges> localVarResponse = await GetPendingMenuChangesAsyncWithHttpInfo(appId, menuId, catalogItemId, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"> (optional)</param>
        /// <param name="catalogItemId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPendingMenuChanges)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPendingMenuChanges>> GetPendingMenuChangesAsyncWithHttpInfo (string appId, int? menuId = null, string catalogItemId = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogChangesApi->GetPendingMenuChanges");

            var localVarPath = "/api/v1.0/{appId}/menus/catalog-changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (catalogItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "catalogItemId", catalogItemId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingMenuChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPendingMenuChanges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPendingMenuChanges) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPendingMenuChanges)));
        }

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns></returns>
        public void PublishPendingMenuChanges (string appId, PublishMenuChanges publishMenuChanges)
        {
             PublishPendingMenuChangesWithHttpInfo(appId, publishMenuChanges);
        }

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PublishPendingMenuChangesWithHttpInfo (string appId, PublishMenuChanges publishMenuChanges)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogChangesApi->PublishPendingMenuChanges");
            // verify the required parameter 'publishMenuChanges' is set
            if (publishMenuChanges == null)
                throw new ApiException(400, "Missing required parameter 'publishMenuChanges' when calling CatalogChangesApi->PublishPendingMenuChanges");

            var localVarPath = "/api/v1.0/{appId}/menus/catalog-changes/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (publishMenuChanges != null && publishMenuChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publishMenuChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishMenuChanges; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishPendingMenuChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PublishPendingMenuChangesAsync (string appId, PublishMenuChanges publishMenuChanges)
        {
             await PublishPendingMenuChangesAsyncWithHttpInfo(appId, publishMenuChanges);

        }

        /// <summary>
        /// Update menus with the pending changes from Catalog groups and items [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="publishMenuChanges"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PublishPendingMenuChangesAsyncWithHttpInfo (string appId, PublishMenuChanges publishMenuChanges)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CatalogChangesApi->PublishPendingMenuChanges");
            // verify the required parameter 'publishMenuChanges' is set
            if (publishMenuChanges == null)
                throw new ApiException(400, "Missing required parameter 'publishMenuChanges' when calling CatalogChangesApi->PublishPendingMenuChanges");

            var localVarPath = "/api/v1.0/{appId}/menus/catalog-changes/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (publishMenuChanges != null && publishMenuChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publishMenuChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishMenuChanges; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishPendingMenuChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApmApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiResultApmStatistics</returns>
        RestApiResultApmStatistics GetBasicStatistics (string appId, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiResultApmStatistics</returns>
        ApiResponse<RestApiResultApmStatistics> GetBasicStatisticsWithHttpInfo (string appId, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmHourlyDataPoint</returns>
        RestApiArrayResultApmHourlyDataPoint GetCalendarWeekStatistics (string appId, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmHourlyDataPoint</returns>
        ApiResponse<RestApiArrayResultApmHourlyDataPoint> GetCalendarWeekStatisticsWithHttpInfo (string appId, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        RestApiArrayResultApmDataPoint GetCallsStatistics (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        ApiResponse<RestApiArrayResultApmDataPoint> GetCallsStatisticsWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmCurrencyDataPoint</returns>
        RestApiArrayResultApmCurrencyDataPoint GetOrderStatistics (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmCurrencyDataPoint</returns>
        ApiResponse<RestApiArrayResultApmCurrencyDataPoint> GetOrderStatisticsWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiPaginationResultPhoneCall</returns>
        RestApiPaginationResultPhoneCall GetPaginatedCallList (string appId, int? page = null, int? limit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPhoneCall</returns>
        ApiResponse<RestApiPaginationResultPhoneCall> GetPaginatedCallListWithHttpInfo (string appId, int? page = null, int? limit = null, List<int?> storeId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiResultApmStatistics</returns>
        System.Threading.Tasks.Task<RestApiResultApmStatistics> GetBasicStatisticsAsync (string appId, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultApmStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultApmStatistics>> GetBasicStatisticsAsyncWithHttpInfo (string appId, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmHourlyDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmHourlyDataPoint> GetCalendarWeekStatisticsAsync (string appId, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmHourlyDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmHourlyDataPoint>> GetCalendarWeekStatisticsAsyncWithHttpInfo (string appId, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetCallsStatisticsAsync (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetCallsStatisticsAsyncWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmCurrencyDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmCurrencyDataPoint> GetOrderStatisticsAsync (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmCurrencyDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmCurrencyDataPoint>> GetOrderStatisticsAsyncWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null);
        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiPaginationResultPhoneCall</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPhoneCall> GetPaginatedCallListAsync (string appId, int? page = null, int? limit = null, List<int?> storeId = null);

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPhoneCall)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPhoneCall>> GetPaginatedCallListAsyncWithHttpInfo (string appId, int? page = null, int? limit = null, List<int?> storeId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApmApi : IApmApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApmApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApmApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApmApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiResultApmStatistics</returns>
        public RestApiResultApmStatistics GetBasicStatistics (string appId, List<int?> storeId = null)
        {
             ApiResponse<RestApiResultApmStatistics> localVarResponse = GetBasicStatisticsWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiResultApmStatistics</returns>
        public ApiResponse< RestApiResultApmStatistics > GetBasicStatisticsWithHttpInfo (string appId, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetBasicStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultApmStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultApmStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultApmStatistics)));
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiResultApmStatistics</returns>
        public async System.Threading.Tasks.Task<RestApiResultApmStatistics> GetBasicStatisticsAsync (string appId, List<int?> storeId = null)
        {
             ApiResponse<RestApiResultApmStatistics> localVarResponse = await GetBasicStatisticsAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultApmStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultApmStatistics>> GetBasicStatisticsAsyncWithHttpInfo (string appId, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetBasicStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultApmStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultApmStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultApmStatistics)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmHourlyDataPoint</returns>
        public RestApiArrayResultApmHourlyDataPoint GetCalendarWeekStatistics (string appId, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmHourlyDataPoint> localVarResponse = GetCalendarWeekStatisticsWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmHourlyDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmHourlyDataPoint > GetCalendarWeekStatisticsWithHttpInfo (string appId, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetCalendarWeekStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendarWeekStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmHourlyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmHourlyDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmHourlyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmHourlyDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmHourlyDataPoint> GetCalendarWeekStatisticsAsync (string appId, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmHourlyDataPoint> localVarResponse = await GetCalendarWeekStatisticsAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmHourlyDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmHourlyDataPoint>> GetCalendarWeekStatisticsAsyncWithHttpInfo (string appId, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetCalendarWeekStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendarWeekStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmHourlyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmHourlyDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmHourlyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        public RestApiArrayResultApmDataPoint GetCallsStatistics (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = GetCallsStatisticsWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmDataPoint > GetCallsStatisticsWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetCallsStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetCallsStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/calls/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", this.Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetCallsStatisticsAsync (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = await GetCallsStatisticsAsyncWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetCallsStatisticsAsyncWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetCallsStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetCallsStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/calls/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", this.Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiArrayResultApmCurrencyDataPoint</returns>
        public RestApiArrayResultApmCurrencyDataPoint GetOrderStatistics (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmCurrencyDataPoint> localVarResponse = GetOrderStatisticsWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultApmCurrencyDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmCurrencyDataPoint > GetOrderStatisticsWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetOrderStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetOrderStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/orders/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", this.Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmCurrencyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmCurrencyDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmCurrencyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiArrayResultApmCurrencyDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmCurrencyDataPoint> GetOrderStatisticsAsync (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiArrayResultApmCurrencyDataPoint> localVarResponse = await GetOrderStatisticsAsyncWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics (Value of Orders) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmCurrencyDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmCurrencyDataPoint>> GetOrderStatisticsAsyncWithHttpInfo (string appId, string aggregateDataBy, int? dataPointLimit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetOrderStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetOrderStatistics");

            var localVarPath = "/api/v1.0/{appId}/apm/statistics/orders/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", this.Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmCurrencyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmCurrencyDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmCurrencyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>RestApiPaginationResultPhoneCall</returns>
        public RestApiPaginationResultPhoneCall GetPaginatedCallList (string appId, int? page = null, int? limit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiPaginationResultPhoneCall> localVarResponse = GetPaginatedCallListWithHttpInfo(appId, page, limit, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPhoneCall</returns>
        public ApiResponse< RestApiPaginationResultPhoneCall > GetPaginatedCallListWithHttpInfo (string appId, int? page = null, int? limit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetPaginatedCallList");

            var localVarPath = "/api/v1.0/{appId}/apm/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaginatedCallList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPhoneCall>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPhoneCall) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPhoneCall)));
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of RestApiPaginationResultPhoneCall</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPhoneCall> GetPaginatedCallListAsync (string appId, int? page = null, int? limit = null, List<int?> storeId = null)
        {
             ApiResponse<RestApiPaginationResultPhoneCall> localVarResponse = await GetPaginatedCallListAsyncWithHttpInfo(appId, page, limit, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="storeId">List of stores to search by (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPhoneCall)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPhoneCall>> GetPaginatedCallListAsyncWithHttpInfo (string appId, int? page = null, int? limit = null, List<int?> storeId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApmApi->GetPaginatedCallList");

            var localVarPath = "/api/v1.0/{appId}/apm/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaginatedCallList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPhoneCall>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultPhoneCall) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPhoneCall)));
        }

    }
}

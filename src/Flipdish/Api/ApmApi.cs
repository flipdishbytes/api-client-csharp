/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApmApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>RestApiResultApmStatistics</returns>
        RestApiResultApmStatistics GetBasicStatistics (List<int?> storeId);

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>ApiResponse of RestApiResultApmStatistics</returns>
        ApiResponse<RestApiResultApmStatistics> GetBasicStatisticsWithHttpInfo (List<int?> storeId);
        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>RestApiArrayResultApmAverageHourlyDataPoint</returns>
        RestApiArrayResultApmAverageHourlyDataPoint GetCalendarWeekStatistics (List<int?> storeId);

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>ApiResponse of RestApiArrayResultApmAverageHourlyDataPoint</returns>
        ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint> GetCalendarWeekStatisticsWithHttpInfo (List<int?> storeId);
        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        RestApiArrayResultApmDataPoint GetCallsStatistics (List<int?> storeId, string aggregateDataBy);

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        ApiResponse<RestApiArrayResultApmDataPoint> GetCallsStatisticsWithHttpInfo (List<int?> storeId, string aggregateDataBy);
        /// <summary>
        /// [PRIVATE API] Get Order Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        RestApiArrayResultApmDataPoint GetOrderStatistics (List<int?> storeId, string aggregateDataBy);

        /// <summary>
        /// [PRIVATE API] Get Order Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        ApiResponse<RestApiArrayResultApmDataPoint> GetOrderStatisticsWithHttpInfo (List<int?> storeId, string aggregateDataBy);
        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>RestApiPaginationResultApmCall</returns>
        RestApiPaginationResultApmCall GetPaginatedCallList (List<int?> storeId, int? page = null, int? limit = null);

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultApmCall</returns>
        ApiResponse<RestApiPaginationResultApmCall> GetPaginatedCallListWithHttpInfo (List<int?> storeId, int? page = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of RestApiResultApmStatistics</returns>
        System.Threading.Tasks.Task<RestApiResultApmStatistics> GetBasicStatisticsAsync (List<int?> storeId);

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of ApiResponse (RestApiResultApmStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultApmStatistics>> GetBasicStatisticsAsyncWithHttpInfo (List<int?> storeId);
        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of RestApiArrayResultApmAverageHourlyDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmAverageHourlyDataPoint> GetCalendarWeekStatisticsAsync (List<int?> storeId);

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmAverageHourlyDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint>> GetCalendarWeekStatisticsAsyncWithHttpInfo (List<int?> storeId);
        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetCallsStatisticsAsync (List<int?> storeId, string aggregateDataBy);

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetCallsStatisticsAsyncWithHttpInfo (List<int?> storeId, string aggregateDataBy);
        /// <summary>
        /// [PRIVATE API] Get Order Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetOrderStatisticsAsync (List<int?> storeId, string aggregateDataBy);

        /// <summary>
        /// [PRIVATE API] Get Order Statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetOrderStatisticsAsyncWithHttpInfo (List<int?> storeId, string aggregateDataBy);
        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of RestApiPaginationResultApmCall</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultApmCall> GetPaginatedCallListAsync (List<int?> storeId, int? page = null, int? limit = null);

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultApmCall)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultApmCall>> GetPaginatedCallListAsyncWithHttpInfo (List<int?> storeId, int? page = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApmApi : IApmApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApmApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApmApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApmApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>RestApiResultApmStatistics</returns>
        public RestApiResultApmStatistics GetBasicStatistics (List<int?> storeId)
        {
             ApiResponse<RestApiResultApmStatistics> localVarResponse = GetBasicStatisticsWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>ApiResponse of RestApiResultApmStatistics</returns>
        public ApiResponse< RestApiResultApmStatistics > GetBasicStatisticsWithHttpInfo (List<int?> storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetBasicStatistics");

            var localVarPath = "/api/v1.0/apm/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultApmStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultApmStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultApmStatistics)));
        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of RestApiResultApmStatistics</returns>
        public async System.Threading.Tasks.Task<RestApiResultApmStatistics> GetBasicStatisticsAsync (List<int?> storeId)
        {
             ApiResponse<RestApiResultApmStatistics> localVarResponse = await GetBasicStatisticsAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Basic Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of ApiResponse (RestApiResultApmStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultApmStatistics>> GetBasicStatisticsAsyncWithHttpInfo (List<int?> storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetBasicStatistics");

            var localVarPath = "/api/v1.0/apm/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultApmStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultApmStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultApmStatistics)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>RestApiArrayResultApmAverageHourlyDataPoint</returns>
        public RestApiArrayResultApmAverageHourlyDataPoint GetCalendarWeekStatistics (List<int?> storeId)
        {
             ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint> localVarResponse = GetCalendarWeekStatisticsWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>ApiResponse of RestApiArrayResultApmAverageHourlyDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmAverageHourlyDataPoint > GetCalendarWeekStatisticsWithHttpInfo (List<int?> storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetCalendarWeekStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendarWeekStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmAverageHourlyDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmAverageHourlyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of RestApiArrayResultApmAverageHourlyDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmAverageHourlyDataPoint> GetCalendarWeekStatisticsAsync (List<int?> storeId)
        {
             ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint> localVarResponse = await GetCalendarWeekStatisticsAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Calendar statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmAverageHourlyDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint>> GetCalendarWeekStatisticsAsyncWithHttpInfo (List<int?> storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetCalendarWeekStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendarWeekStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmAverageHourlyDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmAverageHourlyDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmAverageHourlyDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        public RestApiArrayResultApmDataPoint GetCallsStatistics (List<int?> storeId, string aggregateDataBy)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = GetCallsStatisticsWithHttpInfo(storeId, aggregateDataBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmDataPoint > GetCallsStatisticsWithHttpInfo (List<int?> storeId, string aggregateDataBy)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetCallsStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetCallsStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/calls/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetCallsStatisticsAsync (List<int?> storeId, string aggregateDataBy)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = await GetCallsStatisticsAsyncWithHttpInfo(storeId, aggregateDataBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Calls Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetCallsStatisticsAsyncWithHttpInfo (List<int?> storeId, string aggregateDataBy)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetCallsStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetCallsStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/calls/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>RestApiArrayResultApmDataPoint</returns>
        public RestApiArrayResultApmDataPoint GetOrderStatistics (List<int?> storeId, string aggregateDataBy)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = GetOrderStatisticsWithHttpInfo(storeId, aggregateDataBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>ApiResponse of RestApiArrayResultApmDataPoint</returns>
        public ApiResponse< RestApiArrayResultApmDataPoint > GetOrderStatisticsWithHttpInfo (List<int?> storeId, string aggregateDataBy)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetOrderStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetOrderStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/orders/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of RestApiArrayResultApmDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultApmDataPoint> GetOrderStatisticsAsync (List<int?> storeId, string aggregateDataBy)
        {
             ApiResponse<RestApiArrayResultApmDataPoint> localVarResponse = await GetOrderStatisticsAsyncWithHttpInfo(storeId, aggregateDataBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get Order Statistics 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultApmDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultApmDataPoint>> GetOrderStatisticsAsyncWithHttpInfo (List<int?> storeId, string aggregateDataBy)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetOrderStatistics");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling ApmApi->GetOrderStatistics");

            var localVarPath = "/api/v1.0/apm/statistics/orders/{aggregateDataBy}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregateDataBy != null) localVarPathParams.Add("aggregateDataBy", Configuration.ApiClient.ParameterToString(aggregateDataBy)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultApmDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultApmDataPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultApmDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>RestApiPaginationResultApmCall</returns>
        public RestApiPaginationResultApmCall GetPaginatedCallList (List<int?> storeId, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultApmCall> localVarResponse = GetPaginatedCallListWithHttpInfo(storeId, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultApmCall</returns>
        public ApiResponse< RestApiPaginationResultApmCall > GetPaginatedCallListWithHttpInfo (List<int?> storeId, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetPaginatedCallList");

            var localVarPath = "/api/v1.0/apm/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaginatedCallList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultApmCall>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultApmCall) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultApmCall)));
        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of RestApiPaginationResultApmCall</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultApmCall> GetPaginatedCallListAsync (List<int?> storeId, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultApmCall> localVarResponse = await GetPaginatedCallListAsyncWithHttpInfo(storeId, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get paginated APM call list 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">List of stores to search by</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultApmCall)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultApmCall>> GetPaginatedCallListAsyncWithHttpInfo (List<int?> storeId, int? page = null, int? limit = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling ApmApi->GetPaginatedCallList");

            var localVarPath = "/api/v1.0/apm/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaginatedCallList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultApmCall>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultApmCall) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultApmCall)));
        }

    }
}

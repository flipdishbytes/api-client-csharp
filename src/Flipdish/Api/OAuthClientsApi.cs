/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthClientsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>RestApiResultOauthClientRedirectUri</returns>
        RestApiResultOauthClientRedirectUri AddRedirectUri (string oAuthClientId, string uri);

        /// <summary>
        /// Create OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>ApiResponse of RestApiResultOauthClientRedirectUri</returns>
        ApiResponse<RestApiResultOauthClientRedirectUri> AddRedirectUriWithHttpInfo (string oAuthClientId, string uri);
        /// <summary>
        /// Create OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns></returns>
        void CreateOAuthClient (OAuthClient oAuthClient);

        /// <summary>
        /// Create OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOAuthClientWithHttpInfo (OAuthClient oAuthClient);
        /// <summary>
        /// Delete OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns></returns>
        void DeleteOAuthClient (string oAuthClientId);

        /// <summary>
        /// Delete OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuthClientWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Get OAuth client by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>RestApiResultOAuthClient</returns>
        RestApiResultOAuthClient GetOAuthClientByClientId (string clientId);

        /// <summary>
        /// Get OAuth client by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiResultOAuthClient</returns>
        ApiResponse<RestApiResultOAuthClient> GetOAuthClientByClientIdWithHttpInfo (string clientId);
        /// <summary>
        /// Get OAuth client secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult GetOAuthClientSecret (string clientId);

        /// <summary>
        /// Get OAuth client secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> GetOAuthClientSecretWithHttpInfo (string clientId);
        /// <summary>
        /// Get all OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiArrayResultOAuthClient</returns>
        RestApiArrayResultOAuthClient GetOAuthClients ();

        /// <summary>
        /// Get all OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiArrayResultOAuthClient</returns>
        ApiResponse<RestApiArrayResultOAuthClient> GetOAuthClientsWithHttpInfo ();
        /// <summary>
        /// Get OAuth access token for client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult GetOauthAccessToken (string oAuthClientId);

        /// <summary>
        /// Get OAuth access token for client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> GetOauthAccessTokenWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Get OAuth client redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>RestApiArrayResultOauthClientRedirectUri</returns>
        RestApiArrayResultOauthClientRedirectUri GetRedirectUris (string oAuthClientId);

        /// <summary>
        /// Get OAuth client redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultOauthClientRedirectUri</returns>
        ApiResponse<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Delete OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns></returns>
        void RemoveRedirectUri (string oAuthClientId, int? uriId);

        /// <summary>
        /// Delete OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRedirectUriWithHttpInfo (string oAuthClientId, int? uriId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>Task of RestApiResultOauthClientRedirectUri</returns>
        System.Threading.Tasks.Task<RestApiResultOauthClientRedirectUri> AddRedirectUriAsync (string oAuthClientId, string uri);

        /// <summary>
        /// Create OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>Task of ApiResponse (RestApiResultOauthClientRedirectUri)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOauthClientRedirectUri>> AddRedirectUriAsyncWithHttpInfo (string oAuthClientId, string uri);
        /// <summary>
        /// Create OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOAuthClientAsync (OAuthClient oAuthClient);

        /// <summary>
        /// Create OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOAuthClientAsyncWithHttpInfo (OAuthClient oAuthClient);
        /// <summary>
        /// Delete OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuthClientAsync (string oAuthClientId);

        /// <summary>
        /// Delete OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuthClientAsyncWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Get OAuth client by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of RestApiResultOAuthClient</returns>
        System.Threading.Tasks.Task<RestApiResultOAuthClient> GetOAuthClientByClientIdAsync (string clientId);

        /// <summary>
        /// Get OAuth client by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultOAuthClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOAuthClient>> GetOAuthClientByClientIdAsyncWithHttpInfo (string clientId);
        /// <summary>
        /// Get OAuth client secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> GetOAuthClientSecretAsync (string clientId);

        /// <summary>
        /// Get OAuth client secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOAuthClientSecretAsyncWithHttpInfo (string clientId);
        /// <summary>
        /// Get all OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiArrayResultOAuthClient</returns>
        System.Threading.Tasks.Task<RestApiArrayResultOAuthClient> GetOAuthClientsAsync ();

        /// <summary>
        /// Get all OAuth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiArrayResultOAuthClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOAuthClient>> GetOAuthClientsAsyncWithHttpInfo ();
        /// <summary>
        /// Get OAuth access token for client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> GetOauthAccessTokenAsync (string oAuthClientId);

        /// <summary>
        /// Get OAuth access token for client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOauthAccessTokenAsyncWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Get OAuth client redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of RestApiArrayResultOauthClientRedirectUri</returns>
        System.Threading.Tasks.Task<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisAsync (string oAuthClientId);

        /// <summary>
        /// Get OAuth client redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOauthClientRedirectUri)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOauthClientRedirectUri>> GetRedirectUrisAsyncWithHttpInfo (string oAuthClientId);
        /// <summary>
        /// Delete OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRedirectUriAsync (string oAuthClientId, int? uriId);

        /// <summary>
        /// Delete OAuth client redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRedirectUriAsyncWithHttpInfo (string oAuthClientId, int? uriId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthClientsApi : IOAuthClientsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthClientsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthClientsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>RestApiResultOauthClientRedirectUri</returns>
        public RestApiResultOauthClientRedirectUri AddRedirectUri (string oAuthClientId, string uri)
        {
             ApiResponse<RestApiResultOauthClientRedirectUri> localVarResponse = AddRedirectUriWithHttpInfo(oAuthClientId, uri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>ApiResponse of RestApiResultOauthClientRedirectUri</returns>
        public ApiResponse< RestApiResultOauthClientRedirectUri > AddRedirectUriWithHttpInfo (string oAuthClientId, string uri)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new ApiException(400, "Missing required parameter 'uri' when calling OAuthClientsApi->AddRedirectUri");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter
            if (uri != null && uri.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uri); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uri; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOauthClientRedirectUri) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Create OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>Task of RestApiResultOauthClientRedirectUri</returns>
        public async System.Threading.Tasks.Task<RestApiResultOauthClientRedirectUri> AddRedirectUriAsync (string oAuthClientId, string uri)
        {
             ApiResponse<RestApiResultOauthClientRedirectUri> localVarResponse = await AddRedirectUriAsyncWithHttpInfo(oAuthClientId, uri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <returns>Task of ApiResponse (RestApiResultOauthClientRedirectUri)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOauthClientRedirectUri>> AddRedirectUriAsyncWithHttpInfo (string oAuthClientId, string uri)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new ApiException(400, "Missing required parameter 'uri' when calling OAuthClientsApi->AddRedirectUri");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter
            if (uri != null && uri.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uri); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uri; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOauthClientRedirectUri) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Create OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns></returns>
        public void CreateOAuthClient (OAuthClient oAuthClient)
        {
             CreateOAuthClientWithHttpInfo(oAuthClient);
        }

        /// <summary>
        /// Create OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOAuthClientWithHttpInfo (OAuthClient oAuthClient)
        {
            // verify the required parameter 'oAuthClient' is set
            if (oAuthClient == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClient' when calling OAuthClientsApi->CreateOAuthClient");

            var localVarPath = "/api/v1.0/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClient != null && oAuthClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oAuthClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oAuthClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOAuthClientAsync (OAuthClient oAuthClient)
        {
             await CreateOAuthClientAsyncWithHttpInfo(oAuthClient);

        }

        /// <summary>
        /// Create OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClient">OAuth client</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOAuthClientAsyncWithHttpInfo (OAuthClient oAuthClient)
        {
            // verify the required parameter 'oAuthClient' is set
            if (oAuthClient == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClient' when calling OAuthClientsApi->CreateOAuthClient");

            var localVarPath = "/api/v1.0/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClient != null && oAuthClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oAuthClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oAuthClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns></returns>
        public void DeleteOAuthClient (string oAuthClientId)
        {
             DeleteOAuthClientWithHttpInfo(oAuthClientId);
        }

        /// <summary>
        /// Delete OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOAuthClientWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->DeleteOAuthClient");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuthClientAsync (string oAuthClientId)
        {
             await DeleteOAuthClientAsyncWithHttpInfo(oAuthClientId);

        }

        /// <summary>
        /// Delete OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuthClientAsyncWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->DeleteOAuthClient");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get OAuth client by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>RestApiResultOAuthClient</returns>
        public RestApiResultOAuthClient GetOAuthClientByClientId (string clientId)
        {
             ApiResponse<RestApiResultOAuthClient> localVarResponse = GetOAuthClientByClientIdWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth client by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiResultOAuthClient</returns>
        public ApiResponse< RestApiResultOAuthClient > GetOAuthClientByClientIdWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthClientsApi->GetOAuthClientByClientId");

            var localVarPath = "/api/v1.0/oauthclients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOAuthClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOAuthClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOAuthClient)));
        }

        /// <summary>
        /// Get OAuth client by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of RestApiResultOAuthClient</returns>
        public async System.Threading.Tasks.Task<RestApiResultOAuthClient> GetOAuthClientByClientIdAsync (string clientId)
        {
             ApiResponse<RestApiResultOAuthClient> localVarResponse = await GetOAuthClientByClientIdAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth client by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultOAuthClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOAuthClient>> GetOAuthClientByClientIdAsyncWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthClientsApi->GetOAuthClientByClientId");

            var localVarPath = "/api/v1.0/oauthclients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOAuthClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOAuthClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOAuthClient)));
        }

        /// <summary>
        /// Get OAuth client secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult GetOAuthClientSecret (string clientId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = GetOAuthClientSecretWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth client secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > GetOAuthClientSecretWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthClientsApi->GetOAuthClientSecret");

            var localVarPath = "/api/v1.0/oauthclients/{clientId}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth client secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> GetOAuthClientSecretAsync (string clientId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await GetOAuthClientSecretAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth client secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOAuthClientSecretAsyncWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OAuthClientsApi->GetOAuthClientSecret");

            var localVarPath = "/api/v1.0/oauthclients/{clientId}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get all OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiArrayResultOAuthClient</returns>
        public RestApiArrayResultOAuthClient GetOAuthClients ()
        {
             ApiResponse<RestApiArrayResultOAuthClient> localVarResponse = GetOAuthClientsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiArrayResultOAuthClient</returns>
        public ApiResponse< RestApiArrayResultOAuthClient > GetOAuthClientsWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOAuthClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOAuthClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOAuthClient)));
        }

        /// <summary>
        /// Get all OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiArrayResultOAuthClient</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultOAuthClient> GetOAuthClientsAsync ()
        {
             ApiResponse<RestApiArrayResultOAuthClient> localVarResponse = await GetOAuthClientsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all OAuth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiArrayResultOAuthClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOAuthClient>> GetOAuthClientsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOAuthClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOAuthClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOAuthClient)));
        }

        /// <summary>
        /// Get OAuth access token for client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult GetOauthAccessToken (string oAuthClientId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = GetOauthAccessTokenWithHttpInfo(oAuthClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth access token for client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > GetOauthAccessTokenWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->GetOauthAccessToken");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOauthAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth access token for client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> GetOauthAccessTokenAsync (string oAuthClientId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await GetOauthAccessTokenAsyncWithHttpInfo(oAuthClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth access token for client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOauthAccessTokenAsyncWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->GetOauthAccessToken");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOauthAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth client redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>RestApiArrayResultOauthClientRedirectUri</returns>
        public RestApiArrayResultOauthClientRedirectUri GetRedirectUris (string oAuthClientId)
        {
             ApiResponse<RestApiArrayResultOauthClientRedirectUri> localVarResponse = GetRedirectUrisWithHttpInfo(oAuthClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth client redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultOauthClientRedirectUri</returns>
        public ApiResponse< RestApiArrayResultOauthClientRedirectUri > GetRedirectUrisWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->GetRedirectUris");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedirectUris", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOauthClientRedirectUri) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Get OAuth client redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of RestApiArrayResultOauthClientRedirectUri</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisAsync (string oAuthClientId)
        {
             ApiResponse<RestApiArrayResultOauthClientRedirectUri> localVarResponse = await GetRedirectUrisAsyncWithHttpInfo(oAuthClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth client redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOauthClientRedirectUri)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOauthClientRedirectUri>> GetRedirectUrisAsyncWithHttpInfo (string oAuthClientId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->GetRedirectUris");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedirectUris", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOauthClientRedirectUri) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Delete OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns></returns>
        public void RemoveRedirectUri (string oAuthClientId, int? uriId)
        {
             RemoveRedirectUriWithHttpInfo(oAuthClientId, uriId);
        }

        /// <summary>
        /// Delete OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveRedirectUriWithHttpInfo (string oAuthClientId, int? uriId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'uriId' is set
            if (uriId == null)
                throw new ApiException(400, "Missing required parameter 'uriId' when calling OAuthClientsApi->RemoveRedirectUri");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis/{uriId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter
            if (uriId != null) localVarPathParams.Add("uriId", Configuration.ApiClient.ParameterToString(uriId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRedirectUriAsync (string oAuthClientId, int? uriId)
        {
             await RemoveRedirectUriAsyncWithHttpInfo(oAuthClientId, uriId);

        }

        /// <summary>
        /// Delete OAuth client redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthClientId">OAuth client identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRedirectUriAsyncWithHttpInfo (string oAuthClientId, int? uriId)
        {
            // verify the required parameter 'oAuthClientId' is set
            if (oAuthClientId == null)
                throw new ApiException(400, "Missing required parameter 'oAuthClientId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'uriId' is set
            if (uriId == null)
                throw new ApiException(400, "Missing required parameter 'uriId' when calling OAuthClientsApi->RemoveRedirectUri");

            var localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis/{uriId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oAuthClientId != null) localVarPathParams.Add("oAuthClientId", Configuration.ApiClient.ParameterToString(oAuthClientId)); // path parameter
            if (uriId != null) localVarPathParams.Add("uriId", Configuration.ApiClient.ParameterToString(uriId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

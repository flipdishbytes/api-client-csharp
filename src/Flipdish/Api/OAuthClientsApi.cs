/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthClientsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultOauthClientRedirectUri</returns>
        RestApiResultOauthClientRedirectUri AddRedirectUri (string oauthAppId, string uri, string appId);

        /// <summary>
        /// Create OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultOauthClientRedirectUri</returns>
        ApiResponse<RestApiResultOauthClientRedirectUri> AddRedirectUriWithHttpInfo (string oauthAppId, string uri, string appId);
        /// <summary>
        /// Create OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        void CreateOAuthApp (OAuthApp oAuthApp, string appId);

        /// <summary>
        /// Create OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOAuthAppWithHttpInfo (OAuthApp oAuthApp, string appId);
        /// <summary>
        /// Delete OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        void DeleteOAuthApp (string oauthAppId, string appId);

        /// <summary>
        /// Delete OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuthAppWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get all OAuth Apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>RestApiArrayResultOAuthApp</returns>
        RestApiArrayResultOAuthApp GetOAuthApps (string appId, string oauthAppName = null);

        /// <summary>
        /// Get all OAuth Apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultOAuthApp</returns>
        ApiResponse<RestApiArrayResultOAuthApp> GetOAuthAppsWithHttpInfo (string appId, string oauthAppName = null);
        /// <summary>
        /// Get OAuth App by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultOAuthApp</returns>
        RestApiResultOAuthApp GetOAuthClientByClientId (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultOAuthApp</returns>
        ApiResponse<RestApiResultOAuthApp> GetOAuthClientByClientIdWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth App secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult GetOAuthClientSecret (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> GetOAuthClientSecretWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth access token for App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult GetOauthAccessToken (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth access token for App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> GetOauthAccessTokenWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth App redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultOauthClientRedirectUri</returns>
        RestApiArrayResultOauthClientRedirectUri GetRedirectUris (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultOauthClientRedirectUri</returns>
        ApiResponse<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        Object OAuthClientsGetApplications (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OAuthClientsGetApplicationsWithHttpInfo (string appId);
        /// <summary>
        /// Delete OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        void RemoveRedirectUri (string oauthAppId, int? uriId, string appId);

        /// <summary>
        /// Delete OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRedirectUriWithHttpInfo (string oauthAppId, int? uriId, string appId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultOauthClientRedirectUri</returns>
        System.Threading.Tasks.Task<RestApiResultOauthClientRedirectUri> AddRedirectUriAsync (string oauthAppId, string uri, string appId);

        /// <summary>
        /// Create OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOauthClientRedirectUri)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOauthClientRedirectUri>> AddRedirectUriAsyncWithHttpInfo (string oauthAppId, string uri, string appId);
        /// <summary>
        /// Create OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOAuthAppAsync (OAuthApp oAuthApp, string appId);

        /// <summary>
        /// Create OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOAuthAppAsyncWithHttpInfo (OAuthApp oAuthApp, string appId);
        /// <summary>
        /// Delete OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuthAppAsync (string oauthAppId, string appId);

        /// <summary>
        /// Delete OAuth App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuthAppAsyncWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get all OAuth Apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>Task of RestApiArrayResultOAuthApp</returns>
        System.Threading.Tasks.Task<RestApiArrayResultOAuthApp> GetOAuthAppsAsync (string appId, string oauthAppName = null);

        /// <summary>
        /// Get all OAuth Apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOAuthApp>> GetOAuthAppsAsyncWithHttpInfo (string appId, string oauthAppName = null);
        /// <summary>
        /// Get OAuth App by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultOAuthApp</returns>
        System.Threading.Tasks.Task<RestApiResultOAuthApp> GetOAuthClientByClientIdAsync (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultOAuthApp>> GetOAuthClientByClientIdAsyncWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth App secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> GetOAuthClientSecretAsync (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App secret key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOAuthClientSecretAsyncWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth access token for App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> GetOauthAccessTokenAsync (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth access token for App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOauthAccessTokenAsyncWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// Get OAuth App redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultOauthClientRedirectUri</returns>
        System.Threading.Tasks.Task<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisAsync (string oauthAppId, string appId);

        /// <summary>
        /// Get OAuth App redirect uris
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOauthClientRedirectUri)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOauthClientRedirectUri>> GetRedirectUrisAsyncWithHttpInfo (string oauthAppId, string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OAuthClientsGetApplicationsAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OAuthClientsGetApplicationsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Delete OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRedirectUriAsync (string oauthAppId, int? uriId, string appId);

        /// <summary>
        /// Delete OAuth App redirect uri
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRedirectUriAsyncWithHttpInfo (string oauthAppId, int? uriId, string appId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthClientsApi : IOAuthClientsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthClientsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthClientsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultOauthClientRedirectUri</returns>
        public RestApiResultOauthClientRedirectUri AddRedirectUri (string oauthAppId, string uri, string appId)
        {
             ApiResponse<RestApiResultOauthClientRedirectUri> localVarResponse = AddRedirectUriWithHttpInfo(oauthAppId, uri, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultOauthClientRedirectUri</returns>
        public ApiResponse< RestApiResultOauthClientRedirectUri > AddRedirectUriWithHttpInfo (string oauthAppId, string uri, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new ApiException(400, "Missing required parameter 'uri' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->AddRedirectUri");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (uri != null && uri.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uri); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uri; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOauthClientRedirectUri) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Create OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultOauthClientRedirectUri</returns>
        public async System.Threading.Tasks.Task<RestApiResultOauthClientRedirectUri> AddRedirectUriAsync (string oauthAppId, string uri, string appId)
        {
             ApiResponse<RestApiResultOauthClientRedirectUri> localVarResponse = await AddRedirectUriAsyncWithHttpInfo(oauthAppId, uri, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uri">Redirect uri</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOauthClientRedirectUri)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOauthClientRedirectUri>> AddRedirectUriAsyncWithHttpInfo (string oauthAppId, string uri, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new ApiException(400, "Missing required parameter 'uri' when calling OAuthClientsApi->AddRedirectUri");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->AddRedirectUri");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (uri != null && uri.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uri); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uri; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOauthClientRedirectUri) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Create OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void CreateOAuthApp (OAuthApp oAuthApp, string appId)
        {
             CreateOAuthAppWithHttpInfo(oAuthApp, appId);
        }

        /// <summary>
        /// Create OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOAuthAppWithHttpInfo (OAuthApp oAuthApp, string appId)
        {
            // verify the required parameter 'oAuthApp' is set
            if (oAuthApp == null)
                throw new ApiException(400, "Missing required parameter 'oAuthApp' when calling OAuthClientsApi->CreateOAuthApp");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->CreateOAuthApp");

            var localVarPath = "/api/v1.0/{appId}/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (oAuthApp != null && oAuthApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oAuthApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oAuthApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuthApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOAuthAppAsync (OAuthApp oAuthApp, string appId)
        {
             await CreateOAuthAppAsyncWithHttpInfo(oAuthApp, appId);

        }

        /// <summary>
        /// Create OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthApp">OAuth App</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOAuthAppAsyncWithHttpInfo (OAuthApp oAuthApp, string appId)
        {
            // verify the required parameter 'oAuthApp' is set
            if (oAuthApp == null)
                throw new ApiException(400, "Missing required parameter 'oAuthApp' when calling OAuthClientsApi->CreateOAuthApp");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->CreateOAuthApp");

            var localVarPath = "/api/v1.0/{appId}/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (oAuthApp != null && oAuthApp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oAuthApp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oAuthApp; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuthApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void DeleteOAuthApp (string oauthAppId, string appId)
        {
             DeleteOAuthAppWithHttpInfo(oauthAppId, appId);
        }

        /// <summary>
        /// Delete OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOAuthAppWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->DeleteOAuthApp");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->DeleteOAuthApp");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuthApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuthAppAsync (string oauthAppId, string appId)
        {
             await DeleteOAuthAppAsyncWithHttpInfo(oauthAppId, appId);

        }

        /// <summary>
        /// Delete OAuth App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuthAppAsyncWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->DeleteOAuthApp");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->DeleteOAuthApp");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuthApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all OAuth Apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>RestApiArrayResultOAuthApp</returns>
        public RestApiArrayResultOAuthApp GetOAuthApps (string appId, string oauthAppName = null)
        {
             ApiResponse<RestApiArrayResultOAuthApp> localVarResponse = GetOAuthAppsWithHttpInfo(appId, oauthAppName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all OAuth Apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultOAuthApp</returns>
        public ApiResponse< RestApiArrayResultOAuthApp > GetOAuthAppsWithHttpInfo (string appId, string oauthAppName = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthApps");

            var localVarPath = "/api/v1.0/{appId}/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (oauthAppName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oauthAppName", oauthAppName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOAuthApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOAuthApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOAuthApp)));
        }

        /// <summary>
        /// Get all OAuth Apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>Task of RestApiArrayResultOAuthApp</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultOAuthApp> GetOAuthAppsAsync (string appId, string oauthAppName = null)
        {
             ApiResponse<RestApiArrayResultOAuthApp> localVarResponse = await GetOAuthAppsAsyncWithHttpInfo(appId, oauthAppName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all OAuth Apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="oauthAppName"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOAuthApp>> GetOAuthAppsAsyncWithHttpInfo (string appId, string oauthAppName = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthApps");

            var localVarPath = "/api/v1.0/{appId}/oauthclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (oauthAppName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oauthAppName", oauthAppName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOAuthApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOAuthApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOAuthApp)));
        }

        /// <summary>
        /// Get OAuth App by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultOAuthApp</returns>
        public RestApiResultOAuthApp GetOAuthClientByClientId (string oauthAppId, string appId)
        {
             ApiResponse<RestApiResultOAuthApp> localVarResponse = GetOAuthClientByClientIdWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth App by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultOAuthApp</returns>
        public ApiResponse< RestApiResultOAuthApp > GetOAuthClientByClientIdWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOAuthClientByClientId");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthClientByClientId");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOAuthApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOAuthApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOAuthApp)));
        }

        /// <summary>
        /// Get OAuth App by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultOAuthApp</returns>
        public async System.Threading.Tasks.Task<RestApiResultOAuthApp> GetOAuthClientByClientIdAsync (string oauthAppId, string appId)
        {
             ApiResponse<RestApiResultOAuthApp> localVarResponse = await GetOAuthClientByClientIdAsyncWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth App by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultOAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultOAuthApp>> GetOAuthClientByClientIdAsyncWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOAuthClientByClientId");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthClientByClientId");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultOAuthApp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultOAuthApp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultOAuthApp)));
        }

        /// <summary>
        /// Get OAuth App secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult GetOAuthClientSecret (string oauthAppId, string appId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = GetOAuthClientSecretWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth App secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > GetOAuthClientSecretWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOAuthClientSecret");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthClientSecret");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth App secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> GetOAuthClientSecretAsync (string oauthAppId, string appId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await GetOAuthClientSecretAsyncWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth App secret key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOAuthClientSecretAsyncWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOAuthClientSecret");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOAuthClientSecret");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuthClientSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth access token for App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult GetOauthAccessToken (string oauthAppId, string appId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = GetOauthAccessTokenWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth access token for App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > GetOauthAccessTokenWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOauthAccessToken");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOauthAccessToken");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOauthAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth access token for App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> GetOauthAccessTokenAsync (string oauthAppId, string appId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await GetOauthAccessTokenAsyncWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth access token for App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> GetOauthAccessTokenAsyncWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetOauthAccessToken");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetOauthAccessToken");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOauthAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get OAuth App redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultOauthClientRedirectUri</returns>
        public RestApiArrayResultOauthClientRedirectUri GetRedirectUris (string oauthAppId, string appId)
        {
             ApiResponse<RestApiArrayResultOauthClientRedirectUri> localVarResponse = GetRedirectUrisWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth App redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultOauthClientRedirectUri</returns>
        public ApiResponse< RestApiArrayResultOauthClientRedirectUri > GetRedirectUrisWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetRedirectUris");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetRedirectUris");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedirectUris", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOauthClientRedirectUri) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOauthClientRedirectUri)));
        }

        /// <summary>
        /// Get OAuth App redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultOauthClientRedirectUri</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultOauthClientRedirectUri> GetRedirectUrisAsync (string oauthAppId, string appId)
        {
             ApiResponse<RestApiArrayResultOauthClientRedirectUri> localVarResponse = await GetRedirectUrisAsyncWithHttpInfo(oauthAppId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth App redirect uris 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultOauthClientRedirectUri)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultOauthClientRedirectUri>> GetRedirectUrisAsyncWithHttpInfo (string oauthAppId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->GetRedirectUris");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->GetRedirectUris");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRedirectUris", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultOauthClientRedirectUri>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultOauthClientRedirectUri) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultOauthClientRedirectUri)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        public Object OAuthClientsGetApplications (string appId)
        {
             ApiResponse<Object> localVarResponse = OAuthClientsGetApplicationsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OAuthClientsGetApplicationsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->OAuthClientsGetApplications");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/appnames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthClientsGetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OAuthClientsGetApplicationsAsync (string appId)
        {
             ApiResponse<Object> localVarResponse = await OAuthClientsGetApplicationsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OAuthClientsGetApplicationsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->OAuthClientsGetApplications");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/appnames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthClientsGetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void RemoveRedirectUri (string oauthAppId, int? uriId, string appId)
        {
             RemoveRedirectUriWithHttpInfo(oauthAppId, uriId, appId);
        }

        /// <summary>
        /// Delete OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveRedirectUriWithHttpInfo (string oauthAppId, int? uriId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'uriId' is set
            if (uriId == null)
                throw new ApiException(400, "Missing required parameter 'uriId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->RemoveRedirectUri");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis/{uriId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (uriId != null) localVarPathParams.Add("uriId", this.Configuration.ApiClient.ParameterToString(uriId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRedirectUriAsync (string oauthAppId, int? uriId, string appId)
        {
             await RemoveRedirectUriAsyncWithHttpInfo(oauthAppId, uriId, appId);

        }

        /// <summary>
        /// Delete OAuth App redirect uri 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oauthAppId">OAuth App identifier</param>
        /// <param name="uriId">Redirect uri identifier</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRedirectUriAsyncWithHttpInfo (string oauthAppId, int? uriId, string appId)
        {
            // verify the required parameter 'oauthAppId' is set
            if (oauthAppId == null)
                throw new ApiException(400, "Missing required parameter 'oauthAppId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'uriId' is set
            if (uriId == null)
                throw new ApiException(400, "Missing required parameter 'uriId' when calling OAuthClientsApi->RemoveRedirectUri");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthClientsApi->RemoveRedirectUri");

            var localVarPath = "/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis/{uriId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oauthAppId != null) localVarPathParams.Add("oauthAppId", this.Configuration.ApiClient.ParameterToString(oauthAppId)); // path parameter
            if (uriId != null) localVarPathParams.Add("uriId", this.Configuration.ApiClient.ParameterToString(uriId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuZonesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>RestApiResultMenuZone</returns>
        RestApiResultMenuZone AddMenuZone (int? menuId, MenuZone menuZone);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>ApiResponse of RestApiResultMenuZone</returns>
        ApiResponse<RestApiResultMenuZone> AddMenuZoneWithHttpInfo (int? menuId, MenuZone menuZone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void DeleteMenuZone (int? menuZoneId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuZoneWithHttpInfo (int? menuZoneId, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void FlipMenuZones (int? menuZoneId, int? menuZoneI2, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FlipMenuZonesWithHttpInfo (int? menuZoneId, int? menuZoneI2, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>RestApiResultMenuZone</returns>
        RestApiResultMenuZone GetMenuZone (int? menuId, int? menuZoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>ApiResponse of RestApiResultMenuZone</returns>
        ApiResponse<RestApiResultMenuZone> GetMenuZoneWithHttpInfo (int? menuId, int? menuZoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>RestApiArrayResultMenuZone</returns>
        RestApiArrayResultMenuZone GetMenuZonesForMenu (int? menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of RestApiArrayResultMenuZone</returns>
        ApiResponse<RestApiArrayResultMenuZone> GetMenuZonesForMenuWithHttpInfo (int? menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void SetMenuSectionMenuZone (int? menuZoneId, string description, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuSectionMenuZoneWithHttpInfo (int? menuZoneId, string description, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void SetMenuSectionMenuZone_0 (int? menuZoneId, int? menuSectionId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuSectionMenuZone_0WithHttpInfo (int? menuZoneId, int? menuSectionId, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void SetMenuZoneName (int? menuZoneId, string menuZoneName, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuZoneNameWithHttpInfo (int? menuZoneId, string menuZoneName, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns></returns>
        void UpdateMenuZone (int? menuId, int? menuZoneId, MenuZone menuZone);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuZoneWithHttpInfo (int? menuId, int? menuZoneId, MenuZone menuZone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void UploadMenuZoneImage (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadMenuZoneImageWithHttpInfo (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        void UploadMenuZoneImage_0 (int? menuZoneId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadMenuZoneImage_0WithHttpInfo (int? menuZoneId, string menuId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of RestApiResultMenuZone</returns>
        System.Threading.Tasks.Task<RestApiResultMenuZone> AddMenuZoneAsync (int? menuId, MenuZone menuZone);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of ApiResponse (RestApiResultMenuZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuZone>> AddMenuZoneAsyncWithHttpInfo (int? menuId, MenuZone menuZone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuZoneAsync (int? menuZoneId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuZoneAsyncWithHttpInfo (int? menuZoneId, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FlipMenuZonesAsync (int? menuZoneId, int? menuZoneI2, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FlipMenuZonesAsyncWithHttpInfo (int? menuZoneId, int? menuZoneI2, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>Task of RestApiResultMenuZone</returns>
        System.Threading.Tasks.Task<RestApiResultMenuZone> GetMenuZoneAsync (int? menuId, int? menuZoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMenuZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuZone>> GetMenuZoneAsyncWithHttpInfo (int? menuId, int? menuZoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>Task of RestApiArrayResultMenuZone</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuZone> GetMenuZonesForMenuAsync (int? menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuZone>> GetMenuZonesForMenuAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuSectionMenuZoneAsync (int? menuZoneId, string description, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuSectionMenuZoneAsyncWithHttpInfo (int? menuZoneId, string description, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuSectionMenuZone_0Async (int? menuZoneId, int? menuSectionId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuSectionMenuZone_0AsyncWithHttpInfo (int? menuZoneId, int? menuSectionId, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuZoneNameAsync (int? menuZoneId, string menuZoneName, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuZoneNameAsyncWithHttpInfo (int? menuZoneId, string menuZoneName, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuZoneAsync (int? menuId, int? menuZoneId, MenuZone menuZone);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuZoneAsyncWithHttpInfo (int? menuId, int? menuZoneId, MenuZone menuZone);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadMenuZoneImageAsync (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadMenuZoneImageAsyncWithHttpInfo (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadMenuZoneImage_0Async (int? menuZoneId, string menuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadMenuZoneImage_0AsyncWithHttpInfo (int? menuZoneId, string menuId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuZonesApi : IMenuZonesApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuZonesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuZonesApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuZonesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuZonesApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>RestApiResultMenuZone</returns>
        public RestApiResultMenuZone AddMenuZone (int? menuId, MenuZone menuZone)
        {
             ApiResponse<RestApiResultMenuZone> localVarResponse = AddMenuZoneWithHttpInfo(menuId, menuZone);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>ApiResponse of RestApiResultMenuZone</returns>
        public ApiResponse< RestApiResultMenuZone > AddMenuZoneWithHttpInfo (int? menuId, MenuZone menuZone)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->AddMenuZone");
            // verify the required parameter 'menuZone' is set
            if (menuZone == null)
                throw new ApiException(400, "Missing required parameter 'menuZone' when calling MenuZonesApi->AddMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZone != null && menuZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of RestApiResultMenuZone</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuZone> AddMenuZoneAsync (int? menuId, MenuZone menuZone)
        {
             ApiResponse<RestApiResultMenuZone> localVarResponse = await AddMenuZoneAsyncWithHttpInfo(menuId, menuZone);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of ApiResponse (RestApiResultMenuZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuZone>> AddMenuZoneAsyncWithHttpInfo (int? menuId, MenuZone menuZone)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->AddMenuZone");
            // verify the required parameter 'menuZone' is set
            if (menuZone == null)
                throw new ApiException(400, "Missing required parameter 'menuZone' when calling MenuZonesApi->AddMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZone != null && menuZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void DeleteMenuZone (int? menuZoneId, string menuId)
        {
             DeleteMenuZoneWithHttpInfo(menuZoneId, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuZoneWithHttpInfo (int? menuZoneId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->DeleteMenuZone");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->DeleteMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuZoneAsync (int? menuZoneId, string menuId)
        {
             await DeleteMenuZoneAsyncWithHttpInfo(menuZoneId, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuZoneAsyncWithHttpInfo (int? menuZoneId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->DeleteMenuZone");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->DeleteMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void FlipMenuZones (int? menuZoneId, int? menuZoneI2, string menuId)
        {
             FlipMenuZonesWithHttpInfo(menuZoneId, menuZoneI2, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FlipMenuZonesWithHttpInfo (int? menuZoneId, int? menuZoneI2, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->FlipMenuZones");
            // verify the required parameter 'menuZoneI2' is set
            if (menuZoneI2 == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneI2' when calling MenuZonesApi->FlipMenuZones");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->FlipMenuZones");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/flip/{menuZoneI2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZoneI2 != null) localVarPathParams.Add("menuZoneI2", this.Configuration.ApiClient.ParameterToString(menuZoneI2)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlipMenuZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FlipMenuZonesAsync (int? menuZoneId, int? menuZoneI2, string menuId)
        {
             await FlipMenuZonesAsyncWithHttpInfo(menuZoneId, menuZoneI2, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneI2"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FlipMenuZonesAsyncWithHttpInfo (int? menuZoneId, int? menuZoneI2, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->FlipMenuZones");
            // verify the required parameter 'menuZoneI2' is set
            if (menuZoneI2 == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneI2' when calling MenuZonesApi->FlipMenuZones");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->FlipMenuZones");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/flip/{menuZoneI2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZoneI2 != null) localVarPathParams.Add("menuZoneI2", this.Configuration.ApiClient.ParameterToString(menuZoneI2)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlipMenuZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>RestApiResultMenuZone</returns>
        public RestApiResultMenuZone GetMenuZone (int? menuId, int? menuZoneId)
        {
             ApiResponse<RestApiResultMenuZone> localVarResponse = GetMenuZoneWithHttpInfo(menuId, menuZoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>ApiResponse of RestApiResultMenuZone</returns>
        public ApiResponse< RestApiResultMenuZone > GetMenuZoneWithHttpInfo (int? menuId, int? menuZoneId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->GetMenuZone");
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->GetMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>Task of RestApiResultMenuZone</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuZone> GetMenuZoneAsync (int? menuId, int? menuZoneId)
        {
             ApiResponse<RestApiResultMenuZone> localVarResponse = await GetMenuZoneAsyncWithHttpInfo(menuId, menuZoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMenuZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuZone>> GetMenuZoneAsyncWithHttpInfo (int? menuId, int? menuZoneId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->GetMenuZone");
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->GetMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>RestApiArrayResultMenuZone</returns>
        public RestApiArrayResultMenuZone GetMenuZonesForMenu (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuZone> localVarResponse = GetMenuZonesForMenuWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of RestApiArrayResultMenuZone</returns>
        public ApiResponse< RestApiArrayResultMenuZone > GetMenuZonesForMenuWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->GetMenuZonesForMenu");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuZonesForMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>Task of RestApiArrayResultMenuZone</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuZone> GetMenuZonesForMenuAsync (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuZone> localVarResponse = await GetMenuZonesForMenuAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuZone>> GetMenuZonesForMenuAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->GetMenuZonesForMenu");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuZonesForMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultMenuZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuZone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void SetMenuSectionMenuZone (int? menuZoneId, string description, string menuId)
        {
             SetMenuSectionMenuZoneWithHttpInfo(menuZoneId, description, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuSectionMenuZoneWithHttpInfo (int? menuZoneId, string description, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuSectionMenuZone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling MenuZonesApi->SetMenuSectionMenuZone");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuSectionMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (description != null && description.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(description); // http body (model) parameter
            }
            else
            {
                localVarPostBody = description; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuSectionMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuSectionMenuZoneAsync (int? menuZoneId, string description, string menuId)
        {
             await SetMenuSectionMenuZoneAsyncWithHttpInfo(menuZoneId, description, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="description"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuSectionMenuZoneAsyncWithHttpInfo (int? menuZoneId, string description, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuSectionMenuZone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling MenuZonesApi->SetMenuSectionMenuZone");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuSectionMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (description != null && description.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(description); // http body (model) parameter
            }
            else
            {
                localVarPostBody = description; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuSectionMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void SetMenuSectionMenuZone_0 (int? menuZoneId, int? menuSectionId, string menuId)
        {
             SetMenuSectionMenuZone_0WithHttpInfo(menuZoneId, menuSectionId, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuSectionMenuZone_0WithHttpInfo (int? menuZoneId, int? menuSectionId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/section/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuSectionMenuZone_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuSectionMenuZone_0Async (int? menuZoneId, int? menuSectionId, string menuId)
        {
             await SetMenuSectionMenuZone_0AsyncWithHttpInfo(menuZoneId, menuSectionId, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuSectionId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuSectionMenuZone_0AsyncWithHttpInfo (int? menuZoneId, int? menuSectionId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuSectionMenuZone_0");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/section/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuSectionMenuZone_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void SetMenuZoneName (int? menuZoneId, string menuZoneName, string menuId)
        {
             SetMenuZoneNameWithHttpInfo(menuZoneId, menuZoneName, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuZoneNameWithHttpInfo (int? menuZoneId, string menuZoneName, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuZoneName");
            // verify the required parameter 'menuZoneName' is set
            if (menuZoneName == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneName' when calling MenuZonesApi->SetMenuZoneName");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuZoneName");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/name/{menuZoneName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZoneName != null) localVarPathParams.Add("menuZoneName", this.Configuration.ApiClient.ParameterToString(menuZoneName)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuZoneName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuZoneNameAsync (int? menuZoneId, string menuZoneName, string menuId)
        {
             await SetMenuZoneNameAsyncWithHttpInfo(menuZoneId, menuZoneName, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZoneName"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuZoneNameAsyncWithHttpInfo (int? menuZoneId, string menuZoneName, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->SetMenuZoneName");
            // verify the required parameter 'menuZoneName' is set
            if (menuZoneName == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneName' when calling MenuZonesApi->SetMenuZoneName");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->SetMenuZoneName");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/name/{menuZoneName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZoneName != null) localVarPathParams.Add("menuZoneName", this.Configuration.ApiClient.ParameterToString(menuZoneName)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuZoneName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns></returns>
        public void UpdateMenuZone (int? menuId, int? menuZoneId, MenuZone menuZone)
        {
             UpdateMenuZoneWithHttpInfo(menuId, menuZoneId, menuZone);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuZoneWithHttpInfo (int? menuId, int? menuZoneId, MenuZone menuZone)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UpdateMenuZone");
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UpdateMenuZone");
            // verify the required parameter 'menuZone' is set
            if (menuZone == null)
                throw new ApiException(400, "Missing required parameter 'menuZone' when calling MenuZonesApi->UpdateMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZone != null && menuZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuZoneAsync (int? menuId, int? menuZoneId, MenuZone menuZone)
        {
             await UpdateMenuZoneAsyncWithHttpInfo(menuId, menuZoneId, menuZone);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId"></param>
        /// <param name="menuZoneId"></param>
        /// <param name="menuZone"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuZoneAsyncWithHttpInfo (int? menuId, int? menuZoneId, MenuZone menuZone)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UpdateMenuZone");
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UpdateMenuZone");
            // verify the required parameter 'menuZone' is set
            if (menuZone == null)
                throw new ApiException(400, "Missing required parameter 'menuZone' when calling MenuZonesApi->UpdateMenuZone");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuZone != null && menuZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void UploadMenuZoneImage (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId)
        {
             UploadMenuZoneImageWithHttpInfo(menuZoneId, _file, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadMenuZoneImageWithHttpInfo (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UploadMenuZoneImage");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling MenuZonesApi->UploadMenuZoneImage");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UploadMenuZoneImage");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (_file != null && _file.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_file); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _file; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuZoneImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadMenuZoneImageAsync (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId)
        {
             await UploadMenuZoneImageAsyncWithHttpInfo(menuZoneId, _file, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="_file"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadMenuZoneImageAsyncWithHttpInfo (int? menuZoneId, List<HttpPostedFileBase> _file, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UploadMenuZoneImage");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling MenuZonesApi->UploadMenuZoneImage");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UploadMenuZoneImage");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (_file != null && _file.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_file); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _file; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuZoneImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns></returns>
        public void UploadMenuZoneImage_0 (int? menuZoneId, string menuId)
        {
             UploadMenuZoneImage_0WithHttpInfo(menuZoneId, menuId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadMenuZoneImage_0WithHttpInfo (int? menuZoneId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UploadMenuZoneImage_0");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UploadMenuZoneImage_0");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuZoneImage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadMenuZoneImage_0Async (int? menuZoneId, string menuId)
        {
             await UploadMenuZoneImage_0AsyncWithHttpInfo(menuZoneId, menuId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuZoneId"></param>
        /// <param name="menuId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadMenuZoneImage_0AsyncWithHttpInfo (int? menuZoneId, string menuId)
        {
            // verify the required parameter 'menuZoneId' is set
            if (menuZoneId == null)
                throw new ApiException(400, "Missing required parameter 'menuZoneId' when calling MenuZonesApi->UploadMenuZoneImage_0");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuZonesApi->UploadMenuZoneImage_0");

            var localVarPath = "./api/v1.0/menus/{menuId}/zones/{menuZoneId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuZoneId != null) localVarPathParams.Add("menuZoneId", this.Configuration.ApiClient.ParameterToString(menuZoneId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuZoneImage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}

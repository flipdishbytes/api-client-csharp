/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreConfigurationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>RestApiResultAppConfigurationSummary</returns>
        RestApiResultAppConfigurationSummary CreateAppStoreConfig (string appId, string appStoreAppId);

        /// <summary>
        /// Create app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>ApiResponse of RestApiResultAppConfigurationSummary</returns>
        ApiResponse<RestApiResultAppConfigurationSummary> CreateAppStoreConfigWithHttpInfo (string appId, string appStoreAppId);
        /// <summary>
        /// Delete app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult DeleteAppStoreConfig (string appId, string appStoreAppId, string configId);

        /// <summary>
        /// Delete app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> DeleteAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId);
        /// <summary>
        /// Get app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>AppConfigurationDetail</returns>
        AppConfigurationDetail GetAppStoreConfig (string appId, string appStoreAppId, string configId);

        /// <summary>
        /// Get app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>ApiResponse of AppConfigurationDetail</returns>
        ApiResponse<AppConfigurationDetail> GetAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId);
        /// <summary>
        /// Get list of app store app configurations for one app store app
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>RestApiArrayResultAppConfigurationSummary</returns>
        RestApiArrayResultAppConfigurationSummary GetConfiguredAppSingleApp (string appId, string appStoreAppId);

        /// <summary>
        /// Get list of app store app configurations for one app store app
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>ApiResponse of RestApiArrayResultAppConfigurationSummary</returns>
        ApiResponse<RestApiArrayResultAppConfigurationSummary> GetConfiguredAppSingleAppWithHttpInfo (string appId, string appStoreAppId);
        /// <summary>
        /// Get list of app store apps which have been configured
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>RestApiArrayResultConfiguredAppHeader</returns>
        RestApiArrayResultConfiguredAppHeader GetConfiguredApps (string appId);

        /// <summary>
        /// Get list of app store apps which have been configured
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>ApiResponse of RestApiArrayResultConfiguredAppHeader</returns>
        ApiResponse<RestApiArrayResultConfiguredAppHeader> GetConfiguredAppsWithHttpInfo (string appId);
        /// <summary>
        /// Update app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns></returns>
        void UpdateAppStoreConfig (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase);

        /// <summary>
        /// Update app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of RestApiResultAppConfigurationSummary</returns>
        System.Threading.Tasks.Task<RestApiResultAppConfigurationSummary> CreateAppStoreConfigAsync (string appId, string appStoreAppId);

        /// <summary>
        /// Create app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigurationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigurationSummary>> CreateAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId);
        /// <summary>
        /// Delete app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> DeleteAppStoreConfigAsync (string appId, string appStoreAppId, string configId);

        /// <summary>
        /// Delete app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> DeleteAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId);
        /// <summary>
        /// Get app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of AppConfigurationDetail</returns>
        System.Threading.Tasks.Task<AppConfigurationDetail> GetAppStoreConfigAsync (string appId, string appStoreAppId, string configId);

        /// <summary>
        /// Get app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of ApiResponse (AppConfigurationDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppConfigurationDetail>> GetAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId);
        /// <summary>
        /// Get list of app store app configurations for one app store app
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of RestApiArrayResultAppConfigurationSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultAppConfigurationSummary> GetConfiguredAppSingleAppAsync (string appId, string appStoreAppId);

        /// <summary>
        /// Get list of app store app configurations for one app store app
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultAppConfigurationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultAppConfigurationSummary>> GetConfiguredAppSingleAppAsyncWithHttpInfo (string appId, string appStoreAppId);
        /// <summary>
        /// Get list of app store apps which have been configured
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>Task of RestApiArrayResultConfiguredAppHeader</returns>
        System.Threading.Tasks.Task<RestApiArrayResultConfiguredAppHeader> GetConfiguredAppsAsync (string appId);

        /// <summary>
        /// Get list of app store apps which have been configured
        /// </summary>
        /// <remarks>
        /// [ALPHA - this endpoint is not ready to be consumed]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultConfiguredAppHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultConfiguredAppHeader>> GetConfiguredAppsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Update app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAppStoreConfigAsync (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase);

        /// <summary>
        /// Update app store app configuration
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppStoreConfigurationsApi : IAppStoreConfigurationsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppStoreConfigurationsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreConfigurationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppStoreConfigurationsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create app store app configuration [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>RestApiResultAppConfigurationSummary</returns>
        public RestApiResultAppConfigurationSummary CreateAppStoreConfig (string appId, string appStoreAppId)
        {
             ApiResponse<RestApiResultAppConfigurationSummary> localVarResponse = CreateAppStoreConfigWithHttpInfo(appId, appStoreAppId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create app store app configuration [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>ApiResponse of RestApiResultAppConfigurationSummary</returns>
        public ApiResponse< RestApiResultAppConfigurationSummary > CreateAppStoreConfigWithHttpInfo (string appId, string appStoreAppId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->CreateAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->CreateAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultAppConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigurationSummary)));
        }

        /// <summary>
        /// Create app store app configuration [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of RestApiResultAppConfigurationSummary</returns>
        public async System.Threading.Tasks.Task<RestApiResultAppConfigurationSummary> CreateAppStoreConfigAsync (string appId, string appStoreAppId)
        {
             ApiResponse<RestApiResultAppConfigurationSummary> localVarResponse = await CreateAppStoreConfigAsyncWithHttpInfo(appId, appStoreAppId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create app store app configuration [BETA - this endpoint is under development, do not use it in your production system] This adds an Application to a Whitelabel that can later be configured to specific stores
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigurationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigurationSummary>> CreateAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->CreateAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->CreateAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultAppConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigurationSummary)));
        }

        /// <summary>
        /// Delete app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult DeleteAppStoreConfig (string appId, string appStoreAppId, string configId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = DeleteAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > DeleteAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Delete app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> DeleteAppStoreConfigAsync (string appId, string appStoreAppId, string configId)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await DeleteAppStoreConfigAsyncWithHttpInfo(appId, appStoreAppId, configId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> DeleteAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->DeleteAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Get app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>AppConfigurationDetail</returns>
        public AppConfigurationDetail GetAppStoreConfig (string appId, string appStoreAppId, string configId)
        {
             ApiResponse<AppConfigurationDetail> localVarResponse = GetAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>ApiResponse of AppConfigurationDetail</returns>
        public ApiResponse< AppConfigurationDetail > GetAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppConfigurationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AppConfigurationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppConfigurationDetail)));
        }

        /// <summary>
        /// Get app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of AppConfigurationDetail</returns>
        public async System.Threading.Tasks.Task<AppConfigurationDetail> GetAppStoreConfigAsync (string appId, string appStoreAppId, string configId)
        {
             ApiResponse<AppConfigurationDetail> localVarResponse = await GetAppStoreConfigAsyncWithHttpInfo(appId, appStoreAppId, configId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <returns>Task of ApiResponse (AppConfigurationDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppConfigurationDetail>> GetAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->GetAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppConfigurationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AppConfigurationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppConfigurationDetail)));
        }

        /// <summary>
        /// Get list of app store app configurations for one app store app [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>RestApiArrayResultAppConfigurationSummary</returns>
        public RestApiArrayResultAppConfigurationSummary GetConfiguredAppSingleApp (string appId, string appStoreAppId)
        {
             ApiResponse<RestApiArrayResultAppConfigurationSummary> localVarResponse = GetConfiguredAppSingleAppWithHttpInfo(appId, appStoreAppId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of app store app configurations for one app store app [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>ApiResponse of RestApiArrayResultAppConfigurationSummary</returns>
        public ApiResponse< RestApiArrayResultAppConfigurationSummary > GetConfiguredAppSingleAppWithHttpInfo (string appId, string appStoreAppId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetConfiguredAppSingleApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->GetConfiguredAppSingleApp");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguredAppSingleApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultAppConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultAppConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultAppConfigurationSummary)));
        }

        /// <summary>
        /// Get list of app store app configurations for one app store app [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of RestApiArrayResultAppConfigurationSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultAppConfigurationSummary> GetConfiguredAppSingleAppAsync (string appId, string appStoreAppId)
        {
             ApiResponse<RestApiArrayResultAppConfigurationSummary> localVarResponse = await GetConfiguredAppSingleAppAsyncWithHttpInfo(appId, appStoreAppId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of app store app configurations for one app store app [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultAppConfigurationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultAppConfigurationSummary>> GetConfiguredAppSingleAppAsyncWithHttpInfo (string appId, string appStoreAppId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetConfiguredAppSingleApp");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->GetConfiguredAppSingleApp");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguredAppSingleApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultAppConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultAppConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultAppConfigurationSummary)));
        }

        /// <summary>
        /// Get list of app store apps which have been configured [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>RestApiArrayResultConfiguredAppHeader</returns>
        public RestApiArrayResultConfiguredAppHeader GetConfiguredApps (string appId)
        {
             ApiResponse<RestApiArrayResultConfiguredAppHeader> localVarResponse = GetConfiguredAppsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of app store apps which have been configured [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>ApiResponse of RestApiArrayResultConfiguredAppHeader</returns>
        public ApiResponse< RestApiArrayResultConfiguredAppHeader > GetConfiguredAppsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetConfiguredApps");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguredApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultConfiguredAppHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultConfiguredAppHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultConfiguredAppHeader)));
        }

        /// <summary>
        /// Get list of app store apps which have been configured [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>Task of RestApiArrayResultConfiguredAppHeader</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultConfiguredAppHeader> GetConfiguredAppsAsync (string appId)
        {
             ApiResponse<RestApiArrayResultConfiguredAppHeader> localVarResponse = await GetConfiguredAppsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of app store apps which have been configured [ALPHA - this endpoint is not ready to be consumed]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultConfiguredAppHeader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultConfiguredAppHeader>> GetConfiguredAppsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->GetConfiguredApps");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguredApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultConfiguredAppHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultConfiguredAppHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultConfiguredAppHeader)));
        }

        /// <summary>
        /// Update app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns></returns>
        public void UpdateAppStoreConfig (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase)
        {
             UpdateAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId, appConfigurationBase);
        }

        /// <summary>
        /// Update app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAppStoreConfigWithHttpInfo (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'appConfigurationBase' is set
            if (appConfigurationBase == null)
                throw new ApiException(400, "Missing required parameter 'appConfigurationBase' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter
            if (appConfigurationBase != null && appConfigurationBase.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appConfigurationBase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appConfigurationBase; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAppStoreConfigAsync (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase)
        {
             await UpdateAppStoreConfigAsyncWithHttpInfo(appId, appStoreAppId, configId, appConfigurationBase);

        }

        /// <summary>
        /// Update app store app configuration [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Id</param>
        /// <param name="appStoreAppId">App Store App Id</param>
        /// <param name="configId">App Store Configuration Id</param>
        /// <param name="appConfigurationBase">App Store Configuration Base</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAppStoreConfigAsyncWithHttpInfo (string appId, string appStoreAppId, string configId, AppConfigurationBase appConfigurationBase)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'appStoreAppId' is set
            if (appStoreAppId == null)
                throw new ApiException(400, "Missing required parameter 'appStoreAppId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'configId' is set
            if (configId == null)
                throw new ApiException(400, "Missing required parameter 'configId' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");
            // verify the required parameter 'appConfigurationBase' is set
            if (appConfigurationBase == null)
                throw new ApiException(400, "Missing required parameter 'appConfigurationBase' when calling AppStoreConfigurationsApi->UpdateAppStoreConfig");

            var localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appStoreAppId != null) localVarPathParams.Add("appStoreAppId", this.Configuration.ApiClient.ParameterToString(appStoreAppId)); // path parameter
            if (configId != null) localVarPathParams.Add("configId", this.Configuration.ApiClient.ParameterToString(configId)); // path parameter
            if (appConfigurationBase != null && appConfigurationBase.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appConfigurationBase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appConfigurationBase; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppStoreConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

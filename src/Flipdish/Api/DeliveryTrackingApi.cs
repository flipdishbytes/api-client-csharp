/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryTrackingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE] Assign driver to order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns></returns>
        void AssignDriverToOrder (string appId, int? orderId, int? driverId);

        /// <summary>
        /// [PRIVATE] Assign driver to order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignDriverToOrderWithHttpInfo (string appId, int? orderId, int? driverId);
        /// <summary>
        /// Assign driver to multiple orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns></returns>
        void AssignDriverToOrders (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers);

        /// <summary>
        /// Assign driver to multiple orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignDriverToOrdersWithHttpInfo (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers);
        /// <summary>
        /// [PRIVATE] Get drivers by App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>RestApiArrayResultDriver</returns>
        RestApiArrayResultDriver GetDrivers (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null);

        /// <summary>
        /// [PRIVATE] Get drivers by App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultDriver</returns>
        ApiResponse<RestApiArrayResultDriver> GetDriversWithHttpInfo (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null);
        /// <summary>
        /// [PRIVATE] Invite driver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>RestApiResultDriver</returns>
        RestApiResultDriver InviteDriverToApp (string appId, DriverInvitation driverInvitation);

        /// <summary>
        /// [PRIVATE] Invite driver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>ApiResponse of RestApiResultDriver</returns>
        ApiResponse<RestApiResultDriver> InviteDriverToAppWithHttpInfo (string appId, DriverInvitation driverInvitation);
        /// <summary>
        /// [PRIVATE] Unassign driver from app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns></returns>
        void RemoveDriverFromApp (string appId, int? driverId);

        /// <summary>
        /// [PRIVATE] Unassign driver from app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDriverFromAppWithHttpInfo (string appId, int? driverId);
        /// <summary>
        /// [PRIVATE] Unassign driver from order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        void UnassignDriverFromOrder (string appId, int? orderId);

        /// <summary>
        /// [PRIVATE] Unassign driver from order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnassignDriverFromOrderWithHttpInfo (string appId, int? orderId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE] Assign driver to order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignDriverToOrderAsync (string appId, int? orderId, int? driverId);

        /// <summary>
        /// [PRIVATE] Assign driver to order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignDriverToOrderAsyncWithHttpInfo (string appId, int? orderId, int? driverId);
        /// <summary>
        /// Assign driver to multiple orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignDriverToOrdersAsync (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers);

        /// <summary>
        /// Assign driver to multiple orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignDriverToOrdersAsyncWithHttpInfo (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers);
        /// <summary>
        /// [PRIVATE] Get drivers by App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>Task of RestApiArrayResultDriver</returns>
        System.Threading.Tasks.Task<RestApiArrayResultDriver> GetDriversAsync (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null);

        /// <summary>
        /// [PRIVATE] Get drivers by App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultDriver)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultDriver>> GetDriversAsyncWithHttpInfo (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null);
        /// <summary>
        /// [PRIVATE] Invite driver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>Task of RestApiResultDriver</returns>
        System.Threading.Tasks.Task<RestApiResultDriver> InviteDriverToAppAsync (string appId, DriverInvitation driverInvitation);

        /// <summary>
        /// [PRIVATE] Invite driver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>Task of ApiResponse (RestApiResultDriver)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultDriver>> InviteDriverToAppAsyncWithHttpInfo (string appId, DriverInvitation driverInvitation);
        /// <summary>
        /// [PRIVATE] Unassign driver from app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDriverFromAppAsync (string appId, int? driverId);

        /// <summary>
        /// [PRIVATE] Unassign driver from app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDriverFromAppAsyncWithHttpInfo (string appId, int? driverId);
        /// <summary>
        /// [PRIVATE] Unassign driver from order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnassignDriverFromOrderAsync (string appId, int? orderId);

        /// <summary>
        /// [PRIVATE] Unassign driver from order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnassignDriverFromOrderAsyncWithHttpInfo (string appId, int? orderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeliveryTrackingApi : IDeliveryTrackingApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryTrackingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryTrackingApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryTrackingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeliveryTrackingApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE] Assign driver to order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns></returns>
        public void AssignDriverToOrder (string appId, int? orderId, int? driverId)
        {
             AssignDriverToOrderWithHttpInfo(appId, orderId, driverId);
        }

        /// <summary>
        /// [PRIVATE] Assign driver to order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignDriverToOrderWithHttpInfo (string appId, int? orderId, int? driverId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->AssignDriverToOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryTrackingApi->AssignDriverToOrder");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->AssignDriverToOrder");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDriverToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE] Assign driver to order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignDriverToOrderAsync (string appId, int? orderId, int? driverId)
        {
             await AssignDriverToOrderAsyncWithHttpInfo(appId, orderId, driverId);

        }

        /// <summary>
        /// [PRIVATE] Assign driver to order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignDriverToOrderAsyncWithHttpInfo (string appId, int? orderId, int? driverId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->AssignDriverToOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryTrackingApi->AssignDriverToOrder");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->AssignDriverToOrder");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDriverToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign driver to multiple orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns></returns>
        public void AssignDriverToOrders (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers)
        {
             AssignDriverToOrdersWithHttpInfo(appId, driverId, orderIdAndSequenceNumbers);
        }

        /// <summary>
        /// Assign driver to multiple orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignDriverToOrdersWithHttpInfo (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->AssignDriverToOrders");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->AssignDriverToOrders");
            // verify the required parameter 'orderIdAndSequenceNumbers' is set
            if (orderIdAndSequenceNumbers == null)
                throw new ApiException(400, "Missing required parameter 'orderIdAndSequenceNumbers' when calling DeliveryTrackingApi->AssignDriverToOrders");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter
            if (orderIdAndSequenceNumbers != null && orderIdAndSequenceNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderIdAndSequenceNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderIdAndSequenceNumbers; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDriverToOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign driver to multiple orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignDriverToOrdersAsync (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers)
        {
             await AssignDriverToOrdersAsyncWithHttpInfo(appId, driverId, orderIdAndSequenceNumbers);

        }

        /// <summary>
        /// Assign driver to multiple orders 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <param name="orderIdAndSequenceNumbers">Array of object containing OrderId and Sequence</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignDriverToOrdersAsyncWithHttpInfo (string appId, int? driverId, List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->AssignDriverToOrders");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->AssignDriverToOrders");
            // verify the required parameter 'orderIdAndSequenceNumbers' is set
            if (orderIdAndSequenceNumbers == null)
                throw new ApiException(400, "Missing required parameter 'orderIdAndSequenceNumbers' when calling DeliveryTrackingApi->AssignDriverToOrders");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter
            if (orderIdAndSequenceNumbers != null && orderIdAndSequenceNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderIdAndSequenceNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderIdAndSequenceNumbers; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignDriverToOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE] Get drivers by App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>RestApiArrayResultDriver</returns>
        public RestApiArrayResultDriver GetDrivers (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null)
        {
             ApiResponse<RestApiArrayResultDriver> localVarResponse = GetDriversWithHttpInfo(appId, name, phoneNumber, storeId, presence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE] Get drivers by App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultDriver</returns>
        public ApiResponse< RestApiArrayResultDriver > GetDriversWithHttpInfo (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->GetDrivers");

            var localVarPath = "/api/v1.0/{appId}/drivers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (presence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "presence", presence)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrivers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultDriver>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultDriver) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultDriver)));
        }

        /// <summary>
        /// [PRIVATE] Get drivers by App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>Task of RestApiArrayResultDriver</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultDriver> GetDriversAsync (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null)
        {
             ApiResponse<RestApiArrayResultDriver> localVarResponse = await GetDriversAsyncWithHttpInfo(appId, name, phoneNumber, storeId, presence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE] Get drivers by App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="name">Driver&#39;s username (optional)</param>
        /// <param name="phoneNumber">Driver&#39;s phone number (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="presence">Offline/Online (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultDriver)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultDriver>> GetDriversAsyncWithHttpInfo (string appId, string name = null, string phoneNumber = null, int? storeId = null, string presence = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->GetDrivers");

            var localVarPath = "/api/v1.0/{appId}/drivers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (phoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phoneNumber", phoneNumber)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (presence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "presence", presence)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrivers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultDriver>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultDriver) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultDriver)));
        }

        /// <summary>
        /// [PRIVATE] Invite driver 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>RestApiResultDriver</returns>
        public RestApiResultDriver InviteDriverToApp (string appId, DriverInvitation driverInvitation)
        {
             ApiResponse<RestApiResultDriver> localVarResponse = InviteDriverToAppWithHttpInfo(appId, driverInvitation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE] Invite driver 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>ApiResponse of RestApiResultDriver</returns>
        public ApiResponse< RestApiResultDriver > InviteDriverToAppWithHttpInfo (string appId, DriverInvitation driverInvitation)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->InviteDriverToApp");
            // verify the required parameter 'driverInvitation' is set
            if (driverInvitation == null)
                throw new ApiException(400, "Missing required parameter 'driverInvitation' when calling DeliveryTrackingApi->InviteDriverToApp");

            var localVarPath = "/api/v1.0/{appId}/drivers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverInvitation != null && driverInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(driverInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = driverInvitation; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteDriverToApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDriver>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDriver) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDriver)));
        }

        /// <summary>
        /// [PRIVATE] Invite driver 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>Task of RestApiResultDriver</returns>
        public async System.Threading.Tasks.Task<RestApiResultDriver> InviteDriverToAppAsync (string appId, DriverInvitation driverInvitation)
        {
             ApiResponse<RestApiResultDriver> localVarResponse = await InviteDriverToAppAsyncWithHttpInfo(appId, driverInvitation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE] Invite driver 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverInvitation">Driver invitation model</param>
        /// <returns>Task of ApiResponse (RestApiResultDriver)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultDriver>> InviteDriverToAppAsyncWithHttpInfo (string appId, DriverInvitation driverInvitation)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->InviteDriverToApp");
            // verify the required parameter 'driverInvitation' is set
            if (driverInvitation == null)
                throw new ApiException(400, "Missing required parameter 'driverInvitation' when calling DeliveryTrackingApi->InviteDriverToApp");

            var localVarPath = "/api/v1.0/{appId}/drivers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverInvitation != null && driverInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(driverInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = driverInvitation; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteDriverToApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDriver>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDriver) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDriver)));
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns></returns>
        public void RemoveDriverFromApp (string appId, int? driverId)
        {
             RemoveDriverFromAppWithHttpInfo(appId, driverId);
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDriverFromAppWithHttpInfo (string appId, int? driverId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->RemoveDriverFromApp");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->RemoveDriverFromApp");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDriverFromApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDriverFromAppAsync (string appId, int? driverId)
        {
             await RemoveDriverFromAppAsyncWithHttpInfo(appId, driverId);

        }

        /// <summary>
        /// [PRIVATE] Unassign driver from app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="driverId">Driver Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDriverFromAppAsyncWithHttpInfo (string appId, int? driverId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->RemoveDriverFromApp");
            // verify the required parameter 'driverId' is set
            if (driverId == null)
                throw new ApiException(400, "Missing required parameter 'driverId' when calling DeliveryTrackingApi->RemoveDriverFromApp");

            var localVarPath = "/api/v1.0/{appId}/drivers/{driverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (driverId != null) localVarPathParams.Add("driverId", this.Configuration.ApiClient.ParameterToString(driverId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDriverFromApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public void UnassignDriverFromOrder (string appId, int? orderId)
        {
             UnassignDriverFromOrderWithHttpInfo(appId, orderId);
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnassignDriverFromOrderWithHttpInfo (string appId, int? orderId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->UnassignDriverFromOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryTrackingApi->UnassignDriverFromOrder");

            var localVarPath = "/api/v1.0/{appId}/orders/{orderId}/driver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignDriverFromOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE] Unassign driver from order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnassignDriverFromOrderAsync (string appId, int? orderId)
        {
             await UnassignDriverFromOrderAsyncWithHttpInfo(appId, orderId);

        }

        /// <summary>
        /// [PRIVATE] Unassign driver from order 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application identifier</param>
        /// <param name="orderId">Order Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnassignDriverFromOrderAsyncWithHttpInfo (string appId, int? orderId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling DeliveryTrackingApi->UnassignDriverFromOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryTrackingApi->UnassignDriverFromOrder");

            var localVarPath = "/api/v1.0/{appId}/orders/{orderId}/driver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignDriverFromOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

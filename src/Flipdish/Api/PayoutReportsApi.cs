/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiResultPayoutReport3Details</returns>
        RestApiResultPayoutReport3Details GetPayoutReport3Details (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultPayoutReport3Details</returns>
        ApiResponse<RestApiResultPayoutReport3Details> GetPayoutReport3DetailsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        RestApiPaginationResultPayoutReport3PayoutOrder GetPayoutReport3Orders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder> GetPayoutReport3OrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>RestApiResultPayoutReport3Overview</returns>
        RestApiResultPayoutReport3Overview GetPayoutReport3Overview (string appId, int? bankAccountId, int? payoutId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>ApiResponse of RestApiResultPayoutReport3Overview</returns>
        ApiResponse<RestApiResultPayoutReport3Overview> GetPayoutReport3OverviewWithHttpInfo (string appId, int? bankAccountId, int? payoutId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        RestApiPaginationResultPayoutReport3RefundedOrder GetPayoutReport3RefundedOrders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder> GetPayoutReport3RefundedOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutLedgerEntries (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutLedgerEntriesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutOrders (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutPosSales (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutPosSalesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutRefundedOrders (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        RestApiResultFileCreationResult PayoutReport3ExportPayoutRefundedRejected (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        ApiResponse<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedRejectedWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiResultPayoutReport3Details</returns>
        System.Threading.Tasks.Task<RestApiResultPayoutReport3Details> GetPayoutReport3DetailsAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultPayoutReport3Details)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultPayoutReport3Details>> GetPayoutReport3DetailsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutReport3PayoutOrder> GetPayoutReport3OrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutReport3PayoutOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder>> GetPayoutReport3OrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of RestApiResultPayoutReport3Overview</returns>
        System.Threading.Tasks.Task<RestApiResultPayoutReport3Overview> GetPayoutReport3OverviewAsync (string appId, int? bankAccountId, int? payoutId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPayoutReport3Overview)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultPayoutReport3Overview>> GetPayoutReport3OverviewAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultPayoutReport3RefundedOrder> GetPayoutReport3RefundedOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutReport3RefundedOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder>> GetPayoutReport3RefundedOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutLedgerEntriesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutLedgerEntriesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutPosSalesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutPosSalesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutRefundedOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedRejectedAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutRefundedRejectedAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayoutReportsApi : IPayoutReportsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayoutReportsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayoutReportsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiResultPayoutReport3Details</returns>
        public RestApiResultPayoutReport3Details GetPayoutReport3Details (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<RestApiResultPayoutReport3Details> localVarResponse = GetPayoutReport3DetailsWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultPayoutReport3Details</returns>
        public ApiResponse< RestApiResultPayoutReport3Details > GetPayoutReport3DetailsWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Details");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Details");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Details");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Details", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPayoutReport3Details>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPayoutReport3Details) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPayoutReport3Details)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiResultPayoutReport3Details</returns>
        public async System.Threading.Tasks.Task<RestApiResultPayoutReport3Details> GetPayoutReport3DetailsAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
             ApiResponse<RestApiResultPayoutReport3Details> localVarResponse = await GetPayoutReport3DetailsAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultPayoutReport3Details)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultPayoutReport3Details>> GetPayoutReport3DetailsAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Details");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Details");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Details");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Details", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPayoutReport3Details>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPayoutReport3Details) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPayoutReport3Details)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        public RestApiPaginationResultPayoutReport3PayoutOrder GetPayoutReport3Orders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder> localVarResponse = GetPayoutReport3OrdersWithHttpInfo(appId, bankAccountId, payoutId, storeIds, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        public ApiResponse< RestApiPaginationResultPayoutReport3PayoutOrder > GetPayoutReport3OrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Orders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Orders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Orders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Orders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutReport3PayoutOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutReport3PayoutOrder)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutReport3PayoutOrder</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutReport3PayoutOrder> GetPayoutReport3OrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder> localVarResponse = await GetPayoutReport3OrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutReport3PayoutOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder>> GetPayoutReport3OrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Orders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Orders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Orders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Orders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutReport3PayoutOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutReport3PayoutOrder)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>RestApiResultPayoutReport3Overview</returns>
        public RestApiResultPayoutReport3Overview GetPayoutReport3Overview (string appId, int? bankAccountId, int? payoutId)
        {
             ApiResponse<RestApiResultPayoutReport3Overview> localVarResponse = GetPayoutReport3OverviewWithHttpInfo(appId, bankAccountId, payoutId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>ApiResponse of RestApiResultPayoutReport3Overview</returns>
        public ApiResponse< RestApiResultPayoutReport3Overview > GetPayoutReport3OverviewWithHttpInfo (string appId, int? bankAccountId, int? payoutId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Overview");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Overview");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Overview");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Overview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPayoutReport3Overview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPayoutReport3Overview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPayoutReport3Overview)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of RestApiResultPayoutReport3Overview</returns>
        public async System.Threading.Tasks.Task<RestApiResultPayoutReport3Overview> GetPayoutReport3OverviewAsync (string appId, int? bankAccountId, int? payoutId)
        {
             ApiResponse<RestApiResultPayoutReport3Overview> localVarResponse = await GetPayoutReport3OverviewAsyncWithHttpInfo(appId, bankAccountId, payoutId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPayoutReport3Overview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultPayoutReport3Overview>> GetPayoutReport3OverviewAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3Overview");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3Overview");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3Overview");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3Overview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPayoutReport3Overview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultPayoutReport3Overview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPayoutReport3Overview)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        public RestApiPaginationResultPayoutReport3RefundedOrder GetPayoutReport3RefundedOrders (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder> localVarResponse = GetPayoutReport3RefundedOrdersWithHttpInfo(appId, bankAccountId, payoutId, storeIds, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        public ApiResponse< RestApiPaginationResultPayoutReport3RefundedOrder > GetPayoutReport3RefundedOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/refundedOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3RefundedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutReport3RefundedOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutReport3RefundedOrder)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultPayoutReport3RefundedOrder</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultPayoutReport3RefundedOrder> GetPayoutReport3RefundedOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder> localVarResponse = await GetPayoutReport3RefundedOrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, storeIds, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="storeIds"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultPayoutReport3RefundedOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder>> GetPayoutReport3RefundedOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> storeIds = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->GetPayoutReport3RefundedOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/refundedOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayoutReport3RefundedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultPayoutReport3RefundedOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultPayoutReport3RefundedOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultPayoutReport3RefundedOrder)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutChargebacks (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutChargebacksWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutChargebacksAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutChargebacksAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutChargebacksAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutChargebacks");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutChargebacks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutLedgerEntries (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutLedgerEntriesWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutLedgerEntriesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/ledgerentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutLedgerEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutLedgerEntriesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutLedgerEntriesAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutLedgerEntriesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutLedgerEntries");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/ledgerentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutLedgerEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutOrders (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutOrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutPosSales (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutPosSalesWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutPosSalesWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/possales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutPosSales", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutPosSalesAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutPosSalesAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutPosSalesAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutPosSales");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/possales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutPosSales", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutRefundedOrders (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutRefundedOrdersWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutRefundedOrdersWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutRefundedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedOrdersAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutRefundedOrdersAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutRefundedOrdersAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedOrders");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutRefundedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>RestApiResultFileCreationResult</returns>
        public RestApiResultFileCreationResult PayoutReport3ExportPayoutRefundedRejected (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = PayoutReport3ExportPayoutRefundedRejectedWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultFileCreationResult</returns>
        public ApiResponse< RestApiResultFileCreationResult > PayoutReport3ExportPayoutRefundedRejectedWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedrejected";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutRefundedRejected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of RestApiResultFileCreationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultFileCreationResult> PayoutReport3ExportPayoutRefundedRejectedAsync (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
             ApiResponse<RestApiResultFileCreationResult> localVarResponse = await PayoutReport3ExportPayoutRefundedRejectedAsyncWithHttpInfo(appId, bankAccountId, payoutId, stores);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="bankAccountId"></param>
        /// <param name="payoutId"></param>
        /// <param name="stores"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultFileCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultFileCreationResult>> PayoutReport3ExportPayoutRefundedRejectedAsyncWithHttpInfo (string appId, int? bankAccountId, int? payoutId, List<int?> stores = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");
            // verify the required parameter 'payoutId' is set
            if (payoutId == null)
                throw new ApiException(400, "Missing required parameter 'payoutId' when calling PayoutReportsApi->PayoutReport3ExportPayoutRefundedRejected");

            var localVarPath = "./api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedrejected";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (payoutId != null) localVarPathParams.Add("payoutId", this.Configuration.ApiClient.ParameterToString(payoutId)); // path parameter
            if (stores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stores", stores)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutReport3ExportPayoutRefundedRejected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultFileCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultFileCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultFileCreationResult)));
        }

    }
}

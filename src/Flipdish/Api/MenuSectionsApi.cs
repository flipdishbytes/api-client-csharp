/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuSectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clone menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiResultMenuSection</returns>
        RestApiResultMenuSection CloneMenuSection (int? menuId, int? menuSectionId);

        /// <summary>
        /// Clone menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSection</returns>
        ApiResponse<RestApiResultMenuSection> CloneMenuSectionWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Object</returns>
        Object CreateMenuAvailabilityForDay (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateMenuAvailabilityForDayWithHttpInfo (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Object</returns>
        Object CreateMenuSection (int? menuId, MenuSectionBase menuSection);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateMenuSectionWithHttpInfo (int? menuId, MenuSectionBase menuSection);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Object</returns>
        Object CreateMenuSectionAvailability (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateMenuSectionAvailabilityWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability);
        /// <summary>
        /// Delete menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns></returns>
        void DeleteMenuSection (int? menuId, int? menuSectionId);

        /// <summary>
        /// Delete menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuSectionWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Delete menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns></returns>
        void DeleteMenuSectionImage (int? menuId, int? menuSectionId);

        /// <summary>
        /// Delete menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuSectionImageWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Get menu section by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiResultMenuSection</returns>
        RestApiResultMenuSection GetMenuSectionById (int? menuId, int? menuSectionId);

        /// <summary>
        /// Get menu section by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSection</returns>
        ApiResponse<RestApiResultMenuSection> GetMenuSectionByIdWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Get menu sections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuSection</returns>
        RestApiArrayResultMenuSection GetMenuSections (int? menuId);

        /// <summary>
        /// Get menu sections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSection</returns>
        ApiResponse<RestApiArrayResultMenuSection> GetMenuSectionsWithHttpInfo (int? menuId);
        /// <summary>
        /// Update menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        void UpdateMenuSection (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null);

        /// <summary>
        /// Update menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuSectionWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null);
        /// <summary>
        /// Upload menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult UploadMenuSectionImage (int? menuId, int? menuSectionId, System.IO.Stream image);

        /// <summary>
        /// Upload menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> UploadMenuSectionImageWithHttpInfo (int? menuId, int? menuSectionId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clone menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiResultMenuSection</returns>
        System.Threading.Tasks.Task<RestApiResultMenuSection> CloneMenuSectionAsync (int? menuId, int? menuSectionId);

        /// <summary>
        /// Clone menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSection>> CloneMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateMenuAvailabilityForDayAsync (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuAvailabilityForDayAsyncWithHttpInfo (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateMenuSectionAsync (int? menuId, MenuSectionBase menuSection);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionAsyncWithHttpInfo (int? menuId, MenuSectionBase menuSection);
        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateMenuSectionAvailabilityAsync (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability);

        /// <summary>
        /// Create menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionAvailabilityAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability);
        /// <summary>
        /// Delete menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuSectionAsync (int? menuId, int? menuSectionId);

        /// <summary>
        /// Delete menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Delete menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuSectionImageAsync (int? menuId, int? menuSectionId);

        /// <summary>
        /// Delete menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionImageAsyncWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Get menu section by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiResultMenuSection</returns>
        System.Threading.Tasks.Task<RestApiResultMenuSection> GetMenuSectionByIdAsync (int? menuId, int? menuSectionId);

        /// <summary>
        /// Get menu section by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSection>> GetMenuSectionByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId);
        /// <summary>
        /// Get menu sections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuSection</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuSection> GetMenuSectionsAsync (int? menuId);

        /// <summary>
        /// Get menu sections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSection>> GetMenuSectionsAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// Update menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuSectionAsync (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null);

        /// <summary>
        /// Update menu section
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null);
        /// <summary>
        /// Upload menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> UploadMenuSectionImageAsync (int? menuId, int? menuSectionId, System.IO.Stream image);

        /// <summary>
        /// Upload menu section image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuSectionImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuSectionsApi : IMenuSectionsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuSectionsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuSectionsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clone menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiResultMenuSection</returns>
        public RestApiResultMenuSection CloneMenuSection (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiResultMenuSection> localVarResponse = CloneMenuSectionWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSection</returns>
        public ApiResponse< RestApiResultMenuSection > CloneMenuSectionWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CloneMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CloneMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSection)));
        }

        /// <summary>
        /// Clone menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiResultMenuSection</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuSection> CloneMenuSectionAsync (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiResultMenuSection> localVarResponse = await CloneMenuSectionAsyncWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSection>> CloneMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CloneMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CloneMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSection)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Object</returns>
        public Object CreateMenuAvailabilityForDay (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod)
        {
             ApiResponse<Object> localVarResponse = CreateMenuAvailabilityForDayWithHttpInfo(menuId, menuSectionId, dayOfWeek, businessHoursPeriod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateMenuAvailabilityForDayWithHttpInfo (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'dayOfWeek' is set
            if (dayOfWeek == null)
                throw new ApiException(400, "Missing required parameter 'dayOfWeek' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'businessHoursPeriod' is set
            if (businessHoursPeriod == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursPeriod' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability/times/{dayOfWeek}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (dayOfWeek != null) localVarPathParams.Add("dayOfWeek", this.Configuration.ApiClient.ParameterToString(dayOfWeek)); // path parameter
            if (businessHoursPeriod != null && businessHoursPeriod.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursPeriod); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursPeriod; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuAvailabilityForDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateMenuAvailabilityForDayAsync (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod)
        {
             ApiResponse<Object> localVarResponse = await CreateMenuAvailabilityForDayAsyncWithHttpInfo(menuId, menuSectionId, dayOfWeek, businessHoursPeriod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="dayOfWeek"></param>
        /// <param name="businessHoursPeriod"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuAvailabilityForDayAsyncWithHttpInfo (int? menuId, int? menuSectionId, string dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'dayOfWeek' is set
            if (dayOfWeek == null)
                throw new ApiException(400, "Missing required parameter 'dayOfWeek' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");
            // verify the required parameter 'businessHoursPeriod' is set
            if (businessHoursPeriod == null)
                throw new ApiException(400, "Missing required parameter 'businessHoursPeriod' when calling MenuSectionsApi->CreateMenuAvailabilityForDay");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability/times/{dayOfWeek}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (dayOfWeek != null) localVarPathParams.Add("dayOfWeek", this.Configuration.ApiClient.ParameterToString(dayOfWeek)); // path parameter
            if (businessHoursPeriod != null && businessHoursPeriod.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessHoursPeriod); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessHoursPeriod; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuAvailabilityForDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Object</returns>
        public Object CreateMenuSection (int? menuId, MenuSectionBase menuSection)
        {
             ApiResponse<Object> localVarResponse = CreateMenuSectionWithHttpInfo(menuId, menuSection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateMenuSectionWithHttpInfo (int? menuId, MenuSectionBase menuSection)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuSection");
            // verify the required parameter 'menuSection' is set
            if (menuSection == null)
                throw new ApiException(400, "Missing required parameter 'menuSection' when calling MenuSectionsApi->CreateMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSection != null && menuSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSection; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateMenuSectionAsync (int? menuId, MenuSectionBase menuSection)
        {
             ApiResponse<Object> localVarResponse = await CreateMenuSectionAsyncWithHttpInfo(menuId, menuSection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSection">Menu section</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionAsyncWithHttpInfo (int? menuId, MenuSectionBase menuSection)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuSection");
            // verify the required parameter 'menuSection' is set
            if (menuSection == null)
                throw new ApiException(400, "Missing required parameter 'menuSection' when calling MenuSectionsApi->CreateMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSection != null && menuSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSection; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Object</returns>
        public Object CreateMenuSectionAvailability (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability)
        {
             ApiResponse<Object> localVarResponse = CreateMenuSectionAvailabilityWithHttpInfo(menuId, menuSectionId, menuSectionAvailability);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateMenuSectionAvailabilityWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuSectionAvailability");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CreateMenuSectionAvailability");
            // verify the required parameter 'menuSectionAvailability' is set
            if (menuSectionAvailability == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionAvailability' when calling MenuSectionsApi->CreateMenuSectionAvailability");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionAvailability != null && menuSectionAvailability.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionAvailability); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionAvailability; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSectionAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateMenuSectionAvailabilityAsync (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability)
        {
             ApiResponse<Object> localVarResponse = await CreateMenuSectionAvailabilityAsyncWithHttpInfo(menuId, menuSectionId, menuSectionAvailability);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionAvailability"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMenuSectionAvailabilityAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->CreateMenuSectionAvailability");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->CreateMenuSectionAvailability");
            // verify the required parameter 'menuSectionAvailability' is set
            if (menuSectionAvailability == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionAvailability' when calling MenuSectionsApi->CreateMenuSectionAvailability");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionAvailability != null && menuSectionAvailability.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSectionAvailability); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSectionAvailability; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenuSectionAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns></returns>
        public void DeleteMenuSection (int? menuId, int? menuSectionId)
        {
             DeleteMenuSectionWithHttpInfo(menuId, menuSectionId);
        }

        /// <summary>
        /// Delete menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuSectionWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->DeleteMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->DeleteMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuSectionAsync (int? menuId, int? menuSectionId)
        {
             await DeleteMenuSectionAsyncWithHttpInfo(menuId, menuSectionId);

        }

        /// <summary>
        /// Delete menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->DeleteMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->DeleteMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns></returns>
        public void DeleteMenuSectionImage (int? menuId, int? menuSectionId)
        {
             DeleteMenuSectionImageWithHttpInfo(menuId, menuSectionId);
        }

        /// <summary>
        /// Delete menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuSectionImageWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->DeleteMenuSectionImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->DeleteMenuSectionImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuSectionImageAsync (int? menuId, int? menuSectionId)
        {
             await DeleteMenuSectionImageAsyncWithHttpInfo(menuId, menuSectionId);

        }

        /// <summary>
        /// Delete menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuSectionImageAsyncWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->DeleteMenuSectionImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->DeleteMenuSectionImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuSectionImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu section by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>RestApiResultMenuSection</returns>
        public RestApiResultMenuSection GetMenuSectionById (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiResultMenuSection> localVarResponse = GetMenuSectionByIdWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu section by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuSection</returns>
        public ApiResponse< RestApiResultMenuSection > GetMenuSectionByIdWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->GetMenuSectionById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->GetMenuSectionById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuSectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSection)));
        }

        /// <summary>
        /// Get menu section by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of RestApiResultMenuSection</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuSection> GetMenuSectionByIdAsync (int? menuId, int? menuSectionId)
        {
             ApiResponse<RestApiResultMenuSection> localVarResponse = await GetMenuSectionByIdAsyncWithHttpInfo(menuId, menuSectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu section by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuSection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuSection>> GetMenuSectionByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->GetMenuSectionById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->GetMenuSectionById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuSectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuSection)));
        }

        /// <summary>
        /// Get menu sections 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuSection</returns>
        public RestApiArrayResultMenuSection GetMenuSections (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuSection> localVarResponse = GetMenuSectionsWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu sections 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSection</returns>
        public ApiResponse< RestApiArrayResultMenuSection > GetMenuSectionsWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->GetMenuSections");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSection)));
        }

        /// <summary>
        /// Get menu sections 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuSection</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuSection> GetMenuSectionsAsync (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuSection> localVarResponse = await GetMenuSectionsAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu sections 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSection>> GetMenuSectionsAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->GetMenuSections");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSection)));
        }

        /// <summary>
        /// Update menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        public void UpdateMenuSection (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null)
        {
             UpdateMenuSectionWithHttpInfo(menuId, menuSectionId, menuSection, undoAfter);
        }

        /// <summary>
        /// Update menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuSectionWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->UpdateMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->UpdateMenuSection");
            // verify the required parameter 'menuSection' is set
            if (menuSection == null)
                throw new ApiException(400, "Missing required parameter 'menuSection' when calling MenuSectionsApi->UpdateMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuSection != null && menuSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSection; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuSectionAsync (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null)
        {
             await UpdateMenuSectionAsyncWithHttpInfo(menuId, menuSectionId, menuSection, undoAfter);

        }

        /// <summary>
        /// Update menu section 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSection">Menu section changes (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuSectionAsyncWithHttpInfo (int? menuId, int? menuSectionId, MenuSectionBase menuSection, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->UpdateMenuSection");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->UpdateMenuSection");
            // verify the required parameter 'menuSection' is set
            if (menuSection == null)
                throw new ApiException(400, "Missing required parameter 'menuSection' when calling MenuSectionsApi->UpdateMenuSection");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuSection != null && menuSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuSection; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult UploadMenuSectionImage (int? menuId, int? menuSectionId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = UploadMenuSectionImageWithHttpInfo(menuId, menuSectionId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > UploadMenuSectionImageWithHttpInfo (int? menuId, int? menuSectionId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->UploadMenuSectionImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->UploadMenuSectionImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuSectionsApi->UploadMenuSectionImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuSectionImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Upload menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> UploadMenuSectionImageAsync (int? menuId, int? menuSectionId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await UploadMenuSectionImageAsyncWithHttpInfo(menuId, menuSectionId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload menu section image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="image">Menu section image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuSectionImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuSectionsApi->UploadMenuSectionImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuSectionsApi->UploadMenuSectionImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuSectionsApi->UploadMenuSectionImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuSectionImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

    }
}

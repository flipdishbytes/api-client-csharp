/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBankAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns></returns>
        void AttachBankAccountToStore (string appId, int? accountId, int? storeId);

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachBankAccountToStoreWithHttpInfo (string appId, int? accountId, int? storeId);
        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        RestApiResultBankAccountDetail CreateBankAccount (string appId, BankAccountCreate account);

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        ApiResponse<RestApiResultBankAccountDetail> CreateBankAccountWithHttpInfo (string appId, BankAccountCreate account);
        /// <summary>
        /// [PRIVATE API] Delete BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns></returns>
        void DeleteBankAccount (string appId, int? id);

        /// <summary>
        /// [PRIVATE API] Delete BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBankAccountWithHttpInfo (string appId, int? id);
        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        RestApiResultBankAccountDetail GetBankAccount (int? id, string appId);

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        ApiResponse<RestApiResultBankAccountDetail> GetBankAccountWithHttpInfo (int? id, string appId);
        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>RestApiArrayResultBankAccountSummary</returns>
        RestApiArrayResultBankAccountSummary GetBankAccounts (string appId);

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>ApiResponse of RestApiArrayResultBankAccountSummary</returns>
        ApiResponse<RestApiArrayResultBankAccountSummary> GetBankAccountsWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API] Update BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns></returns>
        void UpdateBankAccount (string appId, int? id, BankAccountCreate account);

        /// <summary>
        /// [PRIVATE API] Update BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBankAccountWithHttpInfo (string appId, int? id, BankAccountCreate account);
        /// <summary>
        /// [PRIVATE API] Update State of Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns></returns>
        void UpdateBankAccountState (string appId, int? accountId, string state);

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBankAccountStateWithHttpInfo (string appId, int? accountId, string state);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachBankAccountToStoreAsync (string appId, int? accountId, int? storeId);

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachBankAccountToStoreAsyncWithHttpInfo (string appId, int? accountId, int? storeId);
        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        System.Threading.Tasks.Task<RestApiResultBankAccountDetail> CreateBankAccountAsync (string appId, BankAccountCreate account);

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> CreateBankAccountAsyncWithHttpInfo (string appId, BankAccountCreate account);
        /// <summary>
        /// [PRIVATE API] Delete BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBankAccountAsync (string appId, int? id);

        /// <summary>
        /// [PRIVATE API] Delete BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankAccountAsyncWithHttpInfo (string appId, int? id);
        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        System.Threading.Tasks.Task<RestApiResultBankAccountDetail> GetBankAccountAsync (int? id, string appId);

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> GetBankAccountAsyncWithHttpInfo (int? id, string appId);
        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>Task of RestApiArrayResultBankAccountSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultBankAccountSummary> GetBankAccountsAsync (string appId);

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultBankAccountSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultBankAccountSummary>> GetBankAccountsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API] Update BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBankAccountAsync (string appId, int? id, BankAccountCreate account);

        /// <summary>
        /// [PRIVATE API] Update BankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBankAccountAsyncWithHttpInfo (string appId, int? id, BankAccountCreate account);
        /// <summary>
        /// [PRIVATE API] Update State of Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBankAccountStateAsync (string appId, int? accountId, string state);

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBankAccountStateAsyncWithHttpInfo (string appId, int? accountId, string state);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BankAccountApi : IBankAccountApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankAccountApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BankAccountApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns></returns>
        public void AttachBankAccountToStore (string appId, int? accountId, int? storeId)
        {
             AttachBankAccountToStoreWithHttpInfo(appId, accountId, storeId);
        }

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachBankAccountToStoreWithHttpInfo (string appId, int? accountId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->AttachBankAccountToStore");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BankAccountApi->AttachBankAccountToStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling BankAccountApi->AttachBankAccountToStore");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{accountId}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachBankAccountToStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachBankAccountToStoreAsync (string appId, int? accountId, int? storeId)
        {
             await AttachBankAccountToStoreAsyncWithHttpInfo(appId, accountId, storeId);

        }

        /// <summary>
        /// [PRIVATE API] Attach Bank Account to Store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="storeId">Store to be attached to Bank account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachBankAccountToStoreAsyncWithHttpInfo (string appId, int? accountId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->AttachBankAccountToStore");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BankAccountApi->AttachBankAccountToStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling BankAccountApi->AttachBankAccountToStore");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{accountId}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachBankAccountToStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        public RestApiResultBankAccountDetail CreateBankAccount (string appId, BankAccountCreate account)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = CreateBankAccountWithHttpInfo(appId, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        public ApiResponse< RestApiResultBankAccountDetail > CreateBankAccountWithHttpInfo (string appId, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->CreateBankAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling BankAccountApi->CreateBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        public async System.Threading.Tasks.Task<RestApiResultBankAccountDetail> CreateBankAccountAsync (string appId, BankAccountCreate account)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = await CreateBankAccountAsyncWithHttpInfo(appId, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Create a new Bank Account and attach to this App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> CreateBankAccountAsyncWithHttpInfo (string appId, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->CreateBankAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling BankAccountApi->CreateBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// [PRIVATE API] Delete BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns></returns>
        public void DeleteBankAccount (string appId, int? id)
        {
             DeleteBankAccountWithHttpInfo(appId, id);
        }

        /// <summary>
        /// [PRIVATE API] Delete BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBankAccountWithHttpInfo (string appId, int? id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->DeleteBankAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->DeleteBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Delete BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBankAccountAsync (string appId, int? id)
        {
             await DeleteBankAccountAsyncWithHttpInfo(appId, id);

        }

        /// <summary>
        /// [PRIVATE API] Delete BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be marked as deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankAccountAsyncWithHttpInfo (string appId, int? id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->DeleteBankAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->DeleteBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        public RestApiResultBankAccountDetail GetBankAccount (int? id, string appId)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = GetBankAccountWithHttpInfo(id, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        public ApiResponse< RestApiResultBankAccountDetail > GetBankAccountWithHttpInfo (int? id, string appId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->GetBankAccount");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->GetBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        public async System.Threading.Tasks.Task<RestApiResultBankAccountDetail> GetBankAccountAsync (int? id, string appId)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = await GetBankAccountAsyncWithHttpInfo(id, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get BankAccount Detail by Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of account</param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> GetBankAccountAsyncWithHttpInfo (int? id, string appId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->GetBankAccount");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->GetBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>RestApiArrayResultBankAccountSummary</returns>
        public RestApiArrayResultBankAccountSummary GetBankAccounts (string appId)
        {
             ApiResponse<RestApiArrayResultBankAccountSummary> localVarResponse = GetBankAccountsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>ApiResponse of RestApiArrayResultBankAccountSummary</returns>
        public ApiResponse< RestApiArrayResultBankAccountSummary > GetBankAccountsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->GetBankAccounts");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultBankAccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultBankAccountSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultBankAccountSummary)));
        }

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>Task of RestApiArrayResultBankAccountSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultBankAccountSummary> GetBankAccountsAsync (string appId)
        {
             ApiResponse<RestApiArrayResultBankAccountSummary> localVarResponse = await GetBankAccountsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get List of BankAccounts for WL 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultBankAccountSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultBankAccountSummary>> GetBankAccountsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->GetBankAccounts");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultBankAccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultBankAccountSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultBankAccountSummary)));
        }

        /// <summary>
        /// [PRIVATE API] Update BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns></returns>
        public void UpdateBankAccount (string appId, int? id, BankAccountCreate account)
        {
             UpdateBankAccountWithHttpInfo(appId, id, account);
        }

        /// <summary>
        /// [PRIVATE API] Update BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBankAccountWithHttpInfo (string appId, int? id, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->UpdateBankAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->UpdateBankAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling BankAccountApi->UpdateBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Update BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBankAccountAsync (string appId, int? id, BankAccountCreate account)
        {
             await UpdateBankAccountAsyncWithHttpInfo(appId, id, account);

        }

        /// <summary>
        /// [PRIVATE API] Update BankAccount 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="id">Id of account to be updated</param>
        /// <param name="account">Details to update account with</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBankAccountAsyncWithHttpInfo (string appId, int? id, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->UpdateBankAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountApi->UpdateBankAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling BankAccountApi->UpdateBankAccount");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns></returns>
        public void UpdateBankAccountState (string appId, int? accountId, string state)
        {
             UpdateBankAccountStateWithHttpInfo(appId, accountId, state);
        }

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBankAccountStateWithHttpInfo (string appId, int? accountId, string state)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->UpdateBankAccountState");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BankAccountApi->UpdateBankAccountState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling BankAccountApi->UpdateBankAccountState");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{accountId}/state/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBankAccountStateAsync (string appId, int? accountId, string state)
        {
             await UpdateBankAccountStateAsyncWithHttpInfo(appId, accountId, state);

        }

        /// <summary>
        /// [PRIVATE API] Update State of Bank Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="accountId">Id of account to be updated</param>
        /// <param name="state"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBankAccountStateAsyncWithHttpInfo (string appId, int? accountId, string state)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling BankAccountApi->UpdateBankAccountState");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BankAccountApi->UpdateBankAccountState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling BankAccountApi->UpdateBankAccountState");

            var localVarPath = "/api/v1.0/{appId}/bankaccounts/{accountId}/state/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaygreenApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        RestApiResultRestaurantVoucherPaygreenConfiguration CreatePayGreenConfiguration (string appId, CreatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> CreatePayGreenConfigurationWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Object</returns>
        Object DeletePaygreenConfiguration (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeletePaygreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        RestApiArrayResultRestaurantVoucherPaygreenConfiguration GetPaygreenConfigurations (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration> GetPaygreenConfigurationsWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary GetStoreAvailablePayGreenConfigurations (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        RestApiArrayResultRestaurantVoucherEligibleStore GetStorePayGreenConfiguration (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> GetStorePayGreenConfigurationWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        RestApiResultRestaurantVoucherPaygreenStoreConfiguration GetStorePayGreenConfiguration_ (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> GetStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        RestApiResultRestaurantVoucherPaygreenConfiguration ListPayGreenConfigurations (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> ListPayGreenConfigurationsWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        RestApiResultRestaurantVoucherPaygreenConfiguration UpdatePayGreenConfiguration (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> UpdatePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        RestApiResultRestaurantVoucherPaygreenStoreConfiguration UpdateStorePayGreenConfiguration_ (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> UpdateStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> CreatePayGreenConfigurationAsync (string appId, CreatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> CreatePayGreenConfigurationAsyncWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeletePaygreenConfigurationAsync (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaygreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPaygreenConfiguration> GetPaygreenConfigurationsAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPaygreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration>> GetPaygreenConfigurationsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsAsync (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary>> GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherEligibleStore> GetStorePayGreenConfigurationAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherEligibleStore)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>> GetStorePayGreenConfigurationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> GetStorePayGreenConfiguration_Async (string appId, int? storeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>> GetStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> ListPayGreenConfigurationsAsync (string appId, int? paygreenConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> ListPayGreenConfigurationsAsyncWithHttpInfo (string appId, int? paygreenConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> UpdatePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> UpdatePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> UpdateStorePayGreenConfiguration_Async (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenStoreConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>> UpdateStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaygreenApi : IPaygreenApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaygreenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaygreenApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaygreenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaygreenApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPaygreenConfiguration CreatePayGreenConfiguration (string appId, CreatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = CreatePayGreenConfigurationWithHttpInfo(appId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPaygreenConfiguration > CreatePayGreenConfigurationWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->CreatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->CreatePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> CreatePayGreenConfigurationAsync (string appId, CreatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = await CreatePayGreenConfigurationAsyncWithHttpInfo(appId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> CreatePayGreenConfigurationAsyncWithHttpInfo (string appId, CreatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->CreatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->CreatePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Object</returns>
        public Object DeletePaygreenConfiguration (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<Object> localVarResponse = DeletePaygreenConfigurationWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeletePaygreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->DeletePaygreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->DeletePaygreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaygreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeletePaygreenConfigurationAsync (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<Object> localVarResponse = await DeletePaygreenConfigurationAsyncWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaygreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->DeletePaygreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->DeletePaygreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaygreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        public RestApiArrayResultRestaurantVoucherPaygreenConfiguration GetPaygreenConfigurations (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration> localVarResponse = GetPaygreenConfigurationsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherPaygreenConfiguration > GetPaygreenConfigurationsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetPaygreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaygreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPaygreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPaygreenConfiguration> GetPaygreenConfigurationsAsync (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration> localVarResponse = await GetPaygreenConfigurationsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPaygreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration>> GetPaygreenConfigurationsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetPaygreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaygreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        public RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary GetStoreAvailablePayGreenConfigurations (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary> localVarResponse = GetStoreAvailablePayGreenConfigurationsWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary > GetStoreAvailablePayGreenConfigurationsWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStoreAvailablePayGreenConfigurations");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->GetStoreAvailablePayGreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}/available-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreAvailablePayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary> GetStoreAvailablePayGreenConfigurationsAsync (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary> localVarResponse = await GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary>> GetStoreAvailablePayGreenConfigurationsAsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStoreAvailablePayGreenConfigurations");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->GetStoreAvailablePayGreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}/available-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreAvailablePayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherPaygreenConfigurationSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public RestApiArrayResultRestaurantVoucherEligibleStore GetStorePayGreenConfiguration (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> localVarResponse = GetStorePayGreenConfigurationWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public ApiResponse< RestApiArrayResultRestaurantVoucherEligibleStore > GetStorePayGreenConfigurationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStorePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherEligibleStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherEligibleStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultRestaurantVoucherEligibleStore</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRestaurantVoucherEligibleStore> GetStorePayGreenConfigurationAsync (string appId)
        {
             ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore> localVarResponse = await GetStorePayGreenConfigurationAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRestaurantVoucherEligibleStore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>> GetStorePayGreenConfigurationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStorePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRestaurantVoucherEligibleStore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRestaurantVoucherEligibleStore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRestaurantVoucherEligibleStore)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public RestApiResultRestaurantVoucherPaygreenStoreConfiguration GetStorePayGreenConfiguration_ (string appId, int? storeId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> localVarResponse = GetStorePayGreenConfiguration_WithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPaygreenStoreConfiguration > GetStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->GetStorePayGreenConfiguration_");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> GetStorePayGreenConfiguration_Async (string appId, int? storeId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> localVarResponse = await GetStorePayGreenConfiguration_AsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>> GetStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->GetStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->GetStorePayGreenConfiguration_");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPaygreenConfiguration ListPayGreenConfigurations (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = ListPayGreenConfigurationsWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPaygreenConfiguration > ListPayGreenConfigurationsWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->ListPayGreenConfigurations");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->ListPayGreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> ListPayGreenConfigurationsAsync (string appId, int? paygreenConfigurationId)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = await ListPayGreenConfigurationsAsyncWithHttpInfo(appId, paygreenConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> ListPayGreenConfigurationsAsyncWithHttpInfo (string appId, int? paygreenConfigurationId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->ListPayGreenConfigurations");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->ListPayGreenConfigurations");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayGreenConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public RestApiResultRestaurantVoucherPaygreenConfiguration UpdatePayGreenConfiguration (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = UpdatePayGreenConfigurationWithHttpInfo(appId, paygreenConfigurationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPaygreenConfiguration > UpdatePayGreenConfigurationWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->UpdatePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenConfiguration> UpdatePayGreenConfigurationAsync (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration> localVarResponse = await UpdatePayGreenConfigurationAsyncWithHttpInfo(appId, paygreenConfigurationId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="paygreenConfigurationId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>> UpdatePayGreenConfigurationAsyncWithHttpInfo (string appId, int? paygreenConfigurationId, UpdatePayGreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'paygreenConfigurationId' is set
            if (paygreenConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'paygreenConfigurationId' when calling PaygreenApi->UpdatePayGreenConfiguration");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->UpdatePayGreenConfiguration");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/{paygreenConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (paygreenConfigurationId != null) localVarPathParams.Add("paygreenConfigurationId", this.Configuration.ApiClient.ParameterToString(paygreenConfigurationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayGreenConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public RestApiResultRestaurantVoucherPaygreenStoreConfiguration UpdateStorePayGreenConfiguration_ (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> localVarResponse = UpdateStorePayGreenConfiguration_WithHttpInfo(appId, storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public ApiResponse< RestApiResultRestaurantVoucherPaygreenStoreConfiguration > UpdateStorePayGreenConfiguration_WithHttpInfo (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenStoreConfiguration)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of RestApiResultRestaurantVoucherPaygreenStoreConfiguration</returns>
        public async System.Threading.Tasks.Task<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> UpdateStorePayGreenConfiguration_Async (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request)
        {
             ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration> localVarResponse = await UpdateStorePayGreenConfiguration_AsyncWithHttpInfo(appId, storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RestApiResultRestaurantVoucherPaygreenStoreConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>> UpdateStorePayGreenConfiguration_AsyncWithHttpInfo (string appId, int? storeId, UpdateStorePaygreenConfigurationRequest request)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PaygreenApi->UpdateStorePayGreenConfiguration_");

            var localVarPath = "/api/v1.0/{appId}/restaurant-vouchers/paygreen/stores/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStorePayGreenConfiguration_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRestaurantVoucherPaygreenStoreConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRestaurantVoucherPaygreenStoreConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRestaurantVoucherPaygreenStoreConfiguration)));
        }

    }
}

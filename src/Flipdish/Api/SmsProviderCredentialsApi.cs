/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsProviderCredentialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        RestApiResultSmsProviderCredential GetBrandSmsProviderCredentialByServiceType (string orgId, string brandId, string serviceType, bool? withFallback = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        ApiResponse<RestApiResultSmsProviderCredential> GetBrandSmsProviderCredentialByServiceTypeWithHttpInfo (string orgId, string brandId, string serviceType, bool? withFallback = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>RestApiArrayResultSmsProviderCredential</returns>
        RestApiArrayResultSmsProviderCredential GetBrandSmsProviderCredentials (string orgId, string brandId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of RestApiArrayResultSmsProviderCredential</returns>
        ApiResponse<RestApiArrayResultSmsProviderCredential> GetBrandSmsProviderCredentialsWithHttpInfo (string orgId, string brandId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        RestApiResultSmsProviderCredential SmsProviderCredentialDelete (string orgId, string brandId, string serviceType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        ApiResponse<RestApiResultSmsProviderCredential> SmsProviderCredentialDeleteWithHttpInfo (string orgId, string brandId, string serviceType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        RestApiResultSmsProviderCredential SmsProviderCredentialUpdate (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        ApiResponse<RestApiResultSmsProviderCredential> SmsProviderCredentialUpdateWithHttpInfo (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>RestApiArrayResultSmsProviderCredential</returns>
        RestApiArrayResultSmsProviderCredential SmsProviderCredentialsBulkUpsert (List<SmsProviderCredential> credentials);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>ApiResponse of RestApiArrayResultSmsProviderCredential</returns>
        ApiResponse<RestApiArrayResultSmsProviderCredential> SmsProviderCredentialsBulkUpsertWithHttpInfo (List<SmsProviderCredential> credentials);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> GetBrandSmsProviderCredentialByServiceTypeAsync (string orgId, string brandId, string serviceType, bool? withFallback = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> GetBrandSmsProviderCredentialByServiceTypeAsyncWithHttpInfo (string orgId, string brandId, string serviceType, bool? withFallback = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>Task of RestApiArrayResultSmsProviderCredential</returns>
        System.Threading.Tasks.Task<RestApiArrayResultSmsProviderCredential> GetBrandSmsProviderCredentialsAsync (string orgId, string brandId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultSmsProviderCredential)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultSmsProviderCredential>> GetBrandSmsProviderCredentialsAsyncWithHttpInfo (string orgId, string brandId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> SmsProviderCredentialDeleteAsync (string orgId, string brandId, string serviceType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> SmsProviderCredentialDeleteAsyncWithHttpInfo (string orgId, string brandId, string serviceType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> SmsProviderCredentialUpdateAsync (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> SmsProviderCredentialUpdateAsyncWithHttpInfo (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>Task of RestApiArrayResultSmsProviderCredential</returns>
        System.Threading.Tasks.Task<RestApiArrayResultSmsProviderCredential> SmsProviderCredentialsBulkUpsertAsync (List<SmsProviderCredential> credentials);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultSmsProviderCredential)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultSmsProviderCredential>> SmsProviderCredentialsBulkUpsertAsyncWithHttpInfo (List<SmsProviderCredential> credentials);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SmsProviderCredentialsApi : ISmsProviderCredentialsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsProviderCredentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsProviderCredentialsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsProviderCredentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SmsProviderCredentialsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        public RestApiResultSmsProviderCredential GetBrandSmsProviderCredentialByServiceType (string orgId, string brandId, string serviceType, bool? withFallback = null)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = GetBrandSmsProviderCredentialByServiceTypeWithHttpInfo(orgId, brandId, serviceType, withFallback);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        public ApiResponse< RestApiResultSmsProviderCredential > GetBrandSmsProviderCredentialByServiceTypeWithHttpInfo (string orgId, string brandId, string serviceType, bool? withFallback = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (withFallback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withFallback", withFallback)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandSmsProviderCredentialByServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        public async System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> GetBrandSmsProviderCredentialByServiceTypeAsync (string orgId, string brandId, string serviceType, bool? withFallback = null)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = await GetBrandSmsProviderCredentialByServiceTypeAsyncWithHttpInfo(orgId, brandId, serviceType, withFallback);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="withFallback"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> GetBrandSmsProviderCredentialByServiceTypeAsyncWithHttpInfo (string orgId, string brandId, string serviceType, bool? withFallback = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentialByServiceType");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (withFallback != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withFallback", withFallback)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandSmsProviderCredentialByServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>RestApiArrayResultSmsProviderCredential</returns>
        public RestApiArrayResultSmsProviderCredential GetBrandSmsProviderCredentials (string orgId, string brandId)
        {
             ApiResponse<RestApiArrayResultSmsProviderCredential> localVarResponse = GetBrandSmsProviderCredentialsWithHttpInfo(orgId, brandId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of RestApiArrayResultSmsProviderCredential</returns>
        public ApiResponse< RestApiArrayResultSmsProviderCredential > GetBrandSmsProviderCredentialsWithHttpInfo (string orgId, string brandId)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentials");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentials");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandSmsProviderCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>Task of RestApiArrayResultSmsProviderCredential</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultSmsProviderCredential> GetBrandSmsProviderCredentialsAsync (string orgId, string brandId)
        {
             ApiResponse<RestApiArrayResultSmsProviderCredential> localVarResponse = await GetBrandSmsProviderCredentialsAsyncWithHttpInfo(orgId, brandId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultSmsProviderCredential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultSmsProviderCredential>> GetBrandSmsProviderCredentialsAsyncWithHttpInfo (string orgId, string brandId)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentials");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->GetBrandSmsProviderCredentials");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandSmsProviderCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        public RestApiResultSmsProviderCredential SmsProviderCredentialDelete (string orgId, string brandId, string serviceType)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = SmsProviderCredentialDeleteWithHttpInfo(orgId, brandId, serviceType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        public ApiResponse< RestApiResultSmsProviderCredential > SmsProviderCredentialDeleteWithHttpInfo (string orgId, string brandId, string serviceType)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        public async System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> SmsProviderCredentialDeleteAsync (string orgId, string brandId, string serviceType)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = await SmsProviderCredentialDeleteAsyncWithHttpInfo(orgId, brandId, serviceType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> SmsProviderCredentialDeleteAsyncWithHttpInfo (string orgId, string brandId, string serviceType)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->SmsProviderCredentialDelete");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>RestApiResultSmsProviderCredential</returns>
        public RestApiResultSmsProviderCredential SmsProviderCredentialUpdate (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = SmsProviderCredentialUpdateWithHttpInfo(orgId, brandId, serviceType, credential);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>ApiResponse of RestApiResultSmsProviderCredential</returns>
        public ApiResponse< RestApiResultSmsProviderCredential > SmsProviderCredentialUpdateWithHttpInfo (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'credential' is set
            if (credential == null)
                throw new ApiException(400, "Missing required parameter 'credential' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (credential != null && credential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credential; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>Task of RestApiResultSmsProviderCredential</returns>
        public async System.Threading.Tasks.Task<RestApiResultSmsProviderCredential> SmsProviderCredentialUpdateAsync (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential)
        {
             ApiResponse<RestApiResultSmsProviderCredential> localVarResponse = await SmsProviderCredentialUpdateAsyncWithHttpInfo(orgId, brandId, serviceType, credential);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="brandId"></param>
        /// <param name="serviceType"></param>
        /// <param name="credential"></param>
        /// <returns>Task of ApiResponse (RestApiResultSmsProviderCredential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultSmsProviderCredential>> SmsProviderCredentialUpdateAsyncWithHttpInfo (string orgId, string brandId, string serviceType, SmsProviderCredentialUpdateRequest credential)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");
            // verify the required parameter 'credential' is set
            if (credential == null)
                throw new ApiException(400, "Missing required parameter 'credential' when calling SmsProviderCredentialsApi->SmsProviderCredentialUpdate");

            var localVarPath = "./api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", this.Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (credential != null && credential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credential; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>RestApiArrayResultSmsProviderCredential</returns>
        public RestApiArrayResultSmsProviderCredential SmsProviderCredentialsBulkUpsert (List<SmsProviderCredential> credentials)
        {
             ApiResponse<RestApiArrayResultSmsProviderCredential> localVarResponse = SmsProviderCredentialsBulkUpsertWithHttpInfo(credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>ApiResponse of RestApiArrayResultSmsProviderCredential</returns>
        public ApiResponse< RestApiArrayResultSmsProviderCredential > SmsProviderCredentialsBulkUpsertWithHttpInfo (List<SmsProviderCredential> credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling SmsProviderCredentialsApi->SmsProviderCredentialsBulkUpsert");

            var localVarPath = "./api/v1.0/sms-providers/bulk-upsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialsBulkUpsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultSmsProviderCredential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>Task of RestApiArrayResultSmsProviderCredential</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultSmsProviderCredential> SmsProviderCredentialsBulkUpsertAsync (List<SmsProviderCredential> credentials)
        {
             ApiResponse<RestApiArrayResultSmsProviderCredential> localVarResponse = await SmsProviderCredentialsBulkUpsertAsyncWithHttpInfo(credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultSmsProviderCredential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultSmsProviderCredential>> SmsProviderCredentialsBulkUpsertAsyncWithHttpInfo (List<SmsProviderCredential> credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling SmsProviderCredentialsApi->SmsProviderCredentialsBulkUpsert");

            var localVarPath = "./api/v1.0/sms-providers/bulk-upsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsProviderCredentialsBulkUpsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultSmsProviderCredential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultSmsProviderCredential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultSmsProviderCredential)));
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStripeCustomConnectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Bank Account and Stripe connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        RestApiResultBankAccountDetail CreateBankAccountAndConnectedAccount (string appId, BankAccountCreate account);

        /// <summary>
        /// Create a new Bank Account and Stripe connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        ApiResponse<RestApiResultBankAccountDetail> CreateBankAccountAndConnectedAccountWithHttpInfo (string appId, BankAccountCreate account);
        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        RestApiResultStripeConnectedAccount CreateStripeConnectedAccount (string appId, int? bankAccountId);

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        ApiResponse<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountWithHttpInfo (string appId, int? bankAccountId);
        /// <summary>
        /// Gets a single-use Stripe URL for the given account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        RestApiResultStripeConnectedAccount CreateStripeConnectedAccountLink (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest);

        /// <summary>
        /// Gets a single-use Stripe URL for the given account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        ApiResponse<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountLinkWithHttpInfo (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest);
        /// <summary>
        /// Gets the current verification status of the given connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        RestApiResultStripeConnectedAccount GetVerificationStatus (string appId, string stripeConnectedAccountId);

        /// <summary>
        /// Gets the current verification status of the given connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        ApiResponse<RestApiResultStripeConnectedAccount> GetVerificationStatusWithHttpInfo (string appId, string stripeConnectedAccountId);
        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        RestApiResultBankAccountDetail SetBankAccountBusinessType (string appId, int? bankAccountId, string businessType);

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        ApiResponse<RestApiResultBankAccountDetail> SetBankAccountBusinessTypeWithHttpInfo (string appId, int? bankAccountId, string businessType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        Object StripeCustomConnectRefresh (int? linkRequestId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StripeCustomConnectRefreshWithHttpInfo (int? linkRequestId, string appId);
        /// <summary>
        /// Update bank account details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        RestApiResultStripeConnectedAccount UpdateBankAccountDetails (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest);

        /// <summary>
        /// Update bank account details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        ApiResponse<RestApiResultStripeConnectedAccount> UpdateBankAccountDetailsWithHttpInfo (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest);
        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>RestApiResultModelBase</returns>
        RestApiResultModelBase UpdatePayoutSchedule (string appId, string stripeConnectedAccountId, string interval);

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>ApiResponse of RestApiResultModelBase</returns>
        ApiResponse<RestApiResultModelBase> UpdatePayoutScheduleWithHttpInfo (string appId, string stripeConnectedAccountId, string interval);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Bank Account and Stripe connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        System.Threading.Tasks.Task<RestApiResultBankAccountDetail> CreateBankAccountAndConnectedAccountAsync (string appId, BankAccountCreate account);

        /// <summary>
        /// Create a new Bank Account and Stripe connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> CreateBankAccountAndConnectedAccountAsyncWithHttpInfo (string appId, BankAccountCreate account);
        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountAsync (string appId, int? bankAccountId);

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> CreateStripeConnectedAccountAsyncWithHttpInfo (string appId, int? bankAccountId);
        /// <summary>
        /// Gets a single-use Stripe URL for the given account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountLinkAsync (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest);

        /// <summary>
        /// Gets a single-use Stripe URL for the given account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> CreateStripeConnectedAccountLinkAsyncWithHttpInfo (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest);
        /// <summary>
        /// Gets the current verification status of the given connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> GetVerificationStatusAsync (string appId, string stripeConnectedAccountId);

        /// <summary>
        /// Gets the current verification status of the given connected account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> GetVerificationStatusAsyncWithHttpInfo (string appId, string stripeConnectedAccountId);
        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        System.Threading.Tasks.Task<RestApiResultBankAccountDetail> SetBankAccountBusinessTypeAsync (string appId, int? bankAccountId, string businessType);

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> SetBankAccountBusinessTypeAsyncWithHttpInfo (string appId, int? bankAccountId, string businessType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StripeCustomConnectRefreshAsync (int? linkRequestId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StripeCustomConnectRefreshAsyncWithHttpInfo (int? linkRequestId, string appId);
        /// <summary>
        /// Update bank account details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> UpdateBankAccountDetailsAsync (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest);

        /// <summary>
        /// Update bank account details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> UpdateBankAccountDetailsAsyncWithHttpInfo (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest);
        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>Task of RestApiResultModelBase</returns>
        System.Threading.Tasks.Task<RestApiResultModelBase> UpdatePayoutScheduleAsync (string appId, string stripeConnectedAccountId, string interval);

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>Task of ApiResponse (RestApiResultModelBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultModelBase>> UpdatePayoutScheduleAsyncWithHttpInfo (string appId, string stripeConnectedAccountId, string interval);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StripeCustomConnectApi : IStripeCustomConnectApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeCustomConnectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StripeCustomConnectApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeCustomConnectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StripeCustomConnectApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Bank Account and Stripe connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        public RestApiResultBankAccountDetail CreateBankAccountAndConnectedAccount (string appId, BankAccountCreate account)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = CreateBankAccountAndConnectedAccountWithHttpInfo(appId, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Bank Account and Stripe connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        public ApiResponse< RestApiResultBankAccountDetail > CreateBankAccountAndConnectedAccountWithHttpInfo (string appId, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateBankAccountAndConnectedAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling StripeCustomConnectApi->CreateBankAccountAndConnectedAccount");

            var localVarPath = "/api/v1.0/{appId}/customconnect/bank-account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccountAndConnectedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// Create a new Bank Account and Stripe connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        public async System.Threading.Tasks.Task<RestApiResultBankAccountDetail> CreateBankAccountAndConnectedAccountAsync (string appId, BankAccountCreate account)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = await CreateBankAccountAndConnectedAccountAsyncWithHttpInfo(appId, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Bank Account and Stripe connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="account">Account to be created</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> CreateBankAccountAndConnectedAccountAsyncWithHttpInfo (string appId, BankAccountCreate account)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateBankAccountAndConnectedAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling StripeCustomConnectApi->CreateBankAccountAndConnectedAccount");

            var localVarPath = "/api/v1.0/{appId}/customconnect/bank-account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccountAndConnectedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        public RestApiResultStripeConnectedAccount CreateStripeConnectedAccount (string appId, int? bankAccountId)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = CreateStripeConnectedAccountWithHttpInfo(appId, bankAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        public ApiResponse< RestApiResultStripeConnectedAccount > CreateStripeConnectedAccountWithHttpInfo (string appId, int? bankAccountId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateStripeConnectedAccount");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->CreateStripeConnectedAccount");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/create-update-account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStripeConnectedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountAsync (string appId, int? bankAccountId)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = await CreateStripeConnectedAccountAsyncWithHttpInfo(appId, bankAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a Stripe connected account associated with the bank account of bankAccountId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> CreateStripeConnectedAccountAsyncWithHttpInfo (string appId, int? bankAccountId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateStripeConnectedAccount");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->CreateStripeConnectedAccount");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/create-update-account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStripeConnectedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Gets a single-use Stripe URL for the given account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        public RestApiResultStripeConnectedAccount CreateStripeConnectedAccountLink (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = CreateStripeConnectedAccountLinkWithHttpInfo(appId, stripeConnectedAccountId, stripeAccountLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single-use Stripe URL for the given account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        public ApiResponse< RestApiResultStripeConnectedAccount > CreateStripeConnectedAccountLinkWithHttpInfo (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");
            // verify the required parameter 'stripeAccountLinkRequest' is set
            if (stripeAccountLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'stripeAccountLinkRequest' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{stripeConnectedAccountId}/create-account-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarPathParams.Add("stripeConnectedAccountId", this.Configuration.ApiClient.ParameterToString(stripeConnectedAccountId)); // path parameter
            if (stripeAccountLinkRequest != null && stripeAccountLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stripeAccountLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stripeAccountLinkRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStripeConnectedAccountLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Gets a single-use Stripe URL for the given account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> CreateStripeConnectedAccountLinkAsync (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = await CreateStripeConnectedAccountLinkAsyncWithHttpInfo(appId, stripeConnectedAccountId, stripeAccountLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single-use Stripe URL for the given account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="stripeConnectedAccountId">Stripe Connected Account Id</param>
        /// <param name="stripeAccountLinkRequest"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> CreateStripeConnectedAccountLinkAsyncWithHttpInfo (string appId, string stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");
            // verify the required parameter 'stripeAccountLinkRequest' is set
            if (stripeAccountLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'stripeAccountLinkRequest' when calling StripeCustomConnectApi->CreateStripeConnectedAccountLink");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{stripeConnectedAccountId}/create-account-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarPathParams.Add("stripeConnectedAccountId", this.Configuration.ApiClient.ParameterToString(stripeConnectedAccountId)); // path parameter
            if (stripeAccountLinkRequest != null && stripeAccountLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stripeAccountLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stripeAccountLinkRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStripeConnectedAccountLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Gets the current verification status of the given connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        public RestApiResultStripeConnectedAccount GetVerificationStatus (string appId, string stripeConnectedAccountId)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = GetVerificationStatusWithHttpInfo(appId, stripeConnectedAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current verification status of the given connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        public ApiResponse< RestApiResultStripeConnectedAccount > GetVerificationStatusWithHttpInfo (string appId, string stripeConnectedAccountId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->GetVerificationStatus");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->GetVerificationStatus");

            var localVarPath = "/api/v1.0/{appId}/customconnect/verification-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripeConnectedAccountId", stripeConnectedAccountId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Gets the current verification status of the given connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> GetVerificationStatusAsync (string appId, string stripeConnectedAccountId)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = await GetVerificationStatusAsyncWithHttpInfo(appId, stripeConnectedAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current verification status of the given connected account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> GetVerificationStatusAsyncWithHttpInfo (string appId, string stripeConnectedAccountId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->GetVerificationStatus");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->GetVerificationStatus");

            var localVarPath = "/api/v1.0/{appId}/customconnect/verification-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripeConnectedAccountId", stripeConnectedAccountId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>RestApiResultBankAccountDetail</returns>
        public RestApiResultBankAccountDetail SetBankAccountBusinessType (string appId, int? bankAccountId, string businessType)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = SetBankAccountBusinessTypeWithHttpInfo(appId, bankAccountId, businessType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>ApiResponse of RestApiResultBankAccountDetail</returns>
        public ApiResponse< RestApiResultBankAccountDetail > SetBankAccountBusinessTypeWithHttpInfo (string appId, int? bankAccountId, string businessType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->SetBankAccountBusinessType");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->SetBankAccountBusinessType");
            // verify the required parameter 'businessType' is set
            if (businessType == null)
                throw new ApiException(400, "Missing required parameter 'businessType' when calling StripeCustomConnectApi->SetBankAccountBusinessType");

            var localVarPath = "/api/v1.0/{appId}/customconnect/bank-account/{bankAccountId}/businesstype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (businessType != null && businessType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessType; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBankAccountBusinessType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>Task of RestApiResultBankAccountDetail</returns>
        public async System.Threading.Tasks.Task<RestApiResultBankAccountDetail> SetBankAccountBusinessTypeAsync (string appId, int? bankAccountId, string businessType)
        {
             ApiResponse<RestApiResultBankAccountDetail> localVarResponse = await SetBankAccountBusinessTypeAsyncWithHttpInfo(appId, bankAccountId, businessType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bank account&#39;s BusinessType and create a Stripe Connected Account 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="businessType">Bank Account business type</param>
        /// <returns>Task of ApiResponse (RestApiResultBankAccountDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBankAccountDetail>> SetBankAccountBusinessTypeAsyncWithHttpInfo (string appId, int? bankAccountId, string businessType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->SetBankAccountBusinessType");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->SetBankAccountBusinessType");
            // verify the required parameter 'businessType' is set
            if (businessType == null)
                throw new ApiException(400, "Missing required parameter 'businessType' when calling StripeCustomConnectApi->SetBankAccountBusinessType");

            var localVarPath = "/api/v1.0/{appId}/customconnect/bank-account/{bankAccountId}/businesstype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (businessType != null && businessType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessType; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBankAccountBusinessType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBankAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBankAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBankAccountDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Object</returns>
        public Object StripeCustomConnectRefresh (int? linkRequestId, string appId)
        {
             ApiResponse<Object> localVarResponse = StripeCustomConnectRefreshWithHttpInfo(linkRequestId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > StripeCustomConnectRefreshWithHttpInfo (int? linkRequestId, string appId)
        {
            // verify the required parameter 'linkRequestId' is set
            if (linkRequestId == null)
                throw new ApiException(400, "Missing required parameter 'linkRequestId' when calling StripeCustomConnectApi->StripeCustomConnectRefresh");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->StripeCustomConnectRefresh");

            var localVarPath = "/api/v1.0/{appId}/customconnect/refresh-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (linkRequestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linkRequestId", linkRequestId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeCustomConnectRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StripeCustomConnectRefreshAsync (int? linkRequestId, string appId)
        {
             ApiResponse<Object> localVarResponse = await StripeCustomConnectRefreshAsyncWithHttpInfo(linkRequestId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkRequestId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StripeCustomConnectRefreshAsyncWithHttpInfo (int? linkRequestId, string appId)
        {
            // verify the required parameter 'linkRequestId' is set
            if (linkRequestId == null)
                throw new ApiException(400, "Missing required parameter 'linkRequestId' when calling StripeCustomConnectApi->StripeCustomConnectRefresh");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->StripeCustomConnectRefresh");

            var localVarPath = "/api/v1.0/{appId}/customconnect/refresh-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (linkRequestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linkRequestId", linkRequestId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeCustomConnectRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update bank account details 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>RestApiResultStripeConnectedAccount</returns>
        public RestApiResultStripeConnectedAccount UpdateBankAccountDetails (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = UpdateBankAccountDetailsWithHttpInfo(appId, bankAccountId, updateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update bank account details 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>ApiResponse of RestApiResultStripeConnectedAccount</returns>
        public ApiResponse< RestApiResultStripeConnectedAccount > UpdateBankAccountDetailsWithHttpInfo (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->UpdateBankAccountDetails");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->UpdateBankAccountDetails");
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateRequest' when calling StripeCustomConnectApi->UpdateBankAccountDetails");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/update-bank-account-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (updateRequest != null && updateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Update bank account details 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>Task of RestApiResultStripeConnectedAccount</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeConnectedAccount> UpdateBankAccountDetailsAsync (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest)
        {
             ApiResponse<RestApiResultStripeConnectedAccount> localVarResponse = await UpdateBankAccountDetailsAsyncWithHttpInfo(appId, bankAccountId, updateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update bank account details 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="bankAccountId">Bank Account Id</param>
        /// <param name="updateRequest">fields to be updated</param>
        /// <returns>Task of ApiResponse (RestApiResultStripeConnectedAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeConnectedAccount>> UpdateBankAccountDetailsAsyncWithHttpInfo (string appId, int? bankAccountId, BankAccountDetailsUpdateRequest updateRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->UpdateBankAccountDetails");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling StripeCustomConnectApi->UpdateBankAccountDetails");
            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateRequest' when calling StripeCustomConnectApi->UpdateBankAccountDetails");

            var localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/update-bank-account-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bankAccountId", this.Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter
            if (updateRequest != null && updateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeConnectedAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeConnectedAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeConnectedAccount)));
        }

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>RestApiResultModelBase</returns>
        public RestApiResultModelBase UpdatePayoutSchedule (string appId, string stripeConnectedAccountId, string interval)
        {
             ApiResponse<RestApiResultModelBase> localVarResponse = UpdatePayoutScheduleWithHttpInfo(appId, stripeConnectedAccountId, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>ApiResponse of RestApiResultModelBase</returns>
        public ApiResponse< RestApiResultModelBase > UpdatePayoutScheduleWithHttpInfo (string appId, string stripeConnectedAccountId, string interval)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->UpdatePayoutSchedule");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->UpdatePayoutSchedule");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling StripeCustomConnectApi->UpdatePayoutSchedule");

            var localVarPath = "/api/v1.0/{appId}/customconnect/update-payout-schedule/{stripeConnectedAccountId}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarPathParams.Add("stripeConnectedAccountId", this.Configuration.ApiClient.ParameterToString(stripeConnectedAccountId)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayoutSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultModelBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultModelBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultModelBase)));
        }

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>Task of RestApiResultModelBase</returns>
        public async System.Threading.Tasks.Task<RestApiResultModelBase> UpdatePayoutScheduleAsync (string appId, string stripeConnectedAccountId, string interval)
        {
             ApiResponse<RestApiResultModelBase> localVarResponse = await UpdatePayoutScheduleAsyncWithHttpInfo(appId, stripeConnectedAccountId, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Stripe Connection Account&#39;s payout schedule 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="stripeConnectedAccountId"></param>
        /// <param name="interval"></param>
        /// <returns>Task of ApiResponse (RestApiResultModelBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultModelBase>> UpdatePayoutScheduleAsyncWithHttpInfo (string appId, string stripeConnectedAccountId, string interval)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling StripeCustomConnectApi->UpdatePayoutSchedule");
            // verify the required parameter 'stripeConnectedAccountId' is set
            if (stripeConnectedAccountId == null)
                throw new ApiException(400, "Missing required parameter 'stripeConnectedAccountId' when calling StripeCustomConnectApi->UpdatePayoutSchedule");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling StripeCustomConnectApi->UpdatePayoutSchedule");

            var localVarPath = "/api/v1.0/{appId}/customconnect/update-payout-schedule/{stripeConnectedAccountId}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (stripeConnectedAccountId != null) localVarPathParams.Add("stripeConnectedAccountId", this.Configuration.ApiClient.ParameterToString(stripeConnectedAccountId)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayoutSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultModelBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultModelBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultModelBase)));
        }

    }
}

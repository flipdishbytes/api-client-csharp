/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>RestApiResultLoyaltyCampaign</returns>
        RestApiResultLoyaltyCampaign CreateLoyaltyCampaign (string appId, LoyaltyCampaignBase campaign);

        /// <summary>
        /// Creates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>ApiResponse of RestApiResultLoyaltyCampaign</returns>
        ApiResponse<RestApiResultLoyaltyCampaign> CreateLoyaltyCampaignWithHttpInfo (string appId, LoyaltyCampaignBase campaign);
        /// <summary>
        /// Creates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>RestApiResultRetentionCampaign</returns>
        RestApiResultRetentionCampaign CreateRetentionCampaign (string appId, RetentionCampaignBase campaign);

        /// <summary>
        /// Creates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>ApiResponse of RestApiResultRetentionCampaign</returns>
        ApiResponse<RestApiResultRetentionCampaign> CreateRetentionCampaignWithHttpInfo (string appId, RetentionCampaignBase campaign);
        /// <summary>
        /// Gets loyalty campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>RestApiArrayResultLoyaltyCampaign</returns>
        RestApiArrayResultLoyaltyCampaign GetLoyaltyCampaignsForApp (string appId);

        /// <summary>
        /// Gets loyalty campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>ApiResponse of RestApiArrayResultLoyaltyCampaign</returns>
        ApiResponse<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForAppWithHttpInfo (string appId);
        /// <summary>
        /// Gets loyalty campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>RestApiArrayResultLoyaltyCampaign</returns>
        RestApiArrayResultLoyaltyCampaign GetLoyaltyCampaignsForStore (string appId, int? storeId);

        /// <summary>
        /// Gets loyalty campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>ApiResponse of RestApiArrayResultLoyaltyCampaign</returns>
        ApiResponse<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForStoreWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// Gets retention campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>RestApiArrayResultRetentionCampaign</returns>
        RestApiArrayResultRetentionCampaign GetRetentionCampaignsForApp (string appId);

        /// <summary>
        /// Gets retention campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>ApiResponse of RestApiArrayResultRetentionCampaign</returns>
        ApiResponse<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForAppWithHttpInfo (string appId);
        /// <summary>
        /// Gets retention campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>RestApiArrayResultRetentionCampaign</returns>
        RestApiArrayResultRetentionCampaign GetRetentionCampaignsForStore (string appId, int? storeId);

        /// <summary>
        /// Gets retention campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>ApiResponse of RestApiArrayResultRetentionCampaign</returns>
        ApiResponse<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForStoreWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// Gets list of stores for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>RestApiArrayResultStoreListItem</returns>
        RestApiArrayResultStoreListItem GetStoreList (string appId, bool? onlyPublished = null);

        /// <summary>
        /// Gets list of stores for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultStoreListItem</returns>
        ApiResponse<RestApiArrayResultStoreListItem> GetStoreListWithHttpInfo (string appId, bool? onlyPublished = null);
        /// <summary>
        /// Deletes a campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns></returns>
        void RemoveCampaign (string appId, int? campaignId);

        /// <summary>
        /// Deletes a campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCampaignWithHttpInfo (string appId, int? campaignId);
        /// <summary>
        /// Updates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>RestApiResultLoyaltyCampaign</returns>
        RestApiResultLoyaltyCampaign UpdateLoyaltyCampaign (string appId, int? campaignId, LoyaltyCampaignBase campaign);

        /// <summary>
        /// Updates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>ApiResponse of RestApiResultLoyaltyCampaign</returns>
        ApiResponse<RestApiResultLoyaltyCampaign> UpdateLoyaltyCampaignWithHttpInfo (string appId, int? campaignId, LoyaltyCampaignBase campaign);
        /// <summary>
        /// Updates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>RestApiResultRetentionCampaign</returns>
        RestApiResultRetentionCampaign UpdateRetentionCampaign (string appId, int? campaignId, RetentionCampaignBase campaign);

        /// <summary>
        /// Updates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>ApiResponse of RestApiResultRetentionCampaign</returns>
        ApiResponse<RestApiResultRetentionCampaign> UpdateRetentionCampaignWithHttpInfo (string appId, int? campaignId, RetentionCampaignBase campaign);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of RestApiResultLoyaltyCampaign</returns>
        System.Threading.Tasks.Task<RestApiResultLoyaltyCampaign> CreateLoyaltyCampaignAsync (string appId, LoyaltyCampaignBase campaign);

        /// <summary>
        /// Creates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultLoyaltyCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultLoyaltyCampaign>> CreateLoyaltyCampaignAsyncWithHttpInfo (string appId, LoyaltyCampaignBase campaign);
        /// <summary>
        /// Creates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of RestApiResultRetentionCampaign</returns>
        System.Threading.Tasks.Task<RestApiResultRetentionCampaign> CreateRetentionCampaignAsync (string appId, RetentionCampaignBase campaign);

        /// <summary>
        /// Creates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultRetentionCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRetentionCampaign>> CreateRetentionCampaignAsyncWithHttpInfo (string appId, RetentionCampaignBase campaign);
        /// <summary>
        /// Gets loyalty campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of RestApiArrayResultLoyaltyCampaign</returns>
        System.Threading.Tasks.Task<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForAppAsync (string appId);

        /// <summary>
        /// Gets loyalty campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultLoyaltyCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultLoyaltyCampaign>> GetLoyaltyCampaignsForAppAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Gets loyalty campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of RestApiArrayResultLoyaltyCampaign</returns>
        System.Threading.Tasks.Task<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForStoreAsync (string appId, int? storeId);

        /// <summary>
        /// Gets loyalty campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultLoyaltyCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultLoyaltyCampaign>> GetLoyaltyCampaignsForStoreAsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// Gets retention campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of RestApiArrayResultRetentionCampaign</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForAppAsync (string appId);

        /// <summary>
        /// Gets retention campaigns for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRetentionCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRetentionCampaign>> GetRetentionCampaignsForAppAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Gets retention campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of RestApiArrayResultRetentionCampaign</returns>
        System.Threading.Tasks.Task<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForStoreAsync (string appId, int? storeId);

        /// <summary>
        /// Gets retention campaigns for store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRetentionCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRetentionCampaign>> GetRetentionCampaignsForStoreAsyncWithHttpInfo (string appId, int? storeId);
        /// <summary>
        /// Gets list of stores for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>Task of RestApiArrayResultStoreListItem</returns>
        System.Threading.Tasks.Task<RestApiArrayResultStoreListItem> GetStoreListAsync (string appId, bool? onlyPublished = null);

        /// <summary>
        /// Gets list of stores for app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreListItem>> GetStoreListAsyncWithHttpInfo (string appId, bool? onlyPublished = null);
        /// <summary>
        /// Deletes a campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCampaignAsync (string appId, int? campaignId);

        /// <summary>
        /// Deletes a campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCampaignAsyncWithHttpInfo (string appId, int? campaignId);
        /// <summary>
        /// Updates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of RestApiResultLoyaltyCampaign</returns>
        System.Threading.Tasks.Task<RestApiResultLoyaltyCampaign> UpdateLoyaltyCampaignAsync (string appId, int? campaignId, LoyaltyCampaignBase campaign);

        /// <summary>
        /// Updates loyalty campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultLoyaltyCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultLoyaltyCampaign>> UpdateLoyaltyCampaignAsyncWithHttpInfo (string appId, int? campaignId, LoyaltyCampaignBase campaign);
        /// <summary>
        /// Updates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of RestApiResultRetentionCampaign</returns>
        System.Threading.Tasks.Task<RestApiResultRetentionCampaign> UpdateRetentionCampaignAsync (string appId, int? campaignId, RetentionCampaignBase campaign);

        /// <summary>
        /// Updates retention campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultRetentionCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRetentionCampaign>> UpdateRetentionCampaignAsyncWithHttpInfo (string appId, int? campaignId, RetentionCampaignBase campaign);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>RestApiResultLoyaltyCampaign</returns>
        public RestApiResultLoyaltyCampaign CreateLoyaltyCampaign (string appId, LoyaltyCampaignBase campaign)
        {
             ApiResponse<RestApiResultLoyaltyCampaign> localVarResponse = CreateLoyaltyCampaignWithHttpInfo(appId, campaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>ApiResponse of RestApiResultLoyaltyCampaign</returns>
        public ApiResponse< RestApiResultLoyaltyCampaign > CreateLoyaltyCampaignWithHttpInfo (string appId, LoyaltyCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->CreateLoyaltyCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CreateLoyaltyCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Creates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of RestApiResultLoyaltyCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiResultLoyaltyCampaign> CreateLoyaltyCampaignAsync (string appId, LoyaltyCampaignBase campaign)
        {
             ApiResponse<RestApiResultLoyaltyCampaign> localVarResponse = await CreateLoyaltyCampaignAsyncWithHttpInfo(appId, campaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultLoyaltyCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultLoyaltyCampaign>> CreateLoyaltyCampaignAsyncWithHttpInfo (string appId, LoyaltyCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->CreateLoyaltyCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CreateLoyaltyCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Creates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>RestApiResultRetentionCampaign</returns>
        public RestApiResultRetentionCampaign CreateRetentionCampaign (string appId, RetentionCampaignBase campaign)
        {
             ApiResponse<RestApiResultRetentionCampaign> localVarResponse = CreateRetentionCampaignWithHttpInfo(appId, campaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>ApiResponse of RestApiResultRetentionCampaign</returns>
        public ApiResponse< RestApiResultRetentionCampaign > CreateRetentionCampaignWithHttpInfo (string appId, RetentionCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->CreateRetentionCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CreateRetentionCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetentionCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRetentionCampaign)));
        }

        /// <summary>
        /// Creates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of RestApiResultRetentionCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiResultRetentionCampaign> CreateRetentionCampaignAsync (string appId, RetentionCampaignBase campaign)
        {
             ApiResponse<RestApiResultRetentionCampaign> localVarResponse = await CreateRetentionCampaignAsyncWithHttpInfo(appId, campaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultRetentionCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRetentionCampaign>> CreateRetentionCampaignAsyncWithHttpInfo (string appId, RetentionCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->CreateRetentionCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CreateRetentionCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetentionCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRetentionCampaign)));
        }

        /// <summary>
        /// Gets loyalty campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>RestApiArrayResultLoyaltyCampaign</returns>
        public RestApiArrayResultLoyaltyCampaign GetLoyaltyCampaignsForApp (string appId)
        {
             ApiResponse<RestApiArrayResultLoyaltyCampaign> localVarResponse = GetLoyaltyCampaignsForAppWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets loyalty campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>ApiResponse of RestApiArrayResultLoyaltyCampaign</returns>
        public ApiResponse< RestApiArrayResultLoyaltyCampaign > GetLoyaltyCampaignsForAppWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetLoyaltyCampaignsForApp");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyCampaignsForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Gets loyalty campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of RestApiArrayResultLoyaltyCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForAppAsync (string appId)
        {
             ApiResponse<RestApiArrayResultLoyaltyCampaign> localVarResponse = await GetLoyaltyCampaignsForAppAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets loyalty campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultLoyaltyCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultLoyaltyCampaign>> GetLoyaltyCampaignsForAppAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetLoyaltyCampaignsForApp");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyCampaignsForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Gets loyalty campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>RestApiArrayResultLoyaltyCampaign</returns>
        public RestApiArrayResultLoyaltyCampaign GetLoyaltyCampaignsForStore (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultLoyaltyCampaign> localVarResponse = GetLoyaltyCampaignsForStoreWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets loyalty campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>ApiResponse of RestApiArrayResultLoyaltyCampaign</returns>
        public ApiResponse< RestApiArrayResultLoyaltyCampaign > GetLoyaltyCampaignsForStoreWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetLoyaltyCampaignsForStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CampaignsApi->GetLoyaltyCampaignsForStore");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyCampaignsForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Gets loyalty campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of RestApiArrayResultLoyaltyCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultLoyaltyCampaign> GetLoyaltyCampaignsForStoreAsync (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultLoyaltyCampaign> localVarResponse = await GetLoyaltyCampaignsForStoreAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets loyalty campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultLoyaltyCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultLoyaltyCampaign>> GetLoyaltyCampaignsForStoreAsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetLoyaltyCampaignsForStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CampaignsApi->GetLoyaltyCampaignsForStore");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyCampaignsForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Gets retention campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>RestApiArrayResultRetentionCampaign</returns>
        public RestApiArrayResultRetentionCampaign GetRetentionCampaignsForApp (string appId)
        {
             ApiResponse<RestApiArrayResultRetentionCampaign> localVarResponse = GetRetentionCampaignsForAppWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets retention campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>ApiResponse of RestApiArrayResultRetentionCampaign</returns>
        public ApiResponse< RestApiArrayResultRetentionCampaign > GetRetentionCampaignsForAppWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetRetentionCampaignsForApp");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRetentionCampaignsForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRetentionCampaign)));
        }

        /// <summary>
        /// Gets retention campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of RestApiArrayResultRetentionCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForAppAsync (string appId)
        {
             ApiResponse<RestApiArrayResultRetentionCampaign> localVarResponse = await GetRetentionCampaignsForAppAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets retention campaigns for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRetentionCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRetentionCampaign>> GetRetentionCampaignsForAppAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetRetentionCampaignsForApp");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRetentionCampaignsForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRetentionCampaign)));
        }

        /// <summary>
        /// Gets retention campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>RestApiArrayResultRetentionCampaign</returns>
        public RestApiArrayResultRetentionCampaign GetRetentionCampaignsForStore (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRetentionCampaign> localVarResponse = GetRetentionCampaignsForStoreWithHttpInfo(appId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets retention campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>ApiResponse of RestApiArrayResultRetentionCampaign</returns>
        public ApiResponse< RestApiArrayResultRetentionCampaign > GetRetentionCampaignsForStoreWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetRetentionCampaignsForStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CampaignsApi->GetRetentionCampaignsForStore");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRetentionCampaignsForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRetentionCampaign)));
        }

        /// <summary>
        /// Gets retention campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of RestApiArrayResultRetentionCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultRetentionCampaign> GetRetentionCampaignsForStoreAsync (string appId, int? storeId)
        {
             ApiResponse<RestApiArrayResultRetentionCampaign> localVarResponse = await GetRetentionCampaignsForStoreAsyncWithHttpInfo(appId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets retention campaigns for store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="storeId">Store Id</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultRetentionCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultRetentionCampaign>> GetRetentionCampaignsForStoreAsyncWithHttpInfo (string appId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetRetentionCampaignsForStore");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CampaignsApi->GetRetentionCampaignsForStore");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRetentionCampaignsForStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultRetentionCampaign)));
        }

        /// <summary>
        /// Gets list of stores for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>RestApiArrayResultStoreListItem</returns>
        public RestApiArrayResultStoreListItem GetStoreList (string appId, bool? onlyPublished = null)
        {
             ApiResponse<RestApiArrayResultStoreListItem> localVarResponse = GetStoreListWithHttpInfo(appId, onlyPublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of stores for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultStoreListItem</returns>
        public ApiResponse< RestApiArrayResultStoreListItem > GetStoreListWithHttpInfo (string appId, bool? onlyPublished = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetStoreList");

            var localVarPath = "/api/v1.0/{appId}/campaigns/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (onlyPublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyPublished", onlyPublished)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultStoreListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreListItem)));
        }

        /// <summary>
        /// Gets list of stores for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>Task of RestApiArrayResultStoreListItem</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultStoreListItem> GetStoreListAsync (string appId, bool? onlyPublished = null)
        {
             ApiResponse<RestApiArrayResultStoreListItem> localVarResponse = await GetStoreListAsyncWithHttpInfo(appId, onlyPublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of stores for app 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="onlyPublished"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultStoreListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultStoreListItem>> GetStoreListAsyncWithHttpInfo (string appId, bool? onlyPublished = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->GetStoreList");

            var localVarPath = "/api/v1.0/{appId}/campaigns/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (onlyPublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyPublished", onlyPublished)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultStoreListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultStoreListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultStoreListItem)));
        }

        /// <summary>
        /// Deletes a campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns></returns>
        public void RemoveCampaign (string appId, int? campaignId)
        {
             RemoveCampaignWithHttpInfo(appId, campaignId);
        }

        /// <summary>
        /// Deletes a campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveCampaignWithHttpInfo (string appId, int? campaignId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->RemoveCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->RemoveCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCampaignAsync (string appId, int? campaignId)
        {
             await RemoveCampaignAsyncWithHttpInfo(appId, campaignId);

        }

        /// <summary>
        /// Deletes a campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Campaign Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCampaignAsyncWithHttpInfo (string appId, int? campaignId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->RemoveCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->RemoveCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>RestApiResultLoyaltyCampaign</returns>
        public RestApiResultLoyaltyCampaign UpdateLoyaltyCampaign (string appId, int? campaignId, LoyaltyCampaignBase campaign)
        {
             ApiResponse<RestApiResultLoyaltyCampaign> localVarResponse = UpdateLoyaltyCampaignWithHttpInfo(appId, campaignId, campaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>ApiResponse of RestApiResultLoyaltyCampaign</returns>
        public ApiResponse< RestApiResultLoyaltyCampaign > UpdateLoyaltyCampaignWithHttpInfo (string appId, int? campaignId, LoyaltyCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->UpdateLoyaltyCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateLoyaltyCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->UpdateLoyaltyCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Updates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of RestApiResultLoyaltyCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiResultLoyaltyCampaign> UpdateLoyaltyCampaignAsync (string appId, int? campaignId, LoyaltyCampaignBase campaign)
        {
             ApiResponse<RestApiResultLoyaltyCampaign> localVarResponse = await UpdateLoyaltyCampaignAsyncWithHttpInfo(appId, campaignId, campaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates loyalty campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Loyalty campaign Id</param>
        /// <param name="campaign">Loyalty campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultLoyaltyCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultLoyaltyCampaign>> UpdateLoyaltyCampaignAsyncWithHttpInfo (string appId, int? campaignId, LoyaltyCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->UpdateLoyaltyCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateLoyaltyCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->UpdateLoyaltyCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultLoyaltyCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultLoyaltyCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultLoyaltyCampaign)));
        }

        /// <summary>
        /// Updates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>RestApiResultRetentionCampaign</returns>
        public RestApiResultRetentionCampaign UpdateRetentionCampaign (string appId, int? campaignId, RetentionCampaignBase campaign)
        {
             ApiResponse<RestApiResultRetentionCampaign> localVarResponse = UpdateRetentionCampaignWithHttpInfo(appId, campaignId, campaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>ApiResponse of RestApiResultRetentionCampaign</returns>
        public ApiResponse< RestApiResultRetentionCampaign > UpdateRetentionCampaignWithHttpInfo (string appId, int? campaignId, RetentionCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->UpdateRetentionCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateRetentionCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->UpdateRetentionCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRetentionCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRetentionCampaign)));
        }

        /// <summary>
        /// Updates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of RestApiResultRetentionCampaign</returns>
        public async System.Threading.Tasks.Task<RestApiResultRetentionCampaign> UpdateRetentionCampaignAsync (string appId, int? campaignId, RetentionCampaignBase campaign)
        {
             ApiResponse<RestApiResultRetentionCampaign> localVarResponse = await UpdateRetentionCampaignAsyncWithHttpInfo(appId, campaignId, campaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates retention campaign 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="campaignId">Retention campaign Id</param>
        /// <param name="campaign">Retention campaign details</param>
        /// <returns>Task of ApiResponse (RestApiResultRetentionCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRetentionCampaign>> UpdateRetentionCampaignAsyncWithHttpInfo (string appId, int? campaignId, RetentionCampaignBase campaign)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CampaignsApi->UpdateRetentionCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateRetentionCampaign");
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->UpdateRetentionCampaign");

            var localVarPath = "/api/v1.0/{appId}/campaigns/retention/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaign != null && campaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaign; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRetentionCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRetentionCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRetentionCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRetentionCampaign)));
        }

    }
}

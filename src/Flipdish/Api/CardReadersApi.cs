/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardReadersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Authorization Key for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalPrivateKey</returns>
        RestApiResultStripeTerminalPrivateKey AuthorizeStripeTerminal (string appId);

        /// <summary>
        /// Get Authorization Key for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalPrivateKey</returns>
        ApiResponse<RestApiResultStripeTerminalPrivateKey> AuthorizeStripeTerminalWithHttpInfo (string appId);
        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        void CancelCurrentlyInitiatedBluetoothDeviceUpdate (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelCurrentlyInitiatedBluetoothDeviceUpdateWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Get Location ID for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalLocation</returns>
        RestApiResultStripeTerminalLocation GenerateStripeTerminalLocation (string appId);

        /// <summary>
        /// Get Location ID for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalLocation</returns>
        ApiResponse<RestApiResultStripeTerminalLocation> GenerateStripeTerminalLocationWithHttpInfo (string appId);
        /// <summary>
        /// Get the status of the bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultBluetoothTerminalStatus</returns>
        RestApiResultBluetoothTerminalStatus GetBluetoothTerminalStatus (string appId, string deviceId);

        /// <summary>
        /// Get the status of the bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultBluetoothTerminalStatus</returns>
        ApiResponse<RestApiResultBluetoothTerminalStatus> GetBluetoothTerminalStatusWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// Get Connection Token For a Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalConnectionToken</returns>
        RestApiResultStripeTerminalConnectionToken GetStripeConnectionToken (string appId);

        /// <summary>
        /// Get Connection Token For a Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalConnectionToken</returns>
        ApiResponse<RestApiResultStripeTerminalConnectionToken> GetStripeConnectionTokenWithHttpInfo (string appId);
        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        void InitiateBluetoothTerminalDeviceUpdateCheck (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InitiateBluetoothTerminalDeviceUpdateCheckWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Initiate stripe terminal pairing mode
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        void InitiateKioskBluetoothPairingMode (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Initiate stripe terminal pairing mode
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InitiateKioskBluetoothPairingModeWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        void InitiateKioskBluetoothUpdateInstall (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InitiateKioskBluetoothUpdateInstallWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultCardReader</returns>
        RestApiResultCardReader RegisterStripeTerminal (CardReaderRegistrationRequest request, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultCardReader</returns>
        ApiResponse<RestApiResultCardReader> RegisterStripeTerminalWithHttpInfo (CardReaderRegistrationRequest request, string appId);
        /// <summary>
        /// Unpair the currently paired stripe terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        void UnpairCurrentlyPairedBluetoothDevice (string appId, string deviceId);

        /// <summary>
        /// Unpair the currently paired stripe terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnpairCurrentlyPairedBluetoothDeviceWithHttpInfo (string appId, string deviceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Authorization Key for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalPrivateKey</returns>
        System.Threading.Tasks.Task<RestApiResultStripeTerminalPrivateKey> AuthorizeStripeTerminalAsync (string appId);

        /// <summary>
        /// Get Authorization Key for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalPrivateKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalPrivateKey>> AuthorizeStripeTerminalAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelCurrentlyInitiatedBluetoothDeviceUpdateAsync (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelCurrentlyInitiatedBluetoothDeviceUpdateAsyncWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Get Location ID for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalLocation</returns>
        System.Threading.Tasks.Task<RestApiResultStripeTerminalLocation> GenerateStripeTerminalLocationAsync (string appId);

        /// <summary>
        /// Get Location ID for Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalLocation>> GenerateStripeTerminalLocationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get the status of the bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultBluetoothTerminalStatus</returns>
        System.Threading.Tasks.Task<RestApiResultBluetoothTerminalStatus> GetBluetoothTerminalStatusAsync (string appId, string deviceId);

        /// <summary>
        /// Get the status of the bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultBluetoothTerminalStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultBluetoothTerminalStatus>> GetBluetoothTerminalStatusAsyncWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// Get Connection Token For a Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalConnectionToken</returns>
        System.Threading.Tasks.Task<RestApiResultStripeTerminalConnectionToken> GetStripeConnectionTokenAsync (string appId);

        /// <summary>
        /// Get Connection Token For a Stripe Terminal
        /// </summary>
        /// <remarks>
        /// Can only be called by Kiosk
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalConnectionToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalConnectionToken>> GetStripeConnectionTokenAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InitiateBluetoothTerminalDeviceUpdateCheckAsync (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InitiateBluetoothTerminalDeviceUpdateCheckAsyncWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Initiate stripe terminal pairing mode
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InitiateKioskBluetoothPairingModeAsync (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Initiate stripe terminal pairing mode
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InitiateKioskBluetoothPairingModeAsyncWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InitiateKioskBluetoothUpdateInstallAsync (string appId, string deviceId, string terminalType);

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InitiateKioskBluetoothUpdateInstallAsyncWithHttpInfo (string appId, string deviceId, string terminalType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultCardReader</returns>
        System.Threading.Tasks.Task<RestApiResultCardReader> RegisterStripeTerminalAsync (CardReaderRegistrationRequest request, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultCardReader)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultCardReader>> RegisterStripeTerminalAsyncWithHttpInfo (CardReaderRegistrationRequest request, string appId);
        /// <summary>
        /// Unpair the currently paired stripe terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnpairCurrentlyPairedBluetoothDeviceAsync (string appId, string deviceId);

        /// <summary>
        /// Unpair the currently paired stripe terminal
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnpairCurrentlyPairedBluetoothDeviceAsyncWithHttpInfo (string appId, string deviceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardReadersApi : ICardReadersApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardReadersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardReadersApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardReadersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardReadersApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Authorization Key for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalPrivateKey</returns>
        public RestApiResultStripeTerminalPrivateKey AuthorizeStripeTerminal (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalPrivateKey> localVarResponse = AuthorizeStripeTerminalWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Key for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalPrivateKey</returns>
        public ApiResponse< RestApiResultStripeTerminalPrivateKey > AuthorizeStripeTerminalWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->AuthorizeStripeTerminal");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthorizeStripeTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalPrivateKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalPrivateKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalPrivateKey)));
        }

        /// <summary>
        /// Get Authorization Key for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalPrivateKey</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeTerminalPrivateKey> AuthorizeStripeTerminalAsync (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalPrivateKey> localVarResponse = await AuthorizeStripeTerminalAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Authorization Key for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalPrivateKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalPrivateKey>> AuthorizeStripeTerminalAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->AuthorizeStripeTerminal");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthorizeStripeTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalPrivateKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalPrivateKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalPrivateKey)));
        }

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        public void CancelCurrentlyInitiatedBluetoothDeviceUpdate (string appId, string deviceId, string terminalType)
        {
             CancelCurrentlyInitiatedBluetoothDeviceUpdateWithHttpInfo(appId, deviceId, terminalType);
        }

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelCurrentlyInitiatedBluetoothDeviceUpdateWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/cancelUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCurrentlyInitiatedBluetoothDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelCurrentlyInitiatedBluetoothDeviceUpdateAsync (string appId, string deviceId, string terminalType)
        {
             await CancelCurrentlyInitiatedBluetoothDeviceUpdateAsyncWithHttpInfo(appId, deviceId, terminalType);

        }

        /// <summary>
        /// Cancel currently initiated install update for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelCurrentlyInitiatedBluetoothDeviceUpdateAsyncWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->CancelCurrentlyInitiatedBluetoothDeviceUpdate");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/cancelUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCurrentlyInitiatedBluetoothDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Location ID for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalLocation</returns>
        public RestApiResultStripeTerminalLocation GenerateStripeTerminalLocation (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalLocation> localVarResponse = GenerateStripeTerminalLocationWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location ID for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalLocation</returns>
        public ApiResponse< RestApiResultStripeTerminalLocation > GenerateStripeTerminalLocationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GenerateStripeTerminalLocation");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateStripeTerminalLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalLocation)));
        }

        /// <summary>
        /// Get Location ID for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalLocation</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeTerminalLocation> GenerateStripeTerminalLocationAsync (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalLocation> localVarResponse = await GenerateStripeTerminalLocationAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Location ID for Stripe Terminal Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalLocation>> GenerateStripeTerminalLocationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GenerateStripeTerminalLocation");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateStripeTerminalLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalLocation)));
        }

        /// <summary>
        /// Get the status of the bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultBluetoothTerminalStatus</returns>
        public RestApiResultBluetoothTerminalStatus GetBluetoothTerminalStatus (string appId, string deviceId)
        {
             ApiResponse<RestApiResultBluetoothTerminalStatus> localVarResponse = GetBluetoothTerminalStatusWithHttpInfo(appId, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultBluetoothTerminalStatus</returns>
        public ApiResponse< RestApiResultBluetoothTerminalStatus > GetBluetoothTerminalStatusWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GetBluetoothTerminalStatus");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->GetBluetoothTerminalStatus");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBluetoothTerminalStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBluetoothTerminalStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBluetoothTerminalStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBluetoothTerminalStatus)));
        }

        /// <summary>
        /// Get the status of the bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultBluetoothTerminalStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultBluetoothTerminalStatus> GetBluetoothTerminalStatusAsync (string appId, string deviceId)
        {
             ApiResponse<RestApiResultBluetoothTerminalStatus> localVarResponse = await GetBluetoothTerminalStatusAsyncWithHttpInfo(appId, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of the bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultBluetoothTerminalStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultBluetoothTerminalStatus>> GetBluetoothTerminalStatusAsyncWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GetBluetoothTerminalStatus");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->GetBluetoothTerminalStatus");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBluetoothTerminalStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultBluetoothTerminalStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultBluetoothTerminalStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultBluetoothTerminalStatus)));
        }

        /// <summary>
        /// Get Connection Token For a Stripe Terminal Can only be called by Kiosk
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultStripeTerminalConnectionToken</returns>
        public RestApiResultStripeTerminalConnectionToken GetStripeConnectionToken (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalConnectionToken> localVarResponse = GetStripeConnectionTokenWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connection Token For a Stripe Terminal Can only be called by Kiosk
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultStripeTerminalConnectionToken</returns>
        public ApiResponse< RestApiResultStripeTerminalConnectionToken > GetStripeConnectionTokenWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GetStripeConnectionToken");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/connectiontoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStripeConnectionToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalConnectionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalConnectionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalConnectionToken)));
        }

        /// <summary>
        /// Get Connection Token For a Stripe Terminal Can only be called by Kiosk
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultStripeTerminalConnectionToken</returns>
        public async System.Threading.Tasks.Task<RestApiResultStripeTerminalConnectionToken> GetStripeConnectionTokenAsync (string appId)
        {
             ApiResponse<RestApiResultStripeTerminalConnectionToken> localVarResponse = await GetStripeConnectionTokenAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Connection Token For a Stripe Terminal Can only be called by Kiosk
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultStripeTerminalConnectionToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStripeTerminalConnectionToken>> GetStripeConnectionTokenAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->GetStripeConnectionToken");

            var localVarPath = "/api/v1.0/{appId}/stripeterminal/connectiontoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStripeConnectionToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStripeTerminalConnectionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStripeTerminalConnectionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStripeTerminalConnectionToken)));
        }

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        public void InitiateBluetoothTerminalDeviceUpdateCheck (string appId, string deviceId, string terminalType)
        {
             InitiateBluetoothTerminalDeviceUpdateCheckWithHttpInfo(appId, deviceId, terminalType);
        }

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InitiateBluetoothTerminalDeviceUpdateCheckWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/checkForUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateBluetoothTerminalDeviceUpdateCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InitiateBluetoothTerminalDeviceUpdateCheckAsync (string appId, string deviceId, string terminalType)
        {
             await InitiateBluetoothTerminalDeviceUpdateCheckAsyncWithHttpInfo(appId, deviceId, terminalType);

        }

        /// <summary>
        /// Trigger check for Bluetooth device update on Kiosk [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InitiateBluetoothTerminalDeviceUpdateCheckAsyncWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateBluetoothTerminalDeviceUpdateCheck");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/checkForUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateBluetoothTerminalDeviceUpdateCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate stripe terminal pairing mode [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        public void InitiateKioskBluetoothPairingMode (string appId, string deviceId, string terminalType)
        {
             InitiateKioskBluetoothPairingModeWithHttpInfo(appId, deviceId, terminalType);
        }

        /// <summary>
        /// Initiate stripe terminal pairing mode [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InitiateKioskBluetoothPairingModeWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateKioskBluetoothPairingMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate stripe terminal pairing mode [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InitiateKioskBluetoothPairingModeAsync (string appId, string deviceId, string terminalType)
        {
             await InitiateKioskBluetoothPairingModeAsyncWithHttpInfo(appId, deviceId, terminalType);

        }

        /// <summary>
        /// Initiate stripe terminal pairing mode [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InitiateKioskBluetoothPairingModeAsyncWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateKioskBluetoothPairingMode");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateKioskBluetoothPairingMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns></returns>
        public void InitiateKioskBluetoothUpdateInstall (string appId, string deviceId, string terminalType)
        {
             InitiateKioskBluetoothUpdateInstallWithHttpInfo(appId, deviceId, terminalType);
        }

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InitiateKioskBluetoothUpdateInstallWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/installUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateKioskBluetoothUpdateInstall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InitiateKioskBluetoothUpdateInstallAsync (string appId, string deviceId, string terminalType)
        {
             await InitiateKioskBluetoothUpdateInstallAsyncWithHttpInfo(appId, deviceId, terminalType);

        }

        /// <summary>
        /// Initiate Kiosk Update Install for bluetooth terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="terminalType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InitiateKioskBluetoothUpdateInstallAsyncWithHttpInfo (string appId, string deviceId, string terminalType)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");
            // verify the required parameter 'terminalType' is set
            if (terminalType == null)
                throw new ApiException(400, "Missing required parameter 'terminalType' when calling CardReadersApi->InitiateKioskBluetoothUpdateInstall");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/installUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (terminalType != null) localVarPathParams.Add("terminalType", this.Configuration.ApiClient.ParameterToString(terminalType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateKioskBluetoothUpdateInstall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultCardReader</returns>
        public RestApiResultCardReader RegisterStripeTerminal (CardReaderRegistrationRequest request, string appId)
        {
             ApiResponse<RestApiResultCardReader> localVarResponse = RegisterStripeTerminalWithHttpInfo(request, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultCardReader</returns>
        public ApiResponse< RestApiResultCardReader > RegisterStripeTerminalWithHttpInfo (CardReaderRegistrationRequest request, string appId)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardReadersApi->RegisterStripeTerminal");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->RegisterStripeTerminal");

            var localVarPath = "/api/v1.0/{appId}/payments/terminals/stripe/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterStripeTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCardReader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCardReader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCardReader)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultCardReader</returns>
        public async System.Threading.Tasks.Task<RestApiResultCardReader> RegisterStripeTerminalAsync (CardReaderRegistrationRequest request, string appId)
        {
             ApiResponse<RestApiResultCardReader> localVarResponse = await RegisterStripeTerminalAsyncWithHttpInfo(request, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultCardReader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultCardReader>> RegisterStripeTerminalAsyncWithHttpInfo (CardReaderRegistrationRequest request, string appId)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CardReadersApi->RegisterStripeTerminal");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->RegisterStripeTerminal");

            var localVarPath = "/api/v1.0/{appId}/payments/terminals/stripe/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterStripeTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultCardReader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultCardReader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultCardReader)));
        }

        /// <summary>
        /// Unpair the currently paired stripe terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        public void UnpairCurrentlyPairedBluetoothDevice (string appId, string deviceId)
        {
             UnpairCurrentlyPairedBluetoothDeviceWithHttpInfo(appId, deviceId);
        }

        /// <summary>
        /// Unpair the currently paired stripe terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnpairCurrentlyPairedBluetoothDeviceWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->UnpairCurrentlyPairedBluetoothDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->UnpairCurrentlyPairedBluetoothDevice");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/unpair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpairCurrentlyPairedBluetoothDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unpair the currently paired stripe terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnpairCurrentlyPairedBluetoothDeviceAsync (string appId, string deviceId)
        {
             await UnpairCurrentlyPairedBluetoothDeviceAsyncWithHttpInfo(appId, deviceId);

        }

        /// <summary>
        /// Unpair the currently paired stripe terminal [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnpairCurrentlyPairedBluetoothDeviceAsyncWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CardReadersApi->UnpairCurrentlyPairedBluetoothDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling CardReadersApi->UnpairCurrentlyPairedBluetoothDevice");

            var localVarPath = "/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/unpair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpairCurrentlyPairedBluetoothDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

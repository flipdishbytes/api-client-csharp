/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuOptionSetItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Object</returns>
        Object AddMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem);

        /// <summary>
        /// Create menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem);
        /// <summary>
        /// Delete menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns></returns>
        void DeleteOptionSetItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Delete menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOptionSetItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Get menu item option set item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>RestApiResultMenuItemOptionSetItem</returns>
        RestApiResultMenuItemOptionSetItem GetMenuItemOptionSetItemById (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Get menu item option set item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuItemOptionSetItem</returns>
        ApiResponse<RestApiResultMenuItemOptionSetItem> GetMenuItemOptionSetItemByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Get menu item option set items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>RestApiArrayResultMenuItemOptionSetItem</returns>
        RestApiArrayResultMenuItemOptionSetItem GetMenuItemOptionSetItems (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Get menu item option set items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuItemOptionSetItem</returns>
        ApiResponse<RestApiArrayResultMenuItemOptionSetItem> GetMenuItemOptionSetItemsWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Delete menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns></returns>
        void RemoveMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Delete menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Update menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        void UpdateMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null);

        /// <summary>
        /// Update menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null);
        /// <summary>
        /// Upload menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult UploadOptionSetItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image);

        /// <summary>
        /// Upload menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> UploadOptionSetItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem);

        /// <summary>
        /// Create menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem);
        /// <summary>
        /// Delete menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOptionSetItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Delete menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionSetItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Get menu item option set item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of RestApiResultMenuItemOptionSetItem</returns>
        System.Threading.Tasks.Task<RestApiResultMenuItemOptionSetItem> GetMenuItemOptionSetItemByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Get menu item option set item by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuItemOptionSetItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuItemOptionSetItem>> GetMenuItemOptionSetItemByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Get menu item option set items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of RestApiArrayResultMenuItemOptionSetItem</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuItemOptionSetItem> GetMenuItemOptionSetItemsAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);

        /// <summary>
        /// Get menu item option set items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuItemOptionSetItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuItemOptionSetItem>> GetMenuItemOptionSetItemsAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId);
        /// <summary>
        /// Delete menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);

        /// <summary>
        /// Delete menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId);
        /// <summary>
        /// Update menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null);

        /// <summary>
        /// Update menu item option set item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null);
        /// <summary>
        /// Upload menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> UploadOptionSetItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image);

        /// <summary>
        /// Upload menu item option set item image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadOptionSetItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuOptionSetItemsApi : IMenuOptionSetItemsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuOptionSetItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuOptionSetItemsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuOptionSetItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuOptionSetItemsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Object</returns>
        public Object AddMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem)
        {
             ApiResponse<Object> localVarResponse = AddMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItem' is set
            if (menuItemOptionSetItem == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItem' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItem != null && menuItemOptionSetItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSetItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSetItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem)
        {
             ApiResponse<Object> localVarResponse = await AddMenuItemOptionSetItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItem' is set
            if (menuItemOptionSetItem == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItem' when calling MenuOptionSetItemsApi->AddMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItem != null && menuItemOptionSetItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSetItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSetItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns></returns>
        public void DeleteOptionSetItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             DeleteOptionSetItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
        }

        /// <summary>
        /// Delete menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOptionSetItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOptionSetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOptionSetItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             await DeleteOptionSetItemImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);

        }

        /// <summary>
        /// Delete menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionSetItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->DeleteOptionSetItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOptionSetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu item option set item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>RestApiResultMenuItemOptionSetItem</returns>
        public RestApiResultMenuItemOptionSetItem GetMenuItemOptionSetItemById (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             ApiResponse<RestApiResultMenuItemOptionSetItem> localVarResponse = GetMenuItemOptionSetItemByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item option set item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of RestApiResultMenuItemOptionSetItem</returns>
        public ApiResponse< RestApiResultMenuItemOptionSetItem > GetMenuItemOptionSetItemByIdWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuItemOptionSetItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuItemOptionSetItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuItemOptionSetItem)));
        }

        /// <summary>
        /// Get menu item option set item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of RestApiResultMenuItemOptionSetItem</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenuItemOptionSetItem> GetMenuItemOptionSetItemByIdAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             ApiResponse<RestApiResultMenuItemOptionSetItem> localVarResponse = await GetMenuItemOptionSetItemByIdAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item option set item by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenuItemOptionSetItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenuItemOptionSetItem>> GetMenuItemOptionSetItemByIdAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItemById");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenuItemOptionSetItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenuItemOptionSetItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenuItemOptionSetItem)));
        }

        /// <summary>
        /// Get menu item option set items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>RestApiArrayResultMenuItemOptionSetItem</returns>
        public RestApiArrayResultMenuItemOptionSetItem GetMenuItemOptionSetItems (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             ApiResponse<RestApiArrayResultMenuItemOptionSetItem> localVarResponse = GetMenuItemOptionSetItemsWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item option set items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuItemOptionSetItem</returns>
        public ApiResponse< RestApiArrayResultMenuItemOptionSetItem > GetMenuItemOptionSetItemsWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuItemOptionSetItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuItemOptionSetItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuItemOptionSetItem)));
        }

        /// <summary>
        /// Get menu item option set items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of RestApiArrayResultMenuItemOptionSetItem</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuItemOptionSetItem> GetMenuItemOptionSetItemsAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
             ApiResponse<RestApiArrayResultMenuItemOptionSetItem> localVarResponse = await GetMenuItemOptionSetItemsAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item option set items 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuItemOptionSetItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuItemOptionSetItem>> GetMenuItemOptionSetItemsAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->GetMenuItemOptionSetItems");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuItemOptionSetItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuItemOptionSetItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuItemOptionSetItem)));
        }

        /// <summary>
        /// Delete menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns></returns>
        public void RemoveMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             RemoveMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
        }

        /// <summary>
        /// Delete menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
             await RemoveMenuItemOptionSetItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);

        }

        /// <summary>
        /// Delete menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->RemoveMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns></returns>
        public void UpdateMenuItemOptionSetItem (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null)
        {
             UpdateMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter);
        }

        /// <summary>
        /// Update menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuItemOptionSetItemWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItem' is set
            if (menuItemOptionSetItem == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItem' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuItemOptionSetItem != null && menuItemOptionSetItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSetItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSetItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuItemOptionSetItemAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null)
        {
             await UpdateMenuItemOptionSetItemAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter);

        }

        /// <summary>
        /// Update menu item option set item 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="menuItemOptionSetItem">Option set item (delta)</param>
        /// <param name="undoAfter">An optional time period, in hours, after which the hide-section operaton will be undone. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuItemOptionSetItemAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, double? undoAfter = null)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");
            // verify the required parameter 'menuItemOptionSetItem' is set
            if (menuItemOptionSetItem == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItem' when calling MenuOptionSetItemsApi->UpdateMenuItemOptionSetItem");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter
            if (undoAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "undoAfter", undoAfter)); // query parameter
            if (menuItemOptionSetItem != null && menuItemOptionSetItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menuItemOptionSetItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menuItemOptionSetItem; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenuItemOptionSetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult UploadOptionSetItemImage (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = UploadOptionSetItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > UploadOptionSetItemImageWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadOptionSetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Upload menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> UploadOptionSetItemImageAsync (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await UploadOptionSetItemImageAsyncWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload menu item option set item image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menuSectionId">Menu section identifier</param>
        /// <param name="menuSectionItemId">Menu section item identifier</param>
        /// <param name="optionSetId">Option set identifier</param>
        /// <param name="menuItemOptionSetItemId">Option set item identifier</param>
        /// <param name="image">Option set item image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadOptionSetItemImageAsyncWithHttpInfo (int? menuId, int? menuSectionId, int? menuSectionItemId, int? optionSetId, int? menuItemOptionSetItemId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuSectionId' is set
            if (menuSectionId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuSectionItemId' is set
            if (menuSectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuSectionItemId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'optionSetId' is set
            if (optionSetId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'menuItemOptionSetItemId' is set
            if (menuItemOptionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemOptionSetItemId' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenuOptionSetItemsApi->UploadOptionSetItemImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menuSectionId != null) localVarPathParams.Add("menuSectionId", this.Configuration.ApiClient.ParameterToString(menuSectionId)); // path parameter
            if (menuSectionItemId != null) localVarPathParams.Add("menuSectionItemId", this.Configuration.ApiClient.ParameterToString(menuSectionItemId)); // path parameter
            if (optionSetId != null) localVarPathParams.Add("optionSetId", this.Configuration.ApiClient.ParameterToString(optionSetId)); // path parameter
            if (menuItemOptionSetItemId != null) localVarPathParams.Add("menuItemOptionSetItemId", this.Configuration.ApiClient.ParameterToString(menuItemOptionSetItemId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadOptionSetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

    }
}

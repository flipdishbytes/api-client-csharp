/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHydraApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign an EMV terminal to a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns></returns>
        void AssignEmv (string appId, int? hydraConfigId, int? emvTerminalId);

        /// <summary>
        /// Assign an EMV terminal to a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignEmvWithHttpInfo (string appId, int? hydraConfigId, int? emvTerminalId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        RestApiResultHydraStatus AttachStoreToTerminal (string appId, string deviceId, int? storeId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        ApiResponse<RestApiResultHydraStatus> AttachStoreToTerminalWithHttpInfo (string appId, string deviceId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns></returns>
        void CancelEmvPayment (int? orderId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelEmvPaymentWithHttpInfo (int? orderId, string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        RestApiResultHydraStatus DetachStoreFromTerminal (string appId, string deviceId, int? storeId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        ApiResponse<RestApiResultHydraStatus> DetachStoreFromTerminalWithHttpInfo (string appId, string deviceId, int? storeId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultHydraDeviceDetails</returns>
        RestApiResultHydraDeviceDetails GetAttachedDevice (string appId, string deviceType, string deviceId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultHydraDeviceDetails</returns>
        ApiResponse<RestApiResultHydraDeviceDetails> GetAttachedDeviceWithHttpInfo (string appId, string deviceType, string deviceId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>RestApiPaginationResultHydraDeviceDetails</returns>
        RestApiPaginationResultHydraDeviceDetails GetAttachedDevices (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultHydraDeviceDetails</returns>
        ApiResponse<RestApiPaginationResultHydraDeviceDetails> GetAttachedDevicesWithHttpInfo (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultPaymentTerminalDetails</returns>
        RestApiResultPaymentTerminalDetails GetEMVTerminalDetails (string appId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultPaymentTerminalDetails</returns>
        ApiResponse<RestApiResultPaymentTerminalDetails> GetEMVTerminalDetailsWithHttpInfo (string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultPaymentTerminalTransactionDetails</returns>
        RestApiResultPaymentTerminalTransactionDetails GetEmvOrderState (int? orderId, string appId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultPaymentTerminalTransactionDetails</returns>
        ApiResponse<RestApiResultPaymentTerminalTransactionDetails> GetEmvOrderStateWithHttpInfo (int? orderId, string appId);
        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiArrayResultKioskCashPaymentSettings</returns>
        RestApiArrayResultKioskCashPaymentSettings GetKioskCashPaymentSettings (string appId, string deviceId);

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiArrayResultKioskCashPaymentSettings</returns>
        ApiResponse<RestApiArrayResultKioskCashPaymentSettings> GetKioskCashPaymentSettingsWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultHydraStatus</returns>
        RestApiResultHydraStatus GetRegistration ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        ApiResponse<RestApiResultHydraStatus> GetRegistrationWithHttpInfo ();
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultHydraConfig</returns>
        RestApiResultHydraConfig GetSettings ();

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultHydraConfig</returns>
        ApiResponse<RestApiResultHydraConfig> GetSettingsWithHttpInfo ();
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Object</returns>
        Object HydraCreateEmv (string appId, EmvTerminal emv);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HydraCreateEmvWithHttpInfo (string appId, EmvTerminal emv);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Object</returns>
        Object HydraDeleteEmv (string appId, int? id);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HydraDeleteEmvWithHttpInfo (string appId, int? id);
        /// <summary>
        /// List EMV terminals belonging to the given AppNameId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultEmvTerminalWithAssignments</returns>
        RestApiArrayResultEmvTerminalWithAssignments HydraGetEmvsForAppId (string appId);

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultEmvTerminalWithAssignments</returns>
        ApiResponse<RestApiArrayResultEmvTerminalWithAssignments> HydraGetEmvsForAppIdWithHttpInfo (string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns></returns>
        void LoginWithDeviceId (string deviceId, string hydraUserType = null, string serialNumber = null);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoginWithDeviceIdWithHttpInfo (string deviceId, string hydraUserType = null, string serialNumber = null);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        RestApiResultHydraStatus Register (string appId, HydraRegistrationRequest hydraRegistration);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        ApiResponse<RestApiResultHydraStatus> RegisterWithHttpInfo (string appId, HydraRegistrationRequest hydraRegistration);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        void UnAssign (string appId, string deviceId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnAssignWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns></returns>
        void UnassignEmv (string appId, int? hydraConfigId);

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnassignEmvWithHttpInfo (string appId, int? hydraConfigId);
        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns></returns>
        void UpdateKioskCashVisibilitySettings (string appId, string deviceId, bool? isCashEnabled);

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateKioskCashVisibilitySettingsWithHttpInfo (string appId, string deviceId, bool? isCashEnabled);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign an EMV terminal to a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignEmvAsync (string appId, int? hydraConfigId, int? emvTerminalId);

        /// <summary>
        /// Assign an EMV terminal to a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignEmvAsyncWithHttpInfo (string appId, int? hydraConfigId, int? emvTerminalId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        System.Threading.Tasks.Task<RestApiResultHydraStatus> AttachStoreToTerminalAsync (string appId, string deviceId, int? storeId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> AttachStoreToTerminalAsyncWithHttpInfo (string appId, string deviceId, int? storeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelEmvPaymentAsync (int? orderId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelEmvPaymentAsyncWithHttpInfo (int? orderId, string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        System.Threading.Tasks.Task<RestApiResultHydraStatus> DetachStoreFromTerminalAsync (string appId, string deviceId, int? storeId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> DetachStoreFromTerminalAsyncWithHttpInfo (string appId, string deviceId, int? storeId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultHydraDeviceDetails</returns>
        System.Threading.Tasks.Task<RestApiResultHydraDeviceDetails> GetAttachedDeviceAsync (string appId, string deviceType, string deviceId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraDeviceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraDeviceDetails>> GetAttachedDeviceAsyncWithHttpInfo (string appId, string deviceType, string deviceId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultHydraDeviceDetails</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultHydraDeviceDetails> GetAttachedDevicesAsync (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultHydraDeviceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultHydraDeviceDetails>> GetAttachedDevicesAsyncWithHttpInfo (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultPaymentTerminalDetails</returns>
        System.Threading.Tasks.Task<RestApiResultPaymentTerminalDetails> GetEMVTerminalDetailsAsync (string appId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPaymentTerminalDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultPaymentTerminalDetails>> GetEMVTerminalDetailsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultPaymentTerminalTransactionDetails</returns>
        System.Threading.Tasks.Task<RestApiResultPaymentTerminalTransactionDetails> GetEmvOrderStateAsync (int? orderId, string appId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPaymentTerminalTransactionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultPaymentTerminalTransactionDetails>> GetEmvOrderStateAsyncWithHttpInfo (int? orderId, string appId);
        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiArrayResultKioskCashPaymentSettings</returns>
        System.Threading.Tasks.Task<RestApiArrayResultKioskCashPaymentSettings> GetKioskCashPaymentSettingsAsync (string appId, string deviceId);

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultKioskCashPaymentSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultKioskCashPaymentSettings>> GetKioskCashPaymentSettingsAsyncWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        System.Threading.Tasks.Task<RestApiResultHydraStatus> GetRegistrationAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> GetRegistrationAsyncWithHttpInfo ();
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultHydraConfig</returns>
        System.Threading.Tasks.Task<RestApiResultHydraConfig> GetSettingsAsync ();

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultHydraConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraConfig>> GetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HydraCreateEmvAsync (string appId, EmvTerminal emv);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HydraCreateEmvAsyncWithHttpInfo (string appId, EmvTerminal emv);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HydraDeleteEmvAsync (string appId, int? id);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HydraDeleteEmvAsyncWithHttpInfo (string appId, int? id);
        /// <summary>
        /// List EMV terminals belonging to the given AppNameId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultEmvTerminalWithAssignments</returns>
        System.Threading.Tasks.Task<RestApiArrayResultEmvTerminalWithAssignments> HydraGetEmvsForAppIdAsync (string appId);

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultEmvTerminalWithAssignments)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultEmvTerminalWithAssignments>> HydraGetEmvsForAppIdAsyncWithHttpInfo (string appId);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoginWithDeviceIdAsync (string deviceId, string hydraUserType = null, string serialNumber = null);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginWithDeviceIdAsyncWithHttpInfo (string deviceId, string hydraUserType = null, string serialNumber = null);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        System.Threading.Tasks.Task<RestApiResultHydraStatus> RegisterAsync (string appId, HydraRegistrationRequest hydraRegistration);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> RegisterAsyncWithHttpInfo (string appId, HydraRegistrationRequest hydraRegistration);
        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnAssignAsync (string appId, string deviceId);

        /// <summary>
        /// [Private]
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnAssignAsyncWithHttpInfo (string appId, string deviceId);
        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnassignEmvAsync (string appId, int? hydraConfigId);

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnassignEmvAsyncWithHttpInfo (string appId, int? hydraConfigId);
        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateKioskCashVisibilitySettingsAsync (string appId, string deviceId, bool? isCashEnabled);

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok
        /// </summary>
        /// <remarks>
        /// [BETA - this endpoint is under development, do not use it in your production system]
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKioskCashVisibilitySettingsAsyncWithHttpInfo (string appId, string deviceId, bool? isCashEnabled);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HydraApi : IHydraApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HydraApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HydraApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HydraApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HydraApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign an EMV terminal to a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns></returns>
        public void AssignEmv (string appId, int? hydraConfigId, int? emvTerminalId)
        {
             AssignEmvWithHttpInfo(appId, hydraConfigId, emvTerminalId);
        }

        /// <summary>
        /// Assign an EMV terminal to a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignEmvWithHttpInfo (string appId, int? hydraConfigId, int? emvTerminalId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->AssignEmv");
            // verify the required parameter 'hydraConfigId' is set
            if (hydraConfigId == null)
                throw new ApiException(400, "Missing required parameter 'hydraConfigId' when calling HydraApi->AssignEmv");
            // verify the required parameter 'emvTerminalId' is set
            if (emvTerminalId == null)
                throw new ApiException(400, "Missing required parameter 'emvTerminalId' when calling HydraApi->AssignEmv");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal/assign/{hydraConfigId}/{emvTerminalId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraConfigId != null) localVarPathParams.Add("hydraConfigId", this.Configuration.ApiClient.ParameterToString(hydraConfigId)); // path parameter
            if (emvTerminalId != null) localVarPathParams.Add("emvTerminalId", this.Configuration.ApiClient.ParameterToString(emvTerminalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign an EMV terminal to a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignEmvAsync (string appId, int? hydraConfigId, int? emvTerminalId)
        {
             await AssignEmvAsyncWithHttpInfo(appId, hydraConfigId, emvTerminalId);

        }

        /// <summary>
        /// Assign an EMV terminal to a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <param name="emvTerminalId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignEmvAsyncWithHttpInfo (string appId, int? hydraConfigId, int? emvTerminalId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->AssignEmv");
            // verify the required parameter 'hydraConfigId' is set
            if (hydraConfigId == null)
                throw new ApiException(400, "Missing required parameter 'hydraConfigId' when calling HydraApi->AssignEmv");
            // verify the required parameter 'emvTerminalId' is set
            if (emvTerminalId == null)
                throw new ApiException(400, "Missing required parameter 'emvTerminalId' when calling HydraApi->AssignEmv");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal/assign/{hydraConfigId}/{emvTerminalId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraConfigId != null) localVarPathParams.Add("hydraConfigId", this.Configuration.ApiClient.ParameterToString(hydraConfigId)); // path parameter
            if (emvTerminalId != null) localVarPathParams.Add("emvTerminalId", this.Configuration.ApiClient.ParameterToString(emvTerminalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        public RestApiResultHydraStatus AttachStoreToTerminal (string appId, string deviceId, int? storeId)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = AttachStoreToTerminalWithHttpInfo(appId, deviceId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        public ApiResponse< RestApiResultHydraStatus > AttachStoreToTerminalWithHttpInfo (string appId, string deviceId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->AttachStoreToTerminal");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->AttachStoreToTerminal");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling HydraApi->AttachStoreToTerminal");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/attach/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachStoreToTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraStatus> AttachStoreToTerminalAsync (string appId, string deviceId, int? storeId)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = await AttachStoreToTerminalAsyncWithHttpInfo(appId, deviceId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> AttachStoreToTerminalAsyncWithHttpInfo (string appId, string deviceId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->AttachStoreToTerminal");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->AttachStoreToTerminal");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling HydraApi->AttachStoreToTerminal");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/attach/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachStoreToTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void CancelEmvPayment (int? orderId, string appId)
        {
             CancelEmvPaymentWithHttpInfo(orderId, appId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelEmvPaymentWithHttpInfo (int? orderId, string appId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling HydraApi->CancelEmvPayment");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->CancelEmvPayment");

            var localVarPath = "/api/v1.0/{appId}/hydra/cancelemvpayment/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmvPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelEmvPaymentAsync (int? orderId, string appId)
        {
             await CancelEmvPaymentAsyncWithHttpInfo(orderId, appId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelEmvPaymentAsyncWithHttpInfo (int? orderId, string appId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling HydraApi->CancelEmvPayment");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->CancelEmvPayment");

            var localVarPath = "/api/v1.0/{appId}/hydra/cancelemvpayment/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmvPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        public RestApiResultHydraStatus DetachStoreFromTerminal (string appId, string deviceId, int? storeId)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = DetachStoreFromTerminalWithHttpInfo(appId, deviceId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        public ApiResponse< RestApiResultHydraStatus > DetachStoreFromTerminalWithHttpInfo (string appId, string deviceId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->DetachStoreFromTerminal");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->DetachStoreFromTerminal");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling HydraApi->DetachStoreFromTerminal");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/detach/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachStoreFromTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraStatus> DetachStoreFromTerminalAsync (string appId, string deviceId, int? storeId)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = await DetachStoreFromTerminalAsyncWithHttpInfo(appId, deviceId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="storeId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> DetachStoreFromTerminalAsyncWithHttpInfo (string appId, string deviceId, int? storeId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->DetachStoreFromTerminal");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->DetachStoreFromTerminal");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling HydraApi->DetachStoreFromTerminal");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/detach/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachStoreFromTerminal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiResultHydraDeviceDetails</returns>
        public RestApiResultHydraDeviceDetails GetAttachedDevice (string appId, string deviceType, string deviceId)
        {
             ApiResponse<RestApiResultHydraDeviceDetails> localVarResponse = GetAttachedDeviceWithHttpInfo(appId, deviceType, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiResultHydraDeviceDetails</returns>
        public ApiResponse< RestApiResultHydraDeviceDetails > GetAttachedDeviceWithHttpInfo (string appId, string deviceType, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetAttachedDevice");
            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
                throw new ApiException(400, "Missing required parameter 'deviceType' when calling HydraApi->GetAttachedDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->GetAttachedDevice");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceType}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceType != null) localVarPathParams.Add("deviceType", this.Configuration.ApiClient.ParameterToString(deviceType)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachedDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraDeviceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraDeviceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraDeviceDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiResultHydraDeviceDetails</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraDeviceDetails> GetAttachedDeviceAsync (string appId, string deviceType, string deviceId)
        {
             ApiResponse<RestApiResultHydraDeviceDetails> localVarResponse = await GetAttachedDeviceAsyncWithHttpInfo(appId, deviceType, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraDeviceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraDeviceDetails>> GetAttachedDeviceAsyncWithHttpInfo (string appId, string deviceType, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetAttachedDevice");
            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
                throw new ApiException(400, "Missing required parameter 'deviceType' when calling HydraApi->GetAttachedDevice");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->GetAttachedDevice");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceType}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceType != null) localVarPathParams.Add("deviceType", this.Configuration.ApiClient.ParameterToString(deviceType)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachedDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraDeviceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraDeviceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraDeviceDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>RestApiPaginationResultHydraDeviceDetails</returns>
        public RestApiPaginationResultHydraDeviceDetails GetAttachedDevices (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null)
        {
             ApiResponse<RestApiPaginationResultHydraDeviceDetails> localVarResponse = GetAttachedDevicesWithHttpInfo(appId, deviceType, pageIndex, pageSize, storeId, deviceName, deviceSerial);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultHydraDeviceDetails</returns>
        public ApiResponse< RestApiPaginationResultHydraDeviceDetails > GetAttachedDevicesWithHttpInfo (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetAttachedDevices");
            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
                throw new ApiException(400, "Missing required parameter 'deviceType' when calling HydraApi->GetAttachedDevices");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceType}/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceType != null) localVarPathParams.Add("deviceType", this.Configuration.ApiClient.ParameterToString(deviceType)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (deviceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceName", deviceName)); // query parameter
            if (deviceSerial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceSerial", deviceSerial)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachedDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultHydraDeviceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultHydraDeviceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultHydraDeviceDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultHydraDeviceDetails</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultHydraDeviceDetails> GetAttachedDevicesAsync (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null)
        {
             ApiResponse<RestApiPaginationResultHydraDeviceDetails> localVarResponse = await GetAttachedDevicesAsyncWithHttpInfo(appId, deviceType, pageIndex, pageSize, storeId, deviceName, deviceSerial);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceType"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="deviceSerial"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultHydraDeviceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultHydraDeviceDetails>> GetAttachedDevicesAsyncWithHttpInfo (string appId, string deviceType, int? pageIndex = null, int? pageSize = null, int? storeId = null, string deviceName = null, string deviceSerial = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetAttachedDevices");
            // verify the required parameter 'deviceType' is set
            if (deviceType == null)
                throw new ApiException(400, "Missing required parameter 'deviceType' when calling HydraApi->GetAttachedDevices");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceType}/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceType != null) localVarPathParams.Add("deviceType", this.Configuration.ApiClient.ParameterToString(deviceType)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (deviceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceName", deviceName)); // query parameter
            if (deviceSerial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceSerial", deviceSerial)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachedDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultHydraDeviceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultHydraDeviceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultHydraDeviceDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultPaymentTerminalDetails</returns>
        public RestApiResultPaymentTerminalDetails GetEMVTerminalDetails (string appId)
        {
             ApiResponse<RestApiResultPaymentTerminalDetails> localVarResponse = GetEMVTerminalDetailsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultPaymentTerminalDetails</returns>
        public ApiResponse< RestApiResultPaymentTerminalDetails > GetEMVTerminalDetailsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetEMVTerminalDetails");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEMVTerminalDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPaymentTerminalDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultPaymentTerminalDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPaymentTerminalDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultPaymentTerminalDetails</returns>
        public async System.Threading.Tasks.Task<RestApiResultPaymentTerminalDetails> GetEMVTerminalDetailsAsync (string appId)
        {
             ApiResponse<RestApiResultPaymentTerminalDetails> localVarResponse = await GetEMVTerminalDetailsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPaymentTerminalDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultPaymentTerminalDetails>> GetEMVTerminalDetailsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetEMVTerminalDetails");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEMVTerminalDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPaymentTerminalDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultPaymentTerminalDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPaymentTerminalDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultPaymentTerminalTransactionDetails</returns>
        public RestApiResultPaymentTerminalTransactionDetails GetEmvOrderState (int? orderId, string appId)
        {
             ApiResponse<RestApiResultPaymentTerminalTransactionDetails> localVarResponse = GetEmvOrderStateWithHttpInfo(orderId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultPaymentTerminalTransactionDetails</returns>
        public ApiResponse< RestApiResultPaymentTerminalTransactionDetails > GetEmvOrderStateWithHttpInfo (int? orderId, string appId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling HydraApi->GetEmvOrderState");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetEmvOrderState");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvorderstate/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmvOrderState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPaymentTerminalTransactionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultPaymentTerminalTransactionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPaymentTerminalTransactionDetails)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultPaymentTerminalTransactionDetails</returns>
        public async System.Threading.Tasks.Task<RestApiResultPaymentTerminalTransactionDetails> GetEmvOrderStateAsync (int? orderId, string appId)
        {
             ApiResponse<RestApiResultPaymentTerminalTransactionDetails> localVarResponse = await GetEmvOrderStateAsyncWithHttpInfo(orderId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultPaymentTerminalTransactionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultPaymentTerminalTransactionDetails>> GetEmvOrderStateAsyncWithHttpInfo (int? orderId, string appId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling HydraApi->GetEmvOrderState");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetEmvOrderState");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvorderstate/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmvOrderState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultPaymentTerminalTransactionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultPaymentTerminalTransactionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultPaymentTerminalTransactionDetails)));
        }

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>RestApiArrayResultKioskCashPaymentSettings</returns>
        public RestApiArrayResultKioskCashPaymentSettings GetKioskCashPaymentSettings (string appId, string deviceId)
        {
             ApiResponse<RestApiArrayResultKioskCashPaymentSettings> localVarResponse = GetKioskCashPaymentSettingsWithHttpInfo(appId, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of RestApiArrayResultKioskCashPaymentSettings</returns>
        public ApiResponse< RestApiArrayResultKioskCashPaymentSettings > GetKioskCashPaymentSettingsWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetKioskCashPaymentSettings");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->GetKioskCashPaymentSettings");

            var localVarPath = "/api/v1.0/{appId}/kioskcashsettings/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKioskCashPaymentSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultKioskCashPaymentSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultKioskCashPaymentSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultKioskCashPaymentSettings)));
        }

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of RestApiArrayResultKioskCashPaymentSettings</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultKioskCashPaymentSettings> GetKioskCashPaymentSettingsAsync (string appId, string deviceId)
        {
             ApiResponse<RestApiArrayResultKioskCashPaymentSettings> localVarResponse = await GetKioskCashPaymentSettingsAsyncWithHttpInfo(appId, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of Cash Payment Methon on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultKioskCashPaymentSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultKioskCashPaymentSettings>> GetKioskCashPaymentSettingsAsyncWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->GetKioskCashPaymentSettings");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->GetKioskCashPaymentSettings");

            var localVarPath = "/api/v1.0/{appId}/kioskcashsettings/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKioskCashPaymentSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultKioskCashPaymentSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultKioskCashPaymentSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultKioskCashPaymentSettings)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultHydraStatus</returns>
        public RestApiResultHydraStatus GetRegistration ()
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = GetRegistrationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        public ApiResponse< RestApiResultHydraStatus > GetRegistrationWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/hydra/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraStatus> GetRegistrationAsync ()
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = await GetRegistrationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> GetRegistrationAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/hydra/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestApiResultHydraConfig</returns>
        public RestApiResultHydraConfig GetSettings ()
        {
             ApiResponse<RestApiResultHydraConfig> localVarResponse = GetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestApiResultHydraConfig</returns>
        public ApiResponse< RestApiResultHydraConfig > GetSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/hydra/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraConfig)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RestApiResultHydraConfig</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraConfig> GetSettingsAsync ()
        {
             ApiResponse<RestApiResultHydraConfig> localVarResponse = await GetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RestApiResultHydraConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraConfig>> GetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/hydra/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraConfig)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Object</returns>
        public Object HydraCreateEmv (string appId, EmvTerminal emv)
        {
             ApiResponse<Object> localVarResponse = HydraCreateEmvWithHttpInfo(appId, emv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > HydraCreateEmvWithHttpInfo (string appId, EmvTerminal emv)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraCreateEmv");
            // verify the required parameter 'emv' is set
            if (emv == null)
                throw new ApiException(400, "Missing required parameter 'emv' when calling HydraApi->HydraCreateEmv");

            var localVarPath = "/api/v1.0/{appId}/emvterminals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (emv != null && emv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emv; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraCreateEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HydraCreateEmvAsync (string appId, EmvTerminal emv)
        {
             ApiResponse<Object> localVarResponse = await HydraCreateEmvAsyncWithHttpInfo(appId, emv);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="emv"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HydraCreateEmvAsyncWithHttpInfo (string appId, EmvTerminal emv)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraCreateEmv");
            // verify the required parameter 'emv' is set
            if (emv == null)
                throw new ApiException(400, "Missing required parameter 'emv' when calling HydraApi->HydraCreateEmv");

            var localVarPath = "/api/v1.0/{appId}/emvterminals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (emv != null && emv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emv; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraCreateEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Object</returns>
        public Object HydraDeleteEmv (string appId, int? id)
        {
             ApiResponse<Object> localVarResponse = HydraDeleteEmvWithHttpInfo(appId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > HydraDeleteEmvWithHttpInfo (string appId, int? id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraDeleteEmv");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling HydraApi->HydraDeleteEmv");

            var localVarPath = "/api/v1.0/{appId}/emvterminals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraDeleteEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HydraDeleteEmvAsync (string appId, int? id)
        {
             ApiResponse<Object> localVarResponse = await HydraDeleteEmvAsyncWithHttpInfo(appId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HydraDeleteEmvAsyncWithHttpInfo (string appId, int? id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraDeleteEmv");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling HydraApi->HydraDeleteEmv");

            var localVarPath = "/api/v1.0/{appId}/emvterminals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraDeleteEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultEmvTerminalWithAssignments</returns>
        public RestApiArrayResultEmvTerminalWithAssignments HydraGetEmvsForAppId (string appId)
        {
             ApiResponse<RestApiArrayResultEmvTerminalWithAssignments> localVarResponse = HydraGetEmvsForAppIdWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultEmvTerminalWithAssignments</returns>
        public ApiResponse< RestApiArrayResultEmvTerminalWithAssignments > HydraGetEmvsForAppIdWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraGetEmvsForAppId");

            var localVarPath = "/api/v1.0/{appId}/emvterminals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraGetEmvsForAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultEmvTerminalWithAssignments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultEmvTerminalWithAssignments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultEmvTerminalWithAssignments)));
        }

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultEmvTerminalWithAssignments</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultEmvTerminalWithAssignments> HydraGetEmvsForAppIdAsync (string appId)
        {
             ApiResponse<RestApiArrayResultEmvTerminalWithAssignments> localVarResponse = await HydraGetEmvsForAppIdAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List EMV terminals belonging to the given AppNameId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultEmvTerminalWithAssignments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultEmvTerminalWithAssignments>> HydraGetEmvsForAppIdAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->HydraGetEmvsForAppId");

            var localVarPath = "/api/v1.0/{appId}/emvterminals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HydraGetEmvsForAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultEmvTerminalWithAssignments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultEmvTerminalWithAssignments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultEmvTerminalWithAssignments)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns></returns>
        public void LoginWithDeviceId (string deviceId, string hydraUserType = null, string serialNumber = null)
        {
             LoginWithDeviceIdWithHttpInfo(deviceId, hydraUserType, serialNumber);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LoginWithDeviceIdWithHttpInfo (string deviceId, string hydraUserType = null, string serialNumber = null)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->LoginWithDeviceId");

            var localVarPath = "/api/v1.0/hydra/{deviceId}/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (hydraUserType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydraUserType", hydraUserType)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serialNumber", serialNumber)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginWithDeviceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoginWithDeviceIdAsync (string deviceId, string hydraUserType = null, string serialNumber = null)
        {
             await LoginWithDeviceIdAsyncWithHttpInfo(deviceId, hydraUserType, serialNumber);

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="hydraUserType"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LoginWithDeviceIdAsyncWithHttpInfo (string deviceId, string hydraUserType = null, string serialNumber = null)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->LoginWithDeviceId");

            var localVarPath = "/api/v1.0/hydra/{deviceId}/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (hydraUserType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydraUserType", hydraUserType)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serialNumber", serialNumber)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginWithDeviceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>RestApiResultHydraStatus</returns>
        public RestApiResultHydraStatus Register (string appId, HydraRegistrationRequest hydraRegistration)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = RegisterWithHttpInfo(appId, hydraRegistration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>ApiResponse of RestApiResultHydraStatus</returns>
        public ApiResponse< RestApiResultHydraStatus > RegisterWithHttpInfo (string appId, HydraRegistrationRequest hydraRegistration)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->Register");
            // verify the required parameter 'hydraRegistration' is set
            if (hydraRegistration == null)
                throw new ApiException(400, "Missing required parameter 'hydraRegistration' when calling HydraApi->Register");

            var localVarPath = "/api/v1.0/{appId}/hydra/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraRegistration != null && hydraRegistration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hydraRegistration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hydraRegistration; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>Task of RestApiResultHydraStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultHydraStatus> RegisterAsync (string appId, HydraRegistrationRequest hydraRegistration)
        {
             ApiResponse<RestApiResultHydraStatus> localVarResponse = await RegisterAsyncWithHttpInfo(appId, hydraRegistration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraRegistration"></param>
        /// <returns>Task of ApiResponse (RestApiResultHydraStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultHydraStatus>> RegisterAsyncWithHttpInfo (string appId, HydraRegistrationRequest hydraRegistration)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->Register");
            // verify the required parameter 'hydraRegistration' is set
            if (hydraRegistration == null)
                throw new ApiException(400, "Missing required parameter 'hydraRegistration' when calling HydraApi->Register");

            var localVarPath = "/api/v1.0/{appId}/hydra/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraRegistration != null && hydraRegistration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hydraRegistration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hydraRegistration; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultHydraStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultHydraStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultHydraStatus)));
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        public void UnAssign (string appId, string deviceId)
        {
             UnAssignWithHttpInfo(appId, deviceId);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnAssignWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UnAssign");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->UnAssign");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnAssignAsync (string appId, string deviceId)
        {
             await UnAssignAsyncWithHttpInfo(appId, deviceId);

        }

        /// <summary>
        /// [Private] 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnAssignAsyncWithHttpInfo (string appId, string deviceId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UnAssign");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->UnAssign");

            var localVarPath = "/api/v1.0/{appId}/hydra/{deviceId}/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns></returns>
        public void UnassignEmv (string appId, int? hydraConfigId)
        {
             UnassignEmvWithHttpInfo(appId, hydraConfigId);
        }

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnassignEmvWithHttpInfo (string appId, int? hydraConfigId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UnassignEmv");
            // verify the required parameter 'hydraConfigId' is set
            if (hydraConfigId == null)
                throw new ApiException(400, "Missing required parameter 'hydraConfigId' when calling HydraApi->UnassignEmv");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal/unassign/{hydraConfigId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraConfigId != null) localVarPathParams.Add("hydraConfigId", this.Configuration.ApiClient.ParameterToString(hydraConfigId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnassignEmvAsync (string appId, int? hydraConfigId)
        {
             await UnassignEmvAsyncWithHttpInfo(appId, hydraConfigId);

        }

        /// <summary>
        /// Unassign the currently assigned EMV terminal from a kiosk 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="hydraConfigId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnassignEmvAsyncWithHttpInfo (string appId, int? hydraConfigId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UnassignEmv");
            // verify the required parameter 'hydraConfigId' is set
            if (hydraConfigId == null)
                throw new ApiException(400, "Missing required parameter 'hydraConfigId' when calling HydraApi->UnassignEmv");

            var localVarPath = "/api/v1.0/{appId}/hydra/emvterminal/unassign/{hydraConfigId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (hydraConfigId != null) localVarPathParams.Add("hydraConfigId", this.Configuration.ApiClient.ParameterToString(hydraConfigId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignEmv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns></returns>
        public void UpdateKioskCashVisibilitySettings (string appId, string deviceId, bool? isCashEnabled)
        {
             UpdateKioskCashVisibilitySettingsWithHttpInfo(appId, deviceId, isCashEnabled);
        }

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateKioskCashVisibilitySettingsWithHttpInfo (string appId, string deviceId, bool? isCashEnabled)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UpdateKioskCashVisibilitySettings");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->UpdateKioskCashVisibilitySettings");
            // verify the required parameter 'isCashEnabled' is set
            if (isCashEnabled == null)
                throw new ApiException(400, "Missing required parameter 'isCashEnabled' when calling HydraApi->UpdateKioskCashVisibilitySettings");

            var localVarPath = "/api/v1.0/{appId}/kioskupdatecashsettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (isCashEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCashEnabled", isCashEnabled)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKioskCashVisibilitySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateKioskCashVisibilitySettingsAsync (string appId, string deviceId, bool? isCashEnabled)
        {
             await UpdateKioskCashVisibilitySettingsAsyncWithHttpInfo(appId, deviceId, isCashEnabled);

        }

        /// <summary>
        /// Update the Cash Payment Methon Visiability on Kisok [BETA - this endpoint is under development, do not use it in your production system]
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="deviceId"></param>
        /// <param name="isCashEnabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKioskCashVisibilitySettingsAsyncWithHttpInfo (string appId, string deviceId, bool? isCashEnabled)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling HydraApi->UpdateKioskCashVisibilitySettings");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling HydraApi->UpdateKioskCashVisibilitySettings");
            // verify the required parameter 'isCashEnabled' is set
            if (isCashEnabled == null)
                throw new ApiException(400, "Missing required parameter 'isCashEnabled' when calling HydraApi->UpdateKioskCashVisibilitySettings");

            var localVarPath = "/api/v1.0/{appId}/kioskupdatecashsettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (isCashEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCashEnabled", isCashEnabled)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKioskCashVisibilitySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiResultMenu</returns>
        RestApiResultMenu CreateDraftMenuFromExistingMenu (int? menuId);

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiResultMenu</returns>
        ApiResponse<RestApiResultMenu> CreateDraftMenuFromExistingMenuWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Create a new menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>int?</returns>
        int? CreateNewMenuForApp (string appId);

        /// <summary>
        /// [PRIVATE API]Create a new menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> CreateNewMenuForAppWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns></returns>
        void DeleteMenu (int? menuId);

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuWithHttpInfo (int? menuId);
        /// <summary>
        /// Delete menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns></returns>
        void DeleteMenuImage (int? menuId);

        /// <summary>
        /// Delete menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuImageWithHttpInfo (int? menuId);
        /// <summary>
        /// Delete menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns></returns>
        void DeleteMenuItemMetadata (int? menuId, int? storeId, int? menuItemId, string key);

        /// <summary>
        /// Delete menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key);
        /// <summary>
        /// Get menu by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiResultMenu</returns>
        RestApiResultMenu GetMenuById (int? menuId);

        /// <summary>
        /// Get menu by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiResultMenu</returns>
        ApiResponse<RestApiResultMenu> GetMenuByIdWithHttpInfo (int? menuId);
        /// <summary>
        /// Get menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>RestApiArrayResultMetadata</returns>
        RestApiArrayResultMetadata GetMenuItemMetadata (int? menuId, int? storeId, int? menuItemId);

        /// <summary>
        /// Get menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMetadata</returns>
        ApiResponse<RestApiArrayResultMetadata> GetMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId);
        /// <summary>
        /// Get menu item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns></returns>
        void GetMenuItemMetadataByKey (int? menuId, int? storeId, int? menuItemId, string key);

        /// <summary>
        /// Get menu item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMenuItemMetadataByKeyWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key);
        /// <summary>
        /// Get menu item option set item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>RestApiResultMetadata</returns>
        RestApiResultMetadata GetMenuItemOptionSetItemMetadata (int? menuId, int? storeId, int? optionSetItemId);

        /// <summary>
        /// Get menu item option set item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>ApiResponse of RestApiResultMetadata</returns>
        ApiResponse<RestApiResultMetadata> GetMenuItemOptionSetItemMetadataWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId);
        /// <summary>
        /// [PRIVATE API]Get menus store names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuStoreNames</returns>
        RestApiArrayResultMenuStoreNames GetMenuStoreNames (int? menuId);

        /// <summary>
        /// [PRIVATE API]Get menus store names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuStoreNames</returns>
        ApiResponse<RestApiArrayResultMenuStoreNames> GetMenuStoreNamesWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Get menus by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>RestApiArrayResultMenuSummary</returns>
        RestApiArrayResultMenuSummary GetMenusByAppId (string appId);

        /// <summary>
        /// [PRIVATE API]Get menus by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSummary</returns>
        ApiResponse<RestApiArrayResultMenuSummary> GetMenusByAppIdWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuCheckpoint</returns>
        RestApiArrayResultMenuCheckpoint GetMenusCheckpoints (int? menuId);

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuCheckpoint</returns>
        ApiResponse<RestApiArrayResultMenuCheckpoint> GetMenusCheckpointsWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns></returns>
        void RestoreAMenuCheckpoint (int? menuId, int? checkpointId);

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreAMenuCheckpointWithHttpInfo (int? menuId, int? checkpointId);
        /// <summary>
        /// Update menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns></returns>
        void SetMenuItemMetadata (int? menuId, int? storeId, int? menuItemId, Metadata metadata);

        /// <summary>
        /// Update menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId, Metadata metadata);
        /// <summary>
        /// Update menu item option set item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns></returns>
        void SetMenuItemOptionSetItemMetadata (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata);

        /// <summary>
        /// Update menu item option set item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuItemOptionSetItemMetadataWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata);
        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns></returns>
        void SetMenuLock (int? menuId, bool? locked);

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuLockWithHttpInfo (int? menuId, bool? locked);
        /// <summary>
        /// [PRIVATE API]Set Menus Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns></returns>
        void SetMenuName (int? menuId, string name);

        /// <summary>
        /// [PRIVATE API]Set Menus Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMenuNameWithHttpInfo (int? menuId, string name);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns></returns>
        void UpdateMenu (int? menuId, MenuBase menu);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMenuWithHttpInfo (int? menuId, MenuBase menu);
        /// <summary>
        /// Upload menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>RestApiStringResult</returns>
        RestApiStringResult UploadMenuImage (int? menuId, System.IO.Stream image);

        /// <summary>
        /// Upload menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        ApiResponse<RestApiStringResult> UploadMenuImageWithHttpInfo (int? menuId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiResultMenu</returns>
        System.Threading.Tasks.Task<RestApiResultMenu> CreateDraftMenuFromExistingMenuAsync (int? menuId);

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenu>> CreateDraftMenuFromExistingMenuAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Create a new menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> CreateNewMenuForAppAsync (string appId);

        /// <summary>
        /// [PRIVATE API]Create a new menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> CreateNewMenuForAppAsyncWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuAsync (int? menuId);

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// Delete menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuImageAsync (int? menuId);

        /// <summary>
        /// Delete menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuImageAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// Delete menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId, string key);

        /// <summary>
        /// Delete menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key);
        /// <summary>
        /// Get menu by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiResultMenu</returns>
        System.Threading.Tasks.Task<RestApiResultMenu> GetMenuByIdAsync (int? menuId);

        /// <summary>
        /// Get menu by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMenu>> GetMenuByIdAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// Get menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>Task of RestApiArrayResultMetadata</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMetadata> GetMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId);

        /// <summary>
        /// Get menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMetadata>> GetMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId);
        /// <summary>
        /// Get menu item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMenuItemMetadataByKeyAsync (int? menuId, int? storeId, int? menuItemId, string key);

        /// <summary>
        /// Get menu item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMenuItemMetadataByKeyAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key);
        /// <summary>
        /// Get menu item option set item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>Task of RestApiResultMetadata</returns>
        System.Threading.Tasks.Task<RestApiResultMetadata> GetMenuItemOptionSetItemMetadataAsync (int? menuId, int? storeId, int? optionSetItemId);

        /// <summary>
        /// Get menu item option set item metadata by key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMetadata>> GetMenuItemOptionSetItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId);
        /// <summary>
        /// [PRIVATE API]Get menus store names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuStoreNames</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuStoreNames> GetMenuStoreNamesAsync (int? menuId);

        /// <summary>
        /// [PRIVATE API]Get menus store names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuStoreNames)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuStoreNames>> GetMenuStoreNamesAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Get menus by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>Task of RestApiArrayResultMenuSummary</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuSummary> GetMenusByAppIdAsync (string appId);

        /// <summary>
        /// [PRIVATE API]Get menus by appId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSummary>> GetMenusByAppIdAsyncWithHttpInfo (string appId);
        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuCheckpoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMenuCheckpoint> GetMenusCheckpointsAsync (int? menuId);

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuCheckpoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuCheckpoint>> GetMenusCheckpointsAsyncWithHttpInfo (int? menuId);
        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreAMenuCheckpointAsync (int? menuId, int? checkpointId);

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreAMenuCheckpointAsyncWithHttpInfo (int? menuId, int? checkpointId);
        /// <summary>
        /// Update menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId, Metadata metadata);

        /// <summary>
        /// Update menu item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, Metadata metadata);
        /// <summary>
        /// Update menu item option set item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuItemOptionSetItemMetadataAsync (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata);

        /// <summary>
        /// Update menu item option set item metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuItemOptionSetItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata);
        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuLockAsync (int? menuId, bool? locked);

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuLockAsyncWithHttpInfo (int? menuId, bool? locked);
        /// <summary>
        /// [PRIVATE API]Set Menus Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMenuNameAsync (int? menuId, string name);

        /// <summary>
        /// [PRIVATE API]Set Menus Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuNameAsyncWithHttpInfo (int? menuId, string name);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMenuAsync (int? menuId, MenuBase menu);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuAsyncWithHttpInfo (int? menuId, MenuBase menu);
        /// <summary>
        /// Upload menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>Task of RestApiStringResult</returns>
        System.Threading.Tasks.Task<RestApiStringResult> UploadMenuImageAsync (int? menuId, System.IO.Stream image);

        /// <summary>
        /// Upload menu image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuImageAsyncWithHttpInfo (int? menuId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenusApi : IMenusApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenusApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenusApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiResultMenu</returns>
        public RestApiResultMenu CreateDraftMenuFromExistingMenu (int? menuId)
        {
             ApiResponse<RestApiResultMenu> localVarResponse = CreateDraftMenuFromExistingMenuWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiResultMenu</returns>
        public ApiResponse< RestApiResultMenu > CreateDraftMenuFromExistingMenuWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->CreateDraftMenuFromExistingMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDraftMenuFromExistingMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenu)));
        }

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiResultMenu</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenu> CreateDraftMenuFromExistingMenuAsync (int? menuId)
        {
             ApiResponse<RestApiResultMenu> localVarResponse = await CreateDraftMenuFromExistingMenuAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API]Clone a menu, (without attaching stores) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenu>> CreateDraftMenuFromExistingMenuAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->CreateDraftMenuFromExistingMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDraftMenuFromExistingMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenu)));
        }

        /// <summary>
        /// [PRIVATE API]Create a new menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>int?</returns>
        public int? CreateNewMenuForApp (string appId)
        {
             ApiResponse<int?> localVarResponse = CreateNewMenuForAppWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API]Create a new menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > CreateNewMenuForAppWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusApi->CreateNewMenuForApp");

            var localVarPath = "/api/v1.0/{appId}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewMenuForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// [PRIVATE API]Create a new menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> CreateNewMenuForAppAsync (string appId)
        {
             ApiResponse<int?> localVarResponse = await CreateNewMenuForAppAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API]Create a new menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> CreateNewMenuForAppAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusApi->CreateNewMenuForApp");

            var localVarPath = "/api/v1.0/{appId}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewMenuForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns></returns>
        public void DeleteMenu (int? menuId)
        {
             DeleteMenuWithHttpInfo(menuId);
        }

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuAsync (int? menuId)
        {
             await DeleteMenuAsyncWithHttpInfo(menuId);

        }

        /// <summary>
        /// [PRIVATE API]Mark a Menu as Deleted 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Get Menus for this appId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns></returns>
        public void DeleteMenuImage (int? menuId)
        {
             DeleteMenuImageWithHttpInfo(menuId);
        }

        /// <summary>
        /// Delete menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuImageWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenuImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuImageAsync (int? menuId)
        {
             await DeleteMenuImageAsyncWithHttpInfo(menuId);

        }

        /// <summary>
        /// Delete menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuImageAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenuImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns></returns>
        public void DeleteMenuItemMetadata (int? menuId, int? storeId, int? menuItemId, string key)
        {
             DeleteMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, key);
        }

        /// <summary>
        /// Delete menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MenusApi->DeleteMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId, string key)
        {
             await DeleteMenuItemMetadataAsyncWithHttpInfo(menuId, storeId, menuItemId, key);

        }

        /// <summary>
        /// Delete menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->DeleteMenuItemMetadata");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MenusApi->DeleteMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiResultMenu</returns>
        public RestApiResultMenu GetMenuById (int? menuId)
        {
             ApiResponse<RestApiResultMenu> localVarResponse = GetMenuByIdWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiResultMenu</returns>
        public ApiResponse< RestApiResultMenu > GetMenuByIdWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuById");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenu)));
        }

        /// <summary>
        /// Get menu by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiResultMenu</returns>
        public async System.Threading.Tasks.Task<RestApiResultMenu> GetMenuByIdAsync (int? menuId)
        {
             ApiResponse<RestApiResultMenu> localVarResponse = await GetMenuByIdAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMenu>> GetMenuByIdAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuById");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMenu)));
        }

        /// <summary>
        /// Get menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>RestApiArrayResultMetadata</returns>
        public RestApiArrayResultMetadata GetMenuItemMetadata (int? menuId, int? storeId, int? menuItemId)
        {
             ApiResponse<RestApiArrayResultMetadata> localVarResponse = GetMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMetadata</returns>
        public ApiResponse< RestApiArrayResultMetadata > GetMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->GetMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMetadata)));
        }

        /// <summary>
        /// Get menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>Task of RestApiArrayResultMetadata</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMetadata> GetMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId)
        {
             ApiResponse<RestApiArrayResultMetadata> localVarResponse = await GetMenuItemMetadataAsyncWithHttpInfo(menuId, storeId, menuItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMetadata>> GetMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->GetMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMetadata)));
        }

        /// <summary>
        /// Get menu item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns></returns>
        public void GetMenuItemMetadataByKey (int? menuId, int? storeId, int? menuItemId, string key)
        {
             GetMenuItemMetadataByKeyWithHttpInfo(menuId, storeId, menuItemId, key);
        }

        /// <summary>
        /// Get menu item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMenuItemMetadataByKeyWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MenusApi->GetMenuItemMetadataByKey");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemMetadataByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMenuItemMetadataByKeyAsync (int? menuId, int? storeId, int? menuItemId, string key)
        {
             await GetMenuItemMetadataByKeyAsyncWithHttpInfo(menuId, storeId, menuItemId, key);

        }

        /// <summary>
        /// Get menu item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMenuItemMetadataByKeyAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, string key)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->GetMenuItemMetadataByKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MenusApi->GetMenuItemMetadataByKey");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemMetadataByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get menu item option set item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>RestApiResultMetadata</returns>
        public RestApiResultMetadata GetMenuItemOptionSetItemMetadata (int? menuId, int? storeId, int? optionSetItemId)
        {
             ApiResponse<RestApiResultMetadata> localVarResponse = GetMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu item option set item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>ApiResponse of RestApiResultMetadata</returns>
        public ApiResponse< RestApiResultMetadata > GetMenuItemOptionSetItemMetadataWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'optionSetItemId' is set
            if (optionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetItemId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (optionSetItemId != null) localVarPathParams.Add("optionSetItemId", this.Configuration.ApiClient.ParameterToString(optionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetadata)));
        }

        /// <summary>
        /// Get menu item option set item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>Task of RestApiResultMetadata</returns>
        public async System.Threading.Tasks.Task<RestApiResultMetadata> GetMenuItemOptionSetItemMetadataAsync (int? menuId, int? storeId, int? optionSetItemId)
        {
             ApiResponse<RestApiResultMetadata> localVarResponse = await GetMenuItemOptionSetItemMetadataAsyncWithHttpInfo(menuId, storeId, optionSetItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu item option set item metadata by key 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <returns>Task of ApiResponse (RestApiResultMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMetadata>> GetMenuItemOptionSetItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'optionSetItemId' is set
            if (optionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetItemId' when calling MenusApi->GetMenuItemOptionSetItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (optionSetItemId != null) localVarPathParams.Add("optionSetItemId", this.Configuration.ApiClient.ParameterToString(optionSetItemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuItemOptionSetItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetadata)));
        }

        /// <summary>
        /// [PRIVATE API]Get menus store names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuStoreNames</returns>
        public RestApiArrayResultMenuStoreNames GetMenuStoreNames (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuStoreNames> localVarResponse = GetMenuStoreNamesWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API]Get menus store names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuStoreNames</returns>
        public ApiResponse< RestApiArrayResultMenuStoreNames > GetMenuStoreNamesWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuStoreNames");

            var localVarPath = "/api/v1.0/menus/{menuId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuStoreNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuStoreNames>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuStoreNames) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuStoreNames)));
        }

        /// <summary>
        /// [PRIVATE API]Get menus store names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuStoreNames</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuStoreNames> GetMenuStoreNamesAsync (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuStoreNames> localVarResponse = await GetMenuStoreNamesAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API]Get menus store names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuStoreNames)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuStoreNames>> GetMenuStoreNamesAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenuStoreNames");

            var localVarPath = "/api/v1.0/menus/{menuId}/stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuStoreNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuStoreNames>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuStoreNames) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuStoreNames)));
        }

        /// <summary>
        /// [PRIVATE API]Get menus by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>RestApiArrayResultMenuSummary</returns>
        public RestApiArrayResultMenuSummary GetMenusByAppId (string appId)
        {
             ApiResponse<RestApiArrayResultMenuSummary> localVarResponse = GetMenusByAppIdWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API]Get menus by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuSummary</returns>
        public ApiResponse< RestApiArrayResultMenuSummary > GetMenusByAppIdWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusApi->GetMenusByAppId");

            var localVarPath = "/api/v1.0/{appId}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenusByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSummary)));
        }

        /// <summary>
        /// [PRIVATE API]Get menus by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>Task of RestApiArrayResultMenuSummary</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuSummary> GetMenusByAppIdAsync (string appId)
        {
             ApiResponse<RestApiArrayResultMenuSummary> localVarResponse = await GetMenusByAppIdAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API]Get menus by appId 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Get Menus for this appId</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuSummary>> GetMenusByAppIdAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MenusApi->GetMenusByAppId");

            var localVarPath = "/api/v1.0/{appId}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenusByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuSummary)));
        }

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>RestApiArrayResultMenuCheckpoint</returns>
        public RestApiArrayResultMenuCheckpoint GetMenusCheckpoints (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuCheckpoint> localVarResponse = GetMenusCheckpointsWithHttpInfo(menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>ApiResponse of RestApiArrayResultMenuCheckpoint</returns>
        public ApiResponse< RestApiArrayResultMenuCheckpoint > GetMenusCheckpointsWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenusCheckpoints");

            var localVarPath = "/api/v1.0/menus/{menuId}/checkpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenusCheckpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuCheckpoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuCheckpoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuCheckpoint)));
        }

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of RestApiArrayResultMenuCheckpoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMenuCheckpoint> GetMenusCheckpointsAsync (int? menuId)
        {
             ApiResponse<RestApiArrayResultMenuCheckpoint> localVarResponse = await GetMenusCheckpointsAsyncWithHttpInfo(menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API]Get a Menus Checkpoints 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMenuCheckpoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMenuCheckpoint>> GetMenusCheckpointsAsyncWithHttpInfo (int? menuId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetMenusCheckpoints");

            var localVarPath = "/api/v1.0/menus/{menuId}/checkpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenusCheckpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMenuCheckpoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultMenuCheckpoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMenuCheckpoint)));
        }

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns></returns>
        public void RestoreAMenuCheckpoint (int? menuId, int? checkpointId)
        {
             RestoreAMenuCheckpointWithHttpInfo(menuId, checkpointId);
        }

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RestoreAMenuCheckpointWithHttpInfo (int? menuId, int? checkpointId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->RestoreAMenuCheckpoint");
            // verify the required parameter 'checkpointId' is set
            if (checkpointId == null)
                throw new ApiException(400, "Missing required parameter 'checkpointId' when calling MenusApi->RestoreAMenuCheckpoint");

            var localVarPath = "/api/v1.0/menus/{menuId}/checkpoints/{checkpointId}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (checkpointId != null) localVarPathParams.Add("checkpointId", this.Configuration.ApiClient.ParameterToString(checkpointId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreAMenuCheckpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreAMenuCheckpointAsync (int? menuId, int? checkpointId)
        {
             await RestoreAMenuCheckpointAsyncWithHttpInfo(menuId, checkpointId);

        }

        /// <summary>
        /// [PRIVATE API]Restore a Menu to a checkpoint 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="checkpointId">Checkpoint to restore menu to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestoreAMenuCheckpointAsyncWithHttpInfo (int? menuId, int? checkpointId)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->RestoreAMenuCheckpoint");
            // verify the required parameter 'checkpointId' is set
            if (checkpointId == null)
                throw new ApiException(400, "Missing required parameter 'checkpointId' when calling MenusApi->RestoreAMenuCheckpoint");

            var localVarPath = "/api/v1.0/menus/{menuId}/checkpoints/{checkpointId}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (checkpointId != null) localVarPathParams.Add("checkpointId", this.Configuration.ApiClient.ParameterToString(checkpointId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreAMenuCheckpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns></returns>
        public void SetMenuItemMetadata (int? menuId, int? storeId, int? menuItemId, Metadata metadata)
        {
             SetMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, metadata);
        }

        /// <summary>
        /// Update menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuItemMetadataWithHttpInfo (int? menuId, int? storeId, int? menuItemId, Metadata metadata)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'metadata' is set
            if (metadata == null)
                throw new ApiException(400, "Missing required parameter 'metadata' when calling MenusApi->SetMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (metadata != null && metadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(metadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = metadata; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuItemMetadataAsync (int? menuId, int? storeId, int? menuItemId, Metadata metadata)
        {
             await SetMenuItemMetadataAsyncWithHttpInfo(menuId, storeId, menuItemId, metadata);

        }

        /// <summary>
        /// Update menu item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="menuItemId">Menu item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? menuItemId, Metadata metadata)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'menuItemId' is set
            if (menuItemId == null)
                throw new ApiException(400, "Missing required parameter 'menuItemId' when calling MenusApi->SetMenuItemMetadata");
            // verify the required parameter 'metadata' is set
            if (metadata == null)
                throw new ApiException(400, "Missing required parameter 'metadata' when calling MenusApi->SetMenuItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (menuItemId != null) localVarPathParams.Add("menuItemId", this.Configuration.ApiClient.ParameterToString(menuItemId)); // path parameter
            if (metadata != null && metadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(metadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = metadata; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item option set item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns></returns>
        public void SetMenuItemOptionSetItemMetadata (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata)
        {
             SetMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId, metadata);
        }

        /// <summary>
        /// Update menu item option set item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuItemOptionSetItemMetadataWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'optionSetItemId' is set
            if (optionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetItemId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'metadata' is set
            if (metadata == null)
                throw new ApiException(400, "Missing required parameter 'metadata' when calling MenusApi->SetMenuItemOptionSetItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (optionSetItemId != null) localVarPathParams.Add("optionSetItemId", this.Configuration.ApiClient.ParameterToString(optionSetItemId)); // path parameter
            if (metadata != null && metadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(metadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = metadata; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuItemOptionSetItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu item option set item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuItemOptionSetItemMetadataAsync (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata)
        {
             await SetMenuItemOptionSetItemMetadataAsyncWithHttpInfo(menuId, storeId, optionSetItemId, metadata);

        }

        /// <summary>
        /// Update menu item option set item metadata 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="storeId">Store identifier</param>
        /// <param name="optionSetItemId">Menu item option set item identifier</param>
        /// <param name="metadata">Metadata object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuItemOptionSetItemMetadataAsyncWithHttpInfo (int? menuId, int? storeId, int? optionSetItemId, Metadata metadata)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'optionSetItemId' is set
            if (optionSetItemId == null)
                throw new ApiException(400, "Missing required parameter 'optionSetItemId' when calling MenusApi->SetMenuItemOptionSetItemMetadata");
            // verify the required parameter 'metadata' is set
            if (metadata == null)
                throw new ApiException(400, "Missing required parameter 'metadata' when calling MenusApi->SetMenuItemOptionSetItemMetadata");

            var localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (optionSetItemId != null) localVarPathParams.Add("optionSetItemId", this.Configuration.ApiClient.ParameterToString(optionSetItemId)); // path parameter
            if (metadata != null && metadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(metadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = metadata; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuItemOptionSetItemMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns></returns>
        public void SetMenuLock (int? menuId, bool? locked)
        {
             SetMenuLockWithHttpInfo(menuId, locked);
        }

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuLockWithHttpInfo (int? menuId, bool? locked)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuLock");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling MenusApi->SetMenuLock");

            var localVarPath = "/api/v1.0/menus/{menuId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (locked != null && locked.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(locked); // http body (model) parameter
            }
            else
            {
                localVarPostBody = locked; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuLockAsync (int? menuId, bool? locked)
        {
             await SetMenuLockAsyncWithHttpInfo(menuId, locked);

        }

        /// <summary>
        /// [PRIVATE API]Lock/Unlock a Menu for Editing 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="locked">True: Locks menu for editing, False: Unlocks for editing</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuLockAsyncWithHttpInfo (int? menuId, bool? locked)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuLock");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling MenusApi->SetMenuLock");

            var localVarPath = "/api/v1.0/menus/{menuId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (locked != null && locked.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(locked); // http body (model) parameter
            }
            else
            {
                localVarPostBody = locked; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Set Menus Name 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns></returns>
        public void SetMenuName (int? menuId, string name)
        {
             SetMenuNameWithHttpInfo(menuId, name);
        }

        /// <summary>
        /// [PRIVATE API]Set Menus Name 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMenuNameWithHttpInfo (int? menuId, string name)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling MenusApi->SetMenuName");

            var localVarPath = "/api/v1.0/menus/{menuId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [PRIVATE API]Set Menus Name 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMenuNameAsync (int? menuId, string name)
        {
             await SetMenuNameAsyncWithHttpInfo(menuId, name);

        }

        /// <summary>
        /// [PRIVATE API]Set Menus Name 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="name">Name to set for this Menu</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMenuNameAsyncWithHttpInfo (int? menuId, string name)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->SetMenuName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling MenusApi->SetMenuName");

            var localVarPath = "/api/v1.0/menus/{menuId}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenuName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns></returns>
        public void UpdateMenu (int? menuId, MenuBase menu)
        {
             UpdateMenuWithHttpInfo(menuId, menu);
        }

        /// <summary>
        /// Update menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMenuWithHttpInfo (int? menuId, MenuBase menu)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->UpdateMenu");
            // verify the required parameter 'menu' is set
            if (menu == null)
                throw new ApiException(400, "Missing required parameter 'menu' when calling MenusApi->UpdateMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menu != null && menu.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menu); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menu; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMenuAsync (int? menuId, MenuBase menu)
        {
             await UpdateMenuAsyncWithHttpInfo(menuId, menu);

        }

        /// <summary>
        /// Update menu 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="menu">Menu (delta)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMenuAsyncWithHttpInfo (int? menuId, MenuBase menu)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->UpdateMenu");
            // verify the required parameter 'menu' is set
            if (menu == null)
                throw new ApiException(400, "Missing required parameter 'menu' when calling MenusApi->UpdateMenu");

            var localVarPath = "/api/v1.0/menus/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (menu != null && menu.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(menu); // http body (model) parameter
            }
            else
            {
                localVarPostBody = menu; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>RestApiStringResult</returns>
        public RestApiStringResult UploadMenuImage (int? menuId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = UploadMenuImageWithHttpInfo(menuId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>ApiResponse of RestApiStringResult</returns>
        public ApiResponse< RestApiStringResult > UploadMenuImageWithHttpInfo (int? menuId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->UploadMenuImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenusApi->UploadMenuImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

        /// <summary>
        /// Upload menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>Task of RestApiStringResult</returns>
        public async System.Threading.Tasks.Task<RestApiStringResult> UploadMenuImageAsync (int? menuId, System.IO.Stream image)
        {
             ApiResponse<RestApiStringResult> localVarResponse = await UploadMenuImageAsyncWithHttpInfo(menuId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload menu image 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu identifier</param>
        /// <param name="image">Menu image</param>
        /// <returns>Task of ApiResponse (RestApiStringResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiStringResult>> UploadMenuImageAsyncWithHttpInfo (int? menuId, System.IO.Stream image)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->UploadMenuImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MenusApi->UploadMenuImage");

            var localVarPath = "/api/v1.0/menus/{menuId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMenuImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiStringResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiStringResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiStringResult)));
        }

    }
}

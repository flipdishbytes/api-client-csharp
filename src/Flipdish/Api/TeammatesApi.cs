/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeammatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create teammate and send an invite.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>RestApiResultTeammate</returns>
        RestApiResultTeammate CreateTeammate (string appId, CreateTeammate teammate);

        /// <summary>
        /// Create teammate and send an invite.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        ApiResponse<RestApiResultTeammate> CreateTeammateWithHttpInfo (string appId, CreateTeammate teammate);
        /// <summary>
        /// Delete teammate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteTeammate (string appId, string id);

        /// <summary>
        /// Delete teammate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeammateWithHttpInfo (string appId, string id);
        /// <summary>
        /// Get a teammates by email address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>RestApiResultTeammate</returns>
        RestApiResultTeammate GetTeammateByAppIdAndTeammateId (string appId, string id);

        /// <summary>
        /// Get a teammates by email address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        ApiResponse<RestApiResultTeammate> GetTeammateByAppIdAndTeammateIdWithHttpInfo (string appId, string id);
        /// <summary>
        /// Get all teammates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultTeammate</returns>
        RestApiArrayResultTeammate GetTeammatesByAppId (string appId);

        /// <summary>
        /// Get all teammates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultTeammate</returns>
        ApiResponse<RestApiArrayResultTeammate> GetTeammatesByAppIdWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultRedeemInvitationResult</returns>
        RestApiResultRedeemInvitationResult RedeemInvitation (string otc, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultRedeemInvitationResult</returns>
        ApiResponse<RestApiResultRedeemInvitationResult> RedeemInvitationWithHttpInfo (string otc, string appId);
        /// <summary>
        /// Update teammates (this method does not support Deltas!)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>RestApiResultTeammate</returns>
        RestApiResultTeammate UpdateTeammate (string appId, string id, TeammateBase teammate);

        /// <summary>
        /// Update teammates (this method does not support Deltas!)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        ApiResponse<RestApiResultTeammate> UpdateTeammateWithHttpInfo (string appId, string id, TeammateBase teammate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create teammate and send an invite.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        System.Threading.Tasks.Task<RestApiResultTeammate> CreateTeammateAsync (string appId, CreateTeammate teammate);

        /// <summary>
        /// Create teammate and send an invite.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> CreateTeammateAsyncWithHttpInfo (string appId, CreateTeammate teammate);
        /// <summary>
        /// Delete teammate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeammateAsync (string appId, string id);

        /// <summary>
        /// Delete teammate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeammateAsyncWithHttpInfo (string appId, string id);
        /// <summary>
        /// Get a teammates by email address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        System.Threading.Tasks.Task<RestApiResultTeammate> GetTeammateByAppIdAndTeammateIdAsync (string appId, string id);

        /// <summary>
        /// Get a teammates by email address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> GetTeammateByAppIdAndTeammateIdAsyncWithHttpInfo (string appId, string id);
        /// <summary>
        /// Get all teammates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultTeammate</returns>
        System.Threading.Tasks.Task<RestApiArrayResultTeammate> GetTeammatesByAppIdAsync (string appId);

        /// <summary>
        /// Get all teammates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultTeammate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultTeammate>> GetTeammatesByAppIdAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultRedeemInvitationResult</returns>
        System.Threading.Tasks.Task<RestApiResultRedeemInvitationResult> RedeemInvitationAsync (string otc, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRedeemInvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultRedeemInvitationResult>> RedeemInvitationAsyncWithHttpInfo (string otc, string appId);
        /// <summary>
        /// Update teammates (this method does not support Deltas!)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        System.Threading.Tasks.Task<RestApiResultTeammate> UpdateTeammateAsync (string appId, string id, TeammateBase teammate);

        /// <summary>
        /// Update teammates (this method does not support Deltas!)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> UpdateTeammateAsyncWithHttpInfo (string appId, string id, TeammateBase teammate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeammatesApi : ITeammatesApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeammatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeammatesApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeammatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeammatesApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create teammate and send an invite. 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>RestApiResultTeammate</returns>
        public RestApiResultTeammate CreateTeammate (string appId, CreateTeammate teammate)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = CreateTeammateWithHttpInfo(appId, teammate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create teammate and send an invite. 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        public ApiResponse< RestApiResultTeammate > CreateTeammateWithHttpInfo (string appId, CreateTeammate teammate)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->CreateTeammate");
            // verify the required parameter 'teammate' is set
            if (teammate == null)
                throw new ApiException(400, "Missing required parameter 'teammate' when calling TeammatesApi->CreateTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (teammate != null && teammate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teammate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teammate; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

        /// <summary>
        /// Create teammate and send an invite. 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        public async System.Threading.Tasks.Task<RestApiResultTeammate> CreateTeammateAsync (string appId, CreateTeammate teammate)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = await CreateTeammateAsyncWithHttpInfo(appId, teammate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create teammate and send an invite. 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> CreateTeammateAsyncWithHttpInfo (string appId, CreateTeammate teammate)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->CreateTeammate");
            // verify the required parameter 'teammate' is set
            if (teammate == null)
                throw new ApiException(400, "Missing required parameter 'teammate' when calling TeammatesApi->CreateTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (teammate != null && teammate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teammate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teammate; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

        /// <summary>
        /// Delete teammate 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteTeammate (string appId, string id)
        {
             DeleteTeammateWithHttpInfo(appId, id);
        }

        /// <summary>
        /// Delete teammate 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeammateWithHttpInfo (string appId, string id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->DeleteTeammate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->DeleteTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete teammate 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeammateAsync (string appId, string id)
        {
             await DeleteTeammateAsyncWithHttpInfo(appId, id);

        }

        /// <summary>
        /// Delete teammate 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeammateAsyncWithHttpInfo (string appId, string id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->DeleteTeammate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->DeleteTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a teammates by email address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>RestApiResultTeammate</returns>
        public RestApiResultTeammate GetTeammateByAppIdAndTeammateId (string appId, string id)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = GetTeammateByAppIdAndTeammateIdWithHttpInfo(appId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a teammates by email address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        public ApiResponse< RestApiResultTeammate > GetTeammateByAppIdAndTeammateIdWithHttpInfo (string appId, string id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->GetTeammateByAppIdAndTeammateId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->GetTeammateByAppIdAndTeammateId");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeammateByAppIdAndTeammateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

        /// <summary>
        /// Get a teammates by email address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        public async System.Threading.Tasks.Task<RestApiResultTeammate> GetTeammateByAppIdAndTeammateIdAsync (string appId, string id)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = await GetTeammateByAppIdAndTeammateIdAsyncWithHttpInfo(appId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a teammates by email address 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> GetTeammateByAppIdAndTeammateIdAsyncWithHttpInfo (string appId, string id)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->GetTeammateByAppIdAndTeammateId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->GetTeammateByAppIdAndTeammateId");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeammateByAppIdAndTeammateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

        /// <summary>
        /// Get all teammates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiArrayResultTeammate</returns>
        public RestApiArrayResultTeammate GetTeammatesByAppId (string appId)
        {
             ApiResponse<RestApiArrayResultTeammate> localVarResponse = GetTeammatesByAppIdWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all teammates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiArrayResultTeammate</returns>
        public ApiResponse< RestApiArrayResultTeammate > GetTeammatesByAppIdWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->GetTeammatesByAppId");

            var localVarPath = "/api/v1.0/{appId}/teammates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeammatesByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultTeammate)));
        }

        /// <summary>
        /// Get all teammates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiArrayResultTeammate</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultTeammate> GetTeammatesByAppIdAsync (string appId)
        {
             ApiResponse<RestApiArrayResultTeammate> localVarResponse = await GetTeammatesByAppIdAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all teammates 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultTeammate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultTeammate>> GetTeammatesByAppIdAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->GetTeammatesByAppId");

            var localVarPath = "/api/v1.0/{appId}/teammates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeammatesByAppId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultTeammate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>RestApiResultRedeemInvitationResult</returns>
        public RestApiResultRedeemInvitationResult RedeemInvitation (string otc, string appId)
        {
             ApiResponse<RestApiResultRedeemInvitationResult> localVarResponse = RedeemInvitationWithHttpInfo(otc, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultRedeemInvitationResult</returns>
        public ApiResponse< RestApiResultRedeemInvitationResult > RedeemInvitationWithHttpInfo (string otc, string appId)
        {
            // verify the required parameter 'otc' is set
            if (otc == null)
                throw new ApiException(400, "Missing required parameter 'otc' when calling TeammatesApi->RedeemInvitation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->RedeemInvitation");

            var localVarPath = "/api/v1.0/{appId}/teammates/redeem/{otc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otc != null) localVarPathParams.Add("otc", this.Configuration.ApiClient.ParameterToString(otc)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRedeemInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRedeemInvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRedeemInvitationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultRedeemInvitationResult</returns>
        public async System.Threading.Tasks.Task<RestApiResultRedeemInvitationResult> RedeemInvitationAsync (string otc, string appId)
        {
             ApiResponse<RestApiResultRedeemInvitationResult> localVarResponse = await RedeemInvitationAsyncWithHttpInfo(otc, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otc"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultRedeemInvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultRedeemInvitationResult>> RedeemInvitationAsyncWithHttpInfo (string otc, string appId)
        {
            // verify the required parameter 'otc' is set
            if (otc == null)
                throw new ApiException(400, "Missing required parameter 'otc' when calling TeammatesApi->RedeemInvitation");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->RedeemInvitation");

            var localVarPath = "/api/v1.0/{appId}/teammates/redeem/{otc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otc != null) localVarPathParams.Add("otc", this.Configuration.ApiClient.ParameterToString(otc)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultRedeemInvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultRedeemInvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultRedeemInvitationResult)));
        }

        /// <summary>
        /// Update teammates (this method does not support Deltas!) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>RestApiResultTeammate</returns>
        public RestApiResultTeammate UpdateTeammate (string appId, string id, TeammateBase teammate)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = UpdateTeammateWithHttpInfo(appId, id, teammate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update teammates (this method does not support Deltas!) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>ApiResponse of RestApiResultTeammate</returns>
        public ApiResponse< RestApiResultTeammate > UpdateTeammateWithHttpInfo (string appId, string id, TeammateBase teammate)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->UpdateTeammate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->UpdateTeammate");
            // verify the required parameter 'teammate' is set
            if (teammate == null)
                throw new ApiException(400, "Missing required parameter 'teammate' when calling TeammatesApi->UpdateTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (teammate != null && teammate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teammate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teammate; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

        /// <summary>
        /// Update teammates (this method does not support Deltas!) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of RestApiResultTeammate</returns>
        public async System.Threading.Tasks.Task<RestApiResultTeammate> UpdateTeammateAsync (string appId, string id, TeammateBase teammate)
        {
             ApiResponse<RestApiResultTeammate> localVarResponse = await UpdateTeammateAsyncWithHttpInfo(appId, id, teammate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update teammates (this method does not support Deltas!) 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="id"></param>
        /// <param name="teammate"></param>
        /// <returns>Task of ApiResponse (RestApiResultTeammate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultTeammate>> UpdateTeammateAsyncWithHttpInfo (string appId, string id, TeammateBase teammate)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling TeammatesApi->UpdateTeammate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeammatesApi->UpdateTeammate");
            // verify the required parameter 'teammate' is set
            if (teammate == null)
                throw new ApiException(400, "Missing required parameter 'teammate' when calling TeammatesApi->UpdateTeammate");

            var localVarPath = "/api/v1.0/{appId}/teammates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (teammate != null && teammate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teammate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teammate; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeammate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultTeammate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultTeammate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultTeammate)));
        }

    }
}

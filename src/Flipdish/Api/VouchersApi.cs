/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVouchersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API] Create voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        RestApiResultVoucherWithStats CreateVoucher (string appId, CreateVoucher voucher);

        /// <summary>
        /// [PRIVATE API] Create voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        ApiResponse<RestApiResultVoucherWithStats> CreateVoucherWithHttpInfo (string appId, CreateVoucher voucher);
        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        RestApiResultVoucherWithStats GetVoucherById (int? voucherId);

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        ApiResponse<RestApiResultVoucherWithStats> GetVoucherByIdWithHttpInfo (int? voucherId);
        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>RestApiArrayResultVoucherDataPoint</returns>
        RestApiArrayResultVoucherDataPoint GetVoucherStatsById (int? voucherId, string aggregateDataBy, int? dataPointLimit = null);

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultVoucherDataPoint</returns>
        ApiResponse<RestApiArrayResultVoucherDataPoint> GetVoucherStatsByIdWithHttpInfo (int? voucherId, string aggregateDataBy, int? dataPointLimit = null);
        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>RestApiPaginationResultVoucherSummary</returns>
        RestApiPaginationResultVoucherSummary GetVouchers (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null);

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultVoucherSummary</returns>
        ApiResponse<RestApiPaginationResultVoucherSummary> GetVouchersWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null);
        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        RestApiResultVoucherWithStats UpdateVoucher (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null);

        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        ApiResponse<RestApiResultVoucherWithStats> UpdateVoucherWithHttpInfo (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API] Create voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        System.Threading.Tasks.Task<RestApiResultVoucherWithStats> CreateVoucherAsync (string appId, CreateVoucher voucher);

        /// <summary>
        /// [PRIVATE API] Create voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> CreateVoucherAsyncWithHttpInfo (string appId, CreateVoucher voucher);
        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        System.Threading.Tasks.Task<RestApiResultVoucherWithStats> GetVoucherByIdAsync (int? voucherId);

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> GetVoucherByIdAsyncWithHttpInfo (int? voucherId);
        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>Task of RestApiArrayResultVoucherDataPoint</returns>
        System.Threading.Tasks.Task<RestApiArrayResultVoucherDataPoint> GetVoucherStatsByIdAsync (int? voucherId, string aggregateDataBy, int? dataPointLimit = null);

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultVoucherDataPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultVoucherDataPoint>> GetVoucherStatsByIdAsyncWithHttpInfo (int? voucherId, string aggregateDataBy, int? dataPointLimit = null);
        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>Task of RestApiPaginationResultVoucherSummary</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultVoucherSummary> GetVouchersAsync (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null);

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultVoucherSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultVoucherSummary>> GetVouchersAsyncWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null);
        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        System.Threading.Tasks.Task<RestApiResultVoucherWithStats> UpdateVoucherAsync (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null);

        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> UpdateVoucherAsyncWithHttpInfo (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VouchersApi : IVouchersApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VouchersApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VouchersApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API] Create voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        public RestApiResultVoucherWithStats CreateVoucher (string appId, CreateVoucher voucher)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = CreateVoucherWithHttpInfo(appId, voucher);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Create voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        public ApiResponse< RestApiResultVoucherWithStats > CreateVoucherWithHttpInfo (string appId, CreateVoucher voucher)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->CreateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->CreateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Create voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        public async System.Threading.Tasks.Task<RestApiResultVoucherWithStats> CreateVoucherAsync (string appId, CreateVoucher voucher)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = await CreateVoucherAsyncWithHttpInfo(appId, voucher);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Create voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">App Name Id</param>
        /// <param name="voucher">Voucher Details</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> CreateVoucherAsyncWithHttpInfo (string appId, CreateVoucher voucher)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->CreateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->CreateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        public RestApiResultVoucherWithStats GetVoucherById (int? voucherId)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = GetVoucherByIdWithHttpInfo(voucherId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        public ApiResponse< RestApiResultVoucherWithStats > GetVoucherByIdWithHttpInfo (int? voucherId)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherById");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        public async System.Threading.Tasks.Task<RestApiResultVoucherWithStats> GetVoucherByIdAsync (int? voucherId)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = await GetVoucherByIdAsyncWithHttpInfo(voucherId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> GetVoucherByIdAsyncWithHttpInfo (int? voucherId)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherById");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>RestApiArrayResultVoucherDataPoint</returns>
        public RestApiArrayResultVoucherDataPoint GetVoucherStatsById (int? voucherId, string aggregateDataBy, int? dataPointLimit = null)
        {
             ApiResponse<RestApiArrayResultVoucherDataPoint> localVarResponse = GetVoucherStatsByIdWithHttpInfo(voucherId, aggregateDataBy, dataPointLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>ApiResponse of RestApiArrayResultVoucherDataPoint</returns>
        public ApiResponse< RestApiArrayResultVoucherDataPoint > GetVoucherStatsByIdWithHttpInfo (int? voucherId, string aggregateDataBy, int? dataPointLimit = null)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherStatsById");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling VouchersApi->GetVoucherStatsById");

            var localVarPath = "/api/v1.0/vouchers/stats/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (aggregateDataBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregateDataBy", aggregateDataBy)); // query parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherStatsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultVoucherDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultVoucherDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultVoucherDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>Task of RestApiArrayResultVoucherDataPoint</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultVoucherDataPoint> GetVoucherStatsByIdAsync (int? voucherId, string aggregateDataBy, int? dataPointLimit = null)
        {
             ApiResponse<RestApiArrayResultVoucherDataPoint> localVarResponse = await GetVoucherStatsByIdAsyncWithHttpInfo(voucherId, aggregateDataBy, dataPointLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get voucher stats by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="aggregateDataBy">Aggregate data by day \\ week \\ month</param>
        /// <param name="dataPointLimit">Amount of data points per request (optional)</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultVoucherDataPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultVoucherDataPoint>> GetVoucherStatsByIdAsyncWithHttpInfo (int? voucherId, string aggregateDataBy, int? dataPointLimit = null)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherStatsById");
            // verify the required parameter 'aggregateDataBy' is set
            if (aggregateDataBy == null)
                throw new ApiException(400, "Missing required parameter 'aggregateDataBy' when calling VouchersApi->GetVoucherStatsById");

            var localVarPath = "/api/v1.0/vouchers/stats/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (aggregateDataBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregateDataBy", aggregateDataBy)); // query parameter
            if (dataPointLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataPointLimit", dataPointLimit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherStatsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultVoucherDataPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultVoucherDataPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultVoucherDataPoint)));
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>RestApiPaginationResultVoucherSummary</returns>
        public RestApiPaginationResultVoucherSummary GetVouchers (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultVoucherSummary> localVarResponse = GetVouchersWithHttpInfo(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultVoucherSummary</returns>
        public ApiResponse< RestApiPaginationResultVoucherSummary > GetVouchersWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->GetVouchers");

            var localVarPath = "/api/v1.0/{appId}/vouchers/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchCodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "searchCodes", searchCodes)); // query parameter
            if (statusSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusSearch", statusSearch)); // query parameter
            if (typeSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "typeSearch", typeSearch)); // query parameter
            if (subTypeSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subTypeSearch", subTypeSearch)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVouchers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultVoucherSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultVoucherSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultVoucherSummary)));
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>Task of RestApiPaginationResultVoucherSummary</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultVoucherSummary> GetVouchersAsync (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultVoucherSummary> localVarResponse = await GetVouchersAsyncWithHttpInfo(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get vouchers summaries for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application Id</param>
        /// <param name="pageIndex">Page Number (optional)</param>
        /// <param name="pageSize">Page Size (optional)</param>
        /// <param name="searchCodes">Search by Voucher Code\\s (optional)</param>
        /// <param name="statusSearch">Search by Status (optional)</param>
        /// <param name="typeSearch">Search by Type (optional)</param>
        /// <param name="subTypeSearch">Search by Sub Type (optional)</param>
        /// <param name="storeIds">Search by Store Ids (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultVoucherSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultVoucherSummary>> GetVouchersAsyncWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<string> subTypeSearch = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->GetVouchers");

            var localVarPath = "/api/v1.0/{appId}/vouchers/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchCodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "searchCodes", searchCodes)); // query parameter
            if (statusSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusSearch", statusSearch)); // query parameter
            if (typeSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "typeSearch", typeSearch)); // query parameter
            if (subTypeSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subTypeSearch", subTypeSearch)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVouchers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultVoucherSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultVoucherSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultVoucherSummary)));
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        public RestApiResultVoucherWithStats UpdateVoucher (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = UpdateVoucherWithHttpInfo(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        public ApiResponse< RestApiResultVoucherWithStats > UpdateVoucherWithHttpInfo (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->UpdateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->UpdateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (percentValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentValue", percentValue)); // query parameter
            if (lumpValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lumpValue", lumpValue)); // query parameter
            if (freeItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "freeItemId", freeItemId)); // query parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        public async System.Threading.Tasks.Task<RestApiResultVoucherWithStats> UpdateVoucherAsync (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = await UpdateVoucherAsyncWithHttpInfo(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId">Id of the voucher</param>
        /// <param name="voucher">Updated details for the voucher</param>
        /// <param name="storeId"> (optional)</param>
        /// <param name="percentValue">Percent voucher value (can have 1 of 3) (optional)</param>
        /// <param name="lumpValue">Lump voucher value (can have 1 of 3) (optional)</param>
        /// <param name="freeItemId">Free Item Id (can have 1 of 3) (optional)</param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> UpdateVoucherAsyncWithHttpInfo (int? voucherId, VoucherBase voucher, List<int?> storeId = null, int? percentValue = null, double? lumpValue = null, int? freeItemId = null)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->UpdateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->UpdateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", this.Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeId", storeId)); // query parameter
            if (percentValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentValue", percentValue)); // query parameter
            if (lumpValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lumpValue", lumpValue)); // query parameter
            if (freeItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "freeItemId", freeItemId)); // query parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

    }
}

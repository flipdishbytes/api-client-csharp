/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVouchersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        RestApiResultVoucherWithStats GetVoucherById (int? voucherId);

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        ApiResponse<RestApiResultVoucherWithStats> GetVoucherByIdWithHttpInfo (int? voucherId);
        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultVoucher</returns>
        RestApiPaginationResultVoucher GetVouchers (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null);

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultVoucher</returns>
        ApiResponse<RestApiPaginationResultVoucher> GetVouchersWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null);
        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>RestApiResultVoucher</returns>
        RestApiResultVoucher UpdateVoucher (int? voucherId, VoucherBase voucher);

        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>ApiResponse of RestApiResultVoucher</returns>
        ApiResponse<RestApiResultVoucher> UpdateVoucherWithHttpInfo (int? voucherId, VoucherBase voucher);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        System.Threading.Tasks.Task<RestApiResultVoucherWithStats> GetVoucherByIdAsync (int? voucherId);

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> GetVoucherByIdAsyncWithHttpInfo (int? voucherId);
        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultVoucher</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultVoucher> GetVouchersAsync (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null);

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultVoucher)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultVoucher>> GetVouchersAsyncWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null);
        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>Task of RestApiResultVoucher</returns>
        System.Threading.Tasks.Task<RestApiResultVoucher> UpdateVoucherAsync (int? voucherId, VoucherBase voucher);

        /// <summary>
        /// [PRIVATE API] Updates voucher
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>Task of ApiResponse (RestApiResultVoucher)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucher>> UpdateVoucherAsyncWithHttpInfo (int? voucherId, VoucherBase voucher);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VouchersApi : IVouchersApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VouchersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VouchersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>RestApiResultVoucherWithStats</returns>
        public RestApiResultVoucherWithStats GetVoucherById (int? voucherId)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = GetVoucherByIdWithHttpInfo(voucherId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>ApiResponse of RestApiResultVoucherWithStats</returns>
        public ApiResponse< RestApiResultVoucherWithStats > GetVoucherByIdWithHttpInfo (int? voucherId)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherById");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", Configuration.ApiClient.ParameterToString(voucherId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>Task of RestApiResultVoucherWithStats</returns>
        public async System.Threading.Tasks.Task<RestApiResultVoucherWithStats> GetVoucherByIdAsync (int? voucherId)
        {
             ApiResponse<RestApiResultVoucherWithStats> localVarResponse = await GetVoucherByIdAsyncWithHttpInfo(voucherId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get voucher by identifier 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>Task of ApiResponse (RestApiResultVoucherWithStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucherWithStats>> GetVoucherByIdAsyncWithHttpInfo (int? voucherId)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->GetVoucherById");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", Configuration.ApiClient.ParameterToString(voucherId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVoucherById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucherWithStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucherWithStats) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucherWithStats)));
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>RestApiPaginationResultVoucher</returns>
        public RestApiPaginationResultVoucher GetVouchers (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultVoucher> localVarResponse = GetVouchersWithHttpInfo(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, storeIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultVoucher</returns>
        public ApiResponse< RestApiPaginationResultVoucher > GetVouchersWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->GetVouchers");

            var localVarPath = "/api/v1.0/{appId}/vouchers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchCodes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "searchCodes", searchCodes)); // query parameter
            if (statusSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusSearch", statusSearch)); // query parameter
            if (typeSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "typeSearch", typeSearch)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVouchers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultVoucher>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultVoucher) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultVoucher)));
        }

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultVoucher</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultVoucher> GetVouchersAsync (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null)
        {
             ApiResponse<RestApiPaginationResultVoucher> localVarResponse = await GetVouchersAsyncWithHttpInfo(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, storeIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Get vouchers for App Id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="pageIndex"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchCodes"> (optional)</param>
        /// <param name="statusSearch"> (optional)</param>
        /// <param name="typeSearch"> (optional)</param>
        /// <param name="storeIds"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultVoucher)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultVoucher>> GetVouchersAsyncWithHttpInfo (string appId, int? pageIndex = null, int? pageSize = null, List<string> searchCodes = null, List<string> statusSearch = null, List<string> typeSearch = null, List<int?> storeIds = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling VouchersApi->GetVouchers");

            var localVarPath = "/api/v1.0/{appId}/vouchers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchCodes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "searchCodes", searchCodes)); // query parameter
            if (statusSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "statusSearch", statusSearch)); // query parameter
            if (typeSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "typeSearch", typeSearch)); // query parameter
            if (storeIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIds", storeIds)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVouchers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultVoucher>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultVoucher) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultVoucher)));
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>RestApiResultVoucher</returns>
        public RestApiResultVoucher UpdateVoucher (int? voucherId, VoucherBase voucher)
        {
             ApiResponse<RestApiResultVoucher> localVarResponse = UpdateVoucherWithHttpInfo(voucherId, voucher);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>ApiResponse of RestApiResultVoucher</returns>
        public ApiResponse< RestApiResultVoucher > UpdateVoucherWithHttpInfo (int? voucherId, VoucherBase voucher)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->UpdateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->UpdateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucher>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucher) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucher)));
        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>Task of RestApiResultVoucher</returns>
        public async System.Threading.Tasks.Task<RestApiResultVoucher> UpdateVoucherAsync (int? voucherId, VoucherBase voucher)
        {
             ApiResponse<RestApiResultVoucher> localVarResponse = await UpdateVoucherAsyncWithHttpInfo(voucherId, voucher);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Updates voucher 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="voucher"></param>
        /// <returns>Task of ApiResponse (RestApiResultVoucher)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultVoucher>> UpdateVoucherAsyncWithHttpInfo (int? voucherId, VoucherBase voucher)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->UpdateVoucher");
            // verify the required parameter 'voucher' is set
            if (voucher == null)
                throw new ApiException(400, "Missing required parameter 'voucher' when calling VouchersApi->UpdateVoucher");

            var localVarPath = "/api/v1.0/vouchers/{voucherId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voucherId != null) localVarPathParams.Add("voucherId", Configuration.ApiClient.ParameterToString(voucherId)); // path parameter
            if (voucher != null && voucher.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(voucher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voucher; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVoucher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultVoucher>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultVoucher) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultVoucher)));
        }

    }
}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetafieldDefinitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        RestApiResultMetafieldDefinition CreateMetafieldDefinition (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        ApiResponse<RestApiResultMetafieldDefinition> CreateMetafieldDefinitionWithHttpInfo (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        RestApiResultMetafieldDefinition GetMetafieldDefinitionByKey (string appId, string ownerEntity, string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        ApiResponse<RestApiResultMetafieldDefinition> GetMetafieldDefinitionByKeyWithHttpInfo (string appId, string ownerEntity, string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultMetafieldDefinition</returns>
        RestApiPaginationResultMetafieldDefinition GetMetafieldDefinitions (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultMetafieldDefinition</returns>
        ApiResponse<RestApiPaginationResultMetafieldDefinition> GetMetafieldDefinitionsWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>OwnerEntityConfigurations</returns>
        OwnerEntityConfigurations GetOwnerEntityConfigurations (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of OwnerEntityConfigurations</returns>
        ApiResponse<OwnerEntityConfigurations> GetOwnerEntityConfigurationsWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        RestApiPaginationResultMetafieldDefinitionRecommendation GetOwnerEntityRecommendations (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation> GetOwnerEntityRecommendationsWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        RestApiResultMetafieldDefinition UpdateMetafieldDefinition (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        ApiResponse<RestApiResultMetafieldDefinition> UpdateMetafieldDefinitionWithHttpInfo (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> CreateMetafieldDefinitionAsync (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> CreateMetafieldDefinitionAsyncWithHttpInfo (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> GetMetafieldDefinitionByKeyAsync (string appId, string ownerEntity, string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> GetMetafieldDefinitionByKeyAsyncWithHttpInfo (string appId, string ownerEntity, string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultMetafieldDefinition</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultMetafieldDefinition> GetMetafieldDefinitionsAsync (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultMetafieldDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultMetafieldDefinition>> GetMetafieldDefinitionsAsyncWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of OwnerEntityConfigurations</returns>
        System.Threading.Tasks.Task<OwnerEntityConfigurations> GetOwnerEntityConfigurationsAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (OwnerEntityConfigurations)</returns>
        System.Threading.Tasks.Task<ApiResponse<OwnerEntityConfigurations>> GetOwnerEntityConfigurationsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultMetafieldDefinitionRecommendation> GetOwnerEntityRecommendationsAsync (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultMetafieldDefinitionRecommendation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation>> GetOwnerEntityRecommendationsAsyncWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> UpdateMetafieldDefinitionAsync (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> UpdateMetafieldDefinitionAsyncWithHttpInfo (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetafieldDefinitionsApi : IMetafieldDefinitionsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetafieldDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetafieldDefinitionsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetafieldDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetafieldDefinitionsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        public RestApiResultMetafieldDefinition CreateMetafieldDefinition (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = CreateMetafieldDefinitionWithHttpInfo(appId, ownerEntity, createMetafieldDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        public ApiResponse< RestApiResultMetafieldDefinition > CreateMetafieldDefinitionWithHttpInfo (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");
            // verify the required parameter 'createMetafieldDefinition' is set
            if (createMetafieldDefinition == null)
                throw new ApiException(400, "Missing required parameter 'createMetafieldDefinition' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (createMetafieldDefinition != null && createMetafieldDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMetafieldDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMetafieldDefinition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMetafieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        public async System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> CreateMetafieldDefinitionAsync (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = await CreateMetafieldDefinitionAsyncWithHttpInfo(appId, ownerEntity, createMetafieldDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="createMetafieldDefinition"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> CreateMetafieldDefinitionAsyncWithHttpInfo (string appId, string ownerEntity, CreateMetafieldDefinition createMetafieldDefinition)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");
            // verify the required parameter 'createMetafieldDefinition' is set
            if (createMetafieldDefinition == null)
                throw new ApiException(400, "Missing required parameter 'createMetafieldDefinition' when calling MetafieldDefinitionsApi->CreateMetafieldDefinition");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (createMetafieldDefinition != null && createMetafieldDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createMetafieldDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createMetafieldDefinition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMetafieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        public RestApiResultMetafieldDefinition GetMetafieldDefinitionByKey (string appId, string ownerEntity, string key)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = GetMetafieldDefinitionByKeyWithHttpInfo(appId, ownerEntity, key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        public ApiResponse< RestApiResultMetafieldDefinition > GetMetafieldDefinitionByKeyWithHttpInfo (string appId, string ownerEntity, string key)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetafieldDefinitionByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        public async System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> GetMetafieldDefinitionByKeyAsync (string appId, string ownerEntity, string key)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = await GetMetafieldDefinitionByKeyAsyncWithHttpInfo(appId, ownerEntity, key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> GetMetafieldDefinitionByKeyAsyncWithHttpInfo (string appId, string ownerEntity, string key)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetafieldDefinitionsApi->GetMetafieldDefinitionByKey");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetafieldDefinitionByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultMetafieldDefinition</returns>
        public RestApiPaginationResultMetafieldDefinition GetMetafieldDefinitions (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultMetafieldDefinition> localVarResponse = GetMetafieldDefinitionsWithHttpInfo(appId, ownerEntity, searchTerm, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultMetafieldDefinition</returns>
        public ApiResponse< RestApiPaginationResultMetafieldDefinition > GetMetafieldDefinitionsWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetMetafieldDefinitions");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetMetafieldDefinitions");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetafieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultMetafieldDefinition</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultMetafieldDefinition> GetMetafieldDefinitionsAsync (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultMetafieldDefinition> localVarResponse = await GetMetafieldDefinitionsAsyncWithHttpInfo(appId, ownerEntity, searchTerm, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultMetafieldDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultMetafieldDefinition>> GetMetafieldDefinitionsAsyncWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetMetafieldDefinitions");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetMetafieldDefinitions");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetafieldDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>OwnerEntityConfigurations</returns>
        public OwnerEntityConfigurations GetOwnerEntityConfigurations (string appId)
        {
             ApiResponse<OwnerEntityConfigurations> localVarResponse = GetOwnerEntityConfigurationsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of OwnerEntityConfigurations</returns>
        public ApiResponse< OwnerEntityConfigurations > GetOwnerEntityConfigurationsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetOwnerEntityConfigurations");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnerEntityConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OwnerEntityConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OwnerEntityConfigurations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OwnerEntityConfigurations)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of OwnerEntityConfigurations</returns>
        public async System.Threading.Tasks.Task<OwnerEntityConfigurations> GetOwnerEntityConfigurationsAsync (string appId)
        {
             ApiResponse<OwnerEntityConfigurations> localVarResponse = await GetOwnerEntityConfigurationsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (OwnerEntityConfigurations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OwnerEntityConfigurations>> GetOwnerEntityConfigurationsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetOwnerEntityConfigurations");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnerEntityConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OwnerEntityConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OwnerEntityConfigurations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OwnerEntityConfigurations)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        public RestApiPaginationResultMetafieldDefinitionRecommendation GetOwnerEntityRecommendations (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation> localVarResponse = GetOwnerEntityRecommendationsWithHttpInfo(appId, ownerEntity, searchTerm, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        public ApiResponse< RestApiPaginationResultMetafieldDefinitionRecommendation > GetOwnerEntityRecommendationsWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetOwnerEntityRecommendations");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetOwnerEntityRecommendations");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/recommendations/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnerEntityRecommendations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultMetafieldDefinitionRecommendation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultMetafieldDefinitionRecommendation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultMetafieldDefinitionRecommendation</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultMetafieldDefinitionRecommendation> GetOwnerEntityRecommendationsAsync (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation> localVarResponse = await GetOwnerEntityRecommendationsAsyncWithHttpInfo(appId, ownerEntity, searchTerm, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultMetafieldDefinitionRecommendation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation>> GetOwnerEntityRecommendationsAsyncWithHttpInfo (string appId, string ownerEntity, string searchTerm = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->GetOwnerEntityRecommendations");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->GetOwnerEntityRecommendations");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/recommendations/{ownerEntity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnerEntityRecommendations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultMetafieldDefinitionRecommendation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiPaginationResultMetafieldDefinitionRecommendation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultMetafieldDefinitionRecommendation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>RestApiResultMetafieldDefinition</returns>
        public RestApiResultMetafieldDefinition UpdateMetafieldDefinition (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = UpdateMetafieldDefinitionWithHttpInfo(appId, ownerEntity, key, updateMetafieldDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>ApiResponse of RestApiResultMetafieldDefinition</returns>
        public ApiResponse< RestApiResultMetafieldDefinition > UpdateMetafieldDefinitionWithHttpInfo (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'updateMetafieldDefinition' is set
            if (updateMetafieldDefinition == null)
                throw new ApiException(400, "Missing required parameter 'updateMetafieldDefinition' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (updateMetafieldDefinition != null && updateMetafieldDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMetafieldDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMetafieldDefinition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMetafieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>Task of RestApiResultMetafieldDefinition</returns>
        public async System.Threading.Tasks.Task<RestApiResultMetafieldDefinition> UpdateMetafieldDefinitionAsync (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition)
        {
             ApiResponse<RestApiResultMetafieldDefinition> localVarResponse = await UpdateMetafieldDefinitionAsyncWithHttpInfo(appId, ownerEntity, key, updateMetafieldDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="ownerEntity"></param>
        /// <param name="key"></param>
        /// <param name="updateMetafieldDefinition"></param>
        /// <returns>Task of ApiResponse (RestApiResultMetafieldDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMetafieldDefinition>> UpdateMetafieldDefinitionAsyncWithHttpInfo (string appId, string ownerEntity, string key, UpdateMetafieldDefinition updateMetafieldDefinition)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'ownerEntity' is set
            if (ownerEntity == null)
                throw new ApiException(400, "Missing required parameter 'ownerEntity' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");
            // verify the required parameter 'updateMetafieldDefinition' is set
            if (updateMetafieldDefinition == null)
                throw new ApiException(400, "Missing required parameter 'updateMetafieldDefinition' when calling MetafieldDefinitionsApi->UpdateMetafieldDefinition");

            var localVarPath = "./api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (ownerEntity != null) localVarPathParams.Add("ownerEntity", this.Configuration.ApiClient.ParameterToString(ownerEntity)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (updateMetafieldDefinition != null && updateMetafieldDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMetafieldDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMetafieldDefinition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMetafieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMetafieldDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMetafieldDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMetafieldDefinition)));
        }

    }
}

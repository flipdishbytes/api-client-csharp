/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoreGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>RestApiResultStoreGroup</returns>
        RestApiResultStoreGroup CreateStoreGroup (string appNameId, StoreGroupBase storeGroup);

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>ApiResponse of RestApiResultStoreGroup</returns>
        ApiResponse<RestApiResultStoreGroup> CreateStoreGroupWithHttpInfo (string appNameId, StoreGroupBase storeGroup);
        /// <summary>
        /// Returns a Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>RestApiResultStoreGroup</returns>
        RestApiResultStoreGroup GetStoreGroup (int? storeGroupId);

        /// <summary>
        /// Returns a Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>ApiResponse of RestApiResultStoreGroup</returns>
        ApiResponse<RestApiResultStoreGroup> GetStoreGroupWithHttpInfo (int? storeGroupId);
        /// <summary>
        /// Returns a paginated list of Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>RestApiPaginationResultStoreGroup</returns>
        RestApiPaginationResultStoreGroup GetStoreGroups (string appNameId, string searchQuery = null, int? page = null, int? limit = null);

        /// <summary>
        /// Returns a paginated list of Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreGroup</returns>
        ApiResponse<RestApiPaginationResultStoreGroup> GetStoreGroupsWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null);
        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreGroupExtended</returns>
        RestApiPaginationResultStoreGroupExtended GetStoreGroupsExtended (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null);

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreGroupExtended</returns>
        ApiResponse<RestApiPaginationResultStoreGroupExtended> GetStoreGroupsExtendedWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null);
        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns></returns>
        void RemoveStoreGroup (int? storeGroupId);

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveStoreGroupWithHttpInfo (int? storeGroupId);
        /// <summary>
        /// Updates Store Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>RestApiResultStoreGroupBase</returns>
        RestApiResultStoreGroupBase UpdateStoreGroup (int? storeGroupId, StoreGroupBase storeGroup);

        /// <summary>
        /// Updates Store Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>ApiResponse of RestApiResultStoreGroupBase</returns>
        ApiResponse<RestApiResultStoreGroupBase> UpdateStoreGroupWithHttpInfo (int? storeGroupId, StoreGroupBase storeGroup);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>Task of RestApiResultStoreGroup</returns>
        System.Threading.Tasks.Task<RestApiResultStoreGroup> CreateStoreGroupAsync (string appNameId, StoreGroupBase storeGroup);

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroup>> CreateStoreGroupAsyncWithHttpInfo (string appNameId, StoreGroupBase storeGroup);
        /// <summary>
        /// Returns a Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of RestApiResultStoreGroup</returns>
        System.Threading.Tasks.Task<RestApiResultStoreGroup> GetStoreGroupAsync (int? storeGroupId);

        /// <summary>
        /// Returns a Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroup>> GetStoreGroupAsyncWithHttpInfo (int? storeGroupId);
        /// <summary>
        /// Returns a paginated list of Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreGroup</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStoreGroup> GetStoreGroupsAsync (string appNameId, string searchQuery = null, int? page = null, int? limit = null);

        /// <summary>
        /// Returns a paginated list of Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreGroup>> GetStoreGroupsAsyncWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null);
        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreGroupExtended</returns>
        System.Threading.Tasks.Task<RestApiPaginationResultStoreGroupExtended> GetStoreGroupsExtendedAsync (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null);

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreGroupExtended)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreGroupExtended>> GetStoreGroupsExtendedAsyncWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null);
        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveStoreGroupAsync (int? storeGroupId);

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveStoreGroupAsyncWithHttpInfo (int? storeGroupId);
        /// <summary>
        /// Updates Store Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>Task of RestApiResultStoreGroupBase</returns>
        System.Threading.Tasks.Task<RestApiResultStoreGroupBase> UpdateStoreGroupAsync (int? storeGroupId, StoreGroupBase storeGroup);

        /// <summary>
        /// Updates Store Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroupBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroupBase>> UpdateStoreGroupAsyncWithHttpInfo (int? storeGroupId, StoreGroupBase storeGroup);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoreGroupsApi : IStoreGroupsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoreGroupsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoreGroupsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>RestApiResultStoreGroup</returns>
        public RestApiResultStoreGroup CreateStoreGroup (string appNameId, StoreGroupBase storeGroup)
        {
             ApiResponse<RestApiResultStoreGroup> localVarResponse = CreateStoreGroupWithHttpInfo(appNameId, storeGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>ApiResponse of RestApiResultStoreGroup</returns>
        public ApiResponse< RestApiResultStoreGroup > CreateStoreGroupWithHttpInfo (string appNameId, StoreGroupBase storeGroup)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->CreateStoreGroup");
            // verify the required parameter 'storeGroup' is set
            if (storeGroup == null)
                throw new ApiException(400, "Missing required parameter 'storeGroup' when calling StoreGroupsApi->CreateStoreGroup");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (storeGroup != null && storeGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroup)));
        }

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>Task of RestApiResultStoreGroup</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreGroup> CreateStoreGroupAsync (string appNameId, StoreGroupBase storeGroup)
        {
             ApiResponse<RestApiResultStoreGroup> localVarResponse = await CreateStoreGroupAsyncWithHttpInfo(appNameId, storeGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Store Group  It will be attached to an existing App 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="storeGroup">Store group definition</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroup>> CreateStoreGroupAsyncWithHttpInfo (string appNameId, StoreGroupBase storeGroup)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->CreateStoreGroup");
            // verify the required parameter 'storeGroup' is set
            if (storeGroup == null)
                throw new ApiException(400, "Missing required parameter 'storeGroup' when calling StoreGroupsApi->CreateStoreGroup");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (storeGroup != null && storeGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroup)));
        }

        /// <summary>
        /// Returns a Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>RestApiResultStoreGroup</returns>
        public RestApiResultStoreGroup GetStoreGroup (int? storeGroupId)
        {
             ApiResponse<RestApiResultStoreGroup> localVarResponse = GetStoreGroupWithHttpInfo(storeGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>ApiResponse of RestApiResultStoreGroup</returns>
        public ApiResponse< RestApiResultStoreGroup > GetStoreGroupWithHttpInfo (int? storeGroupId)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->GetStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroup)));
        }

        /// <summary>
        /// Returns a Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of RestApiResultStoreGroup</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreGroup> GetStoreGroupAsync (int? storeGroupId)
        {
             ApiResponse<RestApiResultStoreGroup> localVarResponse = await GetStoreGroupAsyncWithHttpInfo(storeGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroup>> GetStoreGroupAsyncWithHttpInfo (int? storeGroupId)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->GetStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroup)));
        }

        /// <summary>
        /// Returns a paginated list of Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>RestApiPaginationResultStoreGroup</returns>
        public RestApiPaginationResultStoreGroup GetStoreGroups (string appNameId, string searchQuery = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreGroup> localVarResponse = GetStoreGroupsWithHttpInfo(appNameId, searchQuery, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a paginated list of Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreGroup</returns>
        public ApiResponse< RestApiPaginationResultStoreGroup > GetStoreGroupsWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->GetStoreGroups");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreGroup)));
        }

        /// <summary>
        /// Returns a paginated list of Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreGroup</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStoreGroup> GetStoreGroupsAsync (string appNameId, string searchQuery = null, int? page = null, int? limit = null)
        {
             ApiResponse<RestApiPaginationResultStoreGroup> localVarResponse = await GetStoreGroupsAsyncWithHttpInfo(appNameId, searchQuery, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a paginated list of Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreGroup>> GetStoreGroupsAsyncWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->GetStoreGroups");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStoreGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreGroup)));
        }

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>RestApiPaginationResultStoreGroupExtended</returns>
        public RestApiPaginationResultStoreGroupExtended GetStoreGroupsExtended (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null)
        {
             ApiResponse<RestApiPaginationResultStoreGroupExtended> localVarResponse = GetStoreGroupsExtendedWithHttpInfo(appNameId, searchQuery, page, limit, groupingRadius);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>ApiResponse of RestApiPaginationResultStoreGroupExtended</returns>
        public ApiResponse< RestApiPaginationResultStoreGroupExtended > GetStoreGroupsExtendedWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->GetStoreGroupsExtended");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups/extended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (groupingRadius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupingRadius", groupingRadius)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroupsExtended", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreGroupExtended>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStoreGroupExtended) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreGroupExtended)));
        }

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>Task of RestApiPaginationResultStoreGroupExtended</returns>
        public async System.Threading.Tasks.Task<RestApiPaginationResultStoreGroupExtended> GetStoreGroupsExtendedAsync (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null)
        {
             ApiResponse<RestApiPaginationResultStoreGroupExtended> localVarResponse = await GetStoreGroupsExtendedAsyncWithHttpInfo(appNameId, searchQuery, page, limit, groupingRadius);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [PRIVATE API] Returns a paginated list of Extended Store Groups 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appNameId">App Name Id</param>
        /// <param name="searchQuery">Search query (optional)</param>
        /// <param name="page">Requested page index (optional)</param>
        /// <param name="limit">Requested page limit (optional)</param>
        /// <param name="groupingRadius"> (optional)</param>
        /// <returns>Task of ApiResponse (RestApiPaginationResultStoreGroupExtended)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiPaginationResultStoreGroupExtended>> GetStoreGroupsExtendedAsyncWithHttpInfo (string appNameId, string searchQuery = null, int? page = null, int? limit = null, int? groupingRadius = null)
        {
            // verify the required parameter 'appNameId' is set
            if (appNameId == null)
                throw new ApiException(400, "Missing required parameter 'appNameId' when calling StoreGroupsApi->GetStoreGroupsExtended");

            var localVarPath = "/api/v1.0/{appNameId}/storegroups/extended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appNameId != null) localVarPathParams.Add("appNameId", this.Configuration.ApiClient.ParameterToString(appNameId)); // path parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchQuery", searchQuery)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (groupingRadius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupingRadius", groupingRadius)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreGroupsExtended", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiPaginationResultStoreGroupExtended>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiPaginationResultStoreGroupExtended) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiPaginationResultStoreGroupExtended)));
        }

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns></returns>
        public void RemoveStoreGroup (int? storeGroupId)
        {
             RemoveStoreGroupWithHttpInfo(storeGroupId);
        }

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveStoreGroupWithHttpInfo (int? storeGroupId)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->RemoveStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveStoreGroupAsync (int? storeGroupId)
        {
             await RemoveStoreGroupAsyncWithHttpInfo(storeGroupId);

        }

        /// <summary>
        /// Deletes a Store Group  Can only remove a store group if there is no stores attached to the group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveStoreGroupAsyncWithHttpInfo (int? storeGroupId)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->RemoveStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates Store Group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>RestApiResultStoreGroupBase</returns>
        public RestApiResultStoreGroupBase UpdateStoreGroup (int? storeGroupId, StoreGroupBase storeGroup)
        {
             ApiResponse<RestApiResultStoreGroupBase> localVarResponse = UpdateStoreGroupWithHttpInfo(storeGroupId, storeGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates Store Group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>ApiResponse of RestApiResultStoreGroupBase</returns>
        public ApiResponse< RestApiResultStoreGroupBase > UpdateStoreGroupWithHttpInfo (int? storeGroupId, StoreGroupBase storeGroup)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->UpdateStoreGroup");
            // verify the required parameter 'storeGroup' is set
            if (storeGroup == null)
                throw new ApiException(400, "Missing required parameter 'storeGroup' when calling StoreGroupsApi->UpdateStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter
            if (storeGroup != null && storeGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroupBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroupBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroupBase)));
        }

        /// <summary>
        /// Updates Store Group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>Task of RestApiResultStoreGroupBase</returns>
        public async System.Threading.Tasks.Task<RestApiResultStoreGroupBase> UpdateStoreGroupAsync (int? storeGroupId, StoreGroupBase storeGroup)
        {
             ApiResponse<RestApiResultStoreGroupBase> localVarResponse = await UpdateStoreGroupAsyncWithHttpInfo(storeGroupId, storeGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates Store Group 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeGroupId">Store Group Id</param>
        /// <param name="storeGroup">Store Group Delta</param>
        /// <returns>Task of ApiResponse (RestApiResultStoreGroupBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultStoreGroupBase>> UpdateStoreGroupAsyncWithHttpInfo (int? storeGroupId, StoreGroupBase storeGroup)
        {
            // verify the required parameter 'storeGroupId' is set
            if (storeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'storeGroupId' when calling StoreGroupsApi->UpdateStoreGroup");
            // verify the required parameter 'storeGroup' is set
            if (storeGroup == null)
                throw new ApiException(400, "Missing required parameter 'storeGroup' when calling StoreGroupsApi->UpdateStoreGroup");

            var localVarPath = "/api/v1.0/storegroups/{storeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeGroupId != null) localVarPathParams.Add("storeGroupId", this.Configuration.ApiClient.ParameterToString(storeGroupId)); // path parameter
            if (storeGroup != null && storeGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeGroup; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoreGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultStoreGroupBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultStoreGroupBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultStoreGroupBase)));
        }

    }
}

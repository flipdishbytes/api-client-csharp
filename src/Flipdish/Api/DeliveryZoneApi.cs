/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryZoneApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a delivery zone to the store id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>RestApiResultDeliveryZone</returns>
        RestApiResultDeliveryZone AddDeliveryZone (int? storeId, DeliveryZoneBase deliveryZoneBase);

        /// <summary>
        /// Adds a delivery zone to the store id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>ApiResponse of RestApiResultDeliveryZone</returns>
        ApiResponse<RestApiResultDeliveryZone> AddDeliveryZoneWithHttpInfo (int? storeId, DeliveryZoneBase deliveryZoneBase);
        /// <summary>
        /// Get all the delivery zones associated with a store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>RestApiArrayResultDeliveryZone</returns>
        RestApiArrayResultDeliveryZone GetDeliveryZones (int? storeId);

        /// <summary>
        /// Get all the delivery zones associated with a store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>ApiResponse of RestApiArrayResultDeliveryZone</returns>
        ApiResponse<RestApiArrayResultDeliveryZone> GetDeliveryZonesWithHttpInfo (int? storeId);
        /// <summary>
        /// Removes the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns></returns>
        void RemoveDeliveryZone (int? storeId, int? deliveryZoneId);

        /// <summary>
        /// Removes the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDeliveryZoneWithHttpInfo (int? storeId, int? deliveryZoneId);
        /// <summary>
        /// Updates the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>RestApiResultDeliveryZone</returns>
        RestApiResultDeliveryZone UpdateDeliveryZone (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone);

        /// <summary>
        /// Updates the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>ApiResponse of RestApiResultDeliveryZone</returns>
        ApiResponse<RestApiResultDeliveryZone> UpdateDeliveryZoneWithHttpInfo (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a delivery zone to the store id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>Task of RestApiResultDeliveryZone</returns>
        System.Threading.Tasks.Task<RestApiResultDeliveryZone> AddDeliveryZoneAsync (int? storeId, DeliveryZoneBase deliveryZoneBase);

        /// <summary>
        /// Adds a delivery zone to the store id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>Task of ApiResponse (RestApiResultDeliveryZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultDeliveryZone>> AddDeliveryZoneAsyncWithHttpInfo (int? storeId, DeliveryZoneBase deliveryZoneBase);
        /// <summary>
        /// Get all the delivery zones associated with a store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>Task of RestApiArrayResultDeliveryZone</returns>
        System.Threading.Tasks.Task<RestApiArrayResultDeliveryZone> GetDeliveryZonesAsync (int? storeId);

        /// <summary>
        /// Get all the delivery zones associated with a store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultDeliveryZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultDeliveryZone>> GetDeliveryZonesAsyncWithHttpInfo (int? storeId);
        /// <summary>
        /// Removes the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDeliveryZoneAsync (int? storeId, int? deliveryZoneId);

        /// <summary>
        /// Removes the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDeliveryZoneAsyncWithHttpInfo (int? storeId, int? deliveryZoneId);
        /// <summary>
        /// Updates the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>Task of RestApiResultDeliveryZone</returns>
        System.Threading.Tasks.Task<RestApiResultDeliveryZone> UpdateDeliveryZoneAsync (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone);

        /// <summary>
        /// Updates the existing delivery zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>Task of ApiResponse (RestApiResultDeliveryZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultDeliveryZone>> UpdateDeliveryZoneAsyncWithHttpInfo (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeliveryZoneApi : IDeliveryZoneApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryZoneApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryZoneApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryZoneApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeliveryZoneApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a delivery zone to the store id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>RestApiResultDeliveryZone</returns>
        public RestApiResultDeliveryZone AddDeliveryZone (int? storeId, DeliveryZoneBase deliveryZoneBase)
        {
             ApiResponse<RestApiResultDeliveryZone> localVarResponse = AddDeliveryZoneWithHttpInfo(storeId, deliveryZoneBase);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a delivery zone to the store id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>ApiResponse of RestApiResultDeliveryZone</returns>
        public ApiResponse< RestApiResultDeliveryZone > AddDeliveryZoneWithHttpInfo (int? storeId, DeliveryZoneBase deliveryZoneBase)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->AddDeliveryZone");
            // verify the required parameter 'deliveryZoneBase' is set
            if (deliveryZoneBase == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneBase' when calling DeliveryZoneApi->AddDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneBase != null && deliveryZoneBase.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deliveryZoneBase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deliveryZoneBase; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDeliveryZone)));
        }

        /// <summary>
        /// Adds a delivery zone to the store id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>Task of RestApiResultDeliveryZone</returns>
        public async System.Threading.Tasks.Task<RestApiResultDeliveryZone> AddDeliveryZoneAsync (int? storeId, DeliveryZoneBase deliveryZoneBase)
        {
             ApiResponse<RestApiResultDeliveryZone> localVarResponse = await AddDeliveryZoneAsyncWithHttpInfo(storeId, deliveryZoneBase);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a delivery zone to the store id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone will be added</param>
        /// <param name="deliveryZoneBase">Optional delivery zone, if not supplied will create a default zone</param>
        /// <returns>Task of ApiResponse (RestApiResultDeliveryZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultDeliveryZone>> AddDeliveryZoneAsyncWithHttpInfo (int? storeId, DeliveryZoneBase deliveryZoneBase)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->AddDeliveryZone");
            // verify the required parameter 'deliveryZoneBase' is set
            if (deliveryZoneBase == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneBase' when calling DeliveryZoneApi->AddDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneBase != null && deliveryZoneBase.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deliveryZoneBase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deliveryZoneBase; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDeliveryZone)));
        }

        /// <summary>
        /// Get all the delivery zones associated with a store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>RestApiArrayResultDeliveryZone</returns>
        public RestApiArrayResultDeliveryZone GetDeliveryZones (int? storeId)
        {
             ApiResponse<RestApiArrayResultDeliveryZone> localVarResponse = GetDeliveryZonesWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the delivery zones associated with a store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>ApiResponse of RestApiArrayResultDeliveryZone</returns>
        public ApiResponse< RestApiArrayResultDeliveryZone > GetDeliveryZonesWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->GetDeliveryZones");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultDeliveryZone)));
        }

        /// <summary>
        /// Get all the delivery zones associated with a store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>Task of RestApiArrayResultDeliveryZone</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultDeliveryZone> GetDeliveryZonesAsync (int? storeId)
        {
             ApiResponse<RestApiArrayResultDeliveryZone> localVarResponse = await GetDeliveryZonesAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the delivery zones associated with a store 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zones are associated</param>
        /// <returns>Task of ApiResponse (RestApiArrayResultDeliveryZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultDeliveryZone>> GetDeliveryZonesAsyncWithHttpInfo (int? storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->GetDeliveryZones");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiArrayResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultDeliveryZone)));
        }

        /// <summary>
        /// Removes the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns></returns>
        public void RemoveDeliveryZone (int? storeId, int? deliveryZoneId)
        {
             RemoveDeliveryZoneWithHttpInfo(storeId, deliveryZoneId);
        }

        /// <summary>
        /// Removes the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDeliveryZoneWithHttpInfo (int? storeId, int? deliveryZoneId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->RemoveDeliveryZone");
            // verify the required parameter 'deliveryZoneId' is set
            if (deliveryZoneId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneId' when calling DeliveryZoneApi->RemoveDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneId != null) localVarPathParams.Add("deliveryZoneId", this.Configuration.ApiClient.ParameterToString(deliveryZoneId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDeliveryZoneAsync (int? storeId, int? deliveryZoneId)
        {
             await RemoveDeliveryZoneAsyncWithHttpInfo(storeId, deliveryZoneId);

        }

        /// <summary>
        /// Removes the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDeliveryZoneAsyncWithHttpInfo (int? storeId, int? deliveryZoneId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->RemoveDeliveryZone");
            // verify the required parameter 'deliveryZoneId' is set
            if (deliveryZoneId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneId' when calling DeliveryZoneApi->RemoveDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneId != null) localVarPathParams.Add("deliveryZoneId", this.Configuration.ApiClient.ParameterToString(deliveryZoneId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>RestApiResultDeliveryZone</returns>
        public RestApiResultDeliveryZone UpdateDeliveryZone (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone)
        {
             ApiResponse<RestApiResultDeliveryZone> localVarResponse = UpdateDeliveryZoneWithHttpInfo(storeId, deliveryZoneId, deliveryZone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>ApiResponse of RestApiResultDeliveryZone</returns>
        public ApiResponse< RestApiResultDeliveryZone > UpdateDeliveryZoneWithHttpInfo (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->UpdateDeliveryZone");
            // verify the required parameter 'deliveryZoneId' is set
            if (deliveryZoneId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneId' when calling DeliveryZoneApi->UpdateDeliveryZone");
            // verify the required parameter 'deliveryZone' is set
            if (deliveryZone == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZone' when calling DeliveryZoneApi->UpdateDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneId != null) localVarPathParams.Add("deliveryZoneId", this.Configuration.ApiClient.ParameterToString(deliveryZoneId)); // path parameter
            if (deliveryZone != null && deliveryZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deliveryZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deliveryZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDeliveryZone)));
        }

        /// <summary>
        /// Updates the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>Task of RestApiResultDeliveryZone</returns>
        public async System.Threading.Tasks.Task<RestApiResultDeliveryZone> UpdateDeliveryZoneAsync (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone)
        {
             ApiResponse<RestApiResultDeliveryZone> localVarResponse = await UpdateDeliveryZoneAsyncWithHttpInfo(storeId, deliveryZoneId, deliveryZone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the existing delivery zone 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id to which the delivery zone belongs</param>
        /// <param name="deliveryZoneId">Delivery zone id to be updated</param>
        /// <param name="deliveryZone">Delta of delivery zone parameters that need to be changed</param>
        /// <returns>Task of ApiResponse (RestApiResultDeliveryZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultDeliveryZone>> UpdateDeliveryZoneAsyncWithHttpInfo (int? storeId, int? deliveryZoneId, DeliveryZoneBase deliveryZone)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling DeliveryZoneApi->UpdateDeliveryZone");
            // verify the required parameter 'deliveryZoneId' is set
            if (deliveryZoneId == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZoneId' when calling DeliveryZoneApi->UpdateDeliveryZone");
            // verify the required parameter 'deliveryZone' is set
            if (deliveryZone == null)
                throw new ApiException(400, "Missing required parameter 'deliveryZone' when calling DeliveryZoneApi->UpdateDeliveryZone");

            var localVarPath = "/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (deliveryZoneId != null) localVarPathParams.Add("deliveryZoneId", this.Configuration.ApiClient.ParameterToString(deliveryZoneId)); // path parameter
            if (deliveryZone != null && deliveryZone.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deliveryZone); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deliveryZone; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeliveryZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultDeliveryZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestApiResultDeliveryZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultDeliveryZone)));
        }

    }
}

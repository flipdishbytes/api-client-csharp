/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetCustomerEvents (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetCustomerEventsWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetEvents (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetEventsWithHttpInfo (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>EventSearchResult</returns>
        EventSearchResult GetEventsById (Guid? eventId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of EventSearchResult</returns>
        ApiResponse<EventSearchResult> GetEventsByIdWithHttpInfo (Guid? eventId, string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetMenuEvents (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetMenuEventsWithHttpInfo (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetOrderEvents (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetOrderEventsWithHttpInfo (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetOrderEventsByCustomer (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetOrderEventsByCustomerWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetStoreEvents (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetStoreEventsWithHttpInfo (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetUserEvents (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetUserEventsWithHttpInfo (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        RestApiEventSearchPaginationResult GetWhiteLabelEvents (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        ApiResponse<RestApiEventSearchPaginationResult> GetWhiteLabelEventsWithHttpInfo (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetCustomerEventsAsync (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetCustomerEventsAsyncWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetEventsAsync (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetEventsAsyncWithHttpInfo (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of EventSearchResult</returns>
        System.Threading.Tasks.Task<EventSearchResult> GetEventsByIdAsync (Guid? eventId, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (EventSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventSearchResult>> GetEventsByIdAsyncWithHttpInfo (Guid? eventId, string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetMenuEventsAsync (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetMenuEventsAsyncWithHttpInfo (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetOrderEventsAsync (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetOrderEventsAsyncWithHttpInfo (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetOrderEventsByCustomerAsync (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetOrderEventsByCustomerAsyncWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetStoreEventsAsync (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetStoreEventsAsyncWithHttpInfo (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetUserEventsAsync (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetUserEventsAsyncWithHttpInfo (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetWhiteLabelEventsAsync (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetWhiteLabelEventsAsyncWithHttpInfo (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetCustomerEvents (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetCustomerEventsWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetCustomerEventsWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetCustomerEvents");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling EventsApi->GetCustomerEvents");

            var localVarPath = "./api/v1.0/{appId}/events/customer/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetCustomerEventsAsync (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetCustomerEventsAsyncWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetCustomerEventsAsyncWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetCustomerEvents");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling EventsApi->GetCustomerEvents");

            var localVarPath = "./api/v1.0/{appId}/events/customer/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetEvents (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetEventsWithHttpInfo(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetEventsWithHttpInfo (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetEvents");

            var localVarPath = "./api/v1.0/{appId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (whiteLabelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "whiteLabelId", whiteLabelId)); // query parameter
            if (customerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerId", customerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetEventsAsync (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetEventsAsyncWithHttpInfo(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whiteLabelId"> (optional)</param>
        /// <param name="customerId"> (optional)</param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetEventsAsyncWithHttpInfo (string appId, int? whiteLabelId = null, int? customerId = null, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetEvents");

            var localVarPath = "./api/v1.0/{appId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (whiteLabelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "whiteLabelId", whiteLabelId)); // query parameter
            if (customerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerId", customerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>EventSearchResult</returns>
        public EventSearchResult GetEventsById (Guid? eventId, string appId)
        {
             ApiResponse<EventSearchResult> localVarResponse = GetEventsByIdWithHttpInfo(eventId, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of EventSearchResult</returns>
        public ApiResponse< EventSearchResult > GetEventsByIdWithHttpInfo (Guid? eventId, string appId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetEventsById");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetEventsById");

            var localVarPath = "./api/v1.0/{appId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EventSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventSearchResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of EventSearchResult</returns>
        public async System.Threading.Tasks.Task<EventSearchResult> GetEventsByIdAsync (Guid? eventId, string appId)
        {
             ApiResponse<EventSearchResult> localVarResponse = await GetEventsByIdAsyncWithHttpInfo(eventId, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (EventSearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventSearchResult>> GetEventsByIdAsyncWithHttpInfo (Guid? eventId, string appId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetEventsById");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetEventsById");

            var localVarPath = "./api/v1.0/{appId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EventSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventSearchResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetMenuEvents (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetMenuEventsWithHttpInfo(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetMenuEventsWithHttpInfo (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetMenuEvents");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling EventsApi->GetMenuEvents");

            var localVarPath = "./api/v1.0/{appId}/events/menu/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId2)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetMenuEventsAsync (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetMenuEventsAsyncWithHttpInfo(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="menuId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId2">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetMenuEventsAsyncWithHttpInfo (string appId, int? menuId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId2 = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetMenuEvents");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling EventsApi->GetMenuEvents");

            var localVarPath = "./api/v1.0/{appId}/events/menu/{menuId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menuId", this.Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId2)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenuEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetOrderEvents (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetOrderEventsWithHttpInfo(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetOrderEventsWithHttpInfo (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetOrderEvents");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling EventsApi->GetOrderEvents");

            var localVarPath = "./api/v1.0/{appId}/events/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId2)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetOrderEventsAsync (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetOrderEventsAsyncWithHttpInfo(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="orderId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId2">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetOrderEventsAsyncWithHttpInfo (string appId, int? orderId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId2 = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetOrderEvents");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling EventsApi->GetOrderEvents");

            var localVarPath = "./api/v1.0/{appId}/events/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId2)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetOrderEventsByCustomer (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetOrderEventsByCustomerWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetOrderEventsByCustomerWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetOrderEventsByCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling EventsApi->GetOrderEventsByCustomer");

            var localVarPath = "./api/v1.0/{appId}/events/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (customerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerId", customerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderEventsByCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetOrderEventsByCustomerAsync (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetOrderEventsByCustomerAsyncWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="customerId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetOrderEventsByCustomerAsyncWithHttpInfo (string appId, int? customerId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetOrderEventsByCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling EventsApi->GetOrderEventsByCustomer");

            var localVarPath = "./api/v1.0/{appId}/events/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (customerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerId", customerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderEventsByCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetStoreEvents (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetStoreEventsWithHttpInfo(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetStoreEventsWithHttpInfo (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetStoreEvents");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling EventsApi->GetStoreEvents");

            var localVarPath = "./api/v1.0/{appId}/events/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId2)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetStoreEventsAsync (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetStoreEventsAsyncWithHttpInfo(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="storeId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId2">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetStoreEventsAsyncWithHttpInfo (string appId, int? storeId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId2 = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetStoreEvents");
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling EventsApi->GetStoreEvents");

            var localVarPath = "./api/v1.0/{appId}/events/store/{storeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (storeId != null) localVarPathParams.Add("storeId", this.Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId2)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetUserEvents (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetUserEventsWithHttpInfo(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetUserEventsWithHttpInfo (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetUserEvents");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling EventsApi->GetUserEvents");

            var localVarPath = "./api/v1.0/{appId}/events/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId2)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetUserEventsAsync (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetUserEventsAsyncWithHttpInfo(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId2">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetUserEventsAsyncWithHttpInfo (string appId, int? userId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId2 = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetUserEvents");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling EventsApi->GetUserEvents");

            var localVarPath = "./api/v1.0/{appId}/events/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId2)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>RestApiEventSearchPaginationResult</returns>
        public RestApiEventSearchPaginationResult GetWhiteLabelEvents (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = GetWhiteLabelEventsWithHttpInfo(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>ApiResponse of RestApiEventSearchPaginationResult</returns>
        public ApiResponse< RestApiEventSearchPaginationResult > GetWhiteLabelEventsWithHttpInfo (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetWhiteLabelEvents");
            // verify the required parameter 'whitelabelId' is set
            if (whitelabelId == null)
                throw new ApiException(400, "Missing required parameter 'whitelabelId' when calling EventsApi->GetWhiteLabelEvents");

            var localVarPath = "./api/v1.0/{appId}/events/whitelabel/{whitelabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (whitelabelId != null) localVarPathParams.Add("whitelabelId", this.Configuration.ApiClient.ParameterToString(whitelabelId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWhiteLabelEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of RestApiEventSearchPaginationResult</returns>
        public async System.Threading.Tasks.Task<RestApiEventSearchPaginationResult> GetWhiteLabelEventsAsync (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
             ApiResponse<RestApiEventSearchPaginationResult> localVarResponse = await GetWhiteLabelEventsAsyncWithHttpInfo(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="whitelabelId"></param>
        /// <param name="limit">The maximum elements to return (optional)</param>
        /// <param name="page">The index of the page to return, starting by 1 (optional)</param>
        /// <param name="start">Start date (optional)</param>
        /// <param name="end">End date (optional)</param>
        /// <param name="orderId">Events that have Order Id (optional)</param>
        /// <param name="storeId">Events that have Store Id (optional)</param>
        /// <param name="storeIdList">Events that have Store Id List (optional)</param>
        /// <param name="storeGroupId">Events that have Store Group Id (optional)</param>
        /// <param name="userId">Events that have User Id (optional)</param>
        /// <param name="menuId">Events that have Menu Id (optional)</param>
        /// <param name="campaignId">Events that have Campaign Id (optional)</param>
        /// <param name="userEmail">Events that have User Email (optional)</param>
        /// <param name="userName">Events that have User Name (optional)</param>
        /// <param name="voucherCode">Events that have voucher code (optional)</param>
        /// <param name="eventType">Events that have event type\\s (optional)</param>
        /// <param name="flipdishEventId">Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (RestApiEventSearchPaginationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiEventSearchPaginationResult>> GetWhiteLabelEventsAsyncWithHttpInfo (string appId, int? whitelabelId, int? limit = null, int? page = null, DateTime? start = null, DateTime? end = null, int? orderId = null, int? storeId = null, List<int?> storeIdList = null, int? storeGroupId = null, int? userId = null, int? menuId = null, int? campaignId = null, string userEmail = null, string userName = null, string voucherCode = null, List<string> eventType = null, string flipdishEventId = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling EventsApi->GetWhiteLabelEvents");
            // verify the required parameter 'whitelabelId' is set
            if (whitelabelId == null)
                throw new ApiException(400, "Missing required parameter 'whitelabelId' when calling EventsApi->GetWhiteLabelEvents");

            var localVarPath = "./api/v1.0/{appId}/events/whitelabel/{whitelabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (whitelabelId != null) localVarPathParams.Add("whitelabelId", this.Configuration.ApiClient.ParameterToString(whitelabelId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderId", orderId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (storeIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "storeIdList", storeIdList)); // query parameter
            if (storeGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeGroupId", storeGroupId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (menuId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "menuId", menuId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (voucherCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voucherCode", voucherCode)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eventType", eventType)); // query parameter
            if (flipdishEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flipdishEventId", flipdishEventId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWhiteLabelEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiEventSearchPaginationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiEventSearchPaginationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiEventSearchPaginationResult)));
        }

    }
}

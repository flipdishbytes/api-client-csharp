/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMobileAppsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultAppConfigSalesChannel</returns>
        RestApiResultAppConfigSalesChannel GetAppConfigSalesChannel (string appId);

        /// <summary>
        /// Get sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultAppConfigSalesChannel</returns>
        ApiResponse<RestApiResultAppConfigSalesChannel> GetAppConfigSalesChannelWithHttpInfo (string appId);
        /// <summary>
        /// Get statistics mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>RestApiArrayResultMobileAppsStatistics</returns>
        RestApiArrayResultMobileAppsStatistics GetStatistics (string appId, List<string> platformTypes);

        /// <summary>
        /// Get statistics mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>ApiResponse of RestApiArrayResultMobileAppsStatistics</returns>
        ApiResponse<RestApiArrayResultMobileAppsStatistics> GetStatisticsWithHttpInfo (string appId, List<string> platformTypes);
        /// <summary>
        /// Get submission details mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultMobileAppsSubmissionDetails</returns>
        RestApiResultMobileAppsSubmissionDetails GetSubmissionDetails (string appId);

        /// <summary>
        /// Get submission details mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmissionDetails</returns>
        ApiResponse<RestApiResultMobileAppsSubmissionDetails> GetSubmissionDetailsWithHttpInfo (string appId);
        /// <summary>
        /// Get submission status mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>RestApiResultMobileAppsSubmissionStatus</returns>
        RestApiResultMobileAppsSubmissionStatus GetSubmissionStatus (string appId, int? mobileAppsSubmissionId);

        /// <summary>
        /// Get submission status mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmissionStatus</returns>
        ApiResponse<RestApiResultMobileAppsSubmissionStatus> GetSubmissionStatusWithHttpInfo (string appId, int? mobileAppsSubmissionId);
        /// <summary>
        /// Submission form mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>RestApiResultMobileAppsSubmission</returns>
        RestApiResultMobileAppsSubmission Submission (string appId, MobileAppsSubmission mobileAppsSubmission);

        /// <summary>
        /// Submission form mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmission</returns>
        ApiResponse<RestApiResultMobileAppsSubmission> SubmissionWithHttpInfo (string appId, MobileAppsSubmission mobileAppsSubmission);
        /// <summary>
        /// Update the application sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>RestApiResultAppConfigSalesChannel</returns>
        RestApiResultAppConfigSalesChannel UpdateAppConfigSalesChannel (string appId, AppConfigSalesChannel appConfigSalesChannel);

        /// <summary>
        /// Update the application sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>ApiResponse of RestApiResultAppConfigSalesChannel</returns>
        ApiResponse<RestApiResultAppConfigSalesChannel> UpdateAppConfigSalesChannelWithHttpInfo (string appId, AppConfigSalesChannel appConfigSalesChannel);
        /// <summary>
        /// Update submission status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        RestApiResultUpdateMobileAppsSubmissionStatus UpdateSubmissionStatus (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus);

        /// <summary>
        /// Update submission status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>ApiResponse of RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus> UpdateSubmissionStatusWithHttpInfo (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus);
        /// <summary>
        /// Upload image mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>RestApiResultMobileAppsImage</returns>
        RestApiResultMobileAppsImage UploadImage (string appId, System.IO.Stream image);

        /// <summary>
        /// Upload image mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>ApiResponse of RestApiResultMobileAppsImage</returns>
        ApiResponse<RestApiResultMobileAppsImage> UploadImageWithHttpInfo (string appId, System.IO.Stream image);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultAppConfigSalesChannel</returns>
        System.Threading.Tasks.Task<RestApiResultAppConfigSalesChannel> GetAppConfigSalesChannelAsync (string appId);

        /// <summary>
        /// Get sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigSalesChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigSalesChannel>> GetAppConfigSalesChannelAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get statistics mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>Task of RestApiArrayResultMobileAppsStatistics</returns>
        System.Threading.Tasks.Task<RestApiArrayResultMobileAppsStatistics> GetStatisticsAsync (string appId, List<string> platformTypes);

        /// <summary>
        /// Get statistics mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMobileAppsStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMobileAppsStatistics>> GetStatisticsAsyncWithHttpInfo (string appId, List<string> platformTypes);
        /// <summary>
        /// Get submission details mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmissionDetails</returns>
        System.Threading.Tasks.Task<RestApiResultMobileAppsSubmissionDetails> GetSubmissionDetailsAsync (string appId);

        /// <summary>
        /// Get submission details mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmissionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmissionDetails>> GetSubmissionDetailsAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get submission status mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmissionStatus</returns>
        System.Threading.Tasks.Task<RestApiResultMobileAppsSubmissionStatus> GetSubmissionStatusAsync (string appId, int? mobileAppsSubmissionId);

        /// <summary>
        /// Get submission status mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmissionStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmissionStatus>> GetSubmissionStatusAsyncWithHttpInfo (string appId, int? mobileAppsSubmissionId);
        /// <summary>
        /// Submission form mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmission</returns>
        System.Threading.Tasks.Task<RestApiResultMobileAppsSubmission> SubmissionAsync (string appId, MobileAppsSubmission mobileAppsSubmission);

        /// <summary>
        /// Submission form mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmission>> SubmissionAsyncWithHttpInfo (string appId, MobileAppsSubmission mobileAppsSubmission);
        /// <summary>
        /// Update the application sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>Task of RestApiResultAppConfigSalesChannel</returns>
        System.Threading.Tasks.Task<RestApiResultAppConfigSalesChannel> UpdateAppConfigSalesChannelAsync (string appId, AppConfigSalesChannel appConfigSalesChannel);

        /// <summary>
        /// Update the application sales channel configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigSalesChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigSalesChannel>> UpdateAppConfigSalesChannelAsyncWithHttpInfo (string appId, AppConfigSalesChannel appConfigSalesChannel);
        /// <summary>
        /// Update submission status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>Task of RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        System.Threading.Tasks.Task<RestApiResultUpdateMobileAppsSubmissionStatus> UpdateSubmissionStatusAsync (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus);

        /// <summary>
        /// Update submission status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>Task of ApiResponse (RestApiResultUpdateMobileAppsSubmissionStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus>> UpdateSubmissionStatusAsyncWithHttpInfo (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus);
        /// <summary>
        /// Upload image mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>Task of RestApiResultMobileAppsImage</returns>
        System.Threading.Tasks.Task<RestApiResultMobileAppsImage> UploadImageAsync (string appId, System.IO.Stream image);

        /// <summary>
        /// Upload image mobile apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsImage>> UploadImageAsyncWithHttpInfo (string appId, System.IO.Stream image);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MobileAppsApi : IMobileAppsApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MobileAppsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MobileAppsApi(String basePath)
        {
            this.Configuration = new Flipdish.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MobileAppsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MobileAppsApi(Flipdish.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flipdish.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flipdish.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultAppConfigSalesChannel</returns>
        public RestApiResultAppConfigSalesChannel GetAppConfigSalesChannel (string appId)
        {
             ApiResponse<RestApiResultAppConfigSalesChannel> localVarResponse = GetAppConfigSalesChannelWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultAppConfigSalesChannel</returns>
        public ApiResponse< RestApiResultAppConfigSalesChannel > GetAppConfigSalesChannelWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetAppConfigSalesChannel");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/saleschannel/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppConfigSalesChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigSalesChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppConfigSalesChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigSalesChannel)));
        }

        /// <summary>
        /// Get sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultAppConfigSalesChannel</returns>
        public async System.Threading.Tasks.Task<RestApiResultAppConfigSalesChannel> GetAppConfigSalesChannelAsync (string appId)
        {
             ApiResponse<RestApiResultAppConfigSalesChannel> localVarResponse = await GetAppConfigSalesChannelAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigSalesChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigSalesChannel>> GetAppConfigSalesChannelAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetAppConfigSalesChannel");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/saleschannel/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppConfigSalesChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigSalesChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppConfigSalesChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigSalesChannel)));
        }

        /// <summary>
        /// Get statistics mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>RestApiArrayResultMobileAppsStatistics</returns>
        public RestApiArrayResultMobileAppsStatistics GetStatistics (string appId, List<string> platformTypes)
        {
             ApiResponse<RestApiArrayResultMobileAppsStatistics> localVarResponse = GetStatisticsWithHttpInfo(appId, platformTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>ApiResponse of RestApiArrayResultMobileAppsStatistics</returns>
        public ApiResponse< RestApiArrayResultMobileAppsStatistics > GetStatisticsWithHttpInfo (string appId, List<string> platformTypes)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetStatistics");
            // verify the required parameter 'platformTypes' is set
            if (platformTypes == null)
                throw new ApiException(400, "Missing required parameter 'platformTypes' when calling MobileAppsApi->GetStatistics");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (platformTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "platformTypes", platformTypes)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMobileAppsStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultMobileAppsStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMobileAppsStatistics)));
        }

        /// <summary>
        /// Get statistics mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>Task of RestApiArrayResultMobileAppsStatistics</returns>
        public async System.Threading.Tasks.Task<RestApiArrayResultMobileAppsStatistics> GetStatisticsAsync (string appId, List<string> platformTypes)
        {
             ApiResponse<RestApiArrayResultMobileAppsStatistics> localVarResponse = await GetStatisticsAsyncWithHttpInfo(appId, platformTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="platformTypes"></param>
        /// <returns>Task of ApiResponse (RestApiArrayResultMobileAppsStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiArrayResultMobileAppsStatistics>> GetStatisticsAsyncWithHttpInfo (string appId, List<string> platformTypes)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetStatistics");
            // verify the required parameter 'platformTypes' is set
            if (platformTypes == null)
                throw new ApiException(400, "Missing required parameter 'platformTypes' when calling MobileAppsApi->GetStatistics");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (platformTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "platformTypes", platformTypes)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiArrayResultMobileAppsStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiArrayResultMobileAppsStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiArrayResultMobileAppsStatistics)));
        }

        /// <summary>
        /// Get submission details mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>RestApiResultMobileAppsSubmissionDetails</returns>
        public RestApiResultMobileAppsSubmissionDetails GetSubmissionDetails (string appId)
        {
             ApiResponse<RestApiResultMobileAppsSubmissionDetails> localVarResponse = GetSubmissionDetailsWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get submission details mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmissionDetails</returns>
        public ApiResponse< RestApiResultMobileAppsSubmissionDetails > GetSubmissionDetailsWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetSubmissionDetails");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmissionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmissionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmissionDetails)));
        }

        /// <summary>
        /// Get submission details mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmissionDetails</returns>
        public async System.Threading.Tasks.Task<RestApiResultMobileAppsSubmissionDetails> GetSubmissionDetailsAsync (string appId)
        {
             ApiResponse<RestApiResultMobileAppsSubmissionDetails> localVarResponse = await GetSubmissionDetailsAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get submission details mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmissionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmissionDetails>> GetSubmissionDetailsAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetSubmissionDetails");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmissionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmissionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmissionDetails)));
        }

        /// <summary>
        /// Get submission status mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>RestApiResultMobileAppsSubmissionStatus</returns>
        public RestApiResultMobileAppsSubmissionStatus GetSubmissionStatus (string appId, int? mobileAppsSubmissionId)
        {
             ApiResponse<RestApiResultMobileAppsSubmissionStatus> localVarResponse = GetSubmissionStatusWithHttpInfo(appId, mobileAppsSubmissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get submission status mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmissionStatus</returns>
        public ApiResponse< RestApiResultMobileAppsSubmissionStatus > GetSubmissionStatusWithHttpInfo (string appId, int? mobileAppsSubmissionId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetSubmissionStatus");
            // verify the required parameter 'mobileAppsSubmissionId' is set
            if (mobileAppsSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmissionId' when calling MobileAppsApi->GetSubmissionStatus");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmissionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mobileAppsSubmissionId", mobileAppsSubmissionId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmissionStatus)));
        }

        /// <summary>
        /// Get submission status mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmissionStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultMobileAppsSubmissionStatus> GetSubmissionStatusAsync (string appId, int? mobileAppsSubmissionId)
        {
             ApiResponse<RestApiResultMobileAppsSubmissionStatus> localVarResponse = await GetSubmissionStatusAsyncWithHttpInfo(appId, mobileAppsSubmissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get submission status mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmissionStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmissionStatus>> GetSubmissionStatusAsyncWithHttpInfo (string appId, int? mobileAppsSubmissionId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->GetSubmissionStatus");
            // verify the required parameter 'mobileAppsSubmissionId' is set
            if (mobileAppsSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmissionId' when calling MobileAppsApi->GetSubmissionStatus");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmissionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mobileAppsSubmissionId", mobileAppsSubmissionId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmissionStatus)));
        }

        /// <summary>
        /// Submission form mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>RestApiResultMobileAppsSubmission</returns>
        public RestApiResultMobileAppsSubmission Submission (string appId, MobileAppsSubmission mobileAppsSubmission)
        {
             ApiResponse<RestApiResultMobileAppsSubmission> localVarResponse = SubmissionWithHttpInfo(appId, mobileAppsSubmission);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submission form mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>ApiResponse of RestApiResultMobileAppsSubmission</returns>
        public ApiResponse< RestApiResultMobileAppsSubmission > SubmissionWithHttpInfo (string appId, MobileAppsSubmission mobileAppsSubmission)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->Submission");
            // verify the required parameter 'mobileAppsSubmission' is set
            if (mobileAppsSubmission == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmission' when calling MobileAppsApi->Submission");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmission != null && mobileAppsSubmission.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mobileAppsSubmission); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileAppsSubmission; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Submission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmission)));
        }

        /// <summary>
        /// Submission form mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>Task of RestApiResultMobileAppsSubmission</returns>
        public async System.Threading.Tasks.Task<RestApiResultMobileAppsSubmission> SubmissionAsync (string appId, MobileAppsSubmission mobileAppsSubmission)
        {
             ApiResponse<RestApiResultMobileAppsSubmission> localVarResponse = await SubmissionAsyncWithHttpInfo(appId, mobileAppsSubmission);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submission form mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmission"></param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsSubmission>> SubmissionAsyncWithHttpInfo (string appId, MobileAppsSubmission mobileAppsSubmission)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->Submission");
            // verify the required parameter 'mobileAppsSubmission' is set
            if (mobileAppsSubmission == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmission' when calling MobileAppsApi->Submission");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmission != null && mobileAppsSubmission.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mobileAppsSubmission); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileAppsSubmission; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Submission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsSubmission)));
        }

        /// <summary>
        /// Update the application sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>RestApiResultAppConfigSalesChannel</returns>
        public RestApiResultAppConfigSalesChannel UpdateAppConfigSalesChannel (string appId, AppConfigSalesChannel appConfigSalesChannel)
        {
             ApiResponse<RestApiResultAppConfigSalesChannel> localVarResponse = UpdateAppConfigSalesChannelWithHttpInfo(appId, appConfigSalesChannel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the application sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>ApiResponse of RestApiResultAppConfigSalesChannel</returns>
        public ApiResponse< RestApiResultAppConfigSalesChannel > UpdateAppConfigSalesChannelWithHttpInfo (string appId, AppConfigSalesChannel appConfigSalesChannel)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UpdateAppConfigSalesChannel");
            // verify the required parameter 'appConfigSalesChannel' is set
            if (appConfigSalesChannel == null)
                throw new ApiException(400, "Missing required parameter 'appConfigSalesChannel' when calling MobileAppsApi->UpdateAppConfigSalesChannel");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/saleschannel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appConfigSalesChannel != null && appConfigSalesChannel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appConfigSalesChannel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appConfigSalesChannel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppConfigSalesChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigSalesChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppConfigSalesChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigSalesChannel)));
        }

        /// <summary>
        /// Update the application sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>Task of RestApiResultAppConfigSalesChannel</returns>
        public async System.Threading.Tasks.Task<RestApiResultAppConfigSalesChannel> UpdateAppConfigSalesChannelAsync (string appId, AppConfigSalesChannel appConfigSalesChannel)
        {
             ApiResponse<RestApiResultAppConfigSalesChannel> localVarResponse = await UpdateAppConfigSalesChannelAsyncWithHttpInfo(appId, appConfigSalesChannel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the application sales channel configuration 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="appConfigSalesChannel"></param>
        /// <returns>Task of ApiResponse (RestApiResultAppConfigSalesChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultAppConfigSalesChannel>> UpdateAppConfigSalesChannelAsyncWithHttpInfo (string appId, AppConfigSalesChannel appConfigSalesChannel)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UpdateAppConfigSalesChannel");
            // verify the required parameter 'appConfigSalesChannel' is set
            if (appConfigSalesChannel == null)
                throw new ApiException(400, "Missing required parameter 'appConfigSalesChannel' when calling MobileAppsApi->UpdateAppConfigSalesChannel");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/saleschannel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (appConfigSalesChannel != null && appConfigSalesChannel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appConfigSalesChannel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appConfigSalesChannel; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAppConfigSalesChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultAppConfigSalesChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultAppConfigSalesChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultAppConfigSalesChannel)));
        }

        /// <summary>
        /// Update submission status 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        public RestApiResultUpdateMobileAppsSubmissionStatus UpdateSubmissionStatus (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus)
        {
             ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus> localVarResponse = UpdateSubmissionStatusWithHttpInfo(appId, mobileAppsSubmissionId, updateMobileAppsSubmissionStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update submission status 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>ApiResponse of RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        public ApiResponse< RestApiResultUpdateMobileAppsSubmissionStatus > UpdateSubmissionStatusWithHttpInfo (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UpdateSubmissionStatus");
            // verify the required parameter 'mobileAppsSubmissionId' is set
            if (mobileAppsSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmissionId' when calling MobileAppsApi->UpdateSubmissionStatus");
            // verify the required parameter 'updateMobileAppsSubmissionStatus' is set
            if (updateMobileAppsSubmissionStatus == null)
                throw new ApiException(400, "Missing required parameter 'updateMobileAppsSubmissionStatus' when calling MobileAppsApi->UpdateSubmissionStatus");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/{mobileAppsSubmissionId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmissionId != null) localVarPathParams.Add("mobileAppsSubmissionId", this.Configuration.ApiClient.ParameterToString(mobileAppsSubmissionId)); // path parameter
            if (updateMobileAppsSubmissionStatus != null && updateMobileAppsSubmissionStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMobileAppsSubmissionStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMobileAppsSubmissionStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubmissionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultUpdateMobileAppsSubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultUpdateMobileAppsSubmissionStatus)));
        }

        /// <summary>
        /// Update submission status 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>Task of RestApiResultUpdateMobileAppsSubmissionStatus</returns>
        public async System.Threading.Tasks.Task<RestApiResultUpdateMobileAppsSubmissionStatus> UpdateSubmissionStatusAsync (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus)
        {
             ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus> localVarResponse = await UpdateSubmissionStatusAsyncWithHttpInfo(appId, mobileAppsSubmissionId, updateMobileAppsSubmissionStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update submission status 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="mobileAppsSubmissionId"></param>
        /// <param name="updateMobileAppsSubmissionStatus"></param>
        /// <returns>Task of ApiResponse (RestApiResultUpdateMobileAppsSubmissionStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus>> UpdateSubmissionStatusAsyncWithHttpInfo (string appId, int? mobileAppsSubmissionId, UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UpdateSubmissionStatus");
            // verify the required parameter 'mobileAppsSubmissionId' is set
            if (mobileAppsSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'mobileAppsSubmissionId' when calling MobileAppsApi->UpdateSubmissionStatus");
            // verify the required parameter 'updateMobileAppsSubmissionStatus' is set
            if (updateMobileAppsSubmissionStatus == null)
                throw new ApiException(400, "Missing required parameter 'updateMobileAppsSubmissionStatus' when calling MobileAppsApi->UpdateSubmissionStatus");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/{mobileAppsSubmissionId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (mobileAppsSubmissionId != null) localVarPathParams.Add("mobileAppsSubmissionId", this.Configuration.ApiClient.ParameterToString(mobileAppsSubmissionId)); // path parameter
            if (updateMobileAppsSubmissionStatus != null && updateMobileAppsSubmissionStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMobileAppsSubmissionStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMobileAppsSubmissionStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubmissionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultUpdateMobileAppsSubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultUpdateMobileAppsSubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultUpdateMobileAppsSubmissionStatus)));
        }

        /// <summary>
        /// Upload image mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>RestApiResultMobileAppsImage</returns>
        public RestApiResultMobileAppsImage UploadImage (string appId, System.IO.Stream image)
        {
             ApiResponse<RestApiResultMobileAppsImage> localVarResponse = UploadImageWithHttpInfo(appId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload image mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>ApiResponse of RestApiResultMobileAppsImage</returns>
        public ApiResponse< RestApiResultMobileAppsImage > UploadImageWithHttpInfo (string appId, System.IO.Stream image)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UploadImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MobileAppsApi->UploadImage");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsImage)));
        }

        /// <summary>
        /// Upload image mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>Task of RestApiResultMobileAppsImage</returns>
        public async System.Threading.Tasks.Task<RestApiResultMobileAppsImage> UploadImageAsync (string appId, System.IO.Stream image)
        {
             ApiResponse<RestApiResultMobileAppsImage> localVarResponse = await UploadImageAsyncWithHttpInfo(appId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload image mobile apps 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="image">Mobile Apps image</param>
        /// <returns>Task of ApiResponse (RestApiResultMobileAppsImage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestApiResultMobileAppsImage>> UploadImageAsyncWithHttpInfo (string appId, System.IO.Stream image)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling MobileAppsApi->UploadImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling MobileAppsApi->UploadImage");

            var localVarPath = "./api/v1.0/mobileapps/{appId}/submission/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (image != null) localVarFileParams.Add("Image", this.Configuration.ApiClient.ParameterToFile("Image", image));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestApiResultMobileAppsImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RestApiResultMobileAppsImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestApiResultMobileAppsImage)));
        }

    }
}

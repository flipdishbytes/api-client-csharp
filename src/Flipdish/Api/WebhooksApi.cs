/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flipdish.Client;
using Flipdish.Model;

namespace Flipdish.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a webhook subscription for you Oauth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        FlipdishPublicModelsV1ApiResultsRestApiIntegerResult CraeteWebhookSubscription (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);

        /// <summary>
        /// Create a webhook subscription for you Oauth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult> CraeteWebhookSubscriptionWithHttpInfo (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);
        /// <summary>
        /// Add event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns></returns>
        void CreateWebhookSubscriptionEventNames (string clientId, int? webhookSubscriptionId, string eventName);

        /// <summary>
        /// Add event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWebhookSubscriptionEventNamesWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName);
        /// <summary>
        /// Delete you webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns></returns>
        void DeleteWebhookSubscription (string clientId, int? webhookSubscriptionId);

        /// <summary>
        /// Delete you webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string clientId, int? webhookSubscriptionId);
        /// <summary>
        /// Remove event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns></returns>
        void DeleteWebhookSubscriptionEventName (string clientId, int? webhookSubscriptionId, string eventName);

        /// <summary>
        /// Remove event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookSubscriptionEventNameWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName);
        /// <summary>
        /// Get all webhook subscription event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult GetWebhookEventNames ();

        /// <summary>
        /// Get all webhook subscription event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesWithHttpInfo ();
        /// <summary>
        /// Get your webhook subscriptions selected event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult GetWebhookEventNamesBySubscriptionId (string clientId, int? webhookSubscriptionId);

        /// <summary>
        /// Get your webhook subscriptions selected event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesBySubscriptionIdWithHttpInfo (string clientId, int? webhookSubscriptionId);
        /// <summary>
        /// Get logs for your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog GetWebhookLogs (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null);

        /// <summary>
        /// Get logs for your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog> GetWebhookLogsWithHttpInfo (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null);
        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription GetWebhookSubscriptions (string clientId);

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription> GetWebhookSubscriptionsWithHttpInfo (string clientId);
        /// <summary>
        /// Update a webhook subscription object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns></returns>
        void UpdateWebhookSubscription (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);

        /// <summary>
        /// Update a webhook subscription object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWebhookSubscriptionWithHttpInfo (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a webhook subscription for you Oauth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult> CraeteWebhookSubscriptionAsync (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);

        /// <summary>
        /// Create a webhook subscription for you Oauth client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiIntegerResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult>> CraeteWebhookSubscriptionAsyncWithHttpInfo (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);
        /// <summary>
        /// Add event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateWebhookSubscriptionEventNamesAsync (string clientId, int? webhookSubscriptionId, string eventName);

        /// <summary>
        /// Add event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateWebhookSubscriptionEventNamesAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName);
        /// <summary>
        /// Delete you webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string clientId, int? webhookSubscriptionId);

        /// <summary>
        /// Delete you webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId);
        /// <summary>
        /// Remove event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookSubscriptionEventNameAsync (string clientId, int? webhookSubscriptionId, string eventName);

        /// <summary>
        /// Remove event name to your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionEventNameAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName);
        /// <summary>
        /// Get all webhook subscription event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesAsync ();

        /// <summary>
        /// Get all webhook subscription event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>> GetWebhookEventNamesAsyncWithHttpInfo ();
        /// <summary>
        /// Get your webhook subscriptions selected event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesBySubscriptionIdAsync (string clientId, int? webhookSubscriptionId);

        /// <summary>
        /// Get your webhook subscriptions selected event names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>> GetWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId);
        /// <summary>
        /// Get logs for your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog> GetWebhookLogsAsync (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null);

        /// <summary>
        /// Get logs for your webhook subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog>> GetWebhookLogsAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null);
        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription> GetWebhookSubscriptionsAsync (string clientId);

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription>> GetWebhookSubscriptionsAsyncWithHttpInfo (string clientId);
        /// <summary>
        /// Update a webhook subscription object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWebhookSubscriptionAsync (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);

        /// <summary>
        /// Update a webhook subscription object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookSubscriptionAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private Flipdish.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flipdish.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flipdish.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a webhook subscription for you Oauth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        public FlipdishPublicModelsV1ApiResultsRestApiIntegerResult CraeteWebhookSubscription (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult> localVarResponse = CraeteWebhookSubscriptionWithHttpInfo(clientId, webhookSubscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook subscription for you Oauth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        public ApiResponse< FlipdishPublicModelsV1ApiResultsRestApiIntegerResult > CraeteWebhookSubscriptionWithHttpInfo (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->CraeteWebhookSubscription");
            // verify the required parameter 'webhookSubscription' is set
            if (webhookSubscription == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscription' when calling WebhooksApi->CraeteWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscription != null && webhookSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookSubscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CraeteWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiIntegerResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiIntegerResult)));
        }

        /// <summary>
        /// Create a webhook subscription for you Oauth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiIntegerResult</returns>
        public async System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult> CraeteWebhookSubscriptionAsync (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult> localVarResponse = await CraeteWebhookSubscriptionAsyncWithHttpInfo(clientId, webhookSubscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a webhook subscription for you Oauth client 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiIntegerResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult>> CraeteWebhookSubscriptionAsyncWithHttpInfo (string clientId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->CraeteWebhookSubscription");
            // verify the required parameter 'webhookSubscription' is set
            if (webhookSubscription == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscription' when calling WebhooksApi->CraeteWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscription != null && webhookSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookSubscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CraeteWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiIntegerResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiIntegerResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiIntegerResult)));
        }

        /// <summary>
        /// Add event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns></returns>
        public void CreateWebhookSubscriptionEventNames (string clientId, int? webhookSubscriptionId, string eventName)
        {
             CreateWebhookSubscriptionEventNamesWithHttpInfo(clientId, webhookSubscriptionId, eventName);
        }

        /// <summary>
        /// Add event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWebhookSubscriptionEventNamesWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookSubscriptionEventNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateWebhookSubscriptionEventNamesAsync (string clientId, int? webhookSubscriptionId, string eventName)
        {
             await CreateWebhookSubscriptionEventNamesAsyncWithHttpInfo(clientId, webhookSubscriptionId, eventName);

        }

        /// <summary>
        /// Add event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateWebhookSubscriptionEventNamesAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhooksApi->CreateWebhookSubscriptionEventNames");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookSubscriptionEventNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete you webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns></returns>
        public void DeleteWebhookSubscription (string clientId, int? webhookSubscriptionId)
        {
             DeleteWebhookSubscriptionWithHttpInfo(clientId, webhookSubscriptionId);
        }

        /// <summary>
        /// Delete you webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string clientId, int? webhookSubscriptionId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->DeleteWebhookSubscription");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->DeleteWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete you webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string clientId, int? webhookSubscriptionId)
        {
             await DeleteWebhookSubscriptionAsyncWithHttpInfo(clientId, webhookSubscriptionId);

        }

        /// <summary>
        /// Delete you webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->DeleteWebhookSubscription");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->DeleteWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns></returns>
        public void DeleteWebhookSubscriptionEventName (string clientId, int? webhookSubscriptionId, string eventName)
        {
             DeleteWebhookSubscriptionEventNameWithHttpInfo(clientId, webhookSubscriptionId, eventName);
        }

        /// <summary>
        /// Remove event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookSubscriptionEventNameWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscriptionEventName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookSubscriptionEventNameAsync (string clientId, int? webhookSubscriptionId, string eventName)
        {
             await DeleteWebhookSubscriptionEventNameAsyncWithHttpInfo(clientId, webhookSubscriptionId, eventName);

        }

        /// <summary>
        /// Remove event name to your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="eventName">Webhook subscription event name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionEventNameAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, string eventName)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhooksApi->DeleteWebhookSubscriptionEventName");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscriptionEventName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all webhook subscription event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult GetWebhookEventNames ()
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> localVarResponse = GetWebhookEventNamesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all webhook subscription event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public ApiResponse< FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult > GetWebhookEventNamesWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/webhooks/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEventNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)));
        }

        /// <summary>
        /// Get all webhook subscription event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public async System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesAsync ()
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> localVarResponse = await GetWebhookEventNamesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all webhook subscription event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>> GetWebhookEventNamesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.0/webhooks/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEventNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)));
        }

        /// <summary>
        /// Get your webhook subscriptions selected event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult GetWebhookEventNamesBySubscriptionId (string clientId, int? webhookSubscriptionId)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> localVarResponse = GetWebhookEventNamesBySubscriptionIdWithHttpInfo(clientId, webhookSubscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your webhook subscriptions selected event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public ApiResponse< FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult > GetWebhookEventNamesBySubscriptionIdWithHttpInfo (string clientId, int? webhookSubscriptionId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookEventNamesBySubscriptionId");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->GetWebhookEventNamesBySubscriptionId");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEventNamesBySubscriptionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)));
        }

        /// <summary>
        /// Get your webhook subscriptions selected event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult</returns>
        public async System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> GetWebhookEventNamesBySubscriptionIdAsync (string clientId, int? webhookSubscriptionId)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult> localVarResponse = await GetWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo(clientId, webhookSubscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your webhook subscriptions selected event names 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>> GetWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookEventNamesBySubscriptionId");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->GetWebhookEventNamesBySubscriptionId");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEventNamesBySubscriptionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiStringArrayResult)));
        }

        /// <summary>
        /// Get logs for your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        public FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog GetWebhookLogs (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog> localVarResponse = GetWebhookLogsWithHttpInfo(clientId, webhookSubscriptionId, start, end, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs for your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        public ApiResponse< FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog > GetWebhookLogsWithHttpInfo (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling WebhooksApi->GetWebhookLogs");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (take != null) localVarQueryParams.Add("take", Configuration.ApiClient.ParameterToString(take)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog)));
        }

        /// <summary>
        /// Get logs for your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog</returns>
        public async System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog> GetWebhookLogsAsync (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(clientId, webhookSubscriptionId, start, end, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logs for your webhook subscription 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="start">Start time</param>
        /// <param name="end">End time</param>
        /// <param name="take">Page size (optional)</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog>> GetWebhookLogsAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, DateTime? start, DateTime? end, int? take = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling WebhooksApi->GetWebhookLogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling WebhooksApi->GetWebhookLogs");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (take != null) localVarQueryParams.Add("take", Configuration.ApiClient.ParameterToString(take)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookLog)));
        }

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        public FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription GetWebhookSubscriptions (string clientId)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription> localVarResponse = GetWebhookSubscriptionsWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>ApiResponse of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        public ApiResponse< FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription > GetWebhookSubscriptionsWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookSubscriptions");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription)));
        }

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>Task of FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription</returns>
        public async System.Threading.Tasks.Task<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription> GetWebhookSubscriptionsAsync (string clientId)
        {
             ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription> localVarResponse = await GetWebhookSubscriptionsAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all webhook subscriptions by your Oauth client id 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <returns>Task of ApiResponse (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription>> GetWebhookSubscriptionsAsyncWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->GetWebhookSubscriptions");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlipdishPublicModelsV1ApiResultsRestApiArrayResultFlipdishPublicModelsV1WebhooksWebhookSubscription)));
        }

        /// <summary>
        /// Update a webhook subscription object 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns></returns>
        public void UpdateWebhookSubscription (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
             UpdateWebhookSubscriptionWithHttpInfo(clientId, webhookSubscriptionId, webhookSubscription);
        }

        /// <summary>
        /// Update a webhook subscription object 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWebhookSubscriptionWithHttpInfo (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->UpdateWebhookSubscription");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->UpdateWebhookSubscription");
            // verify the required parameter 'webhookSubscription' is set
            if (webhookSubscription == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscription' when calling WebhooksApi->UpdateWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (webhookSubscription != null && webhookSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookSubscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a webhook subscription object 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWebhookSubscriptionAsync (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
             await UpdateWebhookSubscriptionAsyncWithHttpInfo(clientId, webhookSubscriptionId, webhookSubscription);

        }

        /// <summary>
        /// Update a webhook subscription object 
        /// </summary>
        /// <exception cref="Flipdish.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Oauth client identifier</param>
        /// <param name="webhookSubscriptionId">Webhook subscription identifier</param>
        /// <param name="webhookSubscription">Webhook subscription object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookSubscriptionAsyncWithHttpInfo (string clientId, int? webhookSubscriptionId, FlipdishPublicModelsV1WebhooksWebhookSubscription webhookSubscription)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling WebhooksApi->UpdateWebhookSubscription");
            // verify the required parameter 'webhookSubscriptionId' is set
            if (webhookSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscriptionId' when calling WebhooksApi->UpdateWebhookSubscription");
            // verify the required parameter 'webhookSubscription' is set
            if (webhookSubscription == null)
                throw new ApiException(400, "Missing required parameter 'webhookSubscription' when calling WebhooksApi->UpdateWebhookSubscription");

            var localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (webhookSubscriptionId != null) localVarPathParams.Add("webhookSubscriptionId", Configuration.ApiClient.ParameterToString(webhookSubscriptionId)); // path parameter
            if (webhookSubscription != null && webhookSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookSubscription; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

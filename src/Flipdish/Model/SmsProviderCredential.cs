/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// SmsProviderCredential
    /// </summary>
    [DataContract]
    public partial class SmsProviderCredential :  IEquatable<SmsProviderCredential>
    {
        /// <summary>
        /// Defines SmsServiceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmsServiceTypeEnum
        {
            
            /// <summary>
            /// Enum Nexmo for value: Nexmo
            /// </summary>
            [EnumMember(Value = "Nexmo")]
            Nexmo = 1,
            
            /// <summary>
            /// Enum Twilio for value: Twilio
            /// </summary>
            [EnumMember(Value = "Twilio")]
            Twilio = 2,
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 3,
            
            /// <summary>
            /// Enum MessageBird for value: MessageBird
            /// </summary>
            [EnumMember(Value = "MessageBird")]
            MessageBird = 4
        }

        /// <summary>
        /// Gets or Sets SmsServiceType
        /// </summary>
        [DataMember(Name="SmsServiceType", EmitDefaultValue=false)]
        public SmsServiceTypeEnum? SmsServiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsProviderCredential" /> class.
        /// </summary>
        /// <param name="orgId">orgId.</param>
        /// <param name="brandId">brandId.</param>
        /// <param name="smsServiceType">smsServiceType.</param>
        /// <param name="senderId">senderId.</param>
        /// <param name="username">username.</param>
        /// <param name="authToken">authToken.</param>
        public SmsProviderCredential(string orgId = default(string), string brandId = default(string), SmsServiceTypeEnum? smsServiceType = default(SmsServiceTypeEnum?), string senderId = default(string), string username = default(string), string authToken = default(string))
        {
            this.OrgId = orgId;
            this.BrandId = brandId;
            this.SmsServiceType = smsServiceType;
            this.SenderId = senderId;
            this.Username = username;
            this.AuthToken = authToken;
        }
        
        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name="OrgId", EmitDefaultValue=false)]
        public string OrgId { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name="BrandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }


        /// <summary>
        /// Gets or Sets SenderId
        /// </summary>
        [DataMember(Name="SenderId", EmitDefaultValue=false)]
        public string SenderId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name="AuthToken", EmitDefaultValue=false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsProviderCredential {\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  SmsServiceType: ").Append(SmsServiceType).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmsProviderCredential);
        }

        /// <summary>
        /// Returns true if SmsProviderCredential instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsProviderCredential to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsProviderCredential input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.SmsServiceType == input.SmsServiceType ||
                    (this.SmsServiceType != null &&
                    this.SmsServiceType.Equals(input.SmsServiceType))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.BrandId != null)
                    hashCode = hashCode * 59 + this.BrandId.GetHashCode();
                if (this.SmsServiceType != null)
                    hashCode = hashCode * 59 + this.SmsServiceType.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                return hashCode;
            }
        }
    }

}

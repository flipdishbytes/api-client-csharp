/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Order Delivery Status Information
    /// </summary>
    [DataContract]
    public partial class OrderDeliveryInformation :  IEquatable<OrderDeliveryInformation>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Unassigned for value: Unassigned
            /// </summary>
            [EnumMember(Value = "Unassigned")]
            Unassigned = 2,
            
            /// <summary>
            /// Enum Unaccepted for value: Unaccepted
            /// </summary>
            [EnumMember(Value = "Unaccepted")]
            Unaccepted = 3,
            
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 4,
            
            /// <summary>
            /// Enum Carrying for value: Carrying
            /// </summary>
            [EnumMember(Value = "Carrying")]
            Carrying = 5,
            
            /// <summary>
            /// Enum OnTheWay for value: OnTheWay
            /// </summary>
            [EnumMember(Value = "OnTheWay")]
            OnTheWay = 6,
            
            /// <summary>
            /// Enum ArrivedAtLocation for value: ArrivedAtLocation
            /// </summary>
            [EnumMember(Value = "ArrivedAtLocation")]
            ArrivedAtLocation = 7,
            
            /// <summary>
            /// Enum Delivered for value: Delivered
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered = 8,
            
            /// <summary>
            /// Enum CannotDeliver for value: CannotDeliver
            /// </summary>
            [EnumMember(Value = "CannotDeliver")]
            CannotDeliver = 9
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDeliveryInformation" /> class.
        /// </summary>
        /// <param name="orderId">orderId.</param>
        /// <param name="externalReferenceId">externalReferenceId.</param>
        /// <param name="trackUrl">trackUrl.</param>
        /// <param name="status">status.</param>
        /// <param name="deliveryStatusNotes">deliveryStatusNotes.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="integrationCode">integrationCode.</param>
        /// <param name="integrationName">integrationName.</param>
        public OrderDeliveryInformation(int? orderId = default(int?), string externalReferenceId = default(string), string trackUrl = default(string), StatusEnum? status = default(StatusEnum?), string deliveryStatusNotes = default(string), string errorMessage = default(string), string integrationCode = default(string), string integrationName = default(string))
        {
            this.OrderId = orderId;
            this.ExternalReferenceId = externalReferenceId;
            this.TrackUrl = trackUrl;
            this.Status = status;
            this.DeliveryStatusNotes = deliveryStatusNotes;
            this.ErrorMessage = errorMessage;
            this.IntegrationCode = integrationCode;
            this.IntegrationName = integrationName;
        }
        
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReferenceId
        /// </summary>
        [DataMember(Name="ExternalReferenceId", EmitDefaultValue=false)]
        public string ExternalReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets TrackUrl
        /// </summary>
        [DataMember(Name="TrackUrl", EmitDefaultValue=false)]
        public string TrackUrl { get; set; }


        /// <summary>
        /// Gets or Sets DeliveryStatusNotes
        /// </summary>
        [DataMember(Name="DeliveryStatusNotes", EmitDefaultValue=false)]
        public string DeliveryStatusNotes { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationCode
        /// </summary>
        [DataMember(Name="IntegrationCode", EmitDefaultValue=false)]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationName
        /// </summary>
        [DataMember(Name="IntegrationName", EmitDefaultValue=false)]
        public string IntegrationName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDeliveryInformation {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ExternalReferenceId: ").Append(ExternalReferenceId).Append("\n");
            sb.Append("  TrackUrl: ").Append(TrackUrl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DeliveryStatusNotes: ").Append(DeliveryStatusNotes).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  IntegrationCode: ").Append(IntegrationCode).Append("\n");
            sb.Append("  IntegrationName: ").Append(IntegrationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDeliveryInformation);
        }

        /// <summary>
        /// Returns true if OrderDeliveryInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDeliveryInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDeliveryInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ExternalReferenceId == input.ExternalReferenceId ||
                    (this.ExternalReferenceId != null &&
                    this.ExternalReferenceId.Equals(input.ExternalReferenceId))
                ) && 
                (
                    this.TrackUrl == input.TrackUrl ||
                    (this.TrackUrl != null &&
                    this.TrackUrl.Equals(input.TrackUrl))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DeliveryStatusNotes == input.DeliveryStatusNotes ||
                    (this.DeliveryStatusNotes != null &&
                    this.DeliveryStatusNotes.Equals(input.DeliveryStatusNotes))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.IntegrationCode == input.IntegrationCode ||
                    (this.IntegrationCode != null &&
                    this.IntegrationCode.Equals(input.IntegrationCode))
                ) && 
                (
                    this.IntegrationName == input.IntegrationName ||
                    (this.IntegrationName != null &&
                    this.IntegrationName.Equals(input.IntegrationName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ExternalReferenceId != null)
                    hashCode = hashCode * 59 + this.ExternalReferenceId.GetHashCode();
                if (this.TrackUrl != null)
                    hashCode = hashCode * 59 + this.TrackUrl.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DeliveryStatusNotes != null)
                    hashCode = hashCode * 59 + this.DeliveryStatusNotes.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.IntegrationCode != null)
                    hashCode = hashCode * 59 + this.IntegrationCode.GetHashCode();
                if (this.IntegrationName != null)
                    hashCode = hashCode * 59 + this.IntegrationName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

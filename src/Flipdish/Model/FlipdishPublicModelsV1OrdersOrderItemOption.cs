/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// FlipdishPublicModelsV1OrdersOrderItemOption
    /// </summary>
    [DataContract]
    public partial class FlipdishPublicModelsV1OrdersOrderItemOption :  IEquatable<FlipdishPublicModelsV1OrdersOrderItemOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlipdishPublicModelsV1OrdersOrderItemOption" /> class.
        /// </summary>
        /// <param name="MenuItemOptionId">MenuItemOptionId.</param>
        /// <param name="IsMasterOptionSetItem">IsMasterOptionSetItem.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Price">Price.</param>
        /// <param name="MenuItemOptionDisplayOrder">MenuItemOptionDisplayOrder.</param>
        /// <param name="MenuItemOptionSetDisplayOrder">MenuItemOptionSetDisplayOrder.</param>
        /// <param name="Metadata">Metadata.</param>
        public FlipdishPublicModelsV1OrdersOrderItemOption(int? MenuItemOptionId = default(int?), bool? IsMasterOptionSetItem = default(bool?), string Name = default(string), double? Price = default(double?), int? MenuItemOptionDisplayOrder = default(int?), int? MenuItemOptionSetDisplayOrder = default(int?), Dictionary<string, string> Metadata = default(Dictionary<string, string>))
        {
            this.MenuItemOptionId = MenuItemOptionId;
            this.IsMasterOptionSetItem = IsMasterOptionSetItem;
            this.Name = Name;
            this.Price = Price;
            this.MenuItemOptionDisplayOrder = MenuItemOptionDisplayOrder;
            this.MenuItemOptionSetDisplayOrder = MenuItemOptionSetDisplayOrder;
            this.Metadata = Metadata;
        }
        
        /// <summary>
        /// Gets or Sets MenuItemOptionId
        /// </summary>
        [DataMember(Name="menuItemOptionId", EmitDefaultValue=false)]
        public int? MenuItemOptionId { get; set; }

        /// <summary>
        /// Gets or Sets IsMasterOptionSetItem
        /// </summary>
        [DataMember(Name="isMasterOptionSetItem", EmitDefaultValue=false)]
        public bool? IsMasterOptionSetItem { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets MenuItemOptionDisplayOrder
        /// </summary>
        [DataMember(Name="menuItemOptionDisplayOrder", EmitDefaultValue=false)]
        public int? MenuItemOptionDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets MenuItemOptionSetDisplayOrder
        /// </summary>
        [DataMember(Name="menuItemOptionSetDisplayOrder", EmitDefaultValue=false)]
        public int? MenuItemOptionSetDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlipdishPublicModelsV1OrdersOrderItemOption {\n");
            sb.Append("  MenuItemOptionId: ").Append(MenuItemOptionId).Append("\n");
            sb.Append("  IsMasterOptionSetItem: ").Append(IsMasterOptionSetItem).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  MenuItemOptionDisplayOrder: ").Append(MenuItemOptionDisplayOrder).Append("\n");
            sb.Append("  MenuItemOptionSetDisplayOrder: ").Append(MenuItemOptionSetDisplayOrder).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlipdishPublicModelsV1OrdersOrderItemOption);
        }

        /// <summary>
        /// Returns true if FlipdishPublicModelsV1OrdersOrderItemOption instances are equal
        /// </summary>
        /// <param name="other">Instance of FlipdishPublicModelsV1OrdersOrderItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlipdishPublicModelsV1OrdersOrderItemOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MenuItemOptionId == other.MenuItemOptionId ||
                    this.MenuItemOptionId != null &&
                    this.MenuItemOptionId.Equals(other.MenuItemOptionId)
                ) && 
                (
                    this.IsMasterOptionSetItem == other.IsMasterOptionSetItem ||
                    this.IsMasterOptionSetItem != null &&
                    this.IsMasterOptionSetItem.Equals(other.IsMasterOptionSetItem)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.MenuItemOptionDisplayOrder == other.MenuItemOptionDisplayOrder ||
                    this.MenuItemOptionDisplayOrder != null &&
                    this.MenuItemOptionDisplayOrder.Equals(other.MenuItemOptionDisplayOrder)
                ) && 
                (
                    this.MenuItemOptionSetDisplayOrder == other.MenuItemOptionSetDisplayOrder ||
                    this.MenuItemOptionSetDisplayOrder != null &&
                    this.MenuItemOptionSetDisplayOrder.Equals(other.MenuItemOptionSetDisplayOrder)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MenuItemOptionId != null)
                    hash = hash * 59 + this.MenuItemOptionId.GetHashCode();
                if (this.IsMasterOptionSetItem != null)
                    hash = hash * 59 + this.IsMasterOptionSetItem.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.MenuItemOptionDisplayOrder != null)
                    hash = hash * 59 + this.MenuItemOptionDisplayOrder.GetHashCode();
                if (this.MenuItemOptionSetDisplayOrder != null)
                    hash = hash * 59 + this.MenuItemOptionSetDisplayOrder.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

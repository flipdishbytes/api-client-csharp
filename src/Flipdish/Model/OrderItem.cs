/* 
 * Flipdish Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="MenuSectionName">MenuSectionName.</param>
        /// <param name="MenuSectionDisplayOrder">MenuSectionDisplayOrder.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Price">Price.</param>
        /// <param name="PriceIncludingOptionSetItems">PriceIncludingOptionSetItems.</param>
        /// <param name="MenuItemId">MenuItemId.</param>
        /// <param name="MenuItemDisplayOrder">MenuItemDisplayOrder.</param>
        /// <param name="IsAvailable">IsAvailable.</param>
        /// <param name="OrderItemOptions">OrderItemOptions.</param>
        /// <param name="Metadata">Metadata.</param>
        public OrderItem(string MenuSectionName = default(string), int? MenuSectionDisplayOrder = default(int?), string Name = default(string), string Description = default(string), double? Price = default(double?), double? PriceIncludingOptionSetItems = default(double?), int? MenuItemId = default(int?), int? MenuItemDisplayOrder = default(int?), bool? IsAvailable = default(bool?), List<OrderItemOption> OrderItemOptions = default(List<OrderItemOption>), Dictionary<string, string> Metadata = default(Dictionary<string, string>))
        {
            this.MenuSectionName = MenuSectionName;
            this.MenuSectionDisplayOrder = MenuSectionDisplayOrder;
            this.Name = Name;
            this.Description = Description;
            this.Price = Price;
            this.PriceIncludingOptionSetItems = PriceIncludingOptionSetItems;
            this.MenuItemId = MenuItemId;
            this.MenuItemDisplayOrder = MenuItemDisplayOrder;
            this.IsAvailable = IsAvailable;
            this.OrderItemOptions = OrderItemOptions;
            this.Metadata = Metadata;
        }
        
        /// <summary>
        /// Gets or Sets MenuSectionName
        /// </summary>
        [DataMember(Name="MenuSectionName", EmitDefaultValue=false)]
        public string MenuSectionName { get; set; }

        /// <summary>
        /// Gets or Sets MenuSectionDisplayOrder
        /// </summary>
        [DataMember(Name="MenuSectionDisplayOrder", EmitDefaultValue=false)]
        public int? MenuSectionDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets PriceIncludingOptionSetItems
        /// </summary>
        [DataMember(Name="PriceIncludingOptionSetItems", EmitDefaultValue=false)]
        public double? PriceIncludingOptionSetItems { get; set; }

        /// <summary>
        /// Gets or Sets MenuItemId
        /// </summary>
        [DataMember(Name="MenuItemId", EmitDefaultValue=false)]
        public int? MenuItemId { get; set; }

        /// <summary>
        /// Gets or Sets MenuItemDisplayOrder
        /// </summary>
        [DataMember(Name="MenuItemDisplayOrder", EmitDefaultValue=false)]
        public int? MenuItemDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name="IsAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemOptions
        /// </summary>
        [DataMember(Name="OrderItemOptions", EmitDefaultValue=false)]
        public List<OrderItemOption> OrderItemOptions { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="Metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  MenuSectionName: ").Append(MenuSectionName).Append("\n");
            sb.Append("  MenuSectionDisplayOrder: ").Append(MenuSectionDisplayOrder).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceIncludingOptionSetItems: ").Append(PriceIncludingOptionSetItems).Append("\n");
            sb.Append("  MenuItemId: ").Append(MenuItemId).Append("\n");
            sb.Append("  MenuItemDisplayOrder: ").Append(MenuItemDisplayOrder).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  OrderItemOptions: ").Append(OrderItemOptions).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MenuSectionName == other.MenuSectionName ||
                    this.MenuSectionName != null &&
                    this.MenuSectionName.Equals(other.MenuSectionName)
                ) && 
                (
                    this.MenuSectionDisplayOrder == other.MenuSectionDisplayOrder ||
                    this.MenuSectionDisplayOrder != null &&
                    this.MenuSectionDisplayOrder.Equals(other.MenuSectionDisplayOrder)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.PriceIncludingOptionSetItems == other.PriceIncludingOptionSetItems ||
                    this.PriceIncludingOptionSetItems != null &&
                    this.PriceIncludingOptionSetItems.Equals(other.PriceIncludingOptionSetItems)
                ) && 
                (
                    this.MenuItemId == other.MenuItemId ||
                    this.MenuItemId != null &&
                    this.MenuItemId.Equals(other.MenuItemId)
                ) && 
                (
                    this.MenuItemDisplayOrder == other.MenuItemDisplayOrder ||
                    this.MenuItemDisplayOrder != null &&
                    this.MenuItemDisplayOrder.Equals(other.MenuItemDisplayOrder)
                ) && 
                (
                    this.IsAvailable == other.IsAvailable ||
                    this.IsAvailable != null &&
                    this.IsAvailable.Equals(other.IsAvailable)
                ) && 
                (
                    this.OrderItemOptions == other.OrderItemOptions ||
                    this.OrderItemOptions != null &&
                    this.OrderItemOptions.SequenceEqual(other.OrderItemOptions)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MenuSectionName != null)
                    hash = hash * 59 + this.MenuSectionName.GetHashCode();
                if (this.MenuSectionDisplayOrder != null)
                    hash = hash * 59 + this.MenuSectionDisplayOrder.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.PriceIncludingOptionSetItems != null)
                    hash = hash * 59 + this.PriceIncludingOptionSetItems.GetHashCode();
                if (this.MenuItemId != null)
                    hash = hash * 59 + this.MenuItemId.GetHashCode();
                if (this.MenuItemDisplayOrder != null)
                    hash = hash * 59 + this.MenuItemDisplayOrder.GetHashCode();
                if (this.IsAvailable != null)
                    hash = hash * 59 + this.IsAvailable.GetHashCode();
                if (this.OrderItemOptions != null)
                    hash = hash * 59 + this.OrderItemOptions.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

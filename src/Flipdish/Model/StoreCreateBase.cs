/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store Create Base
    /// </summary>
    [DataContract]
    public partial class StoreCreateBase :  IEquatable<StoreCreateBase>
    {
        /// <summary>
        /// Sales Channel Type
        /// </summary>
        /// <value>Sales Channel Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesChannelTypeEnum
        {
            
            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            [EnumMember(Value = "Web")]
            Web = 1,
            
            /// <summary>
            /// Enum App for value: App
            /// </summary>
            [EnumMember(Value = "App")]
            App = 2,
            
            /// <summary>
            /// Enum Kiosk for value: Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            Kiosk = 3,
            
            /// <summary>
            /// Enum Pos for value: Pos
            /// </summary>
            [EnumMember(Value = "Pos")]
            Pos = 4
        }

        /// <summary>
        /// Sales Channel Type
        /// </summary>
        /// <value>Sales Channel Type</value>
        [DataMember(Name="SalesChannelType", EmitDefaultValue=false)]
        public SalesChannelTypeEnum? SalesChannelType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreCreateBase" /> class.
        /// </summary>
        /// <param name="name">Name.</param>
        /// <param name="emailAddress">Email address (visible to customers).</param>
        /// <param name="staffLanguage">Staff Language (used for communication with the staff)  Emails, Printouts etc.</param>
        /// <param name="salesChannelType">Sales Channel Type.</param>
        /// <param name="phoneNumber">Phone Number.</param>
        public StoreCreateBase(string name = default(string), string emailAddress = default(string), string staffLanguage = default(string), SalesChannelTypeEnum? salesChannelType = default(SalesChannelTypeEnum?), string phoneNumber = default(string))
        {
            this.Name = name;
            this.EmailAddress = emailAddress;
            this.StaffLanguage = staffLanguage;
            this.SalesChannelType = salesChannelType;
            this.PhoneNumber = phoneNumber;
        }
        
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Email address (visible to customers)
        /// </summary>
        /// <value>Email address (visible to customers)</value>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Staff Language (used for communication with the staff)  Emails, Printouts etc
        /// </summary>
        /// <value>Staff Language (used for communication with the staff)  Emails, Printouts etc</value>
        [DataMember(Name="StaffLanguage", EmitDefaultValue=false)]
        public string StaffLanguage { get; set; }


        /// <summary>
        /// Phone Number
        /// </summary>
        /// <value>Phone Number</value>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreCreateBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  StaffLanguage: ").Append(StaffLanguage).Append("\n");
            sb.Append("  SalesChannelType: ").Append(SalesChannelType).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreCreateBase);
        }

        /// <summary>
        /// Returns true if StoreCreateBase instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreCreateBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreCreateBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.StaffLanguage == input.StaffLanguage ||
                    (this.StaffLanguage != null &&
                    this.StaffLanguage.Equals(input.StaffLanguage))
                ) && 
                (
                    this.SalesChannelType == input.SalesChannelType ||
                    (this.SalesChannelType != null &&
                    this.SalesChannelType.Equals(input.SalesChannelType))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.StaffLanguage != null)
                    hashCode = hashCode * 59 + this.StaffLanguage.GetHashCode();
                if (this.SalesChannelType != null)
                    hashCode = hashCode * 59 + this.SalesChannelType.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                return hashCode;
            }
        }
    }

}

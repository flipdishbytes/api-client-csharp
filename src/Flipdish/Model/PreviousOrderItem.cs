/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PreviousOrderItem
    /// </summary>
    [DataContract]
    public partial class PreviousOrderItem :  IEquatable<PreviousOrderItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviousOrderItem" /> class.
        /// </summary>
        /// <param name="menuSectionDisplayOrder">menuSectionDisplayOrder.</param>
        /// <param name="menuSectionName">menuSectionName.</param>
        /// <param name="name">name.</param>
        /// <param name="priceIncludingOptionSetItems">priceIncludingOptionSetItems.</param>
        /// <param name="depositReturnFee">depositReturnFee.</param>
        /// <param name="taxAmount">taxAmount.</param>
        /// <param name="previousOrderItemOptions">previousOrderItemOptions.</param>
        public PreviousOrderItem(int? menuSectionDisplayOrder = default(int?), string menuSectionName = default(string), string name = default(string), double? priceIncludingOptionSetItems = default(double?), double? depositReturnFee = default(double?), double? taxAmount = default(double?), List<PreviousOrderItemOption> previousOrderItemOptions = default(List<PreviousOrderItemOption>))
        {
            this.MenuSectionDisplayOrder = menuSectionDisplayOrder;
            this.MenuSectionName = menuSectionName;
            this.Name = name;
            this.PriceIncludingOptionSetItems = priceIncludingOptionSetItems;
            this.DepositReturnFee = depositReturnFee;
            this.TaxAmount = taxAmount;
            this.PreviousOrderItemOptions = previousOrderItemOptions;
        }
        
        /// <summary>
        /// Gets or Sets MenuSectionDisplayOrder
        /// </summary>
        [DataMember(Name="MenuSectionDisplayOrder", EmitDefaultValue=false)]
        public int? MenuSectionDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets MenuSectionName
        /// </summary>
        [DataMember(Name="MenuSectionName", EmitDefaultValue=false)]
        public string MenuSectionName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PriceIncludingOptionSetItems
        /// </summary>
        [DataMember(Name="PriceIncludingOptionSetItems", EmitDefaultValue=false)]
        public double? PriceIncludingOptionSetItems { get; set; }

        /// <summary>
        /// Gets or Sets DepositReturnFee
        /// </summary>
        [DataMember(Name="DepositReturnFee", EmitDefaultValue=false)]
        public double? DepositReturnFee { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="TaxAmount", EmitDefaultValue=false)]
        public double? TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets PreviousOrderItemOptions
        /// </summary>
        [DataMember(Name="PreviousOrderItemOptions", EmitDefaultValue=false)]
        public List<PreviousOrderItemOption> PreviousOrderItemOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreviousOrderItem {\n");
            sb.Append("  MenuSectionDisplayOrder: ").Append(MenuSectionDisplayOrder).Append("\n");
            sb.Append("  MenuSectionName: ").Append(MenuSectionName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PriceIncludingOptionSetItems: ").Append(PriceIncludingOptionSetItems).Append("\n");
            sb.Append("  DepositReturnFee: ").Append(DepositReturnFee).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  PreviousOrderItemOptions: ").Append(PreviousOrderItemOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreviousOrderItem);
        }

        /// <summary>
        /// Returns true if PreviousOrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PreviousOrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviousOrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MenuSectionDisplayOrder == input.MenuSectionDisplayOrder ||
                    (this.MenuSectionDisplayOrder != null &&
                    this.MenuSectionDisplayOrder.Equals(input.MenuSectionDisplayOrder))
                ) && 
                (
                    this.MenuSectionName == input.MenuSectionName ||
                    (this.MenuSectionName != null &&
                    this.MenuSectionName.Equals(input.MenuSectionName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PriceIncludingOptionSetItems == input.PriceIncludingOptionSetItems ||
                    (this.PriceIncludingOptionSetItems != null &&
                    this.PriceIncludingOptionSetItems.Equals(input.PriceIncludingOptionSetItems))
                ) && 
                (
                    this.DepositReturnFee == input.DepositReturnFee ||
                    (this.DepositReturnFee != null &&
                    this.DepositReturnFee.Equals(input.DepositReturnFee))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.PreviousOrderItemOptions == input.PreviousOrderItemOptions ||
                    this.PreviousOrderItemOptions != null &&
                    this.PreviousOrderItemOptions.SequenceEqual(input.PreviousOrderItemOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MenuSectionDisplayOrder != null)
                    hashCode = hashCode * 59 + this.MenuSectionDisplayOrder.GetHashCode();
                if (this.MenuSectionName != null)
                    hashCode = hashCode * 59 + this.MenuSectionName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PriceIncludingOptionSetItems != null)
                    hashCode = hashCode * 59 + this.PriceIncludingOptionSetItems.GetHashCode();
                if (this.DepositReturnFee != null)
                    hashCode = hashCode * 59 + this.DepositReturnFee.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.PreviousOrderItemOptions != null)
                    hashCode = hashCode * 59 + this.PreviousOrderItemOptions.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// OwnerEntity information to configure its {Flipdish.Metafields.PublicModels.V1.MetafieldDefinition}s
    /// </summary>
    [DataContract]
    public partial class OwnerEntityConfiguration :  IEquatable<OwnerEntityConfiguration>
    {
        /// <summary>
        /// Owner Entity
        /// </summary>
        /// <value>Owner Entity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OwnerEntityEnum
        {
            
            /// <summary>
            /// Enum CatalogItem for value: CatalogItem
            /// </summary>
            [EnumMember(Value = "CatalogItem")]
            CatalogItem = 1,
            
            /// <summary>
            /// Enum CatalogGroup for value: CatalogGroup
            /// </summary>
            [EnumMember(Value = "CatalogGroup")]
            CatalogGroup = 2,
            
            /// <summary>
            /// Enum Menu for value: Menu
            /// </summary>
            [EnumMember(Value = "Menu")]
            Menu = 3
        }

        /// <summary>
        /// Owner Entity
        /// </summary>
        /// <value>Owner Entity</value>
        [DataMember(Name="OwnerEntity", EmitDefaultValue=false)]
        public OwnerEntityEnum? OwnerEntity { get; set; }
        /// <summary>
        /// Defines AllowedBehaviors
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowedBehaviorsEnum
        {
            
            /// <summary>
            /// Enum SendToOrder for value: SendToOrder
            /// </summary>
            [EnumMember(Value = "SendToOrder")]
            SendToOrder = 1,
            
            /// <summary>
            /// Enum SendToMenu for value: SendToMenu
            /// </summary>
            [EnumMember(Value = "SendToMenu")]
            SendToMenu = 2
        }


        /// <summary>
        /// Gets or Sets AllowedBehaviors
        /// </summary>
        [DataMember(Name="AllowedBehaviors", EmitDefaultValue=false)]
        public List<AllowedBehaviorsEnum> AllowedBehaviors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnerEntityConfiguration" /> class.
        /// </summary>
        /// <param name="ownerEntity">Owner Entity.</param>
        /// <param name="allowedBehaviors">allowedBehaviors.</param>
        public OwnerEntityConfiguration(OwnerEntityEnum? ownerEntity = default(OwnerEntityEnum?), List<AllowedBehaviorsEnum> allowedBehaviors = default(List<AllowedBehaviorsEnum>))
        {
            this.OwnerEntity = ownerEntity;
            this.AllowedBehaviors = allowedBehaviors;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnerEntityConfiguration {\n");
            sb.Append("  OwnerEntity: ").Append(OwnerEntity).Append("\n");
            sb.Append("  AllowedBehaviors: ").Append(AllowedBehaviors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnerEntityConfiguration);
        }

        /// <summary>
        /// Returns true if OwnerEntityConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnerEntityConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnerEntityConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OwnerEntity == input.OwnerEntity ||
                    (this.OwnerEntity != null &&
                    this.OwnerEntity.Equals(input.OwnerEntity))
                ) && 
                (
                    this.AllowedBehaviors == input.AllowedBehaviors ||
                    this.AllowedBehaviors != null &&
                    this.AllowedBehaviors.SequenceEqual(input.AllowedBehaviors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OwnerEntity != null)
                    hashCode = hashCode * 59 + this.OwnerEntity.GetHashCode();
                if (this.AllowedBehaviors != null)
                    hashCode = hashCode * 59 + this.AllowedBehaviors.GetHashCode();
                return hashCode;
            }
        }
    }

}

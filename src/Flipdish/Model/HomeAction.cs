/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// HomeAction
    /// </summary>
    [DataContract]
    public partial class HomeAction :  IEquatable<HomeAction>, IValidatableObject
    {
        /// <summary>
        /// Type of Action
        /// </summary>
        /// <value>Type of Action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HomeActionTypeEnum
        {
            
            /// <summary>
            /// Enum Portal for value: Portal
            /// </summary>
            [EnumMember(Value = "Portal")]
            Portal = 1,
            
            /// <summary>
            /// Enum External for value: External
            /// </summary>
            [EnumMember(Value = "External")]
            External = 2
        }

        /// <summary>
        /// Type of Action
        /// </summary>
        /// <value>Type of Action</value>
        [DataMember(Name="HomeActionType", EmitDefaultValue=false)]
        public HomeActionTypeEnum? HomeActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HomeAction" /> class.
        /// </summary>
        /// <param name="homeActionId">homeActionId.</param>
        /// <param name="homeActionType">Type of Action.</param>
        /// <param name="order">order.</param>
        /// <param name="titleKey">titleKey.</param>
        /// <param name="actionKey">actionKey.</param>
        /// <param name="descriptionKey">descriptionKey.</param>
        /// <param name="action">action.</param>
        /// <param name="dismissible">dismissible.</param>
        public HomeAction(int? homeActionId = default(int?), HomeActionTypeEnum? homeActionType = default(HomeActionTypeEnum?), int? order = default(int?), string titleKey = default(string), string actionKey = default(string), string descriptionKey = default(string), string action = default(string), bool? dismissible = default(bool?))
        {
            this.HomeActionId = homeActionId;
            this.HomeActionType = homeActionType;
            this.Order = order;
            this.TitleKey = titleKey;
            this.ActionKey = actionKey;
            this.DescriptionKey = descriptionKey;
            this.Action = action;
            this.Dismissible = dismissible;
        }
        
        /// <summary>
        /// Gets or Sets HomeActionId
        /// </summary>
        [DataMember(Name="HomeActionId", EmitDefaultValue=false)]
        public int? HomeActionId { get; set; }


        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="Order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets TitleKey
        /// </summary>
        [DataMember(Name="TitleKey", EmitDefaultValue=false)]
        public string TitleKey { get; set; }

        /// <summary>
        /// Gets or Sets ActionKey
        /// </summary>
        [DataMember(Name="ActionKey", EmitDefaultValue=false)]
        public string ActionKey { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionKey
        /// </summary>
        [DataMember(Name="DescriptionKey", EmitDefaultValue=false)]
        public string DescriptionKey { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Dismissible
        /// </summary>
        [DataMember(Name="Dismissible", EmitDefaultValue=false)]
        public bool? Dismissible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HomeAction {\n");
            sb.Append("  HomeActionId: ").Append(HomeActionId).Append("\n");
            sb.Append("  HomeActionType: ").Append(HomeActionType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  TitleKey: ").Append(TitleKey).Append("\n");
            sb.Append("  ActionKey: ").Append(ActionKey).Append("\n");
            sb.Append("  DescriptionKey: ").Append(DescriptionKey).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Dismissible: ").Append(Dismissible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HomeAction);
        }

        /// <summary>
        /// Returns true if HomeAction instances are equal
        /// </summary>
        /// <param name="input">Instance of HomeAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HomeAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HomeActionId == input.HomeActionId ||
                    (this.HomeActionId != null &&
                    this.HomeActionId.Equals(input.HomeActionId))
                ) && 
                (
                    this.HomeActionType == input.HomeActionType ||
                    (this.HomeActionType != null &&
                    this.HomeActionType.Equals(input.HomeActionType))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.TitleKey == input.TitleKey ||
                    (this.TitleKey != null &&
                    this.TitleKey.Equals(input.TitleKey))
                ) && 
                (
                    this.ActionKey == input.ActionKey ||
                    (this.ActionKey != null &&
                    this.ActionKey.Equals(input.ActionKey))
                ) && 
                (
                    this.DescriptionKey == input.DescriptionKey ||
                    (this.DescriptionKey != null &&
                    this.DescriptionKey.Equals(input.DescriptionKey))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Dismissible == input.Dismissible ||
                    (this.Dismissible != null &&
                    this.Dismissible.Equals(input.Dismissible))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HomeActionId != null)
                    hashCode = hashCode * 59 + this.HomeActionId.GetHashCode();
                if (this.HomeActionType != null)
                    hashCode = hashCode * 59 + this.HomeActionType.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.TitleKey != null)
                    hashCode = hashCode * 59 + this.TitleKey.GetHashCode();
                if (this.ActionKey != null)
                    hashCode = hashCode * 59 + this.ActionKey.GetHashCode();
                if (this.DescriptionKey != null)
                    hashCode = hashCode * 59 + this.DescriptionKey.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Dismissible != null)
                    hashCode = hashCode * 59 + this.Dismissible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

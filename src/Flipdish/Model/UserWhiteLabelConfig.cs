/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User WhiteLabelConfig
    /// </summary>
    [DataContract]
    public partial class UserWhiteLabelConfig :  IEquatable<UserWhiteLabelConfig>
    {
        /// <summary>
        /// WhiteLabel Access Level
        /// </summary>
        /// <value>WhiteLabel Access Level</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Owner for value: Owner
            /// </summary>
            [EnumMember(Value = "Owner")]
            Owner = 2,
            
            /// <summary>
            /// Enum StoreOwner for value: StoreOwner
            /// </summary>
            [EnumMember(Value = "StoreOwner")]
            StoreOwner = 3,
            
            /// <summary>
            /// Enum PropertyOwner for value: PropertyOwner
            /// </summary>
            [EnumMember(Value = "PropertyOwner")]
            PropertyOwner = 4,
            
            /// <summary>
            /// Enum ManagedOwner for value: ManagedOwner
            /// </summary>
            [EnumMember(Value = "ManagedOwner")]
            ManagedOwner = 5,
            
            /// <summary>
            /// Enum Integrator for value: Integrator
            /// </summary>
            [EnumMember(Value = "Integrator")]
            Integrator = 6,
            
            /// <summary>
            /// Enum PropertyManager for value: PropertyManager
            /// </summary>
            [EnumMember(Value = "PropertyManager")]
            PropertyManager = 7,
            
            /// <summary>
            /// Enum StoreManager for value: StoreManager
            /// </summary>
            [EnumMember(Value = "StoreManager")]
            StoreManager = 8,
            
            /// <summary>
            /// Enum StoreStaff for value: StoreStaff
            /// </summary>
            [EnumMember(Value = "StoreStaff")]
            StoreStaff = 9,
            
            /// <summary>
            /// Enum StoreReadOnlyAccess for value: StoreReadOnlyAccess
            /// </summary>
            [EnumMember(Value = "StoreReadOnlyAccess")]
            StoreReadOnlyAccess = 10,
            
            /// <summary>
            /// Enum FinanceManager for value: FinanceManager
            /// </summary>
            [EnumMember(Value = "FinanceManager")]
            FinanceManager = 11,
            
            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 12
        }

        /// <summary>
        /// WhiteLabel Access Level
        /// </summary>
        /// <value>WhiteLabel Access Level</value>
        [DataMember(Name="Level", EmitDefaultValue=false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWhiteLabelConfig" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="configId">WlConfigId.</param>
        /// <param name="appId">Brand Id.</param>
        /// <param name="name">WhiteLabel Name.</param>
        /// <param name="level">WhiteLabel Access Level.</param>
        public UserWhiteLabelConfig(int? id = default(int?), int? configId = default(int?), string appId = default(string), string name = default(string), LevelEnum? level = default(LevelEnum?))
        {
            this.Id = id;
            this.ConfigId = configId;
            this.AppId = appId;
            this.Name = name;
            this.Level = level;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// WlConfigId
        /// </summary>
        /// <value>WlConfigId</value>
        [DataMember(Name="ConfigId", EmitDefaultValue=false)]
        public int? ConfigId { get; set; }

        /// <summary>
        /// Brand Id
        /// </summary>
        /// <value>Brand Id</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// WhiteLabel Name
        /// </summary>
        /// <value>WhiteLabel Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWhiteLabelConfig {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfigId: ").Append(ConfigId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWhiteLabelConfig);
        }

        /// <summary>
        /// Returns true if UserWhiteLabelConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWhiteLabelConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWhiteLabelConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConfigId == input.ConfigId ||
                    (this.ConfigId != null &&
                    this.ConfigId.Equals(input.ConfigId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ConfigId != null)
                    hashCode = hashCode * 59 + this.ConfigId.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                return hashCode;
            }
        }
    }

}

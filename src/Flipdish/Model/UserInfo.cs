/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User information
    /// </summary>
    [DataContract]
    public partial class UserInfo :  IEquatable<UserInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        /// <param name="phoneNumber">The user&#39;s phone number..</param>
        /// <param name="email">The user&#39;s email address..</param>
        /// <param name="emailConfirmed">Indicates if the user&#39;s email address has been confirmed..</param>
        /// <param name="preventFromUsingCards">Indicates if the user is prevented from using cards..</param>
        /// <param name="isUserPhoneNumberBlocked">Indicates if the user&#39;s phone number is blocked..</param>
        /// <param name="userWhiteLabels">List of white label information associated with the user..</param>
        /// <param name="userId">The unique identifier for the user..</param>
        /// <param name="userName">The user&#39;s username..</param>
        /// <param name="customerName">The customer&#39;s name..</param>
        /// <param name="hasLoggedIn">Indicates if the user has logged in..</param>
        /// <param name="disableAppRatingControl">Indicates if the app rating control is disabled for the user..</param>
        /// <param name="globallyOptedOut">Indicates if the user has globally opted out..</param>
        /// <param name="completedOrderCount">The number of completed orders by the user..</param>
        /// <param name="cancelledOrderCount">The number of cancelled orders by the user..</param>
        /// <param name="orderTotalValue">The total value of orders placed by the user..</param>
        /// <param name="tsMostRecentOrder">The timestamp of the user&#39;s most recent order..</param>
        /// <param name="tsFirstOrder">The timestamp of the user&#39;s first order..</param>
        /// <param name="isRestaurantUser">Indicates if the user is a restaurant user..</param>
        /// <param name="installs">List of app installs associated with the user..</param>
        /// <param name="deliveryLocations">List of delivery locations associated with the user..</param>
        /// <param name="paymentAccounts">List of payment accounts associated with the user..</param>
        /// <param name="languageId">The language identifier for the user..</param>
        /// <param name="currentLanguageName">Current language name for the user..</param>
        /// <param name="languages">Available languages that the user can choose from..</param>
        /// <param name="salesForceContactId">The Salesforce contact ID for the user..</param>
        /// <param name="stripeCustomerId">The Stripe customer ID for the user..</param>
        /// <param name="userMonthlyCommissions">User&#39;s monthly commissions..</param>
        public UserInfo(string phoneNumber = default(string), string email = default(string), bool? emailConfirmed = default(bool?), bool? preventFromUsingCards = default(bool?), bool? isUserPhoneNumberBlocked = default(bool?), List<UserWhiteLabelInfo> userWhiteLabels = default(List<UserWhiteLabelInfo>), int? userId = default(int?), string userName = default(string), string customerName = default(string), bool? hasLoggedIn = default(bool?), bool? disableAppRatingControl = default(bool?), bool? globallyOptedOut = default(bool?), int? completedOrderCount = default(int?), int? cancelledOrderCount = default(int?), double? orderTotalValue = default(double?), DateTime? tsMostRecentOrder = default(DateTime?), DateTime? tsFirstOrder = default(DateTime?), bool? isRestaurantUser = default(bool?), List<AppInstall> installs = default(List<AppInstall>), List<DeliveryLocation> deliveryLocations = default(List<DeliveryLocation>), List<PaymentAccount> paymentAccounts = default(List<PaymentAccount>), string languageId = default(string), string currentLanguageName = default(string), List<Language> languages = default(List<Language>), string salesForceContactId = default(string), string stripeCustomerId = default(string), List<UserMonthlyCommission> userMonthlyCommissions = default(List<UserMonthlyCommission>))
        {
            this.PhoneNumber = phoneNumber;
            this.Email = email;
            this.EmailConfirmed = emailConfirmed;
            this.PreventFromUsingCards = preventFromUsingCards;
            this.IsUserPhoneNumberBlocked = isUserPhoneNumberBlocked;
            this.UserWhiteLabels = userWhiteLabels;
            this.UserId = userId;
            this.UserName = userName;
            this.CustomerName = customerName;
            this.HasLoggedIn = hasLoggedIn;
            this.DisableAppRatingControl = disableAppRatingControl;
            this.GloballyOptedOut = globallyOptedOut;
            this.CompletedOrderCount = completedOrderCount;
            this.CancelledOrderCount = cancelledOrderCount;
            this.OrderTotalValue = orderTotalValue;
            this.TsMostRecentOrder = tsMostRecentOrder;
            this.TsFirstOrder = tsFirstOrder;
            this.IsRestaurantUser = isRestaurantUser;
            this.Installs = installs;
            this.DeliveryLocations = deliveryLocations;
            this.PaymentAccounts = paymentAccounts;
            this.LanguageId = languageId;
            this.CurrentLanguageName = currentLanguageName;
            this.Languages = languages;
            this.SalesForceContactId = salesForceContactId;
            this.StripeCustomerId = stripeCustomerId;
            this.UserMonthlyCommissions = userMonthlyCommissions;
        }
        
        /// <summary>
        /// The user&#39;s phone number.
        /// </summary>
        /// <value>The user&#39;s phone number.</value>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The user&#39;s email address.
        /// </summary>
        /// <value>The user&#39;s email address.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Indicates if the user&#39;s email address has been confirmed.
        /// </summary>
        /// <value>Indicates if the user&#39;s email address has been confirmed.</value>
        [DataMember(Name="EmailConfirmed", EmitDefaultValue=false)]
        public bool? EmailConfirmed { get; set; }

        /// <summary>
        /// Indicates if the user is prevented from using cards.
        /// </summary>
        /// <value>Indicates if the user is prevented from using cards.</value>
        [DataMember(Name="PreventFromUsingCards", EmitDefaultValue=false)]
        public bool? PreventFromUsingCards { get; set; }

        /// <summary>
        /// Indicates if the user&#39;s phone number is blocked.
        /// </summary>
        /// <value>Indicates if the user&#39;s phone number is blocked.</value>
        [DataMember(Name="IsUserPhoneNumberBlocked", EmitDefaultValue=false)]
        public bool? IsUserPhoneNumberBlocked { get; set; }

        /// <summary>
        /// List of white label information associated with the user.
        /// </summary>
        /// <value>List of white label information associated with the user.</value>
        [DataMember(Name="UserWhiteLabels", EmitDefaultValue=false)]
        public List<UserWhiteLabelInfo> UserWhiteLabels { get; set; }

        /// <summary>
        /// The unique identifier for the user.
        /// </summary>
        /// <value>The unique identifier for the user.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// The user&#39;s username.
        /// </summary>
        /// <value>The user&#39;s username.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The customer&#39;s name.
        /// </summary>
        /// <value>The customer&#39;s name.</value>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Indicates if the user has logged in.
        /// </summary>
        /// <value>Indicates if the user has logged in.</value>
        [DataMember(Name="HasLoggedIn", EmitDefaultValue=false)]
        public bool? HasLoggedIn { get; set; }

        /// <summary>
        /// Indicates if the app rating control is disabled for the user.
        /// </summary>
        /// <value>Indicates if the app rating control is disabled for the user.</value>
        [DataMember(Name="DisableAppRatingControl", EmitDefaultValue=false)]
        public bool? DisableAppRatingControl { get; set; }

        /// <summary>
        /// Indicates if the user has globally opted out.
        /// </summary>
        /// <value>Indicates if the user has globally opted out.</value>
        [DataMember(Name="GloballyOptedOut", EmitDefaultValue=false)]
        public bool? GloballyOptedOut { get; set; }

        /// <summary>
        /// The number of completed orders by the user.
        /// </summary>
        /// <value>The number of completed orders by the user.</value>
        [DataMember(Name="CompletedOrderCount", EmitDefaultValue=false)]
        public int? CompletedOrderCount { get; set; }

        /// <summary>
        /// The number of cancelled orders by the user.
        /// </summary>
        /// <value>The number of cancelled orders by the user.</value>
        [DataMember(Name="CancelledOrderCount", EmitDefaultValue=false)]
        public int? CancelledOrderCount { get; set; }

        /// <summary>
        /// The total value of orders placed by the user.
        /// </summary>
        /// <value>The total value of orders placed by the user.</value>
        [DataMember(Name="OrderTotalValue", EmitDefaultValue=false)]
        public double? OrderTotalValue { get; set; }

        /// <summary>
        /// The timestamp of the user&#39;s most recent order.
        /// </summary>
        /// <value>The timestamp of the user&#39;s most recent order.</value>
        [DataMember(Name="TsMostRecentOrder", EmitDefaultValue=false)]
        public DateTime? TsMostRecentOrder { get; set; }

        /// <summary>
        /// The timestamp of the user&#39;s first order.
        /// </summary>
        /// <value>The timestamp of the user&#39;s first order.</value>
        [DataMember(Name="TsFirstOrder", EmitDefaultValue=false)]
        public DateTime? TsFirstOrder { get; set; }

        /// <summary>
        /// Indicates if the user is a restaurant user.
        /// </summary>
        /// <value>Indicates if the user is a restaurant user.</value>
        [DataMember(Name="IsRestaurantUser", EmitDefaultValue=false)]
        public bool? IsRestaurantUser { get; set; }

        /// <summary>
        /// List of app installs associated with the user.
        /// </summary>
        /// <value>List of app installs associated with the user.</value>
        [DataMember(Name="Installs", EmitDefaultValue=false)]
        public List<AppInstall> Installs { get; set; }

        /// <summary>
        /// List of delivery locations associated with the user.
        /// </summary>
        /// <value>List of delivery locations associated with the user.</value>
        [DataMember(Name="DeliveryLocations", EmitDefaultValue=false)]
        public List<DeliveryLocation> DeliveryLocations { get; set; }

        /// <summary>
        /// List of payment accounts associated with the user.
        /// </summary>
        /// <value>List of payment accounts associated with the user.</value>
        [DataMember(Name="PaymentAccounts", EmitDefaultValue=false)]
        public List<PaymentAccount> PaymentAccounts { get; set; }

        /// <summary>
        /// The language identifier for the user.
        /// </summary>
        /// <value>The language identifier for the user.</value>
        [DataMember(Name="LanguageId", EmitDefaultValue=false)]
        public string LanguageId { get; set; }

        /// <summary>
        /// Current language name for the user.
        /// </summary>
        /// <value>Current language name for the user.</value>
        [DataMember(Name="CurrentLanguageName", EmitDefaultValue=false)]
        public string CurrentLanguageName { get; set; }

        /// <summary>
        /// Available languages that the user can choose from.
        /// </summary>
        /// <value>Available languages that the user can choose from.</value>
        [DataMember(Name="Languages", EmitDefaultValue=false)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// The Salesforce contact ID for the user.
        /// </summary>
        /// <value>The Salesforce contact ID for the user.</value>
        [DataMember(Name="SalesForceContactId", EmitDefaultValue=false)]
        public string SalesForceContactId { get; set; }

        /// <summary>
        /// The Stripe customer ID for the user.
        /// </summary>
        /// <value>The Stripe customer ID for the user.</value>
        [DataMember(Name="StripeCustomerId", EmitDefaultValue=false)]
        public string StripeCustomerId { get; set; }

        /// <summary>
        /// User&#39;s monthly commissions.
        /// </summary>
        /// <value>User&#39;s monthly commissions.</value>
        [DataMember(Name="UserMonthlyCommissions", EmitDefaultValue=false)]
        public List<UserMonthlyCommission> UserMonthlyCommissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PreventFromUsingCards: ").Append(PreventFromUsingCards).Append("\n");
            sb.Append("  IsUserPhoneNumberBlocked: ").Append(IsUserPhoneNumberBlocked).Append("\n");
            sb.Append("  UserWhiteLabels: ").Append(UserWhiteLabels).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  HasLoggedIn: ").Append(HasLoggedIn).Append("\n");
            sb.Append("  DisableAppRatingControl: ").Append(DisableAppRatingControl).Append("\n");
            sb.Append("  GloballyOptedOut: ").Append(GloballyOptedOut).Append("\n");
            sb.Append("  CompletedOrderCount: ").Append(CompletedOrderCount).Append("\n");
            sb.Append("  CancelledOrderCount: ").Append(CancelledOrderCount).Append("\n");
            sb.Append("  OrderTotalValue: ").Append(OrderTotalValue).Append("\n");
            sb.Append("  TsMostRecentOrder: ").Append(TsMostRecentOrder).Append("\n");
            sb.Append("  TsFirstOrder: ").Append(TsFirstOrder).Append("\n");
            sb.Append("  IsRestaurantUser: ").Append(IsRestaurantUser).Append("\n");
            sb.Append("  Installs: ").Append(Installs).Append("\n");
            sb.Append("  DeliveryLocations: ").Append(DeliveryLocations).Append("\n");
            sb.Append("  PaymentAccounts: ").Append(PaymentAccounts).Append("\n");
            sb.Append("  LanguageId: ").Append(LanguageId).Append("\n");
            sb.Append("  CurrentLanguageName: ").Append(CurrentLanguageName).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  SalesForceContactId: ").Append(SalesForceContactId).Append("\n");
            sb.Append("  StripeCustomerId: ").Append(StripeCustomerId).Append("\n");
            sb.Append("  UserMonthlyCommissions: ").Append(UserMonthlyCommissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInfo);
        }

        /// <summary>
        /// Returns true if UserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailConfirmed == input.EmailConfirmed ||
                    (this.EmailConfirmed != null &&
                    this.EmailConfirmed.Equals(input.EmailConfirmed))
                ) && 
                (
                    this.PreventFromUsingCards == input.PreventFromUsingCards ||
                    (this.PreventFromUsingCards != null &&
                    this.PreventFromUsingCards.Equals(input.PreventFromUsingCards))
                ) && 
                (
                    this.IsUserPhoneNumberBlocked == input.IsUserPhoneNumberBlocked ||
                    (this.IsUserPhoneNumberBlocked != null &&
                    this.IsUserPhoneNumberBlocked.Equals(input.IsUserPhoneNumberBlocked))
                ) && 
                (
                    this.UserWhiteLabels == input.UserWhiteLabels ||
                    this.UserWhiteLabels != null &&
                    this.UserWhiteLabels.SequenceEqual(input.UserWhiteLabels)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.HasLoggedIn == input.HasLoggedIn ||
                    (this.HasLoggedIn != null &&
                    this.HasLoggedIn.Equals(input.HasLoggedIn))
                ) && 
                (
                    this.DisableAppRatingControl == input.DisableAppRatingControl ||
                    (this.DisableAppRatingControl != null &&
                    this.DisableAppRatingControl.Equals(input.DisableAppRatingControl))
                ) && 
                (
                    this.GloballyOptedOut == input.GloballyOptedOut ||
                    (this.GloballyOptedOut != null &&
                    this.GloballyOptedOut.Equals(input.GloballyOptedOut))
                ) && 
                (
                    this.CompletedOrderCount == input.CompletedOrderCount ||
                    (this.CompletedOrderCount != null &&
                    this.CompletedOrderCount.Equals(input.CompletedOrderCount))
                ) && 
                (
                    this.CancelledOrderCount == input.CancelledOrderCount ||
                    (this.CancelledOrderCount != null &&
                    this.CancelledOrderCount.Equals(input.CancelledOrderCount))
                ) && 
                (
                    this.OrderTotalValue == input.OrderTotalValue ||
                    (this.OrderTotalValue != null &&
                    this.OrderTotalValue.Equals(input.OrderTotalValue))
                ) && 
                (
                    this.TsMostRecentOrder == input.TsMostRecentOrder ||
                    (this.TsMostRecentOrder != null &&
                    this.TsMostRecentOrder.Equals(input.TsMostRecentOrder))
                ) && 
                (
                    this.TsFirstOrder == input.TsFirstOrder ||
                    (this.TsFirstOrder != null &&
                    this.TsFirstOrder.Equals(input.TsFirstOrder))
                ) && 
                (
                    this.IsRestaurantUser == input.IsRestaurantUser ||
                    (this.IsRestaurantUser != null &&
                    this.IsRestaurantUser.Equals(input.IsRestaurantUser))
                ) && 
                (
                    this.Installs == input.Installs ||
                    this.Installs != null &&
                    this.Installs.SequenceEqual(input.Installs)
                ) && 
                (
                    this.DeliveryLocations == input.DeliveryLocations ||
                    this.DeliveryLocations != null &&
                    this.DeliveryLocations.SequenceEqual(input.DeliveryLocations)
                ) && 
                (
                    this.PaymentAccounts == input.PaymentAccounts ||
                    this.PaymentAccounts != null &&
                    this.PaymentAccounts.SequenceEqual(input.PaymentAccounts)
                ) && 
                (
                    this.LanguageId == input.LanguageId ||
                    (this.LanguageId != null &&
                    this.LanguageId.Equals(input.LanguageId))
                ) && 
                (
                    this.CurrentLanguageName == input.CurrentLanguageName ||
                    (this.CurrentLanguageName != null &&
                    this.CurrentLanguageName.Equals(input.CurrentLanguageName))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.SalesForceContactId == input.SalesForceContactId ||
                    (this.SalesForceContactId != null &&
                    this.SalesForceContactId.Equals(input.SalesForceContactId))
                ) && 
                (
                    this.StripeCustomerId == input.StripeCustomerId ||
                    (this.StripeCustomerId != null &&
                    this.StripeCustomerId.Equals(input.StripeCustomerId))
                ) && 
                (
                    this.UserMonthlyCommissions == input.UserMonthlyCommissions ||
                    this.UserMonthlyCommissions != null &&
                    this.UserMonthlyCommissions.SequenceEqual(input.UserMonthlyCommissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailConfirmed != null)
                    hashCode = hashCode * 59 + this.EmailConfirmed.GetHashCode();
                if (this.PreventFromUsingCards != null)
                    hashCode = hashCode * 59 + this.PreventFromUsingCards.GetHashCode();
                if (this.IsUserPhoneNumberBlocked != null)
                    hashCode = hashCode * 59 + this.IsUserPhoneNumberBlocked.GetHashCode();
                if (this.UserWhiteLabels != null)
                    hashCode = hashCode * 59 + this.UserWhiteLabels.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.HasLoggedIn != null)
                    hashCode = hashCode * 59 + this.HasLoggedIn.GetHashCode();
                if (this.DisableAppRatingControl != null)
                    hashCode = hashCode * 59 + this.DisableAppRatingControl.GetHashCode();
                if (this.GloballyOptedOut != null)
                    hashCode = hashCode * 59 + this.GloballyOptedOut.GetHashCode();
                if (this.CompletedOrderCount != null)
                    hashCode = hashCode * 59 + this.CompletedOrderCount.GetHashCode();
                if (this.CancelledOrderCount != null)
                    hashCode = hashCode * 59 + this.CancelledOrderCount.GetHashCode();
                if (this.OrderTotalValue != null)
                    hashCode = hashCode * 59 + this.OrderTotalValue.GetHashCode();
                if (this.TsMostRecentOrder != null)
                    hashCode = hashCode * 59 + this.TsMostRecentOrder.GetHashCode();
                if (this.TsFirstOrder != null)
                    hashCode = hashCode * 59 + this.TsFirstOrder.GetHashCode();
                if (this.IsRestaurantUser != null)
                    hashCode = hashCode * 59 + this.IsRestaurantUser.GetHashCode();
                if (this.Installs != null)
                    hashCode = hashCode * 59 + this.Installs.GetHashCode();
                if (this.DeliveryLocations != null)
                    hashCode = hashCode * 59 + this.DeliveryLocations.GetHashCode();
                if (this.PaymentAccounts != null)
                    hashCode = hashCode * 59 + this.PaymentAccounts.GetHashCode();
                if (this.LanguageId != null)
                    hashCode = hashCode * 59 + this.LanguageId.GetHashCode();
                if (this.CurrentLanguageName != null)
                    hashCode = hashCode * 59 + this.CurrentLanguageName.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.SalesForceContactId != null)
                    hashCode = hashCode * 59 + this.SalesForceContactId.GetHashCode();
                if (this.StripeCustomerId != null)
                    hashCode = hashCode * 59 + this.StripeCustomerId.GetHashCode();
                if (this.UserMonthlyCommissions != null)
                    hashCode = hashCode * 59 + this.UserMonthlyCommissions.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Percent discount details
    /// </summary>
    [DataContract]
    public partial class PercentDiscountDetails :  IEquatable<PercentDiscountDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PercentDiscountDetails" /> class.
        /// </summary>
        /// <param name="percentageDiscount">Percentage discount.</param>
        /// <param name="maxDiscountAmount">The maximum amount that the percentage discount value can be.  If not set then there is no maximum.  If set to e.g. 20 euro, and the percentage discount is 25%, and the order total is 100 euro, then the discount will be 20 euro (not 25 euro)..</param>
        public PercentDiscountDetails(int? percentageDiscount = default(int?), double? maxDiscountAmount = default(double?))
        {
            this.PercentageDiscount = percentageDiscount;
            this.MaxDiscountAmount = maxDiscountAmount;
        }
        
        /// <summary>
        /// Percentage discount
        /// </summary>
        /// <value>Percentage discount</value>
        [DataMember(Name="PercentageDiscount", EmitDefaultValue=false)]
        public int? PercentageDiscount { get; set; }

        /// <summary>
        /// The maximum amount that the percentage discount value can be.  If not set then there is no maximum.  If set to e.g. 20 euro, and the percentage discount is 25%, and the order total is 100 euro, then the discount will be 20 euro (not 25 euro).
        /// </summary>
        /// <value>The maximum amount that the percentage discount value can be.  If not set then there is no maximum.  If set to e.g. 20 euro, and the percentage discount is 25%, and the order total is 100 euro, then the discount will be 20 euro (not 25 euro).</value>
        [DataMember(Name="MaxDiscountAmount", EmitDefaultValue=false)]
        public double? MaxDiscountAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PercentDiscountDetails {\n");
            sb.Append("  PercentageDiscount: ").Append(PercentageDiscount).Append("\n");
            sb.Append("  MaxDiscountAmount: ").Append(MaxDiscountAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PercentDiscountDetails);
        }

        /// <summary>
        /// Returns true if PercentDiscountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PercentDiscountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PercentDiscountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PercentageDiscount == input.PercentageDiscount ||
                    (this.PercentageDiscount != null &&
                    this.PercentageDiscount.Equals(input.PercentageDiscount))
                ) && 
                (
                    this.MaxDiscountAmount == input.MaxDiscountAmount ||
                    (this.MaxDiscountAmount != null &&
                    this.MaxDiscountAmount.Equals(input.MaxDiscountAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PercentageDiscount != null)
                    hashCode = hashCode * 59 + this.PercentageDiscount.GetHashCode();
                if (this.MaxDiscountAmount != null)
                    hashCode = hashCode * 59 + this.MaxDiscountAmount.GetHashCode();
                return hashCode;
            }
        }
    }

}

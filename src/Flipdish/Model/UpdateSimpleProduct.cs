/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Update Simple Product
    /// </summary>
    [DataContract]
    public partial class UpdateSimpleProduct : UpdateProduct,  IEquatable<UpdateSimpleProduct>, IValidatableObject
    {
        /// <summary>
        /// Defines productType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum SimpleProduct for value: SimpleProduct
            /// </summary>
            [EnumMember(Value = "SimpleProduct")]
            SimpleProduct = 2,
            
            /// <summary>
            /// Enum Modifier for value: Modifier
            /// </summary>
            [EnumMember(Value = "Modifier")]
            Modifier = 3,
            
            /// <summary>
            /// Enum ModifierGroup for value: ModifierGroup
            /// </summary>
            [EnumMember(Value = "ModifierGroup")]
            ModifierGroup = 4
        }

        /// <summary>
        /// Gets or Sets productType
        /// </summary>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public ProductTypeEnum? productType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSimpleProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSimpleProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSimpleProduct" /> class.
        /// </summary>
        /// <param name="productType">productType.</param>
        public UpdateSimpleProduct(ProductTypeEnum? productType = default(ProductTypeEnum?), string sku = default(string), string name = default(string), string description = default(string), double? price = default(double?), bool? alcohol = default(bool?), ProductTypeEnum productType = "UpdateSimpleProduct") : base(sku, name, description, price, alcohol, productType)
        {
            this.productType = productType;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateSimpleProduct {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  productType: ").Append(productType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSimpleProduct);
        }

        /// <summary>
        /// Returns true if UpdateSimpleProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSimpleProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSimpleProduct input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.productType == input.productType ||
                    (this.productType != null &&
                    this.productType.Equals(input.productType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.productType != null)
                    hashCode = hashCode * 59 + this.productType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store
    /// </summary>
    [DataContract]
    public partial class Store :  IEquatable<Store>, IValidatableObject
    {
        /// <summary>
        /// Printout layout
        /// </summary>
        /// <value>Printout layout</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrintoutLayoutTypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum Centra for value: Centra
            /// </summary>
            [EnumMember(Value = "Centra")]
            Centra = 2,
            
            /// <summary>
            /// Enum SmallChefNotes for value: SmallChefNotes
            /// </summary>
            [EnumMember(Value = "SmallChefNotes")]
            SmallChefNotes = 3,
            
            /// <summary>
            /// Enum SmallChefNotesAndCentra for value: SmallChefNotesAndCentra
            /// </summary>
            [EnumMember(Value = "SmallChefNotesAndCentra")]
            SmallChefNotesAndCentra = 4
        }

        /// <summary>
        /// Printout layout
        /// </summary>
        /// <value>Printout layout</value>
        [DataMember(Name="PrintoutLayoutType", EmitDefaultValue=false)]
        public PrintoutLayoutTypeEnum? PrintoutLayoutType { get; set; }
        /// <summary>
        /// Currency (derived from Store Group)
        /// </summary>
        /// <value>Currency (derived from Store Group)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112
        }

        /// <summary>
        /// Currency (derived from Store Group)
        /// </summary>
        /// <value>Currency (derived from Store Group)</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Store" /> class.
        /// </summary>
        /// <param name="storeId">Store identifier.</param>
        /// <param name="storeGroupId">Store group id to which this store belongs.</param>
        /// <param name="address">Store address.</param>
        /// <param name="deliveryZones">Delivery zones.</param>
        /// <param name="apmPhoneNumber">Automated Phone Marketing number.</param>
        /// <param name="pickupHours">Pickup hours.</param>
        /// <param name="deliveryHours">Delivery hours.</param>
        /// <param name="menuId">Menu identifier.</param>
        /// <param name="orderConfirmationMessageOverrideDelivery">Overridden confirmation message for delivery orders.</param>
        /// <param name="orderConfirmationMessageOverridePickup">Overridden confirmation message for pickup orders.</param>
        /// <param name="printoutLayoutType">Printout layout.</param>
        /// <param name="storeNotes">Store notes.</param>
        /// <param name="microsoftTimeZone">Microsoft Time Zone Index Values (https://msdn.microsoft.com/en-us/library/ms912391)  (Editable through store coordinate change).</param>
        /// <param name="ianaTimeZone">IANA Time Zone (https://www.iana.org/time-zones)  (Editable through store coordinate change).</param>
        /// <param name="currency">Currency (derived from Store Group).</param>
        /// <param name="phoneNumber">Phone number.</param>
        /// <param name="alwaysAppearOpen">True if the store always appears open.</param>
        /// <param name="preOrderEnabled">True if the store accepts pre-orders.</param>
        /// <param name="takeOutEnabled">True if the store accepts take-out orders.</param>
        /// <param name="tableServiceEnabled">True if the store has table service.</param>
        /// <param name="dineInEnabled">True if the store accepts dine-in orders.</param>
        /// <param name="allowPreOrdersAndTableService">True if both pre-orders and talbe service can be enabled.</param>
        /// <param name="pickupEnabled">True if the store accepts pickup orders.</param>
        /// <param name="deliveryEnabled">True if the store accepts delivery orders.</param>
        /// <param name="cardOrderDeliveryEnabled">True if the store accepts card payment for delivery orders.</param>
        /// <param name="cashOrdersDeliveryEnabled">True if the store accepts cash payment for delivery orders.</param>
        /// <param name="cardOrdersPickupEnabled">True if the store accepts card payment for pickup orders.</param>
        /// <param name="cashOrdersPickupEnabled">True if the store accepts cash payment for pickup orders.</param>
        /// <param name="tipsEnabled">True if the store accepts tips.</param>
        /// <param name="automaticallyAcceptOrders">True if the stores orders are automatically accepted in Flipdish.</param>
        /// <param name="openForDelivery">True if the store is open for delivery.</param>
        /// <param name="openForPickup">True if the store is open for pickup.</param>
        /// <param name="minimumPickupOrderAmount">Minimum pickup order amount.</param>
        /// <param name="requireCustomerNameForPickup">True if customer name required for pickup orders.</param>
        /// <param name="gdprCustomerPhoneNumbers">Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed..</param>
        /// <param name="requireCustomerNameForDelivery">True if customer name required for delivery orders.</param>
        /// <param name="etaInPickupConfirmationSmsEnabled">True if order confirmation sms includes estimated time when order will be ready for collection.</param>
        /// <param name="etaInDeliveryConfirmationSmsEnabled">True if order confirmation sms includes estimated time when order will delivered.</param>
        /// <param name="name">Name.</param>
        /// <param name="emailAddress">Email address (visible to customers).</param>
        /// <param name="staffLanguage">Staff Language (used for communcation with the staff)  Emails, Printouts etc.</param>
        public Store(int? storeId = default(int?), int? storeGroupId = default(int?), StoreAddress address = default(StoreAddress), List<DeliveryZone> deliveryZones = default(List<DeliveryZone>), string apmPhoneNumber = default(string), List<BusinessHoursPeriod> pickupHours = default(List<BusinessHoursPeriod>), List<BusinessHoursPeriod> deliveryHours = default(List<BusinessHoursPeriod>), int? menuId = default(int?), string orderConfirmationMessageOverrideDelivery = default(string), string orderConfirmationMessageOverridePickup = default(string), PrintoutLayoutTypeEnum? printoutLayoutType = default(PrintoutLayoutTypeEnum?), List<StoreNote> storeNotes = default(List<StoreNote>), string microsoftTimeZone = default(string), string ianaTimeZone = default(string), CurrencyEnum? currency = default(CurrencyEnum?), string phoneNumber = default(string), bool? alwaysAppearOpen = default(bool?), bool? preOrderEnabled = default(bool?), bool? takeOutEnabled = default(bool?), bool? tableServiceEnabled = default(bool?), bool? dineInEnabled = default(bool?), bool? allowPreOrdersAndTableService = default(bool?), bool? pickupEnabled = default(bool?), bool? deliveryEnabled = default(bool?), bool? cardOrderDeliveryEnabled = default(bool?), bool? cashOrdersDeliveryEnabled = default(bool?), bool? cardOrdersPickupEnabled = default(bool?), bool? cashOrdersPickupEnabled = default(bool?), bool? tipsEnabled = default(bool?), bool? automaticallyAcceptOrders = default(bool?), bool? openForDelivery = default(bool?), bool? openForPickup = default(bool?), double? minimumPickupOrderAmount = default(double?), bool? requireCustomerNameForPickup = default(bool?), bool? gdprCustomerPhoneNumbers = default(bool?), bool? requireCustomerNameForDelivery = default(bool?), bool? etaInPickupConfirmationSmsEnabled = default(bool?), bool? etaInDeliveryConfirmationSmsEnabled = default(bool?), string name = default(string), string emailAddress = default(string), string staffLanguage = default(string))
        {
            this.StoreId = storeId;
            this.StoreGroupId = storeGroupId;
            this.Address = address;
            this.DeliveryZones = deliveryZones;
            this.ApmPhoneNumber = apmPhoneNumber;
            this.PickupHours = pickupHours;
            this.DeliveryHours = deliveryHours;
            this.MenuId = menuId;
            this.OrderConfirmationMessageOverrideDelivery = orderConfirmationMessageOverrideDelivery;
            this.OrderConfirmationMessageOverridePickup = orderConfirmationMessageOverridePickup;
            this.PrintoutLayoutType = printoutLayoutType;
            this.StoreNotes = storeNotes;
            this.MicrosoftTimeZone = microsoftTimeZone;
            this.IanaTimeZone = ianaTimeZone;
            this.Currency = currency;
            this.PhoneNumber = phoneNumber;
            this.AlwaysAppearOpen = alwaysAppearOpen;
            this.PreOrderEnabled = preOrderEnabled;
            this.TakeOutEnabled = takeOutEnabled;
            this.TableServiceEnabled = tableServiceEnabled;
            this.DineInEnabled = dineInEnabled;
            this.AllowPreOrdersAndTableService = allowPreOrdersAndTableService;
            this.PickupEnabled = pickupEnabled;
            this.DeliveryEnabled = deliveryEnabled;
            this.CardOrderDeliveryEnabled = cardOrderDeliveryEnabled;
            this.CashOrdersDeliveryEnabled = cashOrdersDeliveryEnabled;
            this.CardOrdersPickupEnabled = cardOrdersPickupEnabled;
            this.CashOrdersPickupEnabled = cashOrdersPickupEnabled;
            this.TipsEnabled = tipsEnabled;
            this.AutomaticallyAcceptOrders = automaticallyAcceptOrders;
            this.OpenForDelivery = openForDelivery;
            this.OpenForPickup = openForPickup;
            this.MinimumPickupOrderAmount = minimumPickupOrderAmount;
            this.RequireCustomerNameForPickup = requireCustomerNameForPickup;
            this.GdprCustomerPhoneNumbers = gdprCustomerPhoneNumbers;
            this.RequireCustomerNameForDelivery = requireCustomerNameForDelivery;
            this.EtaInPickupConfirmationSmsEnabled = etaInPickupConfirmationSmsEnabled;
            this.EtaInDeliveryConfirmationSmsEnabled = etaInDeliveryConfirmationSmsEnabled;
            this.Name = name;
            this.EmailAddress = emailAddress;
            this.StaffLanguage = staffLanguage;
        }
        
        /// <summary>
        /// Store identifier
        /// </summary>
        /// <value>Store identifier</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Store group id to which this store belongs
        /// </summary>
        /// <value>Store group id to which this store belongs</value>
        [DataMember(Name="StoreGroupId", EmitDefaultValue=false)]
        public int? StoreGroupId { get; set; }

        /// <summary>
        /// Store address
        /// </summary>
        /// <value>Store address</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public StoreAddress Address { get; set; }

        /// <summary>
        /// Delivery zones
        /// </summary>
        /// <value>Delivery zones</value>
        [DataMember(Name="DeliveryZones", EmitDefaultValue=false)]
        public List<DeliveryZone> DeliveryZones { get; set; }

        /// <summary>
        /// Automated Phone Marketing number
        /// </summary>
        /// <value>Automated Phone Marketing number</value>
        [DataMember(Name="ApmPhoneNumber", EmitDefaultValue=false)]
        public string ApmPhoneNumber { get; set; }

        /// <summary>
        /// Pickup hours
        /// </summary>
        /// <value>Pickup hours</value>
        [DataMember(Name="PickupHours", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> PickupHours { get; set; }

        /// <summary>
        /// Delivery hours
        /// </summary>
        /// <value>Delivery hours</value>
        [DataMember(Name="DeliveryHours", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> DeliveryHours { get; set; }

        /// <summary>
        /// Menu identifier
        /// </summary>
        /// <value>Menu identifier</value>
        [DataMember(Name="MenuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Overridden confirmation message for delivery orders
        /// </summary>
        /// <value>Overridden confirmation message for delivery orders</value>
        [DataMember(Name="OrderConfirmationMessageOverrideDelivery", EmitDefaultValue=false)]
        public string OrderConfirmationMessageOverrideDelivery { get; set; }

        /// <summary>
        /// Overridden confirmation message for pickup orders
        /// </summary>
        /// <value>Overridden confirmation message for pickup orders</value>
        [DataMember(Name="OrderConfirmationMessageOverridePickup", EmitDefaultValue=false)]
        public string OrderConfirmationMessageOverridePickup { get; set; }


        /// <summary>
        /// Store notes
        /// </summary>
        /// <value>Store notes</value>
        [DataMember(Name="StoreNotes", EmitDefaultValue=false)]
        public List<StoreNote> StoreNotes { get; set; }

        /// <summary>
        /// Microsoft Time Zone Index Values (https://msdn.microsoft.com/en-us/library/ms912391)  (Editable through store coordinate change)
        /// </summary>
        /// <value>Microsoft Time Zone Index Values (https://msdn.microsoft.com/en-us/library/ms912391)  (Editable through store coordinate change)</value>
        [DataMember(Name="MicrosoftTimeZone", EmitDefaultValue=false)]
        public string MicrosoftTimeZone { get; set; }

        /// <summary>
        /// IANA Time Zone (https://www.iana.org/time-zones)  (Editable through store coordinate change)
        /// </summary>
        /// <value>IANA Time Zone (https://www.iana.org/time-zones)  (Editable through store coordinate change)</value>
        [DataMember(Name="IanaTimeZone", EmitDefaultValue=false)]
        public string IanaTimeZone { get; set; }


        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// True if the store always appears open
        /// </summary>
        /// <value>True if the store always appears open</value>
        [DataMember(Name="AlwaysAppearOpen", EmitDefaultValue=false)]
        public bool? AlwaysAppearOpen { get; set; }

        /// <summary>
        /// True if the store accepts pre-orders
        /// </summary>
        /// <value>True if the store accepts pre-orders</value>
        [DataMember(Name="PreOrderEnabled", EmitDefaultValue=false)]
        public bool? PreOrderEnabled { get; set; }

        /// <summary>
        /// True if the store accepts take-out orders
        /// </summary>
        /// <value>True if the store accepts take-out orders</value>
        [DataMember(Name="TakeOutEnabled", EmitDefaultValue=false)]
        public bool? TakeOutEnabled { get; set; }

        /// <summary>
        /// True if the store has table service
        /// </summary>
        /// <value>True if the store has table service</value>
        [DataMember(Name="TableServiceEnabled", EmitDefaultValue=false)]
        public bool? TableServiceEnabled { get; set; }

        /// <summary>
        /// True if the store accepts dine-in orders
        /// </summary>
        /// <value>True if the store accepts dine-in orders</value>
        [DataMember(Name="DineInEnabled", EmitDefaultValue=false)]
        public bool? DineInEnabled { get; set; }

        /// <summary>
        /// True if both pre-orders and talbe service can be enabled
        /// </summary>
        /// <value>True if both pre-orders and talbe service can be enabled</value>
        [DataMember(Name="AllowPreOrdersAndTableService", EmitDefaultValue=false)]
        public bool? AllowPreOrdersAndTableService { get; set; }

        /// <summary>
        /// True if the store accepts pickup orders
        /// </summary>
        /// <value>True if the store accepts pickup orders</value>
        [DataMember(Name="PickupEnabled", EmitDefaultValue=false)]
        public bool? PickupEnabled { get; set; }

        /// <summary>
        /// True if the store accepts delivery orders
        /// </summary>
        /// <value>True if the store accepts delivery orders</value>
        [DataMember(Name="DeliveryEnabled", EmitDefaultValue=false)]
        public bool? DeliveryEnabled { get; set; }

        /// <summary>
        /// True if the store accepts card payment for delivery orders
        /// </summary>
        /// <value>True if the store accepts card payment for delivery orders</value>
        [DataMember(Name="CardOrderDeliveryEnabled", EmitDefaultValue=false)]
        public bool? CardOrderDeliveryEnabled { get; set; }

        /// <summary>
        /// True if the store accepts cash payment for delivery orders
        /// </summary>
        /// <value>True if the store accepts cash payment for delivery orders</value>
        [DataMember(Name="CashOrdersDeliveryEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersDeliveryEnabled { get; set; }

        /// <summary>
        /// True if the store accepts card payment for pickup orders
        /// </summary>
        /// <value>True if the store accepts card payment for pickup orders</value>
        [DataMember(Name="CardOrdersPickupEnabled", EmitDefaultValue=false)]
        public bool? CardOrdersPickupEnabled { get; set; }

        /// <summary>
        /// True if the store accepts cash payment for pickup orders
        /// </summary>
        /// <value>True if the store accepts cash payment for pickup orders</value>
        [DataMember(Name="CashOrdersPickupEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersPickupEnabled { get; set; }

        /// <summary>
        /// True if the store accepts tips
        /// </summary>
        /// <value>True if the store accepts tips</value>
        [DataMember(Name="TipsEnabled", EmitDefaultValue=false)]
        public bool? TipsEnabled { get; set; }

        /// <summary>
        /// True if the stores orders are automatically accepted in Flipdish
        /// </summary>
        /// <value>True if the stores orders are automatically accepted in Flipdish</value>
        [DataMember(Name="AutomaticallyAcceptOrders", EmitDefaultValue=false)]
        public bool? AutomaticallyAcceptOrders { get; set; }

        /// <summary>
        /// True if the store is open for delivery
        /// </summary>
        /// <value>True if the store is open for delivery</value>
        [DataMember(Name="OpenForDelivery", EmitDefaultValue=false)]
        public bool? OpenForDelivery { get; set; }

        /// <summary>
        /// True if the store is open for pickup
        /// </summary>
        /// <value>True if the store is open for pickup</value>
        [DataMember(Name="OpenForPickup", EmitDefaultValue=false)]
        public bool? OpenForPickup { get; set; }

        /// <summary>
        /// Minimum pickup order amount
        /// </summary>
        /// <value>Minimum pickup order amount</value>
        [DataMember(Name="MinimumPickupOrderAmount", EmitDefaultValue=false)]
        public double? MinimumPickupOrderAmount { get; set; }

        /// <summary>
        /// True if customer name required for pickup orders
        /// </summary>
        /// <value>True if customer name required for pickup orders</value>
        [DataMember(Name="RequireCustomerNameForPickup", EmitDefaultValue=false)]
        public bool? RequireCustomerNameForPickup { get; set; }

        /// <summary>
        /// Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.
        /// </summary>
        /// <value>Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.</value>
        [DataMember(Name="GdprCustomerPhoneNumbers", EmitDefaultValue=false)]
        public bool? GdprCustomerPhoneNumbers { get; set; }

        /// <summary>
        /// True if customer name required for delivery orders
        /// </summary>
        /// <value>True if customer name required for delivery orders</value>
        [DataMember(Name="RequireCustomerNameForDelivery", EmitDefaultValue=false)]
        public bool? RequireCustomerNameForDelivery { get; set; }

        /// <summary>
        /// True if order confirmation sms includes estimated time when order will be ready for collection
        /// </summary>
        /// <value>True if order confirmation sms includes estimated time when order will be ready for collection</value>
        [DataMember(Name="EtaInPickupConfirmationSmsEnabled", EmitDefaultValue=false)]
        public bool? EtaInPickupConfirmationSmsEnabled { get; set; }

        /// <summary>
        /// True if order confirmation sms includes estimated time when order will delivered
        /// </summary>
        /// <value>True if order confirmation sms includes estimated time when order will delivered</value>
        [DataMember(Name="EtaInDeliveryConfirmationSmsEnabled", EmitDefaultValue=false)]
        public bool? EtaInDeliveryConfirmationSmsEnabled { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Email address (visible to customers)
        /// </summary>
        /// <value>Email address (visible to customers)</value>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Staff Language (used for communcation with the staff)  Emails, Printouts etc
        /// </summary>
        /// <value>Staff Language (used for communcation with the staff)  Emails, Printouts etc</value>
        [DataMember(Name="StaffLanguage", EmitDefaultValue=false)]
        public string StaffLanguage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Store {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreGroupId: ").Append(StoreGroupId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DeliveryZones: ").Append(DeliveryZones).Append("\n");
            sb.Append("  ApmPhoneNumber: ").Append(ApmPhoneNumber).Append("\n");
            sb.Append("  PickupHours: ").Append(PickupHours).Append("\n");
            sb.Append("  DeliveryHours: ").Append(DeliveryHours).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  OrderConfirmationMessageOverrideDelivery: ").Append(OrderConfirmationMessageOverrideDelivery).Append("\n");
            sb.Append("  OrderConfirmationMessageOverridePickup: ").Append(OrderConfirmationMessageOverridePickup).Append("\n");
            sb.Append("  PrintoutLayoutType: ").Append(PrintoutLayoutType).Append("\n");
            sb.Append("  StoreNotes: ").Append(StoreNotes).Append("\n");
            sb.Append("  MicrosoftTimeZone: ").Append(MicrosoftTimeZone).Append("\n");
            sb.Append("  IanaTimeZone: ").Append(IanaTimeZone).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AlwaysAppearOpen: ").Append(AlwaysAppearOpen).Append("\n");
            sb.Append("  PreOrderEnabled: ").Append(PreOrderEnabled).Append("\n");
            sb.Append("  TakeOutEnabled: ").Append(TakeOutEnabled).Append("\n");
            sb.Append("  TableServiceEnabled: ").Append(TableServiceEnabled).Append("\n");
            sb.Append("  DineInEnabled: ").Append(DineInEnabled).Append("\n");
            sb.Append("  AllowPreOrdersAndTableService: ").Append(AllowPreOrdersAndTableService).Append("\n");
            sb.Append("  PickupEnabled: ").Append(PickupEnabled).Append("\n");
            sb.Append("  DeliveryEnabled: ").Append(DeliveryEnabled).Append("\n");
            sb.Append("  CardOrderDeliveryEnabled: ").Append(CardOrderDeliveryEnabled).Append("\n");
            sb.Append("  CashOrdersDeliveryEnabled: ").Append(CashOrdersDeliveryEnabled).Append("\n");
            sb.Append("  CardOrdersPickupEnabled: ").Append(CardOrdersPickupEnabled).Append("\n");
            sb.Append("  CashOrdersPickupEnabled: ").Append(CashOrdersPickupEnabled).Append("\n");
            sb.Append("  TipsEnabled: ").Append(TipsEnabled).Append("\n");
            sb.Append("  AutomaticallyAcceptOrders: ").Append(AutomaticallyAcceptOrders).Append("\n");
            sb.Append("  OpenForDelivery: ").Append(OpenForDelivery).Append("\n");
            sb.Append("  OpenForPickup: ").Append(OpenForPickup).Append("\n");
            sb.Append("  MinimumPickupOrderAmount: ").Append(MinimumPickupOrderAmount).Append("\n");
            sb.Append("  RequireCustomerNameForPickup: ").Append(RequireCustomerNameForPickup).Append("\n");
            sb.Append("  GdprCustomerPhoneNumbers: ").Append(GdprCustomerPhoneNumbers).Append("\n");
            sb.Append("  RequireCustomerNameForDelivery: ").Append(RequireCustomerNameForDelivery).Append("\n");
            sb.Append("  EtaInPickupConfirmationSmsEnabled: ").Append(EtaInPickupConfirmationSmsEnabled).Append("\n");
            sb.Append("  EtaInDeliveryConfirmationSmsEnabled: ").Append(EtaInDeliveryConfirmationSmsEnabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  StaffLanguage: ").Append(StaffLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Store);
        }

        /// <summary>
        /// Returns true if Store instances are equal
        /// </summary>
        /// <param name="input">Instance of Store to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Store input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreGroupId == input.StoreGroupId ||
                    (this.StoreGroupId != null &&
                    this.StoreGroupId.Equals(input.StoreGroupId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DeliveryZones == input.DeliveryZones ||
                    this.DeliveryZones != null &&
                    this.DeliveryZones.SequenceEqual(input.DeliveryZones)
                ) && 
                (
                    this.ApmPhoneNumber == input.ApmPhoneNumber ||
                    (this.ApmPhoneNumber != null &&
                    this.ApmPhoneNumber.Equals(input.ApmPhoneNumber))
                ) && 
                (
                    this.PickupHours == input.PickupHours ||
                    this.PickupHours != null &&
                    this.PickupHours.SequenceEqual(input.PickupHours)
                ) && 
                (
                    this.DeliveryHours == input.DeliveryHours ||
                    this.DeliveryHours != null &&
                    this.DeliveryHours.SequenceEqual(input.DeliveryHours)
                ) && 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.OrderConfirmationMessageOverrideDelivery == input.OrderConfirmationMessageOverrideDelivery ||
                    (this.OrderConfirmationMessageOverrideDelivery != null &&
                    this.OrderConfirmationMessageOverrideDelivery.Equals(input.OrderConfirmationMessageOverrideDelivery))
                ) && 
                (
                    this.OrderConfirmationMessageOverridePickup == input.OrderConfirmationMessageOverridePickup ||
                    (this.OrderConfirmationMessageOverridePickup != null &&
                    this.OrderConfirmationMessageOverridePickup.Equals(input.OrderConfirmationMessageOverridePickup))
                ) && 
                (
                    this.PrintoutLayoutType == input.PrintoutLayoutType ||
                    (this.PrintoutLayoutType != null &&
                    this.PrintoutLayoutType.Equals(input.PrintoutLayoutType))
                ) && 
                (
                    this.StoreNotes == input.StoreNotes ||
                    this.StoreNotes != null &&
                    this.StoreNotes.SequenceEqual(input.StoreNotes)
                ) && 
                (
                    this.MicrosoftTimeZone == input.MicrosoftTimeZone ||
                    (this.MicrosoftTimeZone != null &&
                    this.MicrosoftTimeZone.Equals(input.MicrosoftTimeZone))
                ) && 
                (
                    this.IanaTimeZone == input.IanaTimeZone ||
                    (this.IanaTimeZone != null &&
                    this.IanaTimeZone.Equals(input.IanaTimeZone))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.AlwaysAppearOpen == input.AlwaysAppearOpen ||
                    (this.AlwaysAppearOpen != null &&
                    this.AlwaysAppearOpen.Equals(input.AlwaysAppearOpen))
                ) && 
                (
                    this.PreOrderEnabled == input.PreOrderEnabled ||
                    (this.PreOrderEnabled != null &&
                    this.PreOrderEnabled.Equals(input.PreOrderEnabled))
                ) && 
                (
                    this.TakeOutEnabled == input.TakeOutEnabled ||
                    (this.TakeOutEnabled != null &&
                    this.TakeOutEnabled.Equals(input.TakeOutEnabled))
                ) && 
                (
                    this.TableServiceEnabled == input.TableServiceEnabled ||
                    (this.TableServiceEnabled != null &&
                    this.TableServiceEnabled.Equals(input.TableServiceEnabled))
                ) && 
                (
                    this.DineInEnabled == input.DineInEnabled ||
                    (this.DineInEnabled != null &&
                    this.DineInEnabled.Equals(input.DineInEnabled))
                ) && 
                (
                    this.AllowPreOrdersAndTableService == input.AllowPreOrdersAndTableService ||
                    (this.AllowPreOrdersAndTableService != null &&
                    this.AllowPreOrdersAndTableService.Equals(input.AllowPreOrdersAndTableService))
                ) && 
                (
                    this.PickupEnabled == input.PickupEnabled ||
                    (this.PickupEnabled != null &&
                    this.PickupEnabled.Equals(input.PickupEnabled))
                ) && 
                (
                    this.DeliveryEnabled == input.DeliveryEnabled ||
                    (this.DeliveryEnabled != null &&
                    this.DeliveryEnabled.Equals(input.DeliveryEnabled))
                ) && 
                (
                    this.CardOrderDeliveryEnabled == input.CardOrderDeliveryEnabled ||
                    (this.CardOrderDeliveryEnabled != null &&
                    this.CardOrderDeliveryEnabled.Equals(input.CardOrderDeliveryEnabled))
                ) && 
                (
                    this.CashOrdersDeliveryEnabled == input.CashOrdersDeliveryEnabled ||
                    (this.CashOrdersDeliveryEnabled != null &&
                    this.CashOrdersDeliveryEnabled.Equals(input.CashOrdersDeliveryEnabled))
                ) && 
                (
                    this.CardOrdersPickupEnabled == input.CardOrdersPickupEnabled ||
                    (this.CardOrdersPickupEnabled != null &&
                    this.CardOrdersPickupEnabled.Equals(input.CardOrdersPickupEnabled))
                ) && 
                (
                    this.CashOrdersPickupEnabled == input.CashOrdersPickupEnabled ||
                    (this.CashOrdersPickupEnabled != null &&
                    this.CashOrdersPickupEnabled.Equals(input.CashOrdersPickupEnabled))
                ) && 
                (
                    this.TipsEnabled == input.TipsEnabled ||
                    (this.TipsEnabled != null &&
                    this.TipsEnabled.Equals(input.TipsEnabled))
                ) && 
                (
                    this.AutomaticallyAcceptOrders == input.AutomaticallyAcceptOrders ||
                    (this.AutomaticallyAcceptOrders != null &&
                    this.AutomaticallyAcceptOrders.Equals(input.AutomaticallyAcceptOrders))
                ) && 
                (
                    this.OpenForDelivery == input.OpenForDelivery ||
                    (this.OpenForDelivery != null &&
                    this.OpenForDelivery.Equals(input.OpenForDelivery))
                ) && 
                (
                    this.OpenForPickup == input.OpenForPickup ||
                    (this.OpenForPickup != null &&
                    this.OpenForPickup.Equals(input.OpenForPickup))
                ) && 
                (
                    this.MinimumPickupOrderAmount == input.MinimumPickupOrderAmount ||
                    (this.MinimumPickupOrderAmount != null &&
                    this.MinimumPickupOrderAmount.Equals(input.MinimumPickupOrderAmount))
                ) && 
                (
                    this.RequireCustomerNameForPickup == input.RequireCustomerNameForPickup ||
                    (this.RequireCustomerNameForPickup != null &&
                    this.RequireCustomerNameForPickup.Equals(input.RequireCustomerNameForPickup))
                ) && 
                (
                    this.GdprCustomerPhoneNumbers == input.GdprCustomerPhoneNumbers ||
                    (this.GdprCustomerPhoneNumbers != null &&
                    this.GdprCustomerPhoneNumbers.Equals(input.GdprCustomerPhoneNumbers))
                ) && 
                (
                    this.RequireCustomerNameForDelivery == input.RequireCustomerNameForDelivery ||
                    (this.RequireCustomerNameForDelivery != null &&
                    this.RequireCustomerNameForDelivery.Equals(input.RequireCustomerNameForDelivery))
                ) && 
                (
                    this.EtaInPickupConfirmationSmsEnabled == input.EtaInPickupConfirmationSmsEnabled ||
                    (this.EtaInPickupConfirmationSmsEnabled != null &&
                    this.EtaInPickupConfirmationSmsEnabled.Equals(input.EtaInPickupConfirmationSmsEnabled))
                ) && 
                (
                    this.EtaInDeliveryConfirmationSmsEnabled == input.EtaInDeliveryConfirmationSmsEnabled ||
                    (this.EtaInDeliveryConfirmationSmsEnabled != null &&
                    this.EtaInDeliveryConfirmationSmsEnabled.Equals(input.EtaInDeliveryConfirmationSmsEnabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.StaffLanguage == input.StaffLanguage ||
                    (this.StaffLanguage != null &&
                    this.StaffLanguage.Equals(input.StaffLanguage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.StoreGroupId != null)
                    hashCode = hashCode * 59 + this.StoreGroupId.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DeliveryZones != null)
                    hashCode = hashCode * 59 + this.DeliveryZones.GetHashCode();
                if (this.ApmPhoneNumber != null)
                    hashCode = hashCode * 59 + this.ApmPhoneNumber.GetHashCode();
                if (this.PickupHours != null)
                    hashCode = hashCode * 59 + this.PickupHours.GetHashCode();
                if (this.DeliveryHours != null)
                    hashCode = hashCode * 59 + this.DeliveryHours.GetHashCode();
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.OrderConfirmationMessageOverrideDelivery != null)
                    hashCode = hashCode * 59 + this.OrderConfirmationMessageOverrideDelivery.GetHashCode();
                if (this.OrderConfirmationMessageOverridePickup != null)
                    hashCode = hashCode * 59 + this.OrderConfirmationMessageOverridePickup.GetHashCode();
                if (this.PrintoutLayoutType != null)
                    hashCode = hashCode * 59 + this.PrintoutLayoutType.GetHashCode();
                if (this.StoreNotes != null)
                    hashCode = hashCode * 59 + this.StoreNotes.GetHashCode();
                if (this.MicrosoftTimeZone != null)
                    hashCode = hashCode * 59 + this.MicrosoftTimeZone.GetHashCode();
                if (this.IanaTimeZone != null)
                    hashCode = hashCode * 59 + this.IanaTimeZone.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.AlwaysAppearOpen != null)
                    hashCode = hashCode * 59 + this.AlwaysAppearOpen.GetHashCode();
                if (this.PreOrderEnabled != null)
                    hashCode = hashCode * 59 + this.PreOrderEnabled.GetHashCode();
                if (this.TakeOutEnabled != null)
                    hashCode = hashCode * 59 + this.TakeOutEnabled.GetHashCode();
                if (this.TableServiceEnabled != null)
                    hashCode = hashCode * 59 + this.TableServiceEnabled.GetHashCode();
                if (this.DineInEnabled != null)
                    hashCode = hashCode * 59 + this.DineInEnabled.GetHashCode();
                if (this.AllowPreOrdersAndTableService != null)
                    hashCode = hashCode * 59 + this.AllowPreOrdersAndTableService.GetHashCode();
                if (this.PickupEnabled != null)
                    hashCode = hashCode * 59 + this.PickupEnabled.GetHashCode();
                if (this.DeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.DeliveryEnabled.GetHashCode();
                if (this.CardOrderDeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrderDeliveryEnabled.GetHashCode();
                if (this.CashOrdersDeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersDeliveryEnabled.GetHashCode();
                if (this.CardOrdersPickupEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrdersPickupEnabled.GetHashCode();
                if (this.CashOrdersPickupEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersPickupEnabled.GetHashCode();
                if (this.TipsEnabled != null)
                    hashCode = hashCode * 59 + this.TipsEnabled.GetHashCode();
                if (this.AutomaticallyAcceptOrders != null)
                    hashCode = hashCode * 59 + this.AutomaticallyAcceptOrders.GetHashCode();
                if (this.OpenForDelivery != null)
                    hashCode = hashCode * 59 + this.OpenForDelivery.GetHashCode();
                if (this.OpenForPickup != null)
                    hashCode = hashCode * 59 + this.OpenForPickup.GetHashCode();
                if (this.MinimumPickupOrderAmount != null)
                    hashCode = hashCode * 59 + this.MinimumPickupOrderAmount.GetHashCode();
                if (this.RequireCustomerNameForPickup != null)
                    hashCode = hashCode * 59 + this.RequireCustomerNameForPickup.GetHashCode();
                if (this.GdprCustomerPhoneNumbers != null)
                    hashCode = hashCode * 59 + this.GdprCustomerPhoneNumbers.GetHashCode();
                if (this.RequireCustomerNameForDelivery != null)
                    hashCode = hashCode * 59 + this.RequireCustomerNameForDelivery.GetHashCode();
                if (this.EtaInPickupConfirmationSmsEnabled != null)
                    hashCode = hashCode * 59 + this.EtaInPickupConfirmationSmsEnabled.GetHashCode();
                if (this.EtaInDeliveryConfirmationSmsEnabled != null)
                    hashCode = hashCode * 59 + this.EtaInDeliveryConfirmationSmsEnabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.StaffLanguage != null)
                    hashCode = hashCode * 59 + this.StaffLanguage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) maxLength
            if(this.EmailAddress != null && this.EmailAddress.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 100.", new [] { "EmailAddress" });
            }

            // EmailAddress (string) minLength
            if(this.EmailAddress != null && this.EmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 0.", new [] { "EmailAddress" });
            }

            yield break;
        }
    }

}

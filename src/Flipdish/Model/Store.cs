/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store
    /// </summary>
    [DataContract]
    public partial class Store :  IEquatable<Store>, IValidatableObject
    {
        /// <summary>
        /// Defines PrintoutLayoutType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrintoutLayoutTypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum Centra for value: Centra
            /// </summary>
            [EnumMember(Value = "Centra")]
            Centra = 2
        }

        /// <summary>
        /// Gets or Sets PrintoutLayoutType
        /// </summary>
        [DataMember(Name="printoutLayoutType", EmitDefaultValue=false)]
        public PrintoutLayoutTypeEnum? PrintoutLayoutType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Store" /> class.
        /// </summary>
        /// <param name="StoreId">StoreId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ApmPhoneNumber">ApmPhoneNumber.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="EmailAddress">EmailAddress.</param>
        /// <param name="Address">Address.</param>
        /// <param name="PreOrderEnabled">PreOrderEnabled.</param>
        /// <param name="TakeOutEnabled">TakeOutEnabled.</param>
        /// <param name="TableServiceEnabled">TableServiceEnabled.</param>
        /// <param name="DineInEnabled">DineInEnabled.</param>
        /// <param name="AllowPreOrdersAndTableService">AllowPreOrdersAndTableService.</param>
        /// <param name="PickupEnabled">PickupEnabled.</param>
        /// <param name="DeliveryEnabled">DeliveryEnabled.</param>
        /// <param name="CardOrderDeliveryEnabled">CardOrderDeliveryEnabled.</param>
        /// <param name="CashOrdersDeliveryEnabled">CashOrdersDeliveryEnabled.</param>
        /// <param name="CardOrdersPickupEnabled">CardOrdersPickupEnabled.</param>
        /// <param name="CashOrdersPickupEnabled">CashOrdersPickupEnabled.</param>
        /// <param name="TipsEnabled">TipsEnabled.</param>
        /// <param name="AutomaticallyAcceptOrders">AutomaticallyAcceptOrders.</param>
        /// <param name="OpenForDelivery">OpenForDelivery.</param>
        /// <param name="OpenForPickup">OpenForPickup.</param>
        /// <param name="MinimumPickupOrderAmount">MinimumPickupOrderAmount.</param>
        /// <param name="DeliveryFeeAreas">DeliveryFeeAreas.</param>
        /// <param name="RequireCustomerNameForPickup">RequireCustomerNameForPickup.</param>
        /// <param name="RequireCustomerNameForDelivery">RequireCustomerNameForDelivery.</param>
        /// <param name="PickupHours">PickupHours.</param>
        /// <param name="DeliveryHours">DeliveryHours.</param>
        /// <param name="MicrosoftTimeZone">MicrosoftTimeZone.</param>
        /// <param name="IanaTimeZone">IanaTimeZone.</param>
        /// <param name="MenuId">MenuId.</param>
        /// <param name="OrderConfirmationMessageOverrideDelivery">OrderConfirmationMessageOverrideDelivery.</param>
        /// <param name="OrderConfirmationMessageOverridePickup">OrderConfirmationMessageOverridePickup.</param>
        /// <param name="PrintoutLayoutType">PrintoutLayoutType.</param>
        /// <param name="StoreNotes">StoreNotes.</param>
        public Store(int? StoreId = default(int?), string Name = default(string), string ApmPhoneNumber = default(string), string PhoneNumber = default(string), string EmailAddress = default(string), StoreAddress Address = default(StoreAddress), bool? PreOrderEnabled = default(bool?), bool? TakeOutEnabled = default(bool?), bool? TableServiceEnabled = default(bool?), bool? DineInEnabled = default(bool?), bool? AllowPreOrdersAndTableService = default(bool?), bool? PickupEnabled = default(bool?), bool? DeliveryEnabled = default(bool?), bool? CardOrderDeliveryEnabled = default(bool?), bool? CashOrdersDeliveryEnabled = default(bool?), bool? CardOrdersPickupEnabled = default(bool?), bool? CashOrdersPickupEnabled = default(bool?), bool? TipsEnabled = default(bool?), bool? AutomaticallyAcceptOrders = default(bool?), bool? OpenForDelivery = default(bool?), bool? OpenForPickup = default(bool?), double? MinimumPickupOrderAmount = default(double?), List<DeliveryFeeArea> DeliveryFeeAreas = default(List<DeliveryFeeArea>), bool? RequireCustomerNameForPickup = default(bool?), bool? RequireCustomerNameForDelivery = default(bool?), List<BusinessHoursPeriod> PickupHours = default(List<BusinessHoursPeriod>), List<BusinessHoursPeriod> DeliveryHours = default(List<BusinessHoursPeriod>), string MicrosoftTimeZone = default(string), string IanaTimeZone = default(string), int? MenuId = default(int?), string OrderConfirmationMessageOverrideDelivery = default(string), string OrderConfirmationMessageOverridePickup = default(string), PrintoutLayoutTypeEnum? PrintoutLayoutType = default(PrintoutLayoutTypeEnum?), List<StoreNote> StoreNotes = default(List<StoreNote>))
        {
            this.StoreId = StoreId;
            this.Name = Name;
            this.ApmPhoneNumber = ApmPhoneNumber;
            this.PhoneNumber = PhoneNumber;
            this.EmailAddress = EmailAddress;
            this.Address = Address;
            this.PreOrderEnabled = PreOrderEnabled;
            this.TakeOutEnabled = TakeOutEnabled;
            this.TableServiceEnabled = TableServiceEnabled;
            this.DineInEnabled = DineInEnabled;
            this.AllowPreOrdersAndTableService = AllowPreOrdersAndTableService;
            this.PickupEnabled = PickupEnabled;
            this.DeliveryEnabled = DeliveryEnabled;
            this.CardOrderDeliveryEnabled = CardOrderDeliveryEnabled;
            this.CashOrdersDeliveryEnabled = CashOrdersDeliveryEnabled;
            this.CardOrdersPickupEnabled = CardOrdersPickupEnabled;
            this.CashOrdersPickupEnabled = CashOrdersPickupEnabled;
            this.TipsEnabled = TipsEnabled;
            this.AutomaticallyAcceptOrders = AutomaticallyAcceptOrders;
            this.OpenForDelivery = OpenForDelivery;
            this.OpenForPickup = OpenForPickup;
            this.MinimumPickupOrderAmount = MinimumPickupOrderAmount;
            this.DeliveryFeeAreas = DeliveryFeeAreas;
            this.RequireCustomerNameForPickup = RequireCustomerNameForPickup;
            this.RequireCustomerNameForDelivery = RequireCustomerNameForDelivery;
            this.PickupHours = PickupHours;
            this.DeliveryHours = DeliveryHours;
            this.MicrosoftTimeZone = MicrosoftTimeZone;
            this.IanaTimeZone = IanaTimeZone;
            this.MenuId = MenuId;
            this.OrderConfirmationMessageOverrideDelivery = OrderConfirmationMessageOverrideDelivery;
            this.OrderConfirmationMessageOverridePickup = OrderConfirmationMessageOverridePickup;
            this.PrintoutLayoutType = PrintoutLayoutType;
            this.StoreNotes = StoreNotes;
        }
        
        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="storeId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ApmPhoneNumber
        /// </summary>
        [DataMember(Name="apmPhoneNumber", EmitDefaultValue=false)]
        public string ApmPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public StoreAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets PreOrderEnabled
        /// </summary>
        [DataMember(Name="preOrderEnabled", EmitDefaultValue=false)]
        public bool? PreOrderEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TakeOutEnabled
        /// </summary>
        [DataMember(Name="takeOutEnabled", EmitDefaultValue=false)]
        public bool? TakeOutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TableServiceEnabled
        /// </summary>
        [DataMember(Name="tableServiceEnabled", EmitDefaultValue=false)]
        public bool? TableServiceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DineInEnabled
        /// </summary>
        [DataMember(Name="dineInEnabled", EmitDefaultValue=false)]
        public bool? DineInEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowPreOrdersAndTableService
        /// </summary>
        [DataMember(Name="allowPreOrdersAndTableService", EmitDefaultValue=false)]
        public bool? AllowPreOrdersAndTableService { get; set; }

        /// <summary>
        /// Gets or Sets PickupEnabled
        /// </summary>
        [DataMember(Name="pickupEnabled", EmitDefaultValue=false)]
        public bool? PickupEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryEnabled
        /// </summary>
        [DataMember(Name="deliveryEnabled", EmitDefaultValue=false)]
        public bool? DeliveryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CardOrderDeliveryEnabled
        /// </summary>
        [DataMember(Name="cardOrderDeliveryEnabled", EmitDefaultValue=false)]
        public bool? CardOrderDeliveryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CashOrdersDeliveryEnabled
        /// </summary>
        [DataMember(Name="cashOrdersDeliveryEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersDeliveryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CardOrdersPickupEnabled
        /// </summary>
        [DataMember(Name="cardOrdersPickupEnabled", EmitDefaultValue=false)]
        public bool? CardOrdersPickupEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CashOrdersPickupEnabled
        /// </summary>
        [DataMember(Name="cashOrdersPickupEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersPickupEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TipsEnabled
        /// </summary>
        [DataMember(Name="tipsEnabled", EmitDefaultValue=false)]
        public bool? TipsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticallyAcceptOrders
        /// </summary>
        [DataMember(Name="automaticallyAcceptOrders", EmitDefaultValue=false)]
        public bool? AutomaticallyAcceptOrders { get; set; }

        /// <summary>
        /// Gets or Sets OpenForDelivery
        /// </summary>
        [DataMember(Name="openForDelivery", EmitDefaultValue=false)]
        public bool? OpenForDelivery { get; set; }

        /// <summary>
        /// Gets or Sets OpenForPickup
        /// </summary>
        [DataMember(Name="openForPickup", EmitDefaultValue=false)]
        public bool? OpenForPickup { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPickupOrderAmount
        /// </summary>
        [DataMember(Name="minimumPickupOrderAmount", EmitDefaultValue=false)]
        public double? MinimumPickupOrderAmount { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryFeeAreas
        /// </summary>
        [DataMember(Name="deliveryFeeAreas", EmitDefaultValue=false)]
        public List<DeliveryFeeArea> DeliveryFeeAreas { get; set; }

        /// <summary>
        /// Gets or Sets RequireCustomerNameForPickup
        /// </summary>
        [DataMember(Name="requireCustomerNameForPickup", EmitDefaultValue=false)]
        public bool? RequireCustomerNameForPickup { get; set; }

        /// <summary>
        /// Gets or Sets RequireCustomerNameForDelivery
        /// </summary>
        [DataMember(Name="requireCustomerNameForDelivery", EmitDefaultValue=false)]
        public bool? RequireCustomerNameForDelivery { get; set; }

        /// <summary>
        /// Gets or Sets PickupHours
        /// </summary>
        [DataMember(Name="pickupHours", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> PickupHours { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryHours
        /// </summary>
        [DataMember(Name="deliveryHours", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> DeliveryHours { get; set; }

        /// <summary>
        /// Gets or Sets MicrosoftTimeZone
        /// </summary>
        [DataMember(Name="microsoftTimeZone", EmitDefaultValue=false)]
        public string MicrosoftTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets IanaTimeZone
        /// </summary>
        [DataMember(Name="ianaTimeZone", EmitDefaultValue=false)]
        public string IanaTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets MenuId
        /// </summary>
        [DataMember(Name="menuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Gets or Sets OrderConfirmationMessageOverrideDelivery
        /// </summary>
        [DataMember(Name="orderConfirmationMessageOverrideDelivery", EmitDefaultValue=false)]
        public string OrderConfirmationMessageOverrideDelivery { get; set; }

        /// <summary>
        /// Gets or Sets OrderConfirmationMessageOverridePickup
        /// </summary>
        [DataMember(Name="orderConfirmationMessageOverridePickup", EmitDefaultValue=false)]
        public string OrderConfirmationMessageOverridePickup { get; set; }


        /// <summary>
        /// Gets or Sets StoreNotes
        /// </summary>
        [DataMember(Name="storeNotes", EmitDefaultValue=false)]
        public List<StoreNote> StoreNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Store {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApmPhoneNumber: ").Append(ApmPhoneNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PreOrderEnabled: ").Append(PreOrderEnabled).Append("\n");
            sb.Append("  TakeOutEnabled: ").Append(TakeOutEnabled).Append("\n");
            sb.Append("  TableServiceEnabled: ").Append(TableServiceEnabled).Append("\n");
            sb.Append("  DineInEnabled: ").Append(DineInEnabled).Append("\n");
            sb.Append("  AllowPreOrdersAndTableService: ").Append(AllowPreOrdersAndTableService).Append("\n");
            sb.Append("  PickupEnabled: ").Append(PickupEnabled).Append("\n");
            sb.Append("  DeliveryEnabled: ").Append(DeliveryEnabled).Append("\n");
            sb.Append("  CardOrderDeliveryEnabled: ").Append(CardOrderDeliveryEnabled).Append("\n");
            sb.Append("  CashOrdersDeliveryEnabled: ").Append(CashOrdersDeliveryEnabled).Append("\n");
            sb.Append("  CardOrdersPickupEnabled: ").Append(CardOrdersPickupEnabled).Append("\n");
            sb.Append("  CashOrdersPickupEnabled: ").Append(CashOrdersPickupEnabled).Append("\n");
            sb.Append("  TipsEnabled: ").Append(TipsEnabled).Append("\n");
            sb.Append("  AutomaticallyAcceptOrders: ").Append(AutomaticallyAcceptOrders).Append("\n");
            sb.Append("  OpenForDelivery: ").Append(OpenForDelivery).Append("\n");
            sb.Append("  OpenForPickup: ").Append(OpenForPickup).Append("\n");
            sb.Append("  MinimumPickupOrderAmount: ").Append(MinimumPickupOrderAmount).Append("\n");
            sb.Append("  DeliveryFeeAreas: ").Append(DeliveryFeeAreas).Append("\n");
            sb.Append("  RequireCustomerNameForPickup: ").Append(RequireCustomerNameForPickup).Append("\n");
            sb.Append("  RequireCustomerNameForDelivery: ").Append(RequireCustomerNameForDelivery).Append("\n");
            sb.Append("  PickupHours: ").Append(PickupHours).Append("\n");
            sb.Append("  DeliveryHours: ").Append(DeliveryHours).Append("\n");
            sb.Append("  MicrosoftTimeZone: ").Append(MicrosoftTimeZone).Append("\n");
            sb.Append("  IanaTimeZone: ").Append(IanaTimeZone).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  OrderConfirmationMessageOverrideDelivery: ").Append(OrderConfirmationMessageOverrideDelivery).Append("\n");
            sb.Append("  OrderConfirmationMessageOverridePickup: ").Append(OrderConfirmationMessageOverridePickup).Append("\n");
            sb.Append("  PrintoutLayoutType: ").Append(PrintoutLayoutType).Append("\n");
            sb.Append("  StoreNotes: ").Append(StoreNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Store);
        }

        /// <summary>
        /// Returns true if Store instances are equal
        /// </summary>
        /// <param name="input">Instance of Store to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Store input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApmPhoneNumber == input.ApmPhoneNumber ||
                    (this.ApmPhoneNumber != null &&
                    this.ApmPhoneNumber.Equals(input.ApmPhoneNumber))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PreOrderEnabled == input.PreOrderEnabled ||
                    (this.PreOrderEnabled != null &&
                    this.PreOrderEnabled.Equals(input.PreOrderEnabled))
                ) && 
                (
                    this.TakeOutEnabled == input.TakeOutEnabled ||
                    (this.TakeOutEnabled != null &&
                    this.TakeOutEnabled.Equals(input.TakeOutEnabled))
                ) && 
                (
                    this.TableServiceEnabled == input.TableServiceEnabled ||
                    (this.TableServiceEnabled != null &&
                    this.TableServiceEnabled.Equals(input.TableServiceEnabled))
                ) && 
                (
                    this.DineInEnabled == input.DineInEnabled ||
                    (this.DineInEnabled != null &&
                    this.DineInEnabled.Equals(input.DineInEnabled))
                ) && 
                (
                    this.AllowPreOrdersAndTableService == input.AllowPreOrdersAndTableService ||
                    (this.AllowPreOrdersAndTableService != null &&
                    this.AllowPreOrdersAndTableService.Equals(input.AllowPreOrdersAndTableService))
                ) && 
                (
                    this.PickupEnabled == input.PickupEnabled ||
                    (this.PickupEnabled != null &&
                    this.PickupEnabled.Equals(input.PickupEnabled))
                ) && 
                (
                    this.DeliveryEnabled == input.DeliveryEnabled ||
                    (this.DeliveryEnabled != null &&
                    this.DeliveryEnabled.Equals(input.DeliveryEnabled))
                ) && 
                (
                    this.CardOrderDeliveryEnabled == input.CardOrderDeliveryEnabled ||
                    (this.CardOrderDeliveryEnabled != null &&
                    this.CardOrderDeliveryEnabled.Equals(input.CardOrderDeliveryEnabled))
                ) && 
                (
                    this.CashOrdersDeliveryEnabled == input.CashOrdersDeliveryEnabled ||
                    (this.CashOrdersDeliveryEnabled != null &&
                    this.CashOrdersDeliveryEnabled.Equals(input.CashOrdersDeliveryEnabled))
                ) && 
                (
                    this.CardOrdersPickupEnabled == input.CardOrdersPickupEnabled ||
                    (this.CardOrdersPickupEnabled != null &&
                    this.CardOrdersPickupEnabled.Equals(input.CardOrdersPickupEnabled))
                ) && 
                (
                    this.CashOrdersPickupEnabled == input.CashOrdersPickupEnabled ||
                    (this.CashOrdersPickupEnabled != null &&
                    this.CashOrdersPickupEnabled.Equals(input.CashOrdersPickupEnabled))
                ) && 
                (
                    this.TipsEnabled == input.TipsEnabled ||
                    (this.TipsEnabled != null &&
                    this.TipsEnabled.Equals(input.TipsEnabled))
                ) && 
                (
                    this.AutomaticallyAcceptOrders == input.AutomaticallyAcceptOrders ||
                    (this.AutomaticallyAcceptOrders != null &&
                    this.AutomaticallyAcceptOrders.Equals(input.AutomaticallyAcceptOrders))
                ) && 
                (
                    this.OpenForDelivery == input.OpenForDelivery ||
                    (this.OpenForDelivery != null &&
                    this.OpenForDelivery.Equals(input.OpenForDelivery))
                ) && 
                (
                    this.OpenForPickup == input.OpenForPickup ||
                    (this.OpenForPickup != null &&
                    this.OpenForPickup.Equals(input.OpenForPickup))
                ) && 
                (
                    this.MinimumPickupOrderAmount == input.MinimumPickupOrderAmount ||
                    (this.MinimumPickupOrderAmount != null &&
                    this.MinimumPickupOrderAmount.Equals(input.MinimumPickupOrderAmount))
                ) && 
                (
                    this.DeliveryFeeAreas == input.DeliveryFeeAreas ||
                    this.DeliveryFeeAreas != null &&
                    this.DeliveryFeeAreas.SequenceEqual(input.DeliveryFeeAreas)
                ) && 
                (
                    this.RequireCustomerNameForPickup == input.RequireCustomerNameForPickup ||
                    (this.RequireCustomerNameForPickup != null &&
                    this.RequireCustomerNameForPickup.Equals(input.RequireCustomerNameForPickup))
                ) && 
                (
                    this.RequireCustomerNameForDelivery == input.RequireCustomerNameForDelivery ||
                    (this.RequireCustomerNameForDelivery != null &&
                    this.RequireCustomerNameForDelivery.Equals(input.RequireCustomerNameForDelivery))
                ) && 
                (
                    this.PickupHours == input.PickupHours ||
                    this.PickupHours != null &&
                    this.PickupHours.SequenceEqual(input.PickupHours)
                ) && 
                (
                    this.DeliveryHours == input.DeliveryHours ||
                    this.DeliveryHours != null &&
                    this.DeliveryHours.SequenceEqual(input.DeliveryHours)
                ) && 
                (
                    this.MicrosoftTimeZone == input.MicrosoftTimeZone ||
                    (this.MicrosoftTimeZone != null &&
                    this.MicrosoftTimeZone.Equals(input.MicrosoftTimeZone))
                ) && 
                (
                    this.IanaTimeZone == input.IanaTimeZone ||
                    (this.IanaTimeZone != null &&
                    this.IanaTimeZone.Equals(input.IanaTimeZone))
                ) && 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.OrderConfirmationMessageOverrideDelivery == input.OrderConfirmationMessageOverrideDelivery ||
                    (this.OrderConfirmationMessageOverrideDelivery != null &&
                    this.OrderConfirmationMessageOverrideDelivery.Equals(input.OrderConfirmationMessageOverrideDelivery))
                ) && 
                (
                    this.OrderConfirmationMessageOverridePickup == input.OrderConfirmationMessageOverridePickup ||
                    (this.OrderConfirmationMessageOverridePickup != null &&
                    this.OrderConfirmationMessageOverridePickup.Equals(input.OrderConfirmationMessageOverridePickup))
                ) && 
                (
                    this.PrintoutLayoutType == input.PrintoutLayoutType ||
                    (this.PrintoutLayoutType != null &&
                    this.PrintoutLayoutType.Equals(input.PrintoutLayoutType))
                ) && 
                (
                    this.StoreNotes == input.StoreNotes ||
                    this.StoreNotes != null &&
                    this.StoreNotes.SequenceEqual(input.StoreNotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ApmPhoneNumber != null)
                    hashCode = hashCode * 59 + this.ApmPhoneNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PreOrderEnabled != null)
                    hashCode = hashCode * 59 + this.PreOrderEnabled.GetHashCode();
                if (this.TakeOutEnabled != null)
                    hashCode = hashCode * 59 + this.TakeOutEnabled.GetHashCode();
                if (this.TableServiceEnabled != null)
                    hashCode = hashCode * 59 + this.TableServiceEnabled.GetHashCode();
                if (this.DineInEnabled != null)
                    hashCode = hashCode * 59 + this.DineInEnabled.GetHashCode();
                if (this.AllowPreOrdersAndTableService != null)
                    hashCode = hashCode * 59 + this.AllowPreOrdersAndTableService.GetHashCode();
                if (this.PickupEnabled != null)
                    hashCode = hashCode * 59 + this.PickupEnabled.GetHashCode();
                if (this.DeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.DeliveryEnabled.GetHashCode();
                if (this.CardOrderDeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrderDeliveryEnabled.GetHashCode();
                if (this.CashOrdersDeliveryEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersDeliveryEnabled.GetHashCode();
                if (this.CardOrdersPickupEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrdersPickupEnabled.GetHashCode();
                if (this.CashOrdersPickupEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersPickupEnabled.GetHashCode();
                if (this.TipsEnabled != null)
                    hashCode = hashCode * 59 + this.TipsEnabled.GetHashCode();
                if (this.AutomaticallyAcceptOrders != null)
                    hashCode = hashCode * 59 + this.AutomaticallyAcceptOrders.GetHashCode();
                if (this.OpenForDelivery != null)
                    hashCode = hashCode * 59 + this.OpenForDelivery.GetHashCode();
                if (this.OpenForPickup != null)
                    hashCode = hashCode * 59 + this.OpenForPickup.GetHashCode();
                if (this.MinimumPickupOrderAmount != null)
                    hashCode = hashCode * 59 + this.MinimumPickupOrderAmount.GetHashCode();
                if (this.DeliveryFeeAreas != null)
                    hashCode = hashCode * 59 + this.DeliveryFeeAreas.GetHashCode();
                if (this.RequireCustomerNameForPickup != null)
                    hashCode = hashCode * 59 + this.RequireCustomerNameForPickup.GetHashCode();
                if (this.RequireCustomerNameForDelivery != null)
                    hashCode = hashCode * 59 + this.RequireCustomerNameForDelivery.GetHashCode();
                if (this.PickupHours != null)
                    hashCode = hashCode * 59 + this.PickupHours.GetHashCode();
                if (this.DeliveryHours != null)
                    hashCode = hashCode * 59 + this.DeliveryHours.GetHashCode();
                if (this.MicrosoftTimeZone != null)
                    hashCode = hashCode * 59 + this.MicrosoftTimeZone.GetHashCode();
                if (this.IanaTimeZone != null)
                    hashCode = hashCode * 59 + this.IanaTimeZone.GetHashCode();
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.OrderConfirmationMessageOverrideDelivery != null)
                    hashCode = hashCode * 59 + this.OrderConfirmationMessageOverrideDelivery.GetHashCode();
                if (this.OrderConfirmationMessageOverridePickup != null)
                    hashCode = hashCode * 59 + this.OrderConfirmationMessageOverridePickup.GetHashCode();
                if (this.PrintoutLayoutType != null)
                    hashCode = hashCode * 59 + this.PrintoutLayoutType.GetHashCode();
                if (this.StoreNotes != null)
                    hashCode = hashCode * 59 + this.StoreNotes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) maxLength
            if(this.EmailAddress != null && this.EmailAddress.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 100.", new [] { "EmailAddress" });
            }

            // EmailAddress (string) minLength
            if(this.EmailAddress != null && this.EmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 0.", new [] { "EmailAddress" });
            }

            yield break;
        }
    }

}

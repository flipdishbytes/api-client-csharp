/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>
    {
        /// <summary>
        /// User Discriminator
        /// </summary>
        /// <value>User Discriminator</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserDiscriminatorEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum ApplicationUsers for value: ApplicationUsers
            /// </summary>
            [EnumMember(Value = "ApplicationUsers")]
            ApplicationUsers = 2,
            
            /// <summary>
            /// Enum RestaurantUsers for value: RestaurantUsers
            /// </summary>
            [EnumMember(Value = "RestaurantUsers")]
            RestaurantUsers = 3,
            
            /// <summary>
            /// Enum HydraUsers for value: HydraUsers
            /// </summary>
            [EnumMember(Value = "HydraUsers")]
            HydraUsers = 4
        }

        /// <summary>
        /// User Discriminator
        /// </summary>
        /// <value>User Discriminator</value>
        [DataMember(Name="UserDiscriminator", EmitDefaultValue=false)]
        public UserDiscriminatorEnum? UserDiscriminator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">User Id.</param>
        /// <param name="phoneNumber">Phone Number.</param>
        /// <param name="email">Email.</param>
        /// <param name="customerName">Customer Name.</param>
        /// <param name="hasLoggedIn">Has Logged In.</param>
        /// <param name="userDiscriminator">User Discriminator.</param>
        /// <param name="tsCreate">Timestamp Created.</param>
        /// <param name="whiteLabelConfigs">WhiteLabel Configs.</param>
        public User(int? id = default(int?), string phoneNumber = default(string), string email = default(string), string customerName = default(string), bool? hasLoggedIn = default(bool?), UserDiscriminatorEnum? userDiscriminator = default(UserDiscriminatorEnum?), DateTime? tsCreate = default(DateTime?), List<UserWhiteLabelConfig> whiteLabelConfigs = default(List<UserWhiteLabelConfig>))
        {
            this.Id = id;
            this.PhoneNumber = phoneNumber;
            this.Email = email;
            this.CustomerName = customerName;
            this.HasLoggedIn = hasLoggedIn;
            this.UserDiscriminator = userDiscriminator;
            this.TsCreate = tsCreate;
            this.WhiteLabelConfigs = whiteLabelConfigs;
        }
        
        /// <summary>
        /// User Id
        /// </summary>
        /// <value>User Id</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Phone Number
        /// </summary>
        /// <value>Phone Number</value>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Customer Name
        /// </summary>
        /// <value>Customer Name</value>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Has Logged In
        /// </summary>
        /// <value>Has Logged In</value>
        [DataMember(Name="HasLoggedIn", EmitDefaultValue=false)]
        public bool? HasLoggedIn { get; set; }


        /// <summary>
        /// Timestamp Created
        /// </summary>
        /// <value>Timestamp Created</value>
        [DataMember(Name="TsCreate", EmitDefaultValue=false)]
        public DateTime? TsCreate { get; set; }

        /// <summary>
        /// WhiteLabel Configs
        /// </summary>
        /// <value>WhiteLabel Configs</value>
        [DataMember(Name="WhiteLabelConfigs", EmitDefaultValue=false)]
        public List<UserWhiteLabelConfig> WhiteLabelConfigs { get; set; }

        /// <summary>
        /// User Type
        /// </summary>
        /// <value>User Type</value>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public string UserType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  HasLoggedIn: ").Append(HasLoggedIn).Append("\n");
            sb.Append("  UserDiscriminator: ").Append(UserDiscriminator).Append("\n");
            sb.Append("  TsCreate: ").Append(TsCreate).Append("\n");
            sb.Append("  WhiteLabelConfigs: ").Append(WhiteLabelConfigs).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.HasLoggedIn == input.HasLoggedIn ||
                    (this.HasLoggedIn != null &&
                    this.HasLoggedIn.Equals(input.HasLoggedIn))
                ) && 
                (
                    this.UserDiscriminator == input.UserDiscriminator ||
                    (this.UserDiscriminator != null &&
                    this.UserDiscriminator.Equals(input.UserDiscriminator))
                ) && 
                (
                    this.TsCreate == input.TsCreate ||
                    (this.TsCreate != null &&
                    this.TsCreate.Equals(input.TsCreate))
                ) && 
                (
                    this.WhiteLabelConfigs == input.WhiteLabelConfigs ||
                    this.WhiteLabelConfigs != null &&
                    this.WhiteLabelConfigs.SequenceEqual(input.WhiteLabelConfigs)
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.HasLoggedIn != null)
                    hashCode = hashCode * 59 + this.HasLoggedIn.GetHashCode();
                if (this.UserDiscriminator != null)
                    hashCode = hashCode * 59 + this.UserDiscriminator.GetHashCode();
                if (this.TsCreate != null)
                    hashCode = hashCode * 59 + this.TsCreate.GetHashCode();
                if (this.WhiteLabelConfigs != null)
                    hashCode = hashCode * 59 + this.WhiteLabelConfigs.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                return hashCode;
            }
        }
    }

}

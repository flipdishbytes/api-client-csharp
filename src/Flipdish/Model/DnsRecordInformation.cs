/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Holds the information for the A and CNAME Records of a domain.
    /// </summary>
    [DataContract]
    public partial class DnsRecordInformation :  IEquatable<DnsRecordInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DnsRecordInformation" /> class.
        /// </summary>
        /// <param name="isCNameReady">indicates whether the CNAME record is ready or not..</param>
        /// <param name="isAReady">indicates whether the A record is ready or not..</param>
        /// <param name="isApiCNameReady">indicates whether the API CNAME record is ready or not..</param>
        public DnsRecordInformation(bool? isCNameReady = default(bool?), bool? isAReady = default(bool?), bool? isApiCNameReady = default(bool?))
        {
            this.IsCNameReady = isCNameReady;
            this.IsAReady = isAReady;
            this.IsApiCNameReady = isApiCNameReady;
        }
        
        /// <summary>
        /// indicates whether the CNAME record is ready or not.
        /// </summary>
        /// <value>indicates whether the CNAME record is ready or not.</value>
        [DataMember(Name="IsCNameReady", EmitDefaultValue=false)]
        public bool? IsCNameReady { get; set; }

        /// <summary>
        /// indicates whether the A record is ready or not.
        /// </summary>
        /// <value>indicates whether the A record is ready or not.</value>
        [DataMember(Name="IsAReady", EmitDefaultValue=false)]
        public bool? IsAReady { get; set; }

        /// <summary>
        /// indicates whether the API CNAME record is ready or not.
        /// </summary>
        /// <value>indicates whether the API CNAME record is ready or not.</value>
        [DataMember(Name="IsApiCNameReady", EmitDefaultValue=false)]
        public bool? IsApiCNameReady { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DnsRecordInformation {\n");
            sb.Append("  IsCNameReady: ").Append(IsCNameReady).Append("\n");
            sb.Append("  IsAReady: ").Append(IsAReady).Append("\n");
            sb.Append("  IsApiCNameReady: ").Append(IsApiCNameReady).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DnsRecordInformation);
        }

        /// <summary>
        /// Returns true if DnsRecordInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of DnsRecordInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DnsRecordInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsCNameReady == input.IsCNameReady ||
                    (this.IsCNameReady != null &&
                    this.IsCNameReady.Equals(input.IsCNameReady))
                ) && 
                (
                    this.IsAReady == input.IsAReady ||
                    (this.IsAReady != null &&
                    this.IsAReady.Equals(input.IsAReady))
                ) && 
                (
                    this.IsApiCNameReady == input.IsApiCNameReady ||
                    (this.IsApiCNameReady != null &&
                    this.IsApiCNameReady.Equals(input.IsApiCNameReady))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsCNameReady != null)
                    hashCode = hashCode * 59 + this.IsCNameReady.GetHashCode();
                if (this.IsAReady != null)
                    hashCode = hashCode * 59 + this.IsAReady.GetHashCode();
                if (this.IsApiCNameReady != null)
                    hashCode = hashCode * 59 + this.IsApiCNameReady.GetHashCode();
                return hashCode;
            }
        }
    }

}

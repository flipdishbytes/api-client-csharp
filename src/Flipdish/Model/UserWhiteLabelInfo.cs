/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User WhiteLabel information
    /// </summary>
    [DataContract]
    public partial class UserWhiteLabelInfo :  IEquatable<UserWhiteLabelInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWhiteLabelInfo" /> class.
        /// </summary>
        /// <param name="wlConfigId">WhiteLabelConfig Id.</param>
        /// <param name="appId">Brand Id (AppId).</param>
        /// <param name="whiteLabelName">WhiteLabel Name.</param>
        public UserWhiteLabelInfo(int? wlConfigId = default(int?), string appId = default(string), string whiteLabelName = default(string))
        {
            this.WlConfigId = wlConfigId;
            this.AppId = appId;
            this.WhiteLabelName = whiteLabelName;
        }
        
        /// <summary>
        /// WhiteLabelConfig Id
        /// </summary>
        /// <value>WhiteLabelConfig Id</value>
        [DataMember(Name="WlConfigId", EmitDefaultValue=false)]
        public int? WlConfigId { get; set; }

        /// <summary>
        /// Brand Id (AppId)
        /// </summary>
        /// <value>Brand Id (AppId)</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// WhiteLabel Name
        /// </summary>
        /// <value>WhiteLabel Name</value>
        [DataMember(Name="WhiteLabelName", EmitDefaultValue=false)]
        public string WhiteLabelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWhiteLabelInfo {\n");
            sb.Append("  WlConfigId: ").Append(WlConfigId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  WhiteLabelName: ").Append(WhiteLabelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWhiteLabelInfo);
        }

        /// <summary>
        /// Returns true if UserWhiteLabelInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWhiteLabelInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWhiteLabelInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WlConfigId == input.WlConfigId ||
                    (this.WlConfigId != null &&
                    this.WlConfigId.Equals(input.WlConfigId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.WhiteLabelName == input.WhiteLabelName ||
                    (this.WhiteLabelName != null &&
                    this.WhiteLabelName.Equals(input.WhiteLabelName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WlConfigId != null)
                    hashCode = hashCode * 59 + this.WlConfigId.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.WhiteLabelName != null)
                    hashCode = hashCode * 59 + this.WhiteLabelName.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// NutritionInfoV2Allergen
    /// </summary>
    [DataContract]
    public partial class NutritionInfoV2Allergen :  IEquatable<NutritionInfoV2Allergen>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NutritionInfoV2Allergen" /> class.
        /// </summary>
        /// <param name="allergenId">AllergenId (unique string identifier).</param>
        /// <param name="localizedName">Localized allergen name.</param>
        /// <param name="imageName">Name of the image file. Append it to ImageBaseUrl to get the full URL.</param>
        public NutritionInfoV2Allergen(string allergenId = default(string), string localizedName = default(string), string imageName = default(string))
        {
            this.AllergenId = allergenId;
            this.LocalizedName = localizedName;
            this.ImageName = imageName;
        }
        
        /// <summary>
        /// AllergenId (unique string identifier)
        /// </summary>
        /// <value>AllergenId (unique string identifier)</value>
        [DataMember(Name="AllergenId", EmitDefaultValue=false)]
        public string AllergenId { get; set; }

        /// <summary>
        /// Localized allergen name
        /// </summary>
        /// <value>Localized allergen name</value>
        [DataMember(Name="LocalizedName", EmitDefaultValue=false)]
        public string LocalizedName { get; set; }

        /// <summary>
        /// Name of the image file. Append it to ImageBaseUrl to get the full URL
        /// </summary>
        /// <value>Name of the image file. Append it to ImageBaseUrl to get the full URL</value>
        [DataMember(Name="ImageName", EmitDefaultValue=false)]
        public string ImageName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NutritionInfoV2Allergen {\n");
            sb.Append("  AllergenId: ").Append(AllergenId).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  ImageName: ").Append(ImageName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NutritionInfoV2Allergen);
        }

        /// <summary>
        /// Returns true if NutritionInfoV2Allergen instances are equal
        /// </summary>
        /// <param name="input">Instance of NutritionInfoV2Allergen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NutritionInfoV2Allergen input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllergenId == input.AllergenId ||
                    (this.AllergenId != null &&
                    this.AllergenId.Equals(input.AllergenId))
                ) && 
                (
                    this.LocalizedName == input.LocalizedName ||
                    (this.LocalizedName != null &&
                    this.LocalizedName.Equals(input.LocalizedName))
                ) && 
                (
                    this.ImageName == input.ImageName ||
                    (this.ImageName != null &&
                    this.ImageName.Equals(input.ImageName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllergenId != null)
                    hashCode = hashCode * 59 + this.AllergenId.GetHashCode();
                if (this.LocalizedName != null)
                    hashCode = hashCode * 59 + this.LocalizedName.GetHashCode();
                if (this.ImageName != null)
                    hashCode = hashCode * 59 + this.ImageName.GetHashCode();
                return hashCode;
            }
        }
    }

}

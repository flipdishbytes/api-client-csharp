/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Flipdish Stripe Custom Connected Account associated to the Store
    /// </summary>
    [DataContract]
    public partial class StripeCustomConnectedAccount :  IEquatable<StripeCustomConnectedAccount>
    {
        /// <summary>
        /// Card payments capability status (Inactive, Pending, Active, Unrequested)
        /// </summary>
        /// <value>Card payments capability status (Inactive, Pending, Active, Unrequested)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardPaymentsStatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 1,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 3,
            
            /// <summary>
            /// Enum Unrequested for value: Unrequested
            /// </summary>
            [EnumMember(Value = "Unrequested")]
            Unrequested = 4
        }

        /// <summary>
        /// Card payments capability status (Inactive, Pending, Active, Unrequested)
        /// </summary>
        /// <value>Card payments capability status (Inactive, Pending, Active, Unrequested)</value>
        [DataMember(Name="CardPaymentsStatus", EmitDefaultValue=false)]
        public CardPaymentsStatusEnum? CardPaymentsStatus { get; set; }
        /// <summary>
        /// Transfers capability status (Inactive, Pending, Active, Unrequested)
        /// </summary>
        /// <value>Transfers capability status (Inactive, Pending, Active, Unrequested)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransfersStatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 1,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 3,
            
            /// <summary>
            /// Enum Unrequested for value: Unrequested
            /// </summary>
            [EnumMember(Value = "Unrequested")]
            Unrequested = 4
        }

        /// <summary>
        /// Transfers capability status (Inactive, Pending, Active, Unrequested)
        /// </summary>
        /// <value>Transfers capability status (Inactive, Pending, Active, Unrequested)</value>
        [DataMember(Name="TransfersStatus", EmitDefaultValue=false)]
        public TransfersStatusEnum? TransfersStatus { get; set; }
        /// <summary>
        /// Current status of the account
        /// </summary>
        /// <value>Current status of the account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 1,
            
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 2,
            
            /// <summary>
            /// Enum AdditionalInformationRequired for value: AdditionalInformationRequired
            /// </summary>
            [EnumMember(Value = "AdditionalInformationRequired")]
            AdditionalInformationRequired = 3,
            
            /// <summary>
            /// Enum PendingVerification for value: PendingVerification
            /// </summary>
            [EnumMember(Value = "PendingVerification")]
            PendingVerification = 4,
            
            /// <summary>
            /// Enum Unverified for value: Unverified
            /// </summary>
            [EnumMember(Value = "Unverified")]
            Unverified = 5,
            
            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 6,
            
            /// <summary>
            /// Enum UpdateExternalAccount for value: UpdateExternalAccount
            /// </summary>
            [EnumMember(Value = "UpdateExternalAccount")]
            UpdateExternalAccount = 7,
            
            /// <summary>
            /// Enum PlatformPaused for value: PlatformPaused
            /// </summary>
            [EnumMember(Value = "PlatformPaused")]
            PlatformPaused = 8
        }

        /// <summary>
        /// Current status of the account
        /// </summary>
        /// <value>Current status of the account</value>
        [DataMember(Name="AccountStatus", EmitDefaultValue=false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StripeCustomConnectedAccount" /> class.
        /// </summary>
        /// <param name="storeId">Physical Restaurant Id.</param>
        /// <param name="stripeId">Stripe&#39;s own connected account identifier.</param>
        /// <param name="cardPaymentsStatus">Card payments capability status (Inactive, Pending, Active, Unrequested).</param>
        /// <param name="transfersStatus">Transfers capability status (Inactive, Pending, Active, Unrequested).</param>
        /// <param name="accountStatus">Current status of the account.</param>
        public StripeCustomConnectedAccount(int? storeId = default(int?), string stripeId = default(string), CardPaymentsStatusEnum? cardPaymentsStatus = default(CardPaymentsStatusEnum?), TransfersStatusEnum? transfersStatus = default(TransfersStatusEnum?), AccountStatusEnum? accountStatus = default(AccountStatusEnum?))
        {
            this.StoreId = storeId;
            this.StripeId = stripeId;
            this.CardPaymentsStatus = cardPaymentsStatus;
            this.TransfersStatus = transfersStatus;
            this.AccountStatus = accountStatus;
        }
        
        /// <summary>
        /// Physical Restaurant Id
        /// </summary>
        /// <value>Physical Restaurant Id</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Stripe&#39;s own connected account identifier
        /// </summary>
        /// <value>Stripe&#39;s own connected account identifier</value>
        [DataMember(Name="StripeId", EmitDefaultValue=false)]
        public string StripeId { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StripeCustomConnectedAccount {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StripeId: ").Append(StripeId).Append("\n");
            sb.Append("  CardPaymentsStatus: ").Append(CardPaymentsStatus).Append("\n");
            sb.Append("  TransfersStatus: ").Append(TransfersStatus).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StripeCustomConnectedAccount);
        }

        /// <summary>
        /// Returns true if StripeCustomConnectedAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of StripeCustomConnectedAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StripeCustomConnectedAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StripeId == input.StripeId ||
                    (this.StripeId != null &&
                    this.StripeId.Equals(input.StripeId))
                ) && 
                (
                    this.CardPaymentsStatus == input.CardPaymentsStatus ||
                    (this.CardPaymentsStatus != null &&
                    this.CardPaymentsStatus.Equals(input.CardPaymentsStatus))
                ) && 
                (
                    this.TransfersStatus == input.TransfersStatus ||
                    (this.TransfersStatus != null &&
                    this.TransfersStatus.Equals(input.TransfersStatus))
                ) && 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.StripeId != null)
                    hashCode = hashCode * 59 + this.StripeId.GetHashCode();
                if (this.CardPaymentsStatus != null)
                    hashCode = hashCode * 59 + this.CardPaymentsStatus.GetHashCode();
                if (this.TransfersStatus != null)
                    hashCode = hashCode * 59 + this.TransfersStatus.GetHashCode();
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PayoutReport3RefundedOrder
    /// </summary>
    [DataContract]
    public partial class PayoutReport3RefundedOrder :  IEquatable<PayoutReport3RefundedOrder>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 1,
            
            /// <summary>
            /// Enum Card for value: Card
            /// </summary>
            [EnumMember(Value = "Card")]
            Card = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReport3RefundedOrder" /> class.
        /// </summary>
        /// <param name="orderId">orderId.</param>
        /// <param name="placedAtTime">placedAtTime.</param>
        /// <param name="modifiedAtTime">modifiedAtTime.</param>
        /// <param name="storeName">storeName.</param>
        /// <param name="type">type.</param>
        /// <param name="refundedAmount">refundedAmount.</param>
        /// <param name="refundedFees">refundedFees.</param>
        /// <param name="refundType">refundType.</param>
        /// <param name="cashFeeRefundedToCustomer">cashFeeRefundedToCustomer.</param>
        public PayoutReport3RefundedOrder(int? orderId = default(int?), DateTime? placedAtTime = default(DateTime?), DateTime? modifiedAtTime = default(DateTime?), string storeName = default(string), TypeEnum? type = default(TypeEnum?), double? refundedAmount = default(double?), double? refundedFees = default(double?), string refundType = default(string), double? cashFeeRefundedToCustomer = default(double?))
        {
            this.OrderId = orderId;
            this.PlacedAtTime = placedAtTime;
            this.ModifiedAtTime = modifiedAtTime;
            this.StoreName = storeName;
            this.Type = type;
            this.RefundedAmount = refundedAmount;
            this.RefundedFees = refundedFees;
            this.RefundType = refundType;
            this.CashFeeRefundedToCustomer = cashFeeRefundedToCustomer;
        }
        
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PlacedAtTime
        /// </summary>
        [DataMember(Name="PlacedAtTime", EmitDefaultValue=false)]
        public DateTime? PlacedAtTime { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAtTime
        /// </summary>
        [DataMember(Name="ModifiedAtTime", EmitDefaultValue=false)]
        public DateTime? ModifiedAtTime { get; set; }

        /// <summary>
        /// Gets or Sets StoreName
        /// </summary>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }


        /// <summary>
        /// Gets or Sets RefundedAmount
        /// </summary>
        [DataMember(Name="RefundedAmount", EmitDefaultValue=false)]
        public double? RefundedAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundedFees
        /// </summary>
        [DataMember(Name="RefundedFees", EmitDefaultValue=false)]
        public double? RefundedFees { get; set; }

        /// <summary>
        /// Gets or Sets RefundType
        /// </summary>
        [DataMember(Name="RefundType", EmitDefaultValue=false)]
        public string RefundType { get; set; }

        /// <summary>
        /// Gets or Sets CashFeeRefundedToCustomer
        /// </summary>
        [DataMember(Name="CashFeeRefundedToCustomer", EmitDefaultValue=false)]
        public double? CashFeeRefundedToCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutReport3RefundedOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlacedAtTime: ").Append(PlacedAtTime).Append("\n");
            sb.Append("  ModifiedAtTime: ").Append(ModifiedAtTime).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  RefundedFees: ").Append(RefundedFees).Append("\n");
            sb.Append("  RefundType: ").Append(RefundType).Append("\n");
            sb.Append("  CashFeeRefundedToCustomer: ").Append(CashFeeRefundedToCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutReport3RefundedOrder);
        }

        /// <summary>
        /// Returns true if PayoutReport3RefundedOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutReport3RefundedOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutReport3RefundedOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PlacedAtTime == input.PlacedAtTime ||
                    (this.PlacedAtTime != null &&
                    this.PlacedAtTime.Equals(input.PlacedAtTime))
                ) && 
                (
                    this.ModifiedAtTime == input.ModifiedAtTime ||
                    (this.ModifiedAtTime != null &&
                    this.ModifiedAtTime.Equals(input.ModifiedAtTime))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RefundedAmount == input.RefundedAmount ||
                    (this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(input.RefundedAmount))
                ) && 
                (
                    this.RefundedFees == input.RefundedFees ||
                    (this.RefundedFees != null &&
                    this.RefundedFees.Equals(input.RefundedFees))
                ) && 
                (
                    this.RefundType == input.RefundType ||
                    (this.RefundType != null &&
                    this.RefundType.Equals(input.RefundType))
                ) && 
                (
                    this.CashFeeRefundedToCustomer == input.CashFeeRefundedToCustomer ||
                    (this.CashFeeRefundedToCustomer != null &&
                    this.CashFeeRefundedToCustomer.Equals(input.CashFeeRefundedToCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PlacedAtTime != null)
                    hashCode = hashCode * 59 + this.PlacedAtTime.GetHashCode();
                if (this.ModifiedAtTime != null)
                    hashCode = hashCode * 59 + this.ModifiedAtTime.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RefundedAmount != null)
                    hashCode = hashCode * 59 + this.RefundedAmount.GetHashCode();
                if (this.RefundedFees != null)
                    hashCode = hashCode * 59 + this.RefundedFees.GetHashCode();
                if (this.RefundType != null)
                    hashCode = hashCode * 59 + this.RefundType.GetHashCode();
                if (this.CashFeeRefundedToCustomer != null)
                    hashCode = hashCode * 59 + this.CashFeeRefundedToCustomer.GetHashCode();
                return hashCode;
            }
        }
    }

}

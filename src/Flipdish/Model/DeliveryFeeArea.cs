/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Delivery fee area
    /// </summary>
    [DataContract]
    public partial class DeliveryFeeArea :  IEquatable<DeliveryFeeArea>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryFeeArea" /> class.
        /// </summary>
        /// <param name="DeliveryFee">Delivery fee.</param>
        /// <param name="MinimumDeliveryOrder">Minimum delivery order amount.</param>
        public DeliveryFeeArea(double? DeliveryFee = default(double?), double? MinimumDeliveryOrder = default(double?))
        {
            this.DeliveryFee = DeliveryFee;
            this.MinimumDeliveryOrder = MinimumDeliveryOrder;
        }
        
        /// <summary>
        /// Delivery fee
        /// </summary>
        /// <value>Delivery fee</value>
        [DataMember(Name="DeliveryFee", EmitDefaultValue=false)]
        public double? DeliveryFee { get; set; }

        /// <summary>
        /// Minimum delivery order amount
        /// </summary>
        /// <value>Minimum delivery order amount</value>
        [DataMember(Name="MinimumDeliveryOrder", EmitDefaultValue=false)]
        public double? MinimumDeliveryOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryFeeArea {\n");
            sb.Append("  DeliveryFee: ").Append(DeliveryFee).Append("\n");
            sb.Append("  MinimumDeliveryOrder: ").Append(MinimumDeliveryOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryFeeArea);
        }

        /// <summary>
        /// Returns true if DeliveryFeeArea instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryFeeArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryFeeArea input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryFee == input.DeliveryFee ||
                    (this.DeliveryFee != null &&
                    this.DeliveryFee.Equals(input.DeliveryFee))
                ) && 
                (
                    this.MinimumDeliveryOrder == input.MinimumDeliveryOrder ||
                    (this.MinimumDeliveryOrder != null &&
                    this.MinimumDeliveryOrder.Equals(input.MinimumDeliveryOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryFee != null)
                    hashCode = hashCode * 59 + this.DeliveryFee.GetHashCode();
                if (this.MinimumDeliveryOrder != null)
                    hashCode = hashCode * 59 + this.MinimumDeliveryOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

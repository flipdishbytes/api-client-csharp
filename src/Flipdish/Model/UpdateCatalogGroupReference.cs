/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Data to update a {Flipdish.Menus.PublicModels.V1.Catalog.Items.CatalogGroupReference}
    /// </summary>
    [DataContract]
    public partial class UpdateCatalogGroupReference :  IEquatable<UpdateCatalogGroupReference>
    {
        /// <summary>
        /// Type of the SupProduct
        /// </summary>
        /// <value>Type of the SupProduct</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GroupTypeEnum
        {
            
            /// <summary>
            /// Enum ModifierGroup for value: ModifierGroup
            /// </summary>
            [EnumMember(Value = "ModifierGroup")]
            ModifierGroup = 1
        }

        /// <summary>
        /// Type of the SupProduct
        /// </summary>
        /// <value>Type of the SupProduct</value>
        [DataMember(Name="GroupType", EmitDefaultValue=false)]
        public GroupTypeEnum GroupType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCatalogGroupReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateCatalogGroupReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCatalogGroupReference" /> class.
        /// </summary>
        /// <param name="catalogGroupId">Identifier of the ProductId to use as SubProduct (required).</param>
        /// <param name="catalogItemId">Identifier of the ProductId to use as SubProduct.</param>
        /// <param name="groupType">Type of the SupProduct (required).</param>
        public UpdateCatalogGroupReference(string catalogGroupId = default(string), string catalogItemId = default(string), GroupTypeEnum groupType = default(GroupTypeEnum))
        {
            // to ensure "catalogGroupId" is required (not null)
            if (catalogGroupId == null)
            {
                throw new InvalidDataException("catalogGroupId is a required property for UpdateCatalogGroupReference and cannot be null");
            }
            else
            {
                this.CatalogGroupId = catalogGroupId;
            }
            // to ensure "groupType" is required (not null)
            if (groupType == null)
            {
                throw new InvalidDataException("groupType is a required property for UpdateCatalogGroupReference and cannot be null");
            }
            else
            {
                this.GroupType = groupType;
            }
            this.CatalogItemId = catalogItemId;
        }
        
        /// <summary>
        /// Identifier of the ProductId to use as SubProduct
        /// </summary>
        /// <value>Identifier of the ProductId to use as SubProduct</value>
        [DataMember(Name="CatalogGroupId", EmitDefaultValue=false)]
        public string CatalogGroupId { get; set; }

        /// <summary>
        /// Identifier of the ProductId to use as SubProduct
        /// </summary>
        /// <value>Identifier of the ProductId to use as SubProduct</value>
        [DataMember(Name="CatalogItemId", EmitDefaultValue=false)]
        public string CatalogItemId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCatalogGroupReference {\n");
            sb.Append("  CatalogGroupId: ").Append(CatalogGroupId).Append("\n");
            sb.Append("  CatalogItemId: ").Append(CatalogItemId).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCatalogGroupReference);
        }

        /// <summary>
        /// Returns true if UpdateCatalogGroupReference instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCatalogGroupReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCatalogGroupReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogGroupId == input.CatalogGroupId ||
                    (this.CatalogGroupId != null &&
                    this.CatalogGroupId.Equals(input.CatalogGroupId))
                ) && 
                (
                    this.CatalogItemId == input.CatalogItemId ||
                    (this.CatalogItemId != null &&
                    this.CatalogItemId.Equals(input.CatalogItemId))
                ) && 
                (
                    this.GroupType == input.GroupType ||
                    (this.GroupType != null &&
                    this.GroupType.Equals(input.GroupType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogGroupId != null)
                    hashCode = hashCode * 59 + this.CatalogGroupId.GetHashCode();
                if (this.CatalogItemId != null)
                    hashCode = hashCode * 59 + this.CatalogItemId.GetHashCode();
                if (this.GroupType != null)
                    hashCode = hashCode * 59 + this.GroupType.GetHashCode();
                return hashCode;
            }
        }
    }

}

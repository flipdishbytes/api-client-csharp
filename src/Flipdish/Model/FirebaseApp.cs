/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// FirebaseApp
    /// </summary>
    [DataContract]
    public partial class FirebaseApp :  IEquatable<FirebaseApp>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirebaseApp" /> class.
        /// </summary>
        /// <param name="whitelabelId">whitelabelId.</param>
        /// <param name="packageId">packageId.</param>
        /// <param name="firebaseAppId">firebaseAppId.</param>
        /// <param name="firebaseProjectId">firebaseProjectId.</param>
        public FirebaseApp(int? whitelabelId = default(int?), string packageId = default(string), string firebaseAppId = default(string), string firebaseProjectId = default(string))
        {
            this.WhitelabelId = whitelabelId;
            this.PackageId = packageId;
            this.FirebaseAppId = firebaseAppId;
            this.FirebaseProjectId = firebaseProjectId;
        }
        
        /// <summary>
        /// Gets or Sets WhitelabelId
        /// </summary>
        [DataMember(Name="WhitelabelId", EmitDefaultValue=false)]
        public int? WhitelabelId { get; set; }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name="PackageId", EmitDefaultValue=false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets FirebaseAppId
        /// </summary>
        [DataMember(Name="FirebaseAppId", EmitDefaultValue=false)]
        public string FirebaseAppId { get; set; }

        /// <summary>
        /// Gets or Sets FirebaseProjectId
        /// </summary>
        [DataMember(Name="FirebaseProjectId", EmitDefaultValue=false)]
        public string FirebaseProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirebaseApp {\n");
            sb.Append("  WhitelabelId: ").Append(WhitelabelId).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  FirebaseAppId: ").Append(FirebaseAppId).Append("\n");
            sb.Append("  FirebaseProjectId: ").Append(FirebaseProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirebaseApp);
        }

        /// <summary>
        /// Returns true if FirebaseApp instances are equal
        /// </summary>
        /// <param name="input">Instance of FirebaseApp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirebaseApp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WhitelabelId == input.WhitelabelId ||
                    (this.WhitelabelId != null &&
                    this.WhitelabelId.Equals(input.WhitelabelId))
                ) && 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.FirebaseAppId == input.FirebaseAppId ||
                    (this.FirebaseAppId != null &&
                    this.FirebaseAppId.Equals(input.FirebaseAppId))
                ) && 
                (
                    this.FirebaseProjectId == input.FirebaseProjectId ||
                    (this.FirebaseProjectId != null &&
                    this.FirebaseProjectId.Equals(input.FirebaseProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhitelabelId != null)
                    hashCode = hashCode * 59 + this.WhitelabelId.GetHashCode();
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.FirebaseAppId != null)
                    hashCode = hashCode * 59 + this.FirebaseAppId.GetHashCode();
                if (this.FirebaseProjectId != null)
                    hashCode = hashCode * 59 + this.FirebaseProjectId.GetHashCode();
                return hashCode;
            }
        }
    }

}

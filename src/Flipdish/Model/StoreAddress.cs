/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store address
    /// </summary>
    [DataContract]
    public partial class StoreAddress :  IEquatable<StoreAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreAddress" /> class.
        /// </summary>
        /// <param name="addressId">Address identifier.</param>
        /// <param name="coordinates">Coordinate.</param>
        /// <param name="line1">Address line 1.</param>
        /// <param name="postcode">Postcode.</param>
        /// <param name="city">City.</param>
        /// <param name="countryCode">Country code (ISO-alpha2).</param>
        /// <param name="displayForCustomer">Display for customer.</param>
        public StoreAddress(int? addressId = default(int?), Coordinates coordinates = default(Coordinates), string line1 = default(string), string postcode = default(string), string city = default(string), string countryCode = default(string), string displayForCustomer = default(string))
        {
            this.AddressId = addressId;
            this.Coordinates = coordinates;
            this.Line1 = line1;
            this.Postcode = postcode;
            this.City = city;
            this.CountryCode = countryCode;
            this.DisplayForCustomer = displayForCustomer;
        }
        
        /// <summary>
        /// Address identifier
        /// </summary>
        /// <value>Address identifier</value>
        [DataMember(Name="AddressId", EmitDefaultValue=false)]
        public int? AddressId { get; set; }

        /// <summary>
        /// Coordinate
        /// </summary>
        /// <value>Coordinate</value>
        [DataMember(Name="Coordinates", EmitDefaultValue=false)]
        public Coordinates Coordinates { get; set; }

        /// <summary>
        /// Address line 1
        /// </summary>
        /// <value>Address line 1</value>
        [DataMember(Name="Line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name="Postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Country code (ISO-alpha2)
        /// </summary>
        /// <value>Country code (ISO-alpha2)</value>
        [DataMember(Name="CountryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Display for customer
        /// </summary>
        /// <value>Display for customer</value>
        [DataMember(Name="DisplayForCustomer", EmitDefaultValue=false)]
        public string DisplayForCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreAddress {\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DisplayForCustomer: ").Append(DisplayForCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreAddress);
        }

        /// <summary>
        /// Returns true if StoreAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressId == input.AddressId ||
                    (this.AddressId != null &&
                    this.AddressId.Equals(input.AddressId))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    (this.Coordinates != null &&
                    this.Coordinates.Equals(input.Coordinates))
                ) && 
                (
                    this.Line1 == input.Line1 ||
                    (this.Line1 != null &&
                    this.Line1.Equals(input.Line1))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DisplayForCustomer == input.DisplayForCustomer ||
                    (this.DisplayForCustomer != null &&
                    this.DisplayForCustomer.Equals(input.DisplayForCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressId != null)
                    hashCode = hashCode * 59 + this.AddressId.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.Line1 != null)
                    hashCode = hashCode * 59 + this.Line1.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DisplayForCustomer != null)
                    hashCode = hashCode * 59 + this.DisplayForCustomer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if(this.CountryCode != null && this.CountryCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be greater than 0.", new [] { "CountryCode" });
            }

            yield break;
        }
    }

}

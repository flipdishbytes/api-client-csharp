/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Stuart client credentials
    /// </summary>
    [DataContract]
    public partial class ClientCredentials :  IEquatable<ClientCredentials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientCredentials" /> class.
        /// </summary>
        /// <param name="ClientId">Client Id.</param>
        /// <param name="ClientSecret">Client Secret.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="WebhookUrlBasicAuthentication">Webhook url to settle in the Stuart portal.</param>
        public ClientCredentials(string ClientId = default(string), string ClientSecret = default(string), bool? Enabled = default(bool?), string WebhookUrlBasicAuthentication = default(string))
        {
            this.ClientId = ClientId;
            this.ClientSecret = ClientSecret;
            this.Enabled = Enabled;
            this.WebhookUrlBasicAuthentication = WebhookUrlBasicAuthentication;
        }
        
        /// <summary>
        /// Client Id
        /// </summary>
        /// <value>Client Id</value>
        [DataMember(Name="ClientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Client Secret
        /// </summary>
        /// <value>Client Secret</value>
        [DataMember(Name="ClientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Enabled
        /// </summary>
        /// <value>Enabled</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Webhook url to settle in the Stuart portal
        /// </summary>
        /// <value>Webhook url to settle in the Stuart portal</value>
        [DataMember(Name="WebhookUrlBasicAuthentication", EmitDefaultValue=false)]
        public string WebhookUrlBasicAuthentication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientCredentials {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  WebhookUrlBasicAuthentication: ").Append(WebhookUrlBasicAuthentication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientCredentials);
        }

        /// <summary>
        /// Returns true if ClientCredentials instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientCredentials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.WebhookUrlBasicAuthentication == input.WebhookUrlBasicAuthentication ||
                    (this.WebhookUrlBasicAuthentication != null &&
                    this.WebhookUrlBasicAuthentication.Equals(input.WebhookUrlBasicAuthentication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.WebhookUrlBasicAuthentication != null)
                    hashCode = hashCode * 59 + this.WebhookUrlBasicAuthentication.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Chargebacks breakdown
    /// </summary>
    [DataContract]
    public partial class ChargebackDetails :  IEquatable<ChargebackDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargebackDetails" /> class.
        /// </summary>
        /// <param name="chargebackAmount">Chargeback amount.</param>
        /// <param name="chargebackRefundedFees">Chargeback refunded feeds.</param>
        /// <param name="chargebacksCount">Number of chargebacks.</param>
        /// <param name="totalChargebackCost">Total amount.</param>
        public ChargebackDetails(double? chargebackAmount = default(double?), double? chargebackRefundedFees = default(double?), int? chargebacksCount = default(int?), double? totalChargebackCost = default(double?))
        {
            this.ChargebackAmount = chargebackAmount;
            this.ChargebackRefundedFees = chargebackRefundedFees;
            this.ChargebacksCount = chargebacksCount;
            this.TotalChargebackCost = totalChargebackCost;
        }
        
        /// <summary>
        /// Chargeback amount
        /// </summary>
        /// <value>Chargeback amount</value>
        [DataMember(Name="ChargebackAmount", EmitDefaultValue=false)]
        public double? ChargebackAmount { get; set; }

        /// <summary>
        /// Chargeback refunded feeds
        /// </summary>
        /// <value>Chargeback refunded feeds</value>
        [DataMember(Name="ChargebackRefundedFees", EmitDefaultValue=false)]
        public double? ChargebackRefundedFees { get; set; }

        /// <summary>
        /// Number of chargebacks
        /// </summary>
        /// <value>Number of chargebacks</value>
        [DataMember(Name="ChargebacksCount", EmitDefaultValue=false)]
        public int? ChargebacksCount { get; set; }

        /// <summary>
        /// Total amount
        /// </summary>
        /// <value>Total amount</value>
        [DataMember(Name="TotalChargebackCost", EmitDefaultValue=false)]
        public double? TotalChargebackCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargebackDetails {\n");
            sb.Append("  ChargebackAmount: ").Append(ChargebackAmount).Append("\n");
            sb.Append("  ChargebackRefundedFees: ").Append(ChargebackRefundedFees).Append("\n");
            sb.Append("  ChargebacksCount: ").Append(ChargebacksCount).Append("\n");
            sb.Append("  TotalChargebackCost: ").Append(TotalChargebackCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargebackDetails);
        }

        /// <summary>
        /// Returns true if ChargebackDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargebackDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargebackDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChargebackAmount == input.ChargebackAmount ||
                    (this.ChargebackAmount != null &&
                    this.ChargebackAmount.Equals(input.ChargebackAmount))
                ) && 
                (
                    this.ChargebackRefundedFees == input.ChargebackRefundedFees ||
                    (this.ChargebackRefundedFees != null &&
                    this.ChargebackRefundedFees.Equals(input.ChargebackRefundedFees))
                ) && 
                (
                    this.ChargebacksCount == input.ChargebacksCount ||
                    (this.ChargebacksCount != null &&
                    this.ChargebacksCount.Equals(input.ChargebacksCount))
                ) && 
                (
                    this.TotalChargebackCost == input.TotalChargebackCost ||
                    (this.TotalChargebackCost != null &&
                    this.TotalChargebackCost.Equals(input.TotalChargebackCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChargebackAmount != null)
                    hashCode = hashCode * 59 + this.ChargebackAmount.GetHashCode();
                if (this.ChargebackRefundedFees != null)
                    hashCode = hashCode * 59 + this.ChargebackRefundedFees.GetHashCode();
                if (this.ChargebacksCount != null)
                    hashCode = hashCode * 59 + this.ChargebacksCount.GetHashCode();
                if (this.TotalChargebackCost != null)
                    hashCode = hashCode * 59 + this.TotalChargebackCost.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// List&#39;s the issues with the last failed payment intent
    /// </summary>
    [DataContract]
    public partial class LastPaymentError :  IEquatable<LastPaymentError>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LastPaymentError" /> class.
        /// </summary>
        /// <param name="code">For some errors that could be handled programmatically, a short string indicating the error code reported..</param>
        /// <param name="declineCode">For card errors resulting from a card issuer decline, a short string indicating the card issuer’s reason for the decline if they provide one..</param>
        /// <param name="message">A human-readable message providing more details about the error. For card errors, these messages can be shown to your users..</param>
        public LastPaymentError(string code = default(string), string declineCode = default(string), string message = default(string))
        {
            this.Code = code;
            this.DeclineCode = declineCode;
            this.Message = message;
        }
        
        /// <summary>
        /// For some errors that could be handled programmatically, a short string indicating the error code reported.
        /// </summary>
        /// <value>For some errors that could be handled programmatically, a short string indicating the error code reported.</value>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// For card errors resulting from a card issuer decline, a short string indicating the card issuer’s reason for the decline if they provide one.
        /// </summary>
        /// <value>For card errors resulting from a card issuer decline, a short string indicating the card issuer’s reason for the decline if they provide one.</value>
        [DataMember(Name="DeclineCode", EmitDefaultValue=false)]
        public string DeclineCode { get; set; }

        /// <summary>
        /// A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
        /// </summary>
        /// <value>A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LastPaymentError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DeclineCode: ").Append(DeclineCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LastPaymentError);
        }

        /// <summary>
        /// Returns true if LastPaymentError instances are equal
        /// </summary>
        /// <param name="input">Instance of LastPaymentError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LastPaymentError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DeclineCode == input.DeclineCode ||
                    (this.DeclineCode != null &&
                    this.DeclineCode.Equals(input.DeclineCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DeclineCode != null)
                    hashCode = hashCode * 59 + this.DeclineCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }
    }

}

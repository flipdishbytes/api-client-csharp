/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Update Voucher
    /// </summary>
    [DataContract]
    public partial class UpdateVoucher :  IEquatable<UpdateVoucher>
    {
        /// <summary>
        /// Defines ChannelRestrictions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelRestrictionsEnum
        {
            
            /// <summary>
            /// Enum Ios for value: Ios
            /// </summary>
            [EnumMember(Value = "Ios")]
            Ios = 1,
            
            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            [EnumMember(Value = "Android")]
            Android = 2,
            
            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            [EnumMember(Value = "Web")]
            Web = 3,
            
            /// <summary>
            /// Enum Kiosk for value: Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            Kiosk = 4,
            
            /// <summary>
            /// Enum Pos for value: Pos
            /// </summary>
            [EnumMember(Value = "Pos")]
            Pos = 5,
            
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 6
        }


        /// <summary>
        /// Limit the channels this voucher can be used on
        /// </summary>
        /// <value>Limit the channels this voucher can be used on</value>
        [DataMember(Name="ChannelRestrictions", EmitDefaultValue=false)]
        public List<ChannelRestrictionsEnum> ChannelRestrictions { get; set; }
        /// <summary>
        /// Voucher Subtype
        /// </summary>
        /// <value>Voucher Subtype</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherSubTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum SignUp for value: SignUp
            /// </summary>
            [EnumMember(Value = "SignUp")]
            SignUp = 2,
            
            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 3,
            
            /// <summary>
            /// Enum Loyalty25 for value: Loyalty25
            /// </summary>
            [EnumMember(Value = "Loyalty25")]
            Loyalty25 = 4,
            
            /// <summary>
            /// Enum Retention for value: Retention
            /// </summary>
            [EnumMember(Value = "Retention")]
            Retention = 5,
            
            /// <summary>
            /// Enum SecondaryRetention for value: SecondaryRetention
            /// </summary>
            [EnumMember(Value = "SecondaryRetention")]
            SecondaryRetention = 6,
            
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 7
        }

        /// <summary>
        /// Voucher Subtype
        /// </summary>
        /// <value>Voucher Subtype</value>
        [DataMember(Name="VoucherSubType", EmitDefaultValue=false)]
        public VoucherSubTypeEnum? VoucherSubType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateVoucher" /> class.
        /// </summary>
        /// <param name="promotionId">Promotion ID to update.</param>
        /// <param name="promotionName">The updated name of the promotion.</param>
        /// <param name="promotionAwardMenuItemPublicIds">The updated menu items that the promotion awards.</param>
        /// <param name="code">Voucher Code.</param>
        /// <param name="description">Voucher Description (Visible on printout).</param>
        /// <param name="stores">Stores that this voucher applies to.</param>
        /// <param name="validOnOrdersOver">Valid on orders on or above.</param>
        /// <param name="takesPriority">Takes priority.</param>
        /// <param name="isEnabled">Is voucher enabled.</param>
        /// <param name="isAutomaticallyApplied">Is voucher automatically applied.</param>
        /// <param name="includeDeliveryFee">Include delivery fees.</param>
        /// <param name="isValidForDeliveryOrders">Valid for delivery orders.</param>
        /// <param name="isValidForPickupOrders">Valid for pickup orders.</param>
        /// <param name="isValidForOrdersPayedOnline">Valid for orders payed online.</param>
        /// <param name="isValidForOrdersPayedByCash">Valid for orders payed in cash.</param>
        /// <param name="isValidForFirstOrderOnly">Valid only on the first order by the customer.</param>
        /// <param name="isValidOncePerCustomer">Valid once per customer.</param>
        /// <param name="isValidOnlyOnce">Valid only once, by any customer (once used cannot be used again by any other customer).</param>
        /// <param name="startDate">Voucher Starts On (Time in UTC).</param>
        /// <param name="expiryDate">Voucher Expires On (Time in UTC).</param>
        /// <param name="channelRestrictions">Limit the channels this voucher can be used on.</param>
        /// <param name="validityPeriods">Periods in which the voucher is valid.  An empty list means the voucher is valid at all times.  When updating the voucher, if this is set to null, the validity periods won&#39;t be updated..</param>
        /// <param name="voucherSubType">Voucher Subtype.</param>
        /// <param name="customerId">Customer UserID.</param>
        /// <param name="maxRedemptions">Maximum number of times the voucher can be redeemed (used).</param>
        public UpdateVoucher(int? promotionId = default(int?), string promotionName = default(string), List<Guid?> promotionAwardMenuItemPublicIds = default(List<Guid?>), string code = default(string), string description = default(string), List<int?> stores = default(List<int?>), double? validOnOrdersOver = default(double?), bool? takesPriority = default(bool?), bool? isEnabled = default(bool?), bool? isAutomaticallyApplied = default(bool?), bool? includeDeliveryFee = default(bool?), bool? isValidForDeliveryOrders = default(bool?), bool? isValidForPickupOrders = default(bool?), bool? isValidForOrdersPayedOnline = default(bool?), bool? isValidForOrdersPayedByCash = default(bool?), bool? isValidForFirstOrderOnly = default(bool?), bool? isValidOncePerCustomer = default(bool?), bool? isValidOnlyOnce = default(bool?), DateTime? startDate = default(DateTime?), DateTime? expiryDate = default(DateTime?), List<ChannelRestrictionsEnum> channelRestrictions = default(List<ChannelRestrictionsEnum>), List<ValidityPeriod> validityPeriods = default(List<ValidityPeriod>), VoucherSubTypeEnum? voucherSubType = default(VoucherSubTypeEnum?), int? customerId = default(int?), int? maxRedemptions = default(int?))
        {
            this.PromotionId = promotionId;
            this.PromotionName = promotionName;
            this.PromotionAwardMenuItemPublicIds = promotionAwardMenuItemPublicIds;
            this.Code = code;
            this.Description = description;
            this.Stores = stores;
            this.ValidOnOrdersOver = validOnOrdersOver;
            this.TakesPriority = takesPriority;
            this.IsEnabled = isEnabled;
            this.IsAutomaticallyApplied = isAutomaticallyApplied;
            this.IncludeDeliveryFee = includeDeliveryFee;
            this.IsValidForDeliveryOrders = isValidForDeliveryOrders;
            this.IsValidForPickupOrders = isValidForPickupOrders;
            this.IsValidForOrdersPayedOnline = isValidForOrdersPayedOnline;
            this.IsValidForOrdersPayedByCash = isValidForOrdersPayedByCash;
            this.IsValidForFirstOrderOnly = isValidForFirstOrderOnly;
            this.IsValidOncePerCustomer = isValidOncePerCustomer;
            this.IsValidOnlyOnce = isValidOnlyOnce;
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
            this.ChannelRestrictions = channelRestrictions;
            this.ValidityPeriods = validityPeriods;
            this.VoucherSubType = voucherSubType;
            this.CustomerId = customerId;
            this.MaxRedemptions = maxRedemptions;
        }
        
        /// <summary>
        /// Promotion ID to update
        /// </summary>
        /// <value>Promotion ID to update</value>
        [DataMember(Name="PromotionId", EmitDefaultValue=false)]
        public int? PromotionId { get; set; }

        /// <summary>
        /// The updated name of the promotion
        /// </summary>
        /// <value>The updated name of the promotion</value>
        [DataMember(Name="PromotionName", EmitDefaultValue=false)]
        public string PromotionName { get; set; }

        /// <summary>
        /// The updated menu items that the promotion awards
        /// </summary>
        /// <value>The updated menu items that the promotion awards</value>
        [DataMember(Name="PromotionAwardMenuItemPublicIds", EmitDefaultValue=false)]
        public List<Guid?> PromotionAwardMenuItemPublicIds { get; set; }

        /// <summary>
        /// Voucher Code
        /// </summary>
        /// <value>Voucher Code</value>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Voucher Description (Visible on printout)
        /// </summary>
        /// <value>Voucher Description (Visible on printout)</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Stores that this voucher applies to
        /// </summary>
        /// <value>Stores that this voucher applies to</value>
        [DataMember(Name="Stores", EmitDefaultValue=false)]
        public List<int?> Stores { get; set; }

        /// <summary>
        /// Valid on orders on or above
        /// </summary>
        /// <value>Valid on orders on or above</value>
        [DataMember(Name="ValidOnOrdersOver", EmitDefaultValue=false)]
        public double? ValidOnOrdersOver { get; set; }

        /// <summary>
        /// Takes priority
        /// </summary>
        /// <value>Takes priority</value>
        [DataMember(Name="TakesPriority", EmitDefaultValue=false)]
        public bool? TakesPriority { get; set; }

        /// <summary>
        /// Is voucher enabled
        /// </summary>
        /// <value>Is voucher enabled</value>
        [DataMember(Name="IsEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Is voucher automatically applied
        /// </summary>
        /// <value>Is voucher automatically applied</value>
        [DataMember(Name="IsAutomaticallyApplied", EmitDefaultValue=false)]
        public bool? IsAutomaticallyApplied { get; set; }

        /// <summary>
        /// Include delivery fees
        /// </summary>
        /// <value>Include delivery fees</value>
        [DataMember(Name="IncludeDeliveryFee", EmitDefaultValue=false)]
        public bool? IncludeDeliveryFee { get; set; }

        /// <summary>
        /// Valid for delivery orders
        /// </summary>
        /// <value>Valid for delivery orders</value>
        [DataMember(Name="IsValidForDeliveryOrders", EmitDefaultValue=false)]
        public bool? IsValidForDeliveryOrders { get; set; }

        /// <summary>
        /// Valid for pickup orders
        /// </summary>
        /// <value>Valid for pickup orders</value>
        [DataMember(Name="IsValidForPickupOrders", EmitDefaultValue=false)]
        public bool? IsValidForPickupOrders { get; set; }

        /// <summary>
        /// Valid for orders payed online
        /// </summary>
        /// <value>Valid for orders payed online</value>
        [DataMember(Name="IsValidForOrdersPayedOnline", EmitDefaultValue=false)]
        public bool? IsValidForOrdersPayedOnline { get; set; }

        /// <summary>
        /// Valid for orders payed in cash
        /// </summary>
        /// <value>Valid for orders payed in cash</value>
        [DataMember(Name="IsValidForOrdersPayedByCash", EmitDefaultValue=false)]
        public bool? IsValidForOrdersPayedByCash { get; set; }

        /// <summary>
        /// Valid only on the first order by the customer
        /// </summary>
        /// <value>Valid only on the first order by the customer</value>
        [DataMember(Name="IsValidForFirstOrderOnly", EmitDefaultValue=false)]
        public bool? IsValidForFirstOrderOnly { get; set; }

        /// <summary>
        /// Valid once per customer
        /// </summary>
        /// <value>Valid once per customer</value>
        [DataMember(Name="IsValidOncePerCustomer", EmitDefaultValue=false)]
        public bool? IsValidOncePerCustomer { get; set; }

        /// <summary>
        /// Valid only once, by any customer (once used cannot be used again by any other customer)
        /// </summary>
        /// <value>Valid only once, by any customer (once used cannot be used again by any other customer)</value>
        [DataMember(Name="IsValidOnlyOnce", EmitDefaultValue=false)]
        public bool? IsValidOnlyOnce { get; set; }

        /// <summary>
        /// Voucher Starts On (Time in UTC)
        /// </summary>
        /// <value>Voucher Starts On (Time in UTC)</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Voucher Expires On (Time in UTC)
        /// </summary>
        /// <value>Voucher Expires On (Time in UTC)</value>
        [DataMember(Name="ExpiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }


        /// <summary>
        /// Periods in which the voucher is valid.  An empty list means the voucher is valid at all times.  When updating the voucher, if this is set to null, the validity periods won&#39;t be updated.
        /// </summary>
        /// <value>Periods in which the voucher is valid.  An empty list means the voucher is valid at all times.  When updating the voucher, if this is set to null, the validity periods won&#39;t be updated.</value>
        [DataMember(Name="ValidityPeriods", EmitDefaultValue=false)]
        public List<ValidityPeriod> ValidityPeriods { get; set; }


        /// <summary>
        /// Customer UserID
        /// </summary>
        /// <value>Customer UserID</value>
        [DataMember(Name="CustomerId", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Maximum number of times the voucher can be redeemed (used)
        /// </summary>
        /// <value>Maximum number of times the voucher can be redeemed (used)</value>
        [DataMember(Name="MaxRedemptions", EmitDefaultValue=false)]
        public int? MaxRedemptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateVoucher {\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  PromotionName: ").Append(PromotionName).Append("\n");
            sb.Append("  PromotionAwardMenuItemPublicIds: ").Append(PromotionAwardMenuItemPublicIds).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("  ValidOnOrdersOver: ").Append(ValidOnOrdersOver).Append("\n");
            sb.Append("  TakesPriority: ").Append(TakesPriority).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsAutomaticallyApplied: ").Append(IsAutomaticallyApplied).Append("\n");
            sb.Append("  IncludeDeliveryFee: ").Append(IncludeDeliveryFee).Append("\n");
            sb.Append("  IsValidForDeliveryOrders: ").Append(IsValidForDeliveryOrders).Append("\n");
            sb.Append("  IsValidForPickupOrders: ").Append(IsValidForPickupOrders).Append("\n");
            sb.Append("  IsValidForOrdersPayedOnline: ").Append(IsValidForOrdersPayedOnline).Append("\n");
            sb.Append("  IsValidForOrdersPayedByCash: ").Append(IsValidForOrdersPayedByCash).Append("\n");
            sb.Append("  IsValidForFirstOrderOnly: ").Append(IsValidForFirstOrderOnly).Append("\n");
            sb.Append("  IsValidOncePerCustomer: ").Append(IsValidOncePerCustomer).Append("\n");
            sb.Append("  IsValidOnlyOnce: ").Append(IsValidOnlyOnce).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ChannelRestrictions: ").Append(ChannelRestrictions).Append("\n");
            sb.Append("  ValidityPeriods: ").Append(ValidityPeriods).Append("\n");
            sb.Append("  VoucherSubType: ").Append(VoucherSubType).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  MaxRedemptions: ").Append(MaxRedemptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateVoucher);
        }

        /// <summary>
        /// Returns true if UpdateVoucher instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateVoucher to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateVoucher input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.PromotionName == input.PromotionName ||
                    (this.PromotionName != null &&
                    this.PromotionName.Equals(input.PromotionName))
                ) && 
                (
                    this.PromotionAwardMenuItemPublicIds == input.PromotionAwardMenuItemPublicIds ||
                    this.PromotionAwardMenuItemPublicIds != null &&
                    this.PromotionAwardMenuItemPublicIds.SequenceEqual(input.PromotionAwardMenuItemPublicIds)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Stores == input.Stores ||
                    this.Stores != null &&
                    this.Stores.SequenceEqual(input.Stores)
                ) && 
                (
                    this.ValidOnOrdersOver == input.ValidOnOrdersOver ||
                    (this.ValidOnOrdersOver != null &&
                    this.ValidOnOrdersOver.Equals(input.ValidOnOrdersOver))
                ) && 
                (
                    this.TakesPriority == input.TakesPriority ||
                    (this.TakesPriority != null &&
                    this.TakesPriority.Equals(input.TakesPriority))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.IsAutomaticallyApplied == input.IsAutomaticallyApplied ||
                    (this.IsAutomaticallyApplied != null &&
                    this.IsAutomaticallyApplied.Equals(input.IsAutomaticallyApplied))
                ) && 
                (
                    this.IncludeDeliveryFee == input.IncludeDeliveryFee ||
                    (this.IncludeDeliveryFee != null &&
                    this.IncludeDeliveryFee.Equals(input.IncludeDeliveryFee))
                ) && 
                (
                    this.IsValidForDeliveryOrders == input.IsValidForDeliveryOrders ||
                    (this.IsValidForDeliveryOrders != null &&
                    this.IsValidForDeliveryOrders.Equals(input.IsValidForDeliveryOrders))
                ) && 
                (
                    this.IsValidForPickupOrders == input.IsValidForPickupOrders ||
                    (this.IsValidForPickupOrders != null &&
                    this.IsValidForPickupOrders.Equals(input.IsValidForPickupOrders))
                ) && 
                (
                    this.IsValidForOrdersPayedOnline == input.IsValidForOrdersPayedOnline ||
                    (this.IsValidForOrdersPayedOnline != null &&
                    this.IsValidForOrdersPayedOnline.Equals(input.IsValidForOrdersPayedOnline))
                ) && 
                (
                    this.IsValidForOrdersPayedByCash == input.IsValidForOrdersPayedByCash ||
                    (this.IsValidForOrdersPayedByCash != null &&
                    this.IsValidForOrdersPayedByCash.Equals(input.IsValidForOrdersPayedByCash))
                ) && 
                (
                    this.IsValidForFirstOrderOnly == input.IsValidForFirstOrderOnly ||
                    (this.IsValidForFirstOrderOnly != null &&
                    this.IsValidForFirstOrderOnly.Equals(input.IsValidForFirstOrderOnly))
                ) && 
                (
                    this.IsValidOncePerCustomer == input.IsValidOncePerCustomer ||
                    (this.IsValidOncePerCustomer != null &&
                    this.IsValidOncePerCustomer.Equals(input.IsValidOncePerCustomer))
                ) && 
                (
                    this.IsValidOnlyOnce == input.IsValidOnlyOnce ||
                    (this.IsValidOnlyOnce != null &&
                    this.IsValidOnlyOnce.Equals(input.IsValidOnlyOnce))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.ChannelRestrictions == input.ChannelRestrictions ||
                    this.ChannelRestrictions != null &&
                    this.ChannelRestrictions.SequenceEqual(input.ChannelRestrictions)
                ) && 
                (
                    this.ValidityPeriods == input.ValidityPeriods ||
                    this.ValidityPeriods != null &&
                    this.ValidityPeriods.SequenceEqual(input.ValidityPeriods)
                ) && 
                (
                    this.VoucherSubType == input.VoucherSubType ||
                    (this.VoucherSubType != null &&
                    this.VoucherSubType.Equals(input.VoucherSubType))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.MaxRedemptions == input.MaxRedemptions ||
                    (this.MaxRedemptions != null &&
                    this.MaxRedemptions.Equals(input.MaxRedemptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.PromotionName != null)
                    hashCode = hashCode * 59 + this.PromotionName.GetHashCode();
                if (this.PromotionAwardMenuItemPublicIds != null)
                    hashCode = hashCode * 59 + this.PromotionAwardMenuItemPublicIds.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Stores != null)
                    hashCode = hashCode * 59 + this.Stores.GetHashCode();
                if (this.ValidOnOrdersOver != null)
                    hashCode = hashCode * 59 + this.ValidOnOrdersOver.GetHashCode();
                if (this.TakesPriority != null)
                    hashCode = hashCode * 59 + this.TakesPriority.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.IsAutomaticallyApplied != null)
                    hashCode = hashCode * 59 + this.IsAutomaticallyApplied.GetHashCode();
                if (this.IncludeDeliveryFee != null)
                    hashCode = hashCode * 59 + this.IncludeDeliveryFee.GetHashCode();
                if (this.IsValidForDeliveryOrders != null)
                    hashCode = hashCode * 59 + this.IsValidForDeliveryOrders.GetHashCode();
                if (this.IsValidForPickupOrders != null)
                    hashCode = hashCode * 59 + this.IsValidForPickupOrders.GetHashCode();
                if (this.IsValidForOrdersPayedOnline != null)
                    hashCode = hashCode * 59 + this.IsValidForOrdersPayedOnline.GetHashCode();
                if (this.IsValidForOrdersPayedByCash != null)
                    hashCode = hashCode * 59 + this.IsValidForOrdersPayedByCash.GetHashCode();
                if (this.IsValidForFirstOrderOnly != null)
                    hashCode = hashCode * 59 + this.IsValidForFirstOrderOnly.GetHashCode();
                if (this.IsValidOncePerCustomer != null)
                    hashCode = hashCode * 59 + this.IsValidOncePerCustomer.GetHashCode();
                if (this.IsValidOnlyOnce != null)
                    hashCode = hashCode * 59 + this.IsValidOnlyOnce.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.ChannelRestrictions != null)
                    hashCode = hashCode * 59 + this.ChannelRestrictions.GetHashCode();
                if (this.ValidityPeriods != null)
                    hashCode = hashCode * 59 + this.ValidityPeriods.GetHashCode();
                if (this.VoucherSubType != null)
                    hashCode = hashCode * 59 + this.VoucherSubType.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.MaxRedemptions != null)
                    hashCode = hashCode * 59 + this.MaxRedemptions.GetHashCode();
                return hashCode;
            }
        }
    }

}

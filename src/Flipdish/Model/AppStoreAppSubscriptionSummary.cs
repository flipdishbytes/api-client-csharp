/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// App store subscription information
    /// </summary>
    [DataContract]
    public partial class AppStoreAppSubscriptionSummary :  IEquatable<AppStoreAppSubscriptionSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreAppSubscriptionSummary" /> class.
        /// </summary>
        /// <param name="totalSubscriptions">Total subscriptions (per the AppId subscription setup).</param>
        /// <param name="usedSubscriptions">Number of subscriptions configured and enabled.</param>
        /// <param name="subscriptionAccountIsSetupForClient">Is client setup for subscriptions.</param>
        public AppStoreAppSubscriptionSummary(int? totalSubscriptions = default(int?), int? usedSubscriptions = default(int?), bool? subscriptionAccountIsSetupForClient = default(bool?))
        {
            this.TotalSubscriptions = totalSubscriptions;
            this.UsedSubscriptions = usedSubscriptions;
            this.SubscriptionAccountIsSetupForClient = subscriptionAccountIsSetupForClient;
        }
        
        /// <summary>
        /// Total subscriptions (per the AppId subscription setup)
        /// </summary>
        /// <value>Total subscriptions (per the AppId subscription setup)</value>
        [DataMember(Name="TotalSubscriptions", EmitDefaultValue=false)]
        public int? TotalSubscriptions { get; set; }

        /// <summary>
        /// Number of subscriptions configured and enabled
        /// </summary>
        /// <value>Number of subscriptions configured and enabled</value>
        [DataMember(Name="UsedSubscriptions", EmitDefaultValue=false)]
        public int? UsedSubscriptions { get; set; }

        /// <summary>
        /// Is client setup for subscriptions
        /// </summary>
        /// <value>Is client setup for subscriptions</value>
        [DataMember(Name="SubscriptionAccountIsSetupForClient", EmitDefaultValue=false)]
        public bool? SubscriptionAccountIsSetupForClient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppStoreAppSubscriptionSummary {\n");
            sb.Append("  TotalSubscriptions: ").Append(TotalSubscriptions).Append("\n");
            sb.Append("  UsedSubscriptions: ").Append(UsedSubscriptions).Append("\n");
            sb.Append("  SubscriptionAccountIsSetupForClient: ").Append(SubscriptionAccountIsSetupForClient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppStoreAppSubscriptionSummary);
        }

        /// <summary>
        /// Returns true if AppStoreAppSubscriptionSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of AppStoreAppSubscriptionSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreAppSubscriptionSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalSubscriptions == input.TotalSubscriptions ||
                    (this.TotalSubscriptions != null &&
                    this.TotalSubscriptions.Equals(input.TotalSubscriptions))
                ) && 
                (
                    this.UsedSubscriptions == input.UsedSubscriptions ||
                    (this.UsedSubscriptions != null &&
                    this.UsedSubscriptions.Equals(input.UsedSubscriptions))
                ) && 
                (
                    this.SubscriptionAccountIsSetupForClient == input.SubscriptionAccountIsSetupForClient ||
                    (this.SubscriptionAccountIsSetupForClient != null &&
                    this.SubscriptionAccountIsSetupForClient.Equals(input.SubscriptionAccountIsSetupForClient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalSubscriptions != null)
                    hashCode = hashCode * 59 + this.TotalSubscriptions.GetHashCode();
                if (this.UsedSubscriptions != null)
                    hashCode = hashCode * 59 + this.UsedSubscriptions.GetHashCode();
                if (this.SubscriptionAccountIsSetupForClient != null)
                    hashCode = hashCode * 59 + this.SubscriptionAccountIsSetupForClient.GetHashCode();
                return hashCode;
            }
        }
    }

}

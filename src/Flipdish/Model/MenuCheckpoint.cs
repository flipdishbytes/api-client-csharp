/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Menu Checkpoint
    /// </summary>
    [DataContract]
    public partial class MenuCheckpoint :  IEquatable<MenuCheckpoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuCheckpoint" /> class.
        /// </summary>
        /// <param name="menuCheckpointId">Identifier of Menu Checkpoint.</param>
        /// <param name="time">Time of creation of checkpoint.</param>
        /// <param name="name">Name of checkpoint.</param>
        /// <param name="url">Url that points to Serialized Checkpoint.</param>
        public MenuCheckpoint(int? menuCheckpointId = default(int?), DateTime? time = default(DateTime?), string name = default(string), string url = default(string))
        {
            this.MenuCheckpointId = menuCheckpointId;
            this.Time = time;
            this.Name = name;
            this.Url = url;
        }
        
        /// <summary>
        /// Identifier of Menu Checkpoint
        /// </summary>
        /// <value>Identifier of Menu Checkpoint</value>
        [DataMember(Name="MenuCheckpointId", EmitDefaultValue=false)]
        public int? MenuCheckpointId { get; set; }

        /// <summary>
        /// Time of creation of checkpoint
        /// </summary>
        /// <value>Time of creation of checkpoint</value>
        [DataMember(Name="Time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Name of checkpoint
        /// </summary>
        /// <value>Name of checkpoint</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Url that points to Serialized Checkpoint
        /// </summary>
        /// <value>Url that points to Serialized Checkpoint</value>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuCheckpoint {\n");
            sb.Append("  MenuCheckpointId: ").Append(MenuCheckpointId).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MenuCheckpoint);
        }

        /// <summary>
        /// Returns true if MenuCheckpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of MenuCheckpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuCheckpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MenuCheckpointId == input.MenuCheckpointId ||
                    (this.MenuCheckpointId != null &&
                    this.MenuCheckpointId.Equals(input.MenuCheckpointId))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MenuCheckpointId != null)
                    hashCode = hashCode * 59 + this.MenuCheckpointId.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// EventSearchResult
    /// </summary>
    [DataContract]
    public partial class EventSearchResult :  IEquatable<EventSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventSearchResult" /> class.
        /// </summary>
        /// <param name="OrderAcceptedEvent">Order accepted events.</param>
        /// <param name="OrderCreatedEvent">Order created events.</param>
        /// <param name="OrderRatingUpdatedEvent">Order rating updated events.</param>
        /// <param name="OrderRefundedEvent">Order refunded events.</param>
        /// <param name="OrderRejectedEvent">Order rejected events.</param>
        /// <param name="OrderTipUpdatedEvent">Order tip updated events.</param>
        /// <param name="StoreCreatedEvent">Store created events.</param>
        /// <param name="StoreDeletedEvent">Store deleted events.</param>
        /// <param name="StoreDeliveryZoneUpdatedEvent">Store delivery zone updated events.</param>
        /// <param name="StoreOpeningHoursUpdatedEvent">Store opening hours updated events.</param>
        /// <param name="StoreUpdatedEvent">Store updated events.</param>
        /// <param name="MenuCreatedEvent">Menu created events.</param>
        /// <param name="MenuUpdatedEvent">Menu updated events.</param>
        /// <param name="CustomerCreatedEvent">Customer created events.</param>
        /// <param name="CustomerUpdatedEvent">Customer updated events.</param>
        /// <param name="CustomerConsentUpdatedEvent">Customer consent updated events.</param>
        /// <param name="CampaignCreatedEvent">Campaign created events.</param>
        /// <param name="WebhookSubscriptionCreatedEvent">Webhook subscription created events.</param>
        /// <param name="WebhookSubscriptionUpdatedEvent">Webhook subscription updated events.</param>
        /// <param name="WebhookSubscriptionDeletedEvent">Webhook subscription deleted events.</param>
        public EventSearchResult(List<OrderAcceptedEvent> OrderAcceptedEvent = default(List<OrderAcceptedEvent>), List<OrderCreatedEvent> OrderCreatedEvent = default(List<OrderCreatedEvent>), List<OrderRatingUpdatedEvent> OrderRatingUpdatedEvent = default(List<OrderRatingUpdatedEvent>), List<OrderRefundedEvent> OrderRefundedEvent = default(List<OrderRefundedEvent>), List<OrderRejectedEvent> OrderRejectedEvent = default(List<OrderRejectedEvent>), List<OrderTipUpdatedEvent> OrderTipUpdatedEvent = default(List<OrderTipUpdatedEvent>), List<StoreCreatedEvent> StoreCreatedEvent = default(List<StoreCreatedEvent>), List<StoreDeletedEvent> StoreDeletedEvent = default(List<StoreDeletedEvent>), List<StoreDeliveryZoneUpdatedEvent> StoreDeliveryZoneUpdatedEvent = default(List<StoreDeliveryZoneUpdatedEvent>), List<StoreOpeningHoursUpdatedEvent> StoreOpeningHoursUpdatedEvent = default(List<StoreOpeningHoursUpdatedEvent>), List<StoreUpdatedEvent> StoreUpdatedEvent = default(List<StoreUpdatedEvent>), List<MenuCreatedEvent> MenuCreatedEvent = default(List<MenuCreatedEvent>), List<MenuUpdatedEvent> MenuUpdatedEvent = default(List<MenuUpdatedEvent>), List<CustomerCreatedEvent> CustomerCreatedEvent = default(List<CustomerCreatedEvent>), List<CustomerUpdatedEvent> CustomerUpdatedEvent = default(List<CustomerUpdatedEvent>), List<CustomerConsentUpdatedEvent> CustomerConsentUpdatedEvent = default(List<CustomerConsentUpdatedEvent>), List<CampaignCreatedEvent> CampaignCreatedEvent = default(List<CampaignCreatedEvent>), List<WebhookSubscriptionCreatedEvent> WebhookSubscriptionCreatedEvent = default(List<WebhookSubscriptionCreatedEvent>), List<WebhookSubscriptionUpdatedEvent> WebhookSubscriptionUpdatedEvent = default(List<WebhookSubscriptionUpdatedEvent>), List<WebhookSubscriptionDeletedEvent> WebhookSubscriptionDeletedEvent = default(List<WebhookSubscriptionDeletedEvent>))
        {
            this.OrderAcceptedEvent = OrderAcceptedEvent;
            this.OrderCreatedEvent = OrderCreatedEvent;
            this.OrderRatingUpdatedEvent = OrderRatingUpdatedEvent;
            this.OrderRefundedEvent = OrderRefundedEvent;
            this.OrderRejectedEvent = OrderRejectedEvent;
            this.OrderTipUpdatedEvent = OrderTipUpdatedEvent;
            this.StoreCreatedEvent = StoreCreatedEvent;
            this.StoreDeletedEvent = StoreDeletedEvent;
            this.StoreDeliveryZoneUpdatedEvent = StoreDeliveryZoneUpdatedEvent;
            this.StoreOpeningHoursUpdatedEvent = StoreOpeningHoursUpdatedEvent;
            this.StoreUpdatedEvent = StoreUpdatedEvent;
            this.MenuCreatedEvent = MenuCreatedEvent;
            this.MenuUpdatedEvent = MenuUpdatedEvent;
            this.CustomerCreatedEvent = CustomerCreatedEvent;
            this.CustomerUpdatedEvent = CustomerUpdatedEvent;
            this.CustomerConsentUpdatedEvent = CustomerConsentUpdatedEvent;
            this.CampaignCreatedEvent = CampaignCreatedEvent;
            this.WebhookSubscriptionCreatedEvent = WebhookSubscriptionCreatedEvent;
            this.WebhookSubscriptionUpdatedEvent = WebhookSubscriptionUpdatedEvent;
            this.WebhookSubscriptionDeletedEvent = WebhookSubscriptionDeletedEvent;
        }
        
        /// <summary>
        /// Order accepted events
        /// </summary>
        /// <value>Order accepted events</value>
        [DataMember(Name="orderAcceptedEvent", EmitDefaultValue=false)]
        public List<OrderAcceptedEvent> OrderAcceptedEvent { get; set; }

        /// <summary>
        /// Order created events
        /// </summary>
        /// <value>Order created events</value>
        [DataMember(Name="orderCreatedEvent", EmitDefaultValue=false)]
        public List<OrderCreatedEvent> OrderCreatedEvent { get; set; }

        /// <summary>
        /// Order rating updated events
        /// </summary>
        /// <value>Order rating updated events</value>
        [DataMember(Name="orderRatingUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderRatingUpdatedEvent> OrderRatingUpdatedEvent { get; set; }

        /// <summary>
        /// Order refunded events
        /// </summary>
        /// <value>Order refunded events</value>
        [DataMember(Name="orderRefundedEvent", EmitDefaultValue=false)]
        public List<OrderRefundedEvent> OrderRefundedEvent { get; set; }

        /// <summary>
        /// Order rejected events
        /// </summary>
        /// <value>Order rejected events</value>
        [DataMember(Name="orderRejectedEvent", EmitDefaultValue=false)]
        public List<OrderRejectedEvent> OrderRejectedEvent { get; set; }

        /// <summary>
        /// Order tip updated events
        /// </summary>
        /// <value>Order tip updated events</value>
        [DataMember(Name="orderTipUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderTipUpdatedEvent> OrderTipUpdatedEvent { get; set; }

        /// <summary>
        /// Store created events
        /// </summary>
        /// <value>Store created events</value>
        [DataMember(Name="storeCreatedEvent", EmitDefaultValue=false)]
        public List<StoreCreatedEvent> StoreCreatedEvent { get; set; }

        /// <summary>
        /// Store deleted events
        /// </summary>
        /// <value>Store deleted events</value>
        [DataMember(Name="storeDeletedEvent", EmitDefaultValue=false)]
        public List<StoreDeletedEvent> StoreDeletedEvent { get; set; }

        /// <summary>
        /// Store delivery zone updated events
        /// </summary>
        /// <value>Store delivery zone updated events</value>
        [DataMember(Name="storeDeliveryZoneUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreDeliveryZoneUpdatedEvent> StoreDeliveryZoneUpdatedEvent { get; set; }

        /// <summary>
        /// Store opening hours updated events
        /// </summary>
        /// <value>Store opening hours updated events</value>
        [DataMember(Name="storeOpeningHoursUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreOpeningHoursUpdatedEvent> StoreOpeningHoursUpdatedEvent { get; set; }

        /// <summary>
        /// Store updated events
        /// </summary>
        /// <value>Store updated events</value>
        [DataMember(Name="storeUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreUpdatedEvent> StoreUpdatedEvent { get; set; }

        /// <summary>
        /// Menu created events
        /// </summary>
        /// <value>Menu created events</value>
        [DataMember(Name="menuCreatedEvent", EmitDefaultValue=false)]
        public List<MenuCreatedEvent> MenuCreatedEvent { get; set; }

        /// <summary>
        /// Menu updated events
        /// </summary>
        /// <value>Menu updated events</value>
        [DataMember(Name="menuUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuUpdatedEvent> MenuUpdatedEvent { get; set; }

        /// <summary>
        /// Customer created events
        /// </summary>
        /// <value>Customer created events</value>
        [DataMember(Name="customerCreatedEvent", EmitDefaultValue=false)]
        public List<CustomerCreatedEvent> CustomerCreatedEvent { get; set; }

        /// <summary>
        /// Customer updated events
        /// </summary>
        /// <value>Customer updated events</value>
        [DataMember(Name="customerUpdatedEvent", EmitDefaultValue=false)]
        public List<CustomerUpdatedEvent> CustomerUpdatedEvent { get; set; }

        /// <summary>
        /// Customer consent updated events
        /// </summary>
        /// <value>Customer consent updated events</value>
        [DataMember(Name="customerConsentUpdatedEvent", EmitDefaultValue=false)]
        public List<CustomerConsentUpdatedEvent> CustomerConsentUpdatedEvent { get; set; }

        /// <summary>
        /// Campaign created events
        /// </summary>
        /// <value>Campaign created events</value>
        [DataMember(Name="campaignCreatedEvent", EmitDefaultValue=false)]
        public List<CampaignCreatedEvent> CampaignCreatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription created events
        /// </summary>
        /// <value>Webhook subscription created events</value>
        [DataMember(Name="webhookSubscriptionCreatedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionCreatedEvent> WebhookSubscriptionCreatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription updated events
        /// </summary>
        /// <value>Webhook subscription updated events</value>
        [DataMember(Name="webhookSubscriptionUpdatedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionUpdatedEvent> WebhookSubscriptionUpdatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription deleted events
        /// </summary>
        /// <value>Webhook subscription deleted events</value>
        [DataMember(Name="webhookSubscriptionDeletedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionDeletedEvent> WebhookSubscriptionDeletedEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventSearchResult {\n");
            sb.Append("  OrderAcceptedEvent: ").Append(OrderAcceptedEvent).Append("\n");
            sb.Append("  OrderCreatedEvent: ").Append(OrderCreatedEvent).Append("\n");
            sb.Append("  OrderRatingUpdatedEvent: ").Append(OrderRatingUpdatedEvent).Append("\n");
            sb.Append("  OrderRefundedEvent: ").Append(OrderRefundedEvent).Append("\n");
            sb.Append("  OrderRejectedEvent: ").Append(OrderRejectedEvent).Append("\n");
            sb.Append("  OrderTipUpdatedEvent: ").Append(OrderTipUpdatedEvent).Append("\n");
            sb.Append("  StoreCreatedEvent: ").Append(StoreCreatedEvent).Append("\n");
            sb.Append("  StoreDeletedEvent: ").Append(StoreDeletedEvent).Append("\n");
            sb.Append("  StoreDeliveryZoneUpdatedEvent: ").Append(StoreDeliveryZoneUpdatedEvent).Append("\n");
            sb.Append("  StoreOpeningHoursUpdatedEvent: ").Append(StoreOpeningHoursUpdatedEvent).Append("\n");
            sb.Append("  StoreUpdatedEvent: ").Append(StoreUpdatedEvent).Append("\n");
            sb.Append("  MenuCreatedEvent: ").Append(MenuCreatedEvent).Append("\n");
            sb.Append("  MenuUpdatedEvent: ").Append(MenuUpdatedEvent).Append("\n");
            sb.Append("  CustomerCreatedEvent: ").Append(CustomerCreatedEvent).Append("\n");
            sb.Append("  CustomerUpdatedEvent: ").Append(CustomerUpdatedEvent).Append("\n");
            sb.Append("  CustomerConsentUpdatedEvent: ").Append(CustomerConsentUpdatedEvent).Append("\n");
            sb.Append("  CampaignCreatedEvent: ").Append(CampaignCreatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionCreatedEvent: ").Append(WebhookSubscriptionCreatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionUpdatedEvent: ").Append(WebhookSubscriptionUpdatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionDeletedEvent: ").Append(WebhookSubscriptionDeletedEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventSearchResult);
        }

        /// <summary>
        /// Returns true if EventSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EventSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderAcceptedEvent == input.OrderAcceptedEvent ||
                    this.OrderAcceptedEvent != null &&
                    this.OrderAcceptedEvent.SequenceEqual(input.OrderAcceptedEvent)
                ) && 
                (
                    this.OrderCreatedEvent == input.OrderCreatedEvent ||
                    this.OrderCreatedEvent != null &&
                    this.OrderCreatedEvent.SequenceEqual(input.OrderCreatedEvent)
                ) && 
                (
                    this.OrderRatingUpdatedEvent == input.OrderRatingUpdatedEvent ||
                    this.OrderRatingUpdatedEvent != null &&
                    this.OrderRatingUpdatedEvent.SequenceEqual(input.OrderRatingUpdatedEvent)
                ) && 
                (
                    this.OrderRefundedEvent == input.OrderRefundedEvent ||
                    this.OrderRefundedEvent != null &&
                    this.OrderRefundedEvent.SequenceEqual(input.OrderRefundedEvent)
                ) && 
                (
                    this.OrderRejectedEvent == input.OrderRejectedEvent ||
                    this.OrderRejectedEvent != null &&
                    this.OrderRejectedEvent.SequenceEqual(input.OrderRejectedEvent)
                ) && 
                (
                    this.OrderTipUpdatedEvent == input.OrderTipUpdatedEvent ||
                    this.OrderTipUpdatedEvent != null &&
                    this.OrderTipUpdatedEvent.SequenceEqual(input.OrderTipUpdatedEvent)
                ) && 
                (
                    this.StoreCreatedEvent == input.StoreCreatedEvent ||
                    this.StoreCreatedEvent != null &&
                    this.StoreCreatedEvent.SequenceEqual(input.StoreCreatedEvent)
                ) && 
                (
                    this.StoreDeletedEvent == input.StoreDeletedEvent ||
                    this.StoreDeletedEvent != null &&
                    this.StoreDeletedEvent.SequenceEqual(input.StoreDeletedEvent)
                ) && 
                (
                    this.StoreDeliveryZoneUpdatedEvent == input.StoreDeliveryZoneUpdatedEvent ||
                    this.StoreDeliveryZoneUpdatedEvent != null &&
                    this.StoreDeliveryZoneUpdatedEvent.SequenceEqual(input.StoreDeliveryZoneUpdatedEvent)
                ) && 
                (
                    this.StoreOpeningHoursUpdatedEvent == input.StoreOpeningHoursUpdatedEvent ||
                    this.StoreOpeningHoursUpdatedEvent != null &&
                    this.StoreOpeningHoursUpdatedEvent.SequenceEqual(input.StoreOpeningHoursUpdatedEvent)
                ) && 
                (
                    this.StoreUpdatedEvent == input.StoreUpdatedEvent ||
                    this.StoreUpdatedEvent != null &&
                    this.StoreUpdatedEvent.SequenceEqual(input.StoreUpdatedEvent)
                ) && 
                (
                    this.MenuCreatedEvent == input.MenuCreatedEvent ||
                    this.MenuCreatedEvent != null &&
                    this.MenuCreatedEvent.SequenceEqual(input.MenuCreatedEvent)
                ) && 
                (
                    this.MenuUpdatedEvent == input.MenuUpdatedEvent ||
                    this.MenuUpdatedEvent != null &&
                    this.MenuUpdatedEvent.SequenceEqual(input.MenuUpdatedEvent)
                ) && 
                (
                    this.CustomerCreatedEvent == input.CustomerCreatedEvent ||
                    this.CustomerCreatedEvent != null &&
                    this.CustomerCreatedEvent.SequenceEqual(input.CustomerCreatedEvent)
                ) && 
                (
                    this.CustomerUpdatedEvent == input.CustomerUpdatedEvent ||
                    this.CustomerUpdatedEvent != null &&
                    this.CustomerUpdatedEvent.SequenceEqual(input.CustomerUpdatedEvent)
                ) && 
                (
                    this.CustomerConsentUpdatedEvent == input.CustomerConsentUpdatedEvent ||
                    this.CustomerConsentUpdatedEvent != null &&
                    this.CustomerConsentUpdatedEvent.SequenceEqual(input.CustomerConsentUpdatedEvent)
                ) && 
                (
                    this.CampaignCreatedEvent == input.CampaignCreatedEvent ||
                    this.CampaignCreatedEvent != null &&
                    this.CampaignCreatedEvent.SequenceEqual(input.CampaignCreatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionCreatedEvent == input.WebhookSubscriptionCreatedEvent ||
                    this.WebhookSubscriptionCreatedEvent != null &&
                    this.WebhookSubscriptionCreatedEvent.SequenceEqual(input.WebhookSubscriptionCreatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionUpdatedEvent == input.WebhookSubscriptionUpdatedEvent ||
                    this.WebhookSubscriptionUpdatedEvent != null &&
                    this.WebhookSubscriptionUpdatedEvent.SequenceEqual(input.WebhookSubscriptionUpdatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionDeletedEvent == input.WebhookSubscriptionDeletedEvent ||
                    this.WebhookSubscriptionDeletedEvent != null &&
                    this.WebhookSubscriptionDeletedEvent.SequenceEqual(input.WebhookSubscriptionDeletedEvent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderAcceptedEvent != null)
                    hashCode = hashCode * 59 + this.OrderAcceptedEvent.GetHashCode();
                if (this.OrderCreatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderCreatedEvent.GetHashCode();
                if (this.OrderRatingUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRatingUpdatedEvent.GetHashCode();
                if (this.OrderRefundedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRefundedEvent.GetHashCode();
                if (this.OrderRejectedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRejectedEvent.GetHashCode();
                if (this.OrderTipUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderTipUpdatedEvent.GetHashCode();
                if (this.StoreCreatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreCreatedEvent.GetHashCode();
                if (this.StoreDeletedEvent != null)
                    hashCode = hashCode * 59 + this.StoreDeletedEvent.GetHashCode();
                if (this.StoreDeliveryZoneUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreDeliveryZoneUpdatedEvent.GetHashCode();
                if (this.StoreOpeningHoursUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreOpeningHoursUpdatedEvent.GetHashCode();
                if (this.StoreUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreUpdatedEvent.GetHashCode();
                if (this.MenuCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuCreatedEvent.GetHashCode();
                if (this.MenuUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuUpdatedEvent.GetHashCode();
                if (this.CustomerCreatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerCreatedEvent.GetHashCode();
                if (this.CustomerUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerUpdatedEvent.GetHashCode();
                if (this.CustomerConsentUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerConsentUpdatedEvent.GetHashCode();
                if (this.CampaignCreatedEvent != null)
                    hashCode = hashCode * 59 + this.CampaignCreatedEvent.GetHashCode();
                if (this.WebhookSubscriptionCreatedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionCreatedEvent.GetHashCode();
                if (this.WebhookSubscriptionUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionUpdatedEvent.GetHashCode();
                if (this.WebhookSubscriptionDeletedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionDeletedEvent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

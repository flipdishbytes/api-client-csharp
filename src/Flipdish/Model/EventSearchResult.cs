/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// EventSearchResult
    /// </summary>
    [DataContract]
    public partial class EventSearchResult :  IEquatable<EventSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventSearchResult" /> class.
        /// </summary>
        /// <param name="appCreatedEvent">App Created Event.</param>
        /// <param name="appUpdatedEvent">App Updated Event.</param>
        /// <param name="analyticsClientEvent">Client Analytics events.</param>
        /// <param name="orderAcceptedEvent">Order accepted events.</param>
        /// <param name="orderDispatchedEvent">Order dispatched events.</param>
        /// <param name="orderCustomerTrackingCreatedEvent">Order delivery tracking created events.</param>
        /// <param name="orderDeliveryTrackingStatusUpdatedEvent">Order delivery tracking updated events.</param>
        /// <param name="orderCreatedEvent">Order created events.</param>
        /// <param name="orderRatingUpdatedEvent">Order rating updated events.</param>
        /// <param name="orderRefundedEvent">Order refunded events.</param>
        /// <param name="orderRejectedEvent">Order rejected events.</param>
        /// <param name="orderTipUpdatedEvent">Order tip updated events.</param>
        /// <param name="orderTerminalNotifications">Order Terminal Notification events.</param>
        /// <param name="storeCreatedEvent">Store created events.</param>
        /// <param name="storeDeletedEvent">Store deleted events.</param>
        /// <param name="storeAddressUpdatedEvent">Store address updated events.</param>
        /// <param name="storeKioskSettingUpdatedEvent">Store kiosk setting updated events.</param>
        /// <param name="deliveryZoneCreatedEvent">Store delivery zone created events.</param>
        /// <param name="deliveryZoneUpdatedEvent">Store delivery zone updated events.</param>
        /// <param name="deliveryZoneDeletedEvent">Store delivery zone deleted events.</param>
        /// <param name="storeOpeningHoursUpdatedEvent">Store opening hours updated events.</param>
        /// <param name="storeMenuAssignedEvent">Store opening hours updated events.</param>
        /// <param name="storeBusinessHoursOverrideCreatedEvent">Store business hours override created events.</param>
        /// <param name="storeBusinessHoursOverrideDeletedEvent">Store business hours override deleted events.</param>
        /// <param name="storeArchivedEvent">Store archived events.</param>
        /// <param name="storeUnarchivedEvent">Store unarchived events.</param>
        /// <param name="storePublishedEvent">Store published events.</param>
        /// <param name="storeUnpublishedEvent">Store unpublished events.</param>
        /// <param name="storeUpdatedEvent">Store updated events.</param>
        /// <param name="storePreOrderConfigUpdatedEvent">Store updated events.</param>
        /// <param name="storeLogoCreatedEvent">Store logo created events.</param>
        /// <param name="storeLogoUpdatedEvent">Store logo updated events.</param>
        /// <param name="storeLogoDeletedEvent">Store logo deleted events.</param>
        /// <param name="menuCreatedEvent">Menu created events.</param>
        /// <param name="menuUpdatedEvent">Menu updated events.</param>
        /// <param name="menuUploadedEvent">Menu uploaded events.</param>
        /// <param name="menuBulkEditEvent">Menu bulk events.</param>
        /// <param name="menuSectionCreatedEvent">Menu section created events.</param>
        /// <param name="menuSectionUpdatedEvent">Menu section updated events.</param>
        /// <param name="menuSectionDeletedEvent">Menu section deleted events.</param>
        /// <param name="menuSectionItemCreatedEvent">Menu section item created events.</param>
        /// <param name="menuSectionItemUpdatedEvent">Menu section item updated events.</param>
        /// <param name="menuSectionItemDeletedEvent">Menu section item deleted events.</param>
        /// <param name="menuItemOptionSetCreatedEvent">Menu item option set created events.</param>
        /// <param name="menuItemOptionSetUpdatedEvent">Menu item option set  updated events.</param>
        /// <param name="menuItemOptionSetDeletedEvent">Menu item option set deleted events.</param>
        /// <param name="menuItemOptionSetItemCreatedEvent">Menu item option set item created events.</param>
        /// <param name="menuItemOptionSetItemUpdatedEvent">Menu item option set item updated events.</param>
        /// <param name="menuItemOptionSetItemDeletedEvent">Menu item option set item deleted events.</param>
        /// <param name="menuCheckpointCreatedEvent">Menu checkpoint created event.</param>
        /// <param name="storeGroupCreatedEvent">Store group created events.</param>
        /// <param name="storeGroupUpdatedEvent">Store group updated events.</param>
        /// <param name="storeGroupDeletedEvent">Store group deleted events.</param>
        /// <param name="customerCreatedEvent">Customer created events.</param>
        /// <param name="customerUpdatedEvent">Customer updated events.</param>
        /// <param name="customerConsentUpdatedEvent">Customer consent updated events.</param>
        /// <param name="webhookSubscriptionCreatedEvent">Webhook subscription created events.</param>
        /// <param name="webhookSubscriptionUpdatedEvent">Webhook subscription updated events.</param>
        /// <param name="webhookSubscriptionDeletedEvent">Webhook subscription deleted events.</param>
        /// <param name="printerTurnedOnEvent">Printer turned ON event.</param>
        /// <param name="printerTurnedOffEvent">Printer turned OFF event.</param>
        /// <param name="printerAssignedToStoreEvent">Printer assigned to store event.</param>
        /// <param name="printerUnassignedFromStoreEvent">Printer unassigned from store event.</param>
        /// <param name="phoneCallStartedEvent">Phone call started event.</param>
        /// <param name="phoneCallEndedEvent">Phone call ended event.</param>
        /// <param name="loyaltyCampaignCreatedEvent">Loyalty campaign created event.</param>
        /// <param name="loyaltyCampaignDeletedEvent">Loyalty campaign deleted event.</param>
        /// <param name="loyaltyCampaignUpdatedEvent">Loyalty campaign updated event.</param>
        /// <param name="retentionCampaignCreatedEvent">Retention campaign created event.</param>
        /// <param name="retentionCampaignDeletedEvent">Retention campaign deleted event.</param>
        /// <param name="retentionCampaignUpdatedEvent">Retention campaign updated event.</param>
        /// <param name="smsReceivedEvent">Sms received event.</param>
        /// <param name="userLoginEvent">User login event.</param>
        /// <param name="userCreatedEvent">User created event.</param>
        /// <param name="userUpdatedEvent">User updated event.</param>
        /// <param name="userDeletedEvent">User deleted event.</param>
        /// <param name="userCreatedPasswordEvent">User password created event.</param>
        /// <param name="userAnsweredSignupQuestionsEvent">User answered signup questions event.</param>
        /// <param name="voucherCreatedEvent">Voucher created event.</param>
        /// <param name="voucherUpdatedEvent">Voucher updated event.</param>
        /// <param name="voucherDeletedEvent">Voucher deleted event.</param>
        /// <param name="teammateInviteSentEvent">Teammate invite sent event.</param>
        /// <param name="teammateInviteAcceptedEvent">Teammate invite accepted event.</param>
        /// <param name="teammateUpdatedEvent">Teammate updated event.</param>
        /// <param name="teammateDeletedEvent">Teammate deleted event.</param>
        /// <param name="bankAccountCreatedEvent">Bank account created event.</param>
        /// <param name="bankAccountUpdatedEvent">Bank account updated event.</param>
        /// <param name="bankAccountDeletedEvent">Bank account updated event.</param>
        /// <param name="hydraAssignedEvent">Hydra assigned event.</param>
        /// <param name="hydraRequestResetEvent">Hydra reset requested event.</param>
        /// <param name="hydraStoreAssignedEvent">Hydra store assigned event.</param>
        /// <param name="hydraStoreUnassignedEvent">Hydra store unassigned.</param>
        /// <param name="hydraSettingChangedEvent">Hydra settings changed event.</param>
        /// <param name="hydraUnAssignedEvent">Hydra un-assigned event.</param>
        /// <param name="hydraConnectionStatusChangedEvent">Hydra connection state change.</param>
        /// <param name="kioskBluetoothPairingModeEvent">Bluetooth Pairing Mode initiated.</param>
        /// <param name="kioskBluetoothUnpairingModeEvent">Bluetooth Unpairing Mode initiated.</param>
        /// <param name="kioskBluetoothTerminalUnpairedEvent">Bluetooth Terminal Unpaired with Kiosk.</param>
        /// <param name="kioskBluetoothTerminalUpdatedEvent">Bluetooth Terminal Updated.</param>
        /// <param name="kioskBluetoothTerminalInitiateUpdateCheckEvent">Trigger bluetooth payment terminal update checker.</param>
        /// <param name="kioskBluetoothInstallUpdateInitiateEvent">Bluetooth Terminal Initiate Update.</param>
        /// <param name="kioskBluetoothTerminalCancelUpdateEvent">Bluetooth Terminal Cancel Update Install.</param>
        /// <param name="kioskBluetoothTerminalFirmwareVersionStatusEvent">Bluetooth Payment Terminal Firmware Version Status Info.</param>
        /// <param name="kioskBluetoothTerminalInstallationStatusEvent">Bluetooth Terminal Update Installation Status.</param>
        /// <param name="pushNotificationScheduledEvent">Push notification scheduled event.</param>
        /// <param name="pushNotificationSentEvent">Push notification sent event.</param>
        /// <param name="pushNotificationDeletedEvent">Push notification deleted event.</param>
        /// <param name="dnsVerifiedEvent">DNS Verified.</param>
        /// <param name="certificateCreatedEvent">Certificate created.</param>
        /// <param name="certificateRenewedEvent">Certificate renewed.</param>
        /// <param name="websiteVanityUrlUpdatedEvent">Panacea vanity url updated.</param>
        /// <param name="websiteUpdatedEvent">Website updated.</param>
        /// <param name="orderCapacityUpdatedEvent">Order capacity config updated.</param>
        /// <param name="externalStoreEvent">External event.</param>
        public EventSearchResult(List<AppCreatedEvent> appCreatedEvent = default(List<AppCreatedEvent>), List<AppUpdatedEvent> appUpdatedEvent = default(List<AppUpdatedEvent>), List<AnalyticsClientEvent> analyticsClientEvent = default(List<AnalyticsClientEvent>), List<OrderAcceptedEvent> orderAcceptedEvent = default(List<OrderAcceptedEvent>), List<OrderDispatchedEvent> orderDispatchedEvent = default(List<OrderDispatchedEvent>), List<OrderCustomerTrackingCreatedEvent> orderCustomerTrackingCreatedEvent = default(List<OrderCustomerTrackingCreatedEvent>), List<OrderDeliveryTrackingStatusUpdatedEvent> orderDeliveryTrackingStatusUpdatedEvent = default(List<OrderDeliveryTrackingStatusUpdatedEvent>), List<OrderCreatedEvent> orderCreatedEvent = default(List<OrderCreatedEvent>), List<OrderRatingUpdatedEvent> orderRatingUpdatedEvent = default(List<OrderRatingUpdatedEvent>), List<OrderRefundedEvent> orderRefundedEvent = default(List<OrderRefundedEvent>), List<OrderRejectedEvent> orderRejectedEvent = default(List<OrderRejectedEvent>), List<OrderTipUpdatedEvent> orderTipUpdatedEvent = default(List<OrderTipUpdatedEvent>), List<EmvNotificationEvent> orderTerminalNotifications = default(List<EmvNotificationEvent>), List<StoreCreatedEvent> storeCreatedEvent = default(List<StoreCreatedEvent>), List<StoreDeletedEvent> storeDeletedEvent = default(List<StoreDeletedEvent>), List<StoreAddressUpdatedEvent> storeAddressUpdatedEvent = default(List<StoreAddressUpdatedEvent>), List<StoreKioskSettingUpdatedEvent> storeKioskSettingUpdatedEvent = default(List<StoreKioskSettingUpdatedEvent>), List<DeliveryZoneCreatedEvent> deliveryZoneCreatedEvent = default(List<DeliveryZoneCreatedEvent>), List<DeliveryZoneUpdatedEvent> deliveryZoneUpdatedEvent = default(List<DeliveryZoneUpdatedEvent>), List<DeliveryZoneDeletedEvent> deliveryZoneDeletedEvent = default(List<DeliveryZoneDeletedEvent>), List<StoreOpeningHoursUpdatedEvent> storeOpeningHoursUpdatedEvent = default(List<StoreOpeningHoursUpdatedEvent>), List<StoreMenuAssignedEvent> storeMenuAssignedEvent = default(List<StoreMenuAssignedEvent>), List<StoreBusinessHoursOverrideCreatedEvent> storeBusinessHoursOverrideCreatedEvent = default(List<StoreBusinessHoursOverrideCreatedEvent>), List<StoreBusinessHoursOverrideDeletedEvent> storeBusinessHoursOverrideDeletedEvent = default(List<StoreBusinessHoursOverrideDeletedEvent>), List<StoreArchivedEvent> storeArchivedEvent = default(List<StoreArchivedEvent>), List<StoreUnarchivedEvent> storeUnarchivedEvent = default(List<StoreUnarchivedEvent>), List<StorePublishedEvent> storePublishedEvent = default(List<StorePublishedEvent>), List<StoreUnpublishedEvent> storeUnpublishedEvent = default(List<StoreUnpublishedEvent>), List<StoreUpdatedEvent> storeUpdatedEvent = default(List<StoreUpdatedEvent>), List<StorePreOrderConfigUpdatedEvent> storePreOrderConfigUpdatedEvent = default(List<StorePreOrderConfigUpdatedEvent>), List<StoreLogoCreatedEvent> storeLogoCreatedEvent = default(List<StoreLogoCreatedEvent>), List<StoreLogoUpdatedEvent> storeLogoUpdatedEvent = default(List<StoreLogoUpdatedEvent>), List<StoreLogoDeletedEvent> storeLogoDeletedEvent = default(List<StoreLogoDeletedEvent>), List<MenuCreatedEvent> menuCreatedEvent = default(List<MenuCreatedEvent>), List<MenuUpdatedEvent> menuUpdatedEvent = default(List<MenuUpdatedEvent>), List<MenuUploadedEvent> menuUploadedEvent = default(List<MenuUploadedEvent>), List<MenuBulkEditEvent> menuBulkEditEvent = default(List<MenuBulkEditEvent>), List<MenuSectionCreatedEvent> menuSectionCreatedEvent = default(List<MenuSectionCreatedEvent>), List<MenuSectionUpdatedEvent> menuSectionUpdatedEvent = default(List<MenuSectionUpdatedEvent>), List<MenuSectionDeletedEvent> menuSectionDeletedEvent = default(List<MenuSectionDeletedEvent>), List<MenuSectionItemCreatedEvent> menuSectionItemCreatedEvent = default(List<MenuSectionItemCreatedEvent>), List<MenuSectionItemUpdatedEvent> menuSectionItemUpdatedEvent = default(List<MenuSectionItemUpdatedEvent>), List<MenuSectionItemDeletedEvent> menuSectionItemDeletedEvent = default(List<MenuSectionItemDeletedEvent>), List<MenuItemOptionSetCreatedEvent> menuItemOptionSetCreatedEvent = default(List<MenuItemOptionSetCreatedEvent>), List<MenuItemOptionSetUpdatedEvent> menuItemOptionSetUpdatedEvent = default(List<MenuItemOptionSetUpdatedEvent>), List<MenuItemOptionSetDeletedEvent> menuItemOptionSetDeletedEvent = default(List<MenuItemOptionSetDeletedEvent>), List<MenuItemOptionSetItemCreatedEvent> menuItemOptionSetItemCreatedEvent = default(List<MenuItemOptionSetItemCreatedEvent>), List<MenuItemOptionSetItemUpdatedEvent> menuItemOptionSetItemUpdatedEvent = default(List<MenuItemOptionSetItemUpdatedEvent>), List<MenuItemOptionSetItemDeletedEvent> menuItemOptionSetItemDeletedEvent = default(List<MenuItemOptionSetItemDeletedEvent>), List<MenuCheckpointCreatedEvent> menuCheckpointCreatedEvent = default(List<MenuCheckpointCreatedEvent>), List<StoreGroupCreatedEvent> storeGroupCreatedEvent = default(List<StoreGroupCreatedEvent>), List<StoreGroupUpdatedEvent> storeGroupUpdatedEvent = default(List<StoreGroupUpdatedEvent>), List<StoreGroupDeletedEvent> storeGroupDeletedEvent = default(List<StoreGroupDeletedEvent>), List<CustomerCreatedEvent> customerCreatedEvent = default(List<CustomerCreatedEvent>), List<CustomerUpdatedEvent> customerUpdatedEvent = default(List<CustomerUpdatedEvent>), List<CustomerConsentUpdatedEvent> customerConsentUpdatedEvent = default(List<CustomerConsentUpdatedEvent>), List<WebhookSubscriptionCreatedEvent> webhookSubscriptionCreatedEvent = default(List<WebhookSubscriptionCreatedEvent>), List<WebhookSubscriptionUpdatedEvent> webhookSubscriptionUpdatedEvent = default(List<WebhookSubscriptionUpdatedEvent>), List<WebhookSubscriptionDeletedEvent> webhookSubscriptionDeletedEvent = default(List<WebhookSubscriptionDeletedEvent>), List<PrinterTurnedOnEvent> printerTurnedOnEvent = default(List<PrinterTurnedOnEvent>), List<PrinterTurnedOffEvent> printerTurnedOffEvent = default(List<PrinterTurnedOffEvent>), List<PrinterAssignedToStoreEvent> printerAssignedToStoreEvent = default(List<PrinterAssignedToStoreEvent>), List<PrinterUnassignedFromStoreEvent> printerUnassignedFromStoreEvent = default(List<PrinterUnassignedFromStoreEvent>), List<PhoneCallStartedEvent> phoneCallStartedEvent = default(List<PhoneCallStartedEvent>), List<PhoneCallEndedEvent> phoneCallEndedEvent = default(List<PhoneCallEndedEvent>), List<LoyaltyCampaignCreatedEvent> loyaltyCampaignCreatedEvent = default(List<LoyaltyCampaignCreatedEvent>), List<LoyaltyCampaignDeletedEvent> loyaltyCampaignDeletedEvent = default(List<LoyaltyCampaignDeletedEvent>), List<LoyaltyCampaignUpdatedEvent> loyaltyCampaignUpdatedEvent = default(List<LoyaltyCampaignUpdatedEvent>), List<RetentionCampaignCreatedEvent> retentionCampaignCreatedEvent = default(List<RetentionCampaignCreatedEvent>), List<RetentionCampaignDeletedEvent> retentionCampaignDeletedEvent = default(List<RetentionCampaignDeletedEvent>), List<RetentionCampaignUpdatedEvent> retentionCampaignUpdatedEvent = default(List<RetentionCampaignUpdatedEvent>), List<SmsReceivedEvent> smsReceivedEvent = default(List<SmsReceivedEvent>), List<UserLoginEvent> userLoginEvent = default(List<UserLoginEvent>), List<UserCreatedEvent> userCreatedEvent = default(List<UserCreatedEvent>), List<UserUpdatedEvent> userUpdatedEvent = default(List<UserUpdatedEvent>), List<UserDeletedEvent> userDeletedEvent = default(List<UserDeletedEvent>), List<UserPasswordCreatedEvent> userCreatedPasswordEvent = default(List<UserPasswordCreatedEvent>), List<UserAnsweredSignupQuestionsEvent> userAnsweredSignupQuestionsEvent = default(List<UserAnsweredSignupQuestionsEvent>), List<VoucherCreatedEvent> voucherCreatedEvent = default(List<VoucherCreatedEvent>), List<VoucherUpdatedEvent> voucherUpdatedEvent = default(List<VoucherUpdatedEvent>), List<VoucherDeletedEvent> voucherDeletedEvent = default(List<VoucherDeletedEvent>), List<TeammateInviteSentEvent> teammateInviteSentEvent = default(List<TeammateInviteSentEvent>), List<TeammateInviteAcceptedEvent> teammateInviteAcceptedEvent = default(List<TeammateInviteAcceptedEvent>), List<TeammateUpdatedEvent> teammateUpdatedEvent = default(List<TeammateUpdatedEvent>), List<TeammateDeletedEvent> teammateDeletedEvent = default(List<TeammateDeletedEvent>), List<BankAccountCreatedEvent> bankAccountCreatedEvent = default(List<BankAccountCreatedEvent>), List<BankAccountUpdatedEvent> bankAccountUpdatedEvent = default(List<BankAccountUpdatedEvent>), List<BankAccountDeletedEvent> bankAccountDeletedEvent = default(List<BankAccountDeletedEvent>), List<HydraAssignedEvent> hydraAssignedEvent = default(List<HydraAssignedEvent>), List<HydraRequestResetEvent> hydraRequestResetEvent = default(List<HydraRequestResetEvent>), List<HydraStoreAssignedEvent> hydraStoreAssignedEvent = default(List<HydraStoreAssignedEvent>), List<HydraStoreUnassignedEvent> hydraStoreUnassignedEvent = default(List<HydraStoreUnassignedEvent>), List<HydraSettingChangedEvent> hydraSettingChangedEvent = default(List<HydraSettingChangedEvent>), List<HydraUnAssignedEvent> hydraUnAssignedEvent = default(List<HydraUnAssignedEvent>), List<HydraConnectionStatusChangedEvent> hydraConnectionStatusChangedEvent = default(List<HydraConnectionStatusChangedEvent>), List<KioskBluetoothPairingModeEvent> kioskBluetoothPairingModeEvent = default(List<KioskBluetoothPairingModeEvent>), List<KioskBluetoothUnpairingModeEvent> kioskBluetoothUnpairingModeEvent = default(List<KioskBluetoothUnpairingModeEvent>), List<KioskBluetoothTerminalUnpairedEvent> kioskBluetoothTerminalUnpairedEvent = default(List<KioskBluetoothTerminalUnpairedEvent>), List<KioskBluetoothTerminalUpdatedEvent> kioskBluetoothTerminalUpdatedEvent = default(List<KioskBluetoothTerminalUpdatedEvent>), List<KioskBluetoothTerminalInitiateUpdateCheckEvent> kioskBluetoothTerminalInitiateUpdateCheckEvent = default(List<KioskBluetoothTerminalInitiateUpdateCheckEvent>), List<KioskBluetoothInstallUpdateInitiateEvent> kioskBluetoothInstallUpdateInitiateEvent = default(List<KioskBluetoothInstallUpdateInitiateEvent>), List<KioskBluetoothTerminalCancelUpdateEvent> kioskBluetoothTerminalCancelUpdateEvent = default(List<KioskBluetoothTerminalCancelUpdateEvent>), List<KioskBluetoothTerminalFirmwareVersionStatusEvent> kioskBluetoothTerminalFirmwareVersionStatusEvent = default(List<KioskBluetoothTerminalFirmwareVersionStatusEvent>), List<KioskBluetoothTerminalInstallationStatusEvent> kioskBluetoothTerminalInstallationStatusEvent = default(List<KioskBluetoothTerminalInstallationStatusEvent>), List<PushNotificationScheduledEvent> pushNotificationScheduledEvent = default(List<PushNotificationScheduledEvent>), List<PushNotificationSentEvent> pushNotificationSentEvent = default(List<PushNotificationSentEvent>), List<PushNotificationDeletedEvent> pushNotificationDeletedEvent = default(List<PushNotificationDeletedEvent>), List<DnsVerifiedEvent> dnsVerifiedEvent = default(List<DnsVerifiedEvent>), List<CertificateCreatedEvent> certificateCreatedEvent = default(List<CertificateCreatedEvent>), List<CertificateRenewedEvent> certificateRenewedEvent = default(List<CertificateRenewedEvent>), List<WebsiteVanityUrlUpdatedEvent> websiteVanityUrlUpdatedEvent = default(List<WebsiteVanityUrlUpdatedEvent>), List<WebsiteUpdatedEvent> websiteUpdatedEvent = default(List<WebsiteUpdatedEvent>), List<OrderCapacityConfigUpdatedEvent> orderCapacityUpdatedEvent = default(List<OrderCapacityConfigUpdatedEvent>), List<ExternalStoreEvent> externalStoreEvent = default(List<ExternalStoreEvent>))
        {
            this.AppCreatedEvent = appCreatedEvent;
            this.AppUpdatedEvent = appUpdatedEvent;
            this.AnalyticsClientEvent = analyticsClientEvent;
            this.OrderAcceptedEvent = orderAcceptedEvent;
            this.OrderDispatchedEvent = orderDispatchedEvent;
            this.OrderCustomerTrackingCreatedEvent = orderCustomerTrackingCreatedEvent;
            this.OrderDeliveryTrackingStatusUpdatedEvent = orderDeliveryTrackingStatusUpdatedEvent;
            this.OrderCreatedEvent = orderCreatedEvent;
            this.OrderRatingUpdatedEvent = orderRatingUpdatedEvent;
            this.OrderRefundedEvent = orderRefundedEvent;
            this.OrderRejectedEvent = orderRejectedEvent;
            this.OrderTipUpdatedEvent = orderTipUpdatedEvent;
            this.OrderTerminalNotifications = orderTerminalNotifications;
            this.StoreCreatedEvent = storeCreatedEvent;
            this.StoreDeletedEvent = storeDeletedEvent;
            this.StoreAddressUpdatedEvent = storeAddressUpdatedEvent;
            this.StoreKioskSettingUpdatedEvent = storeKioskSettingUpdatedEvent;
            this.DeliveryZoneCreatedEvent = deliveryZoneCreatedEvent;
            this.DeliveryZoneUpdatedEvent = deliveryZoneUpdatedEvent;
            this.DeliveryZoneDeletedEvent = deliveryZoneDeletedEvent;
            this.StoreOpeningHoursUpdatedEvent = storeOpeningHoursUpdatedEvent;
            this.StoreMenuAssignedEvent = storeMenuAssignedEvent;
            this.StoreBusinessHoursOverrideCreatedEvent = storeBusinessHoursOverrideCreatedEvent;
            this.StoreBusinessHoursOverrideDeletedEvent = storeBusinessHoursOverrideDeletedEvent;
            this.StoreArchivedEvent = storeArchivedEvent;
            this.StoreUnarchivedEvent = storeUnarchivedEvent;
            this.StorePublishedEvent = storePublishedEvent;
            this.StoreUnpublishedEvent = storeUnpublishedEvent;
            this.StoreUpdatedEvent = storeUpdatedEvent;
            this.StorePreOrderConfigUpdatedEvent = storePreOrderConfigUpdatedEvent;
            this.StoreLogoCreatedEvent = storeLogoCreatedEvent;
            this.StoreLogoUpdatedEvent = storeLogoUpdatedEvent;
            this.StoreLogoDeletedEvent = storeLogoDeletedEvent;
            this.MenuCreatedEvent = menuCreatedEvent;
            this.MenuUpdatedEvent = menuUpdatedEvent;
            this.MenuUploadedEvent = menuUploadedEvent;
            this.MenuBulkEditEvent = menuBulkEditEvent;
            this.MenuSectionCreatedEvent = menuSectionCreatedEvent;
            this.MenuSectionUpdatedEvent = menuSectionUpdatedEvent;
            this.MenuSectionDeletedEvent = menuSectionDeletedEvent;
            this.MenuSectionItemCreatedEvent = menuSectionItemCreatedEvent;
            this.MenuSectionItemUpdatedEvent = menuSectionItemUpdatedEvent;
            this.MenuSectionItemDeletedEvent = menuSectionItemDeletedEvent;
            this.MenuItemOptionSetCreatedEvent = menuItemOptionSetCreatedEvent;
            this.MenuItemOptionSetUpdatedEvent = menuItemOptionSetUpdatedEvent;
            this.MenuItemOptionSetDeletedEvent = menuItemOptionSetDeletedEvent;
            this.MenuItemOptionSetItemCreatedEvent = menuItemOptionSetItemCreatedEvent;
            this.MenuItemOptionSetItemUpdatedEvent = menuItemOptionSetItemUpdatedEvent;
            this.MenuItemOptionSetItemDeletedEvent = menuItemOptionSetItemDeletedEvent;
            this.MenuCheckpointCreatedEvent = menuCheckpointCreatedEvent;
            this.StoreGroupCreatedEvent = storeGroupCreatedEvent;
            this.StoreGroupUpdatedEvent = storeGroupUpdatedEvent;
            this.StoreGroupDeletedEvent = storeGroupDeletedEvent;
            this.CustomerCreatedEvent = customerCreatedEvent;
            this.CustomerUpdatedEvent = customerUpdatedEvent;
            this.CustomerConsentUpdatedEvent = customerConsentUpdatedEvent;
            this.WebhookSubscriptionCreatedEvent = webhookSubscriptionCreatedEvent;
            this.WebhookSubscriptionUpdatedEvent = webhookSubscriptionUpdatedEvent;
            this.WebhookSubscriptionDeletedEvent = webhookSubscriptionDeletedEvent;
            this.PrinterTurnedOnEvent = printerTurnedOnEvent;
            this.PrinterTurnedOffEvent = printerTurnedOffEvent;
            this.PrinterAssignedToStoreEvent = printerAssignedToStoreEvent;
            this.PrinterUnassignedFromStoreEvent = printerUnassignedFromStoreEvent;
            this.PhoneCallStartedEvent = phoneCallStartedEvent;
            this.PhoneCallEndedEvent = phoneCallEndedEvent;
            this.LoyaltyCampaignCreatedEvent = loyaltyCampaignCreatedEvent;
            this.LoyaltyCampaignDeletedEvent = loyaltyCampaignDeletedEvent;
            this.LoyaltyCampaignUpdatedEvent = loyaltyCampaignUpdatedEvent;
            this.RetentionCampaignCreatedEvent = retentionCampaignCreatedEvent;
            this.RetentionCampaignDeletedEvent = retentionCampaignDeletedEvent;
            this.RetentionCampaignUpdatedEvent = retentionCampaignUpdatedEvent;
            this.SmsReceivedEvent = smsReceivedEvent;
            this.UserLoginEvent = userLoginEvent;
            this.UserCreatedEvent = userCreatedEvent;
            this.UserUpdatedEvent = userUpdatedEvent;
            this.UserDeletedEvent = userDeletedEvent;
            this.UserCreatedPasswordEvent = userCreatedPasswordEvent;
            this.UserAnsweredSignupQuestionsEvent = userAnsweredSignupQuestionsEvent;
            this.VoucherCreatedEvent = voucherCreatedEvent;
            this.VoucherUpdatedEvent = voucherUpdatedEvent;
            this.VoucherDeletedEvent = voucherDeletedEvent;
            this.TeammateInviteSentEvent = teammateInviteSentEvent;
            this.TeammateInviteAcceptedEvent = teammateInviteAcceptedEvent;
            this.TeammateUpdatedEvent = teammateUpdatedEvent;
            this.TeammateDeletedEvent = teammateDeletedEvent;
            this.BankAccountCreatedEvent = bankAccountCreatedEvent;
            this.BankAccountUpdatedEvent = bankAccountUpdatedEvent;
            this.BankAccountDeletedEvent = bankAccountDeletedEvent;
            this.HydraAssignedEvent = hydraAssignedEvent;
            this.HydraRequestResetEvent = hydraRequestResetEvent;
            this.HydraStoreAssignedEvent = hydraStoreAssignedEvent;
            this.HydraStoreUnassignedEvent = hydraStoreUnassignedEvent;
            this.HydraSettingChangedEvent = hydraSettingChangedEvent;
            this.HydraUnAssignedEvent = hydraUnAssignedEvent;
            this.HydraConnectionStatusChangedEvent = hydraConnectionStatusChangedEvent;
            this.KioskBluetoothPairingModeEvent = kioskBluetoothPairingModeEvent;
            this.KioskBluetoothUnpairingModeEvent = kioskBluetoothUnpairingModeEvent;
            this.KioskBluetoothTerminalUnpairedEvent = kioskBluetoothTerminalUnpairedEvent;
            this.KioskBluetoothTerminalUpdatedEvent = kioskBluetoothTerminalUpdatedEvent;
            this.KioskBluetoothTerminalInitiateUpdateCheckEvent = kioskBluetoothTerminalInitiateUpdateCheckEvent;
            this.KioskBluetoothInstallUpdateInitiateEvent = kioskBluetoothInstallUpdateInitiateEvent;
            this.KioskBluetoothTerminalCancelUpdateEvent = kioskBluetoothTerminalCancelUpdateEvent;
            this.KioskBluetoothTerminalFirmwareVersionStatusEvent = kioskBluetoothTerminalFirmwareVersionStatusEvent;
            this.KioskBluetoothTerminalInstallationStatusEvent = kioskBluetoothTerminalInstallationStatusEvent;
            this.PushNotificationScheduledEvent = pushNotificationScheduledEvent;
            this.PushNotificationSentEvent = pushNotificationSentEvent;
            this.PushNotificationDeletedEvent = pushNotificationDeletedEvent;
            this.DnsVerifiedEvent = dnsVerifiedEvent;
            this.CertificateCreatedEvent = certificateCreatedEvent;
            this.CertificateRenewedEvent = certificateRenewedEvent;
            this.WebsiteVanityUrlUpdatedEvent = websiteVanityUrlUpdatedEvent;
            this.WebsiteUpdatedEvent = websiteUpdatedEvent;
            this.OrderCapacityUpdatedEvent = orderCapacityUpdatedEvent;
            this.ExternalStoreEvent = externalStoreEvent;
        }
        
        /// <summary>
        /// App Created Event
        /// </summary>
        /// <value>App Created Event</value>
        [DataMember(Name="AppCreatedEvent", EmitDefaultValue=false)]
        public List<AppCreatedEvent> AppCreatedEvent { get; set; }

        /// <summary>
        /// App Updated Event
        /// </summary>
        /// <value>App Updated Event</value>
        [DataMember(Name="AppUpdatedEvent", EmitDefaultValue=false)]
        public List<AppUpdatedEvent> AppUpdatedEvent { get; set; }

        /// <summary>
        /// Client Analytics events
        /// </summary>
        /// <value>Client Analytics events</value>
        [DataMember(Name="AnalyticsClientEvent", EmitDefaultValue=false)]
        public List<AnalyticsClientEvent> AnalyticsClientEvent { get; set; }

        /// <summary>
        /// Order accepted events
        /// </summary>
        /// <value>Order accepted events</value>
        [DataMember(Name="OrderAcceptedEvent", EmitDefaultValue=false)]
        public List<OrderAcceptedEvent> OrderAcceptedEvent { get; set; }

        /// <summary>
        /// Order dispatched events
        /// </summary>
        /// <value>Order dispatched events</value>
        [DataMember(Name="OrderDispatchedEvent", EmitDefaultValue=false)]
        public List<OrderDispatchedEvent> OrderDispatchedEvent { get; set; }

        /// <summary>
        /// Order delivery tracking created events
        /// </summary>
        /// <value>Order delivery tracking created events</value>
        [DataMember(Name="OrderCustomerTrackingCreatedEvent", EmitDefaultValue=false)]
        public List<OrderCustomerTrackingCreatedEvent> OrderCustomerTrackingCreatedEvent { get; set; }

        /// <summary>
        /// Order delivery tracking updated events
        /// </summary>
        /// <value>Order delivery tracking updated events</value>
        [DataMember(Name="OrderDeliveryTrackingStatusUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderDeliveryTrackingStatusUpdatedEvent> OrderDeliveryTrackingStatusUpdatedEvent { get; set; }

        /// <summary>
        /// Order created events
        /// </summary>
        /// <value>Order created events</value>
        [DataMember(Name="OrderCreatedEvent", EmitDefaultValue=false)]
        public List<OrderCreatedEvent> OrderCreatedEvent { get; set; }

        /// <summary>
        /// Order rating updated events
        /// </summary>
        /// <value>Order rating updated events</value>
        [DataMember(Name="OrderRatingUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderRatingUpdatedEvent> OrderRatingUpdatedEvent { get; set; }

        /// <summary>
        /// Order refunded events
        /// </summary>
        /// <value>Order refunded events</value>
        [DataMember(Name="OrderRefundedEvent", EmitDefaultValue=false)]
        public List<OrderRefundedEvent> OrderRefundedEvent { get; set; }

        /// <summary>
        /// Order rejected events
        /// </summary>
        /// <value>Order rejected events</value>
        [DataMember(Name="OrderRejectedEvent", EmitDefaultValue=false)]
        public List<OrderRejectedEvent> OrderRejectedEvent { get; set; }

        /// <summary>
        /// Order tip updated events
        /// </summary>
        /// <value>Order tip updated events</value>
        [DataMember(Name="OrderTipUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderTipUpdatedEvent> OrderTipUpdatedEvent { get; set; }

        /// <summary>
        /// Order Terminal Notification events
        /// </summary>
        /// <value>Order Terminal Notification events</value>
        [DataMember(Name="OrderTerminalNotifications", EmitDefaultValue=false)]
        public List<EmvNotificationEvent> OrderTerminalNotifications { get; set; }

        /// <summary>
        /// Store created events
        /// </summary>
        /// <value>Store created events</value>
        [DataMember(Name="StoreCreatedEvent", EmitDefaultValue=false)]
        public List<StoreCreatedEvent> StoreCreatedEvent { get; set; }

        /// <summary>
        /// Store deleted events
        /// </summary>
        /// <value>Store deleted events</value>
        [DataMember(Name="StoreDeletedEvent", EmitDefaultValue=false)]
        public List<StoreDeletedEvent> StoreDeletedEvent { get; set; }

        /// <summary>
        /// Store address updated events
        /// </summary>
        /// <value>Store address updated events</value>
        [DataMember(Name="StoreAddressUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreAddressUpdatedEvent> StoreAddressUpdatedEvent { get; set; }

        /// <summary>
        /// Store kiosk setting updated events
        /// </summary>
        /// <value>Store kiosk setting updated events</value>
        [DataMember(Name="StoreKioskSettingUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreKioskSettingUpdatedEvent> StoreKioskSettingUpdatedEvent { get; set; }

        /// <summary>
        /// Store delivery zone created events
        /// </summary>
        /// <value>Store delivery zone created events</value>
        [DataMember(Name="DeliveryZoneCreatedEvent", EmitDefaultValue=false)]
        public List<DeliveryZoneCreatedEvent> DeliveryZoneCreatedEvent { get; set; }

        /// <summary>
        /// Store delivery zone updated events
        /// </summary>
        /// <value>Store delivery zone updated events</value>
        [DataMember(Name="DeliveryZoneUpdatedEvent", EmitDefaultValue=false)]
        public List<DeliveryZoneUpdatedEvent> DeliveryZoneUpdatedEvent { get; set; }

        /// <summary>
        /// Store delivery zone deleted events
        /// </summary>
        /// <value>Store delivery zone deleted events</value>
        [DataMember(Name="DeliveryZoneDeletedEvent", EmitDefaultValue=false)]
        public List<DeliveryZoneDeletedEvent> DeliveryZoneDeletedEvent { get; set; }

        /// <summary>
        /// Store opening hours updated events
        /// </summary>
        /// <value>Store opening hours updated events</value>
        [DataMember(Name="StoreOpeningHoursUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreOpeningHoursUpdatedEvent> StoreOpeningHoursUpdatedEvent { get; set; }

        /// <summary>
        /// Store opening hours updated events
        /// </summary>
        /// <value>Store opening hours updated events</value>
        [DataMember(Name="StoreMenuAssignedEvent", EmitDefaultValue=false)]
        public List<StoreMenuAssignedEvent> StoreMenuAssignedEvent { get; set; }

        /// <summary>
        /// Store business hours override created events
        /// </summary>
        /// <value>Store business hours override created events</value>
        [DataMember(Name="StoreBusinessHoursOverrideCreatedEvent", EmitDefaultValue=false)]
        public List<StoreBusinessHoursOverrideCreatedEvent> StoreBusinessHoursOverrideCreatedEvent { get; set; }

        /// <summary>
        /// Store business hours override deleted events
        /// </summary>
        /// <value>Store business hours override deleted events</value>
        [DataMember(Name="StoreBusinessHoursOverrideDeletedEvent", EmitDefaultValue=false)]
        public List<StoreBusinessHoursOverrideDeletedEvent> StoreBusinessHoursOverrideDeletedEvent { get; set; }

        /// <summary>
        /// Store archived events
        /// </summary>
        /// <value>Store archived events</value>
        [DataMember(Name="StoreArchivedEvent", EmitDefaultValue=false)]
        public List<StoreArchivedEvent> StoreArchivedEvent { get; set; }

        /// <summary>
        /// Store unarchived events
        /// </summary>
        /// <value>Store unarchived events</value>
        [DataMember(Name="StoreUnarchivedEvent", EmitDefaultValue=false)]
        public List<StoreUnarchivedEvent> StoreUnarchivedEvent { get; set; }

        /// <summary>
        /// Store published events
        /// </summary>
        /// <value>Store published events</value>
        [DataMember(Name="StorePublishedEvent", EmitDefaultValue=false)]
        public List<StorePublishedEvent> StorePublishedEvent { get; set; }

        /// <summary>
        /// Store unpublished events
        /// </summary>
        /// <value>Store unpublished events</value>
        [DataMember(Name="StoreUnpublishedEvent", EmitDefaultValue=false)]
        public List<StoreUnpublishedEvent> StoreUnpublishedEvent { get; set; }

        /// <summary>
        /// Store updated events
        /// </summary>
        /// <value>Store updated events</value>
        [DataMember(Name="StoreUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreUpdatedEvent> StoreUpdatedEvent { get; set; }

        /// <summary>
        /// Store updated events
        /// </summary>
        /// <value>Store updated events</value>
        [DataMember(Name="StorePreOrderConfigUpdatedEvent", EmitDefaultValue=false)]
        public List<StorePreOrderConfigUpdatedEvent> StorePreOrderConfigUpdatedEvent { get; set; }

        /// <summary>
        /// Store logo created events
        /// </summary>
        /// <value>Store logo created events</value>
        [DataMember(Name="StoreLogoCreatedEvent", EmitDefaultValue=false)]
        public List<StoreLogoCreatedEvent> StoreLogoCreatedEvent { get; set; }

        /// <summary>
        /// Store logo updated events
        /// </summary>
        /// <value>Store logo updated events</value>
        [DataMember(Name="StoreLogoUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreLogoUpdatedEvent> StoreLogoUpdatedEvent { get; set; }

        /// <summary>
        /// Store logo deleted events
        /// </summary>
        /// <value>Store logo deleted events</value>
        [DataMember(Name="StoreLogoDeletedEvent", EmitDefaultValue=false)]
        public List<StoreLogoDeletedEvent> StoreLogoDeletedEvent { get; set; }

        /// <summary>
        /// Menu created events
        /// </summary>
        /// <value>Menu created events</value>
        [DataMember(Name="MenuCreatedEvent", EmitDefaultValue=false)]
        public List<MenuCreatedEvent> MenuCreatedEvent { get; set; }

        /// <summary>
        /// Menu updated events
        /// </summary>
        /// <value>Menu updated events</value>
        [DataMember(Name="MenuUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuUpdatedEvent> MenuUpdatedEvent { get; set; }

        /// <summary>
        /// Menu uploaded events
        /// </summary>
        /// <value>Menu uploaded events</value>
        [DataMember(Name="MenuUploadedEvent", EmitDefaultValue=false)]
        public List<MenuUploadedEvent> MenuUploadedEvent { get; set; }

        /// <summary>
        /// Menu bulk events
        /// </summary>
        /// <value>Menu bulk events</value>
        [DataMember(Name="MenuBulkEditEvent", EmitDefaultValue=false)]
        public List<MenuBulkEditEvent> MenuBulkEditEvent { get; set; }

        /// <summary>
        /// Menu section created events
        /// </summary>
        /// <value>Menu section created events</value>
        [DataMember(Name="MenuSectionCreatedEvent", EmitDefaultValue=false)]
        public List<MenuSectionCreatedEvent> MenuSectionCreatedEvent { get; set; }

        /// <summary>
        /// Menu section updated events
        /// </summary>
        /// <value>Menu section updated events</value>
        [DataMember(Name="MenuSectionUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuSectionUpdatedEvent> MenuSectionUpdatedEvent { get; set; }

        /// <summary>
        /// Menu section deleted events
        /// </summary>
        /// <value>Menu section deleted events</value>
        [DataMember(Name="MenuSectionDeletedEvent", EmitDefaultValue=false)]
        public List<MenuSectionDeletedEvent> MenuSectionDeletedEvent { get; set; }

        /// <summary>
        /// Menu section item created events
        /// </summary>
        /// <value>Menu section item created events</value>
        [DataMember(Name="MenuSectionItemCreatedEvent", EmitDefaultValue=false)]
        public List<MenuSectionItemCreatedEvent> MenuSectionItemCreatedEvent { get; set; }

        /// <summary>
        /// Menu section item updated events
        /// </summary>
        /// <value>Menu section item updated events</value>
        [DataMember(Name="MenuSectionItemUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuSectionItemUpdatedEvent> MenuSectionItemUpdatedEvent { get; set; }

        /// <summary>
        /// Menu section item deleted events
        /// </summary>
        /// <value>Menu section item deleted events</value>
        [DataMember(Name="MenuSectionItemDeletedEvent", EmitDefaultValue=false)]
        public List<MenuSectionItemDeletedEvent> MenuSectionItemDeletedEvent { get; set; }

        /// <summary>
        /// Menu item option set created events
        /// </summary>
        /// <value>Menu item option set created events</value>
        [DataMember(Name="MenuItemOptionSetCreatedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetCreatedEvent> MenuItemOptionSetCreatedEvent { get; set; }

        /// <summary>
        /// Menu item option set  updated events
        /// </summary>
        /// <value>Menu item option set  updated events</value>
        [DataMember(Name="MenuItemOptionSetUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetUpdatedEvent> MenuItemOptionSetUpdatedEvent { get; set; }

        /// <summary>
        /// Menu item option set deleted events
        /// </summary>
        /// <value>Menu item option set deleted events</value>
        [DataMember(Name="MenuItemOptionSetDeletedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetDeletedEvent> MenuItemOptionSetDeletedEvent { get; set; }

        /// <summary>
        /// Menu item option set item created events
        /// </summary>
        /// <value>Menu item option set item created events</value>
        [DataMember(Name="MenuItemOptionSetItemCreatedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetItemCreatedEvent> MenuItemOptionSetItemCreatedEvent { get; set; }

        /// <summary>
        /// Menu item option set item updated events
        /// </summary>
        /// <value>Menu item option set item updated events</value>
        [DataMember(Name="MenuItemOptionSetItemUpdatedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetItemUpdatedEvent> MenuItemOptionSetItemUpdatedEvent { get; set; }

        /// <summary>
        /// Menu item option set item deleted events
        /// </summary>
        /// <value>Menu item option set item deleted events</value>
        [DataMember(Name="MenuItemOptionSetItemDeletedEvent", EmitDefaultValue=false)]
        public List<MenuItemOptionSetItemDeletedEvent> MenuItemOptionSetItemDeletedEvent { get; set; }

        /// <summary>
        /// Menu checkpoint created event
        /// </summary>
        /// <value>Menu checkpoint created event</value>
        [DataMember(Name="MenuCheckpointCreatedEvent", EmitDefaultValue=false)]
        public List<MenuCheckpointCreatedEvent> MenuCheckpointCreatedEvent { get; set; }

        /// <summary>
        /// Store group created events
        /// </summary>
        /// <value>Store group created events</value>
        [DataMember(Name="StoreGroupCreatedEvent", EmitDefaultValue=false)]
        public List<StoreGroupCreatedEvent> StoreGroupCreatedEvent { get; set; }

        /// <summary>
        /// Store group updated events
        /// </summary>
        /// <value>Store group updated events</value>
        [DataMember(Name="StoreGroupUpdatedEvent", EmitDefaultValue=false)]
        public List<StoreGroupUpdatedEvent> StoreGroupUpdatedEvent { get; set; }

        /// <summary>
        /// Store group deleted events
        /// </summary>
        /// <value>Store group deleted events</value>
        [DataMember(Name="StoreGroupDeletedEvent", EmitDefaultValue=false)]
        public List<StoreGroupDeletedEvent> StoreGroupDeletedEvent { get; set; }

        /// <summary>
        /// Customer created events
        /// </summary>
        /// <value>Customer created events</value>
        [DataMember(Name="CustomerCreatedEvent", EmitDefaultValue=false)]
        public List<CustomerCreatedEvent> CustomerCreatedEvent { get; set; }

        /// <summary>
        /// Customer updated events
        /// </summary>
        /// <value>Customer updated events</value>
        [DataMember(Name="CustomerUpdatedEvent", EmitDefaultValue=false)]
        public List<CustomerUpdatedEvent> CustomerUpdatedEvent { get; set; }

        /// <summary>
        /// Customer consent updated events
        /// </summary>
        /// <value>Customer consent updated events</value>
        [DataMember(Name="CustomerConsentUpdatedEvent", EmitDefaultValue=false)]
        public List<CustomerConsentUpdatedEvent> CustomerConsentUpdatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription created events
        /// </summary>
        /// <value>Webhook subscription created events</value>
        [DataMember(Name="WebhookSubscriptionCreatedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionCreatedEvent> WebhookSubscriptionCreatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription updated events
        /// </summary>
        /// <value>Webhook subscription updated events</value>
        [DataMember(Name="WebhookSubscriptionUpdatedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionUpdatedEvent> WebhookSubscriptionUpdatedEvent { get; set; }

        /// <summary>
        /// Webhook subscription deleted events
        /// </summary>
        /// <value>Webhook subscription deleted events</value>
        [DataMember(Name="WebhookSubscriptionDeletedEvent", EmitDefaultValue=false)]
        public List<WebhookSubscriptionDeletedEvent> WebhookSubscriptionDeletedEvent { get; set; }

        /// <summary>
        /// Printer turned ON event
        /// </summary>
        /// <value>Printer turned ON event</value>
        [DataMember(Name="PrinterTurnedOnEvent", EmitDefaultValue=false)]
        public List<PrinterTurnedOnEvent> PrinterTurnedOnEvent { get; set; }

        /// <summary>
        /// Printer turned OFF event
        /// </summary>
        /// <value>Printer turned OFF event</value>
        [DataMember(Name="PrinterTurnedOffEvent", EmitDefaultValue=false)]
        public List<PrinterTurnedOffEvent> PrinterTurnedOffEvent { get; set; }

        /// <summary>
        /// Printer assigned to store event
        /// </summary>
        /// <value>Printer assigned to store event</value>
        [DataMember(Name="PrinterAssignedToStoreEvent", EmitDefaultValue=false)]
        public List<PrinterAssignedToStoreEvent> PrinterAssignedToStoreEvent { get; set; }

        /// <summary>
        /// Printer unassigned from store event
        /// </summary>
        /// <value>Printer unassigned from store event</value>
        [DataMember(Name="PrinterUnassignedFromStoreEvent", EmitDefaultValue=false)]
        public List<PrinterUnassignedFromStoreEvent> PrinterUnassignedFromStoreEvent { get; set; }

        /// <summary>
        /// Phone call started event
        /// </summary>
        /// <value>Phone call started event</value>
        [DataMember(Name="PhoneCallStartedEvent", EmitDefaultValue=false)]
        public List<PhoneCallStartedEvent> PhoneCallStartedEvent { get; set; }

        /// <summary>
        /// Phone call ended event
        /// </summary>
        /// <value>Phone call ended event</value>
        [DataMember(Name="PhoneCallEndedEvent", EmitDefaultValue=false)]
        public List<PhoneCallEndedEvent> PhoneCallEndedEvent { get; set; }

        /// <summary>
        /// Loyalty campaign created event
        /// </summary>
        /// <value>Loyalty campaign created event</value>
        [DataMember(Name="LoyaltyCampaignCreatedEvent", EmitDefaultValue=false)]
        public List<LoyaltyCampaignCreatedEvent> LoyaltyCampaignCreatedEvent { get; set; }

        /// <summary>
        /// Loyalty campaign deleted event
        /// </summary>
        /// <value>Loyalty campaign deleted event</value>
        [DataMember(Name="LoyaltyCampaignDeletedEvent", EmitDefaultValue=false)]
        public List<LoyaltyCampaignDeletedEvent> LoyaltyCampaignDeletedEvent { get; set; }

        /// <summary>
        /// Loyalty campaign updated event
        /// </summary>
        /// <value>Loyalty campaign updated event</value>
        [DataMember(Name="LoyaltyCampaignUpdatedEvent", EmitDefaultValue=false)]
        public List<LoyaltyCampaignUpdatedEvent> LoyaltyCampaignUpdatedEvent { get; set; }

        /// <summary>
        /// Retention campaign created event
        /// </summary>
        /// <value>Retention campaign created event</value>
        [DataMember(Name="RetentionCampaignCreatedEvent", EmitDefaultValue=false)]
        public List<RetentionCampaignCreatedEvent> RetentionCampaignCreatedEvent { get; set; }

        /// <summary>
        /// Retention campaign deleted event
        /// </summary>
        /// <value>Retention campaign deleted event</value>
        [DataMember(Name="RetentionCampaignDeletedEvent", EmitDefaultValue=false)]
        public List<RetentionCampaignDeletedEvent> RetentionCampaignDeletedEvent { get; set; }

        /// <summary>
        /// Retention campaign updated event
        /// </summary>
        /// <value>Retention campaign updated event</value>
        [DataMember(Name="RetentionCampaignUpdatedEvent", EmitDefaultValue=false)]
        public List<RetentionCampaignUpdatedEvent> RetentionCampaignUpdatedEvent { get; set; }

        /// <summary>
        /// Sms received event
        /// </summary>
        /// <value>Sms received event</value>
        [DataMember(Name="SmsReceivedEvent", EmitDefaultValue=false)]
        public List<SmsReceivedEvent> SmsReceivedEvent { get; set; }

        /// <summary>
        /// User login event
        /// </summary>
        /// <value>User login event</value>
        [DataMember(Name="UserLoginEvent", EmitDefaultValue=false)]
        public List<UserLoginEvent> UserLoginEvent { get; set; }

        /// <summary>
        /// User created event
        /// </summary>
        /// <value>User created event</value>
        [DataMember(Name="UserCreatedEvent", EmitDefaultValue=false)]
        public List<UserCreatedEvent> UserCreatedEvent { get; set; }

        /// <summary>
        /// User updated event
        /// </summary>
        /// <value>User updated event</value>
        [DataMember(Name="UserUpdatedEvent", EmitDefaultValue=false)]
        public List<UserUpdatedEvent> UserUpdatedEvent { get; set; }

        /// <summary>
        /// User deleted event
        /// </summary>
        /// <value>User deleted event</value>
        [DataMember(Name="UserDeletedEvent", EmitDefaultValue=false)]
        public List<UserDeletedEvent> UserDeletedEvent { get; set; }

        /// <summary>
        /// User password created event
        /// </summary>
        /// <value>User password created event</value>
        [DataMember(Name="UserCreatedPasswordEvent", EmitDefaultValue=false)]
        public List<UserPasswordCreatedEvent> UserCreatedPasswordEvent { get; set; }

        /// <summary>
        /// User answered signup questions event
        /// </summary>
        /// <value>User answered signup questions event</value>
        [DataMember(Name="UserAnsweredSignupQuestionsEvent", EmitDefaultValue=false)]
        public List<UserAnsweredSignupQuestionsEvent> UserAnsweredSignupQuestionsEvent { get; set; }

        /// <summary>
        /// Voucher created event
        /// </summary>
        /// <value>Voucher created event</value>
        [DataMember(Name="VoucherCreatedEvent", EmitDefaultValue=false)]
        public List<VoucherCreatedEvent> VoucherCreatedEvent { get; set; }

        /// <summary>
        /// Voucher updated event
        /// </summary>
        /// <value>Voucher updated event</value>
        [DataMember(Name="VoucherUpdatedEvent", EmitDefaultValue=false)]
        public List<VoucherUpdatedEvent> VoucherUpdatedEvent { get; set; }

        /// <summary>
        /// Voucher deleted event
        /// </summary>
        /// <value>Voucher deleted event</value>
        [DataMember(Name="VoucherDeletedEvent", EmitDefaultValue=false)]
        public List<VoucherDeletedEvent> VoucherDeletedEvent { get; set; }

        /// <summary>
        /// Teammate invite sent event
        /// </summary>
        /// <value>Teammate invite sent event</value>
        [DataMember(Name="TeammateInviteSentEvent", EmitDefaultValue=false)]
        public List<TeammateInviteSentEvent> TeammateInviteSentEvent { get; set; }

        /// <summary>
        /// Teammate invite accepted event
        /// </summary>
        /// <value>Teammate invite accepted event</value>
        [DataMember(Name="TeammateInviteAcceptedEvent", EmitDefaultValue=false)]
        public List<TeammateInviteAcceptedEvent> TeammateInviteAcceptedEvent { get; set; }

        /// <summary>
        /// Teammate updated event
        /// </summary>
        /// <value>Teammate updated event</value>
        [DataMember(Name="TeammateUpdatedEvent", EmitDefaultValue=false)]
        public List<TeammateUpdatedEvent> TeammateUpdatedEvent { get; set; }

        /// <summary>
        /// Teammate deleted event
        /// </summary>
        /// <value>Teammate deleted event</value>
        [DataMember(Name="TeammateDeletedEvent", EmitDefaultValue=false)]
        public List<TeammateDeletedEvent> TeammateDeletedEvent { get; set; }

        /// <summary>
        /// Bank account created event
        /// </summary>
        /// <value>Bank account created event</value>
        [DataMember(Name="BankAccountCreatedEvent", EmitDefaultValue=false)]
        public List<BankAccountCreatedEvent> BankAccountCreatedEvent { get; set; }

        /// <summary>
        /// Bank account updated event
        /// </summary>
        /// <value>Bank account updated event</value>
        [DataMember(Name="BankAccountUpdatedEvent", EmitDefaultValue=false)]
        public List<BankAccountUpdatedEvent> BankAccountUpdatedEvent { get; set; }

        /// <summary>
        /// Bank account updated event
        /// </summary>
        /// <value>Bank account updated event</value>
        [DataMember(Name="BankAccountDeletedEvent", EmitDefaultValue=false)]
        public List<BankAccountDeletedEvent> BankAccountDeletedEvent { get; set; }

        /// <summary>
        /// Hydra assigned event
        /// </summary>
        /// <value>Hydra assigned event</value>
        [DataMember(Name="HydraAssignedEvent", EmitDefaultValue=false)]
        public List<HydraAssignedEvent> HydraAssignedEvent { get; set; }

        /// <summary>
        /// Hydra reset requested event
        /// </summary>
        /// <value>Hydra reset requested event</value>
        [DataMember(Name="HydraRequestResetEvent", EmitDefaultValue=false)]
        public List<HydraRequestResetEvent> HydraRequestResetEvent { get; set; }

        /// <summary>
        /// Hydra store assigned event
        /// </summary>
        /// <value>Hydra store assigned event</value>
        [DataMember(Name="HydraStoreAssignedEvent", EmitDefaultValue=false)]
        public List<HydraStoreAssignedEvent> HydraStoreAssignedEvent { get; set; }

        /// <summary>
        /// Hydra store unassigned
        /// </summary>
        /// <value>Hydra store unassigned</value>
        [DataMember(Name="HydraStoreUnassignedEvent", EmitDefaultValue=false)]
        public List<HydraStoreUnassignedEvent> HydraStoreUnassignedEvent { get; set; }

        /// <summary>
        /// Hydra settings changed event
        /// </summary>
        /// <value>Hydra settings changed event</value>
        [DataMember(Name="HydraSettingChangedEvent", EmitDefaultValue=false)]
        public List<HydraSettingChangedEvent> HydraSettingChangedEvent { get; set; }

        /// <summary>
        /// Hydra un-assigned event
        /// </summary>
        /// <value>Hydra un-assigned event</value>
        [DataMember(Name="HydraUnAssignedEvent", EmitDefaultValue=false)]
        public List<HydraUnAssignedEvent> HydraUnAssignedEvent { get; set; }

        /// <summary>
        /// Hydra connection state change
        /// </summary>
        /// <value>Hydra connection state change</value>
        [DataMember(Name="HydraConnectionStatusChangedEvent", EmitDefaultValue=false)]
        public List<HydraConnectionStatusChangedEvent> HydraConnectionStatusChangedEvent { get; set; }

        /// <summary>
        /// Bluetooth Pairing Mode initiated
        /// </summary>
        /// <value>Bluetooth Pairing Mode initiated</value>
        [DataMember(Name="KioskBluetoothPairingModeEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothPairingModeEvent> KioskBluetoothPairingModeEvent { get; set; }

        /// <summary>
        /// Bluetooth Unpairing Mode initiated
        /// </summary>
        /// <value>Bluetooth Unpairing Mode initiated</value>
        [DataMember(Name="KioskBluetoothUnpairingModeEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothUnpairingModeEvent> KioskBluetoothUnpairingModeEvent { get; set; }

        /// <summary>
        /// Bluetooth Terminal Unpaired with Kiosk
        /// </summary>
        /// <value>Bluetooth Terminal Unpaired with Kiosk</value>
        [DataMember(Name="KioskBluetoothTerminalUnpairedEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalUnpairedEvent> KioskBluetoothTerminalUnpairedEvent { get; set; }

        /// <summary>
        /// Bluetooth Terminal Updated
        /// </summary>
        /// <value>Bluetooth Terminal Updated</value>
        [DataMember(Name="KioskBluetoothTerminalUpdatedEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalUpdatedEvent> KioskBluetoothTerminalUpdatedEvent { get; set; }

        /// <summary>
        /// Trigger bluetooth payment terminal update checker
        /// </summary>
        /// <value>Trigger bluetooth payment terminal update checker</value>
        [DataMember(Name="KioskBluetoothTerminalInitiateUpdateCheckEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalInitiateUpdateCheckEvent> KioskBluetoothTerminalInitiateUpdateCheckEvent { get; set; }

        /// <summary>
        /// Bluetooth Terminal Initiate Update
        /// </summary>
        /// <value>Bluetooth Terminal Initiate Update</value>
        [DataMember(Name="KioskBluetoothInstallUpdateInitiateEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothInstallUpdateInitiateEvent> KioskBluetoothInstallUpdateInitiateEvent { get; set; }

        /// <summary>
        /// Bluetooth Terminal Cancel Update Install
        /// </summary>
        /// <value>Bluetooth Terminal Cancel Update Install</value>
        [DataMember(Name="KioskBluetoothTerminalCancelUpdateEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalCancelUpdateEvent> KioskBluetoothTerminalCancelUpdateEvent { get; set; }

        /// <summary>
        /// Bluetooth Payment Terminal Firmware Version Status Info
        /// </summary>
        /// <value>Bluetooth Payment Terminal Firmware Version Status Info</value>
        [DataMember(Name="KioskBluetoothTerminalFirmwareVersionStatusEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalFirmwareVersionStatusEvent> KioskBluetoothTerminalFirmwareVersionStatusEvent { get; set; }

        /// <summary>
        /// Bluetooth Terminal Update Installation Status
        /// </summary>
        /// <value>Bluetooth Terminal Update Installation Status</value>
        [DataMember(Name="KioskBluetoothTerminalInstallationStatusEvent", EmitDefaultValue=false)]
        public List<KioskBluetoothTerminalInstallationStatusEvent> KioskBluetoothTerminalInstallationStatusEvent { get; set; }

        /// <summary>
        /// Push notification scheduled event
        /// </summary>
        /// <value>Push notification scheduled event</value>
        [DataMember(Name="PushNotificationScheduledEvent", EmitDefaultValue=false)]
        public List<PushNotificationScheduledEvent> PushNotificationScheduledEvent { get; set; }

        /// <summary>
        /// Push notification sent event
        /// </summary>
        /// <value>Push notification sent event</value>
        [DataMember(Name="PushNotificationSentEvent", EmitDefaultValue=false)]
        public List<PushNotificationSentEvent> PushNotificationSentEvent { get; set; }

        /// <summary>
        /// Push notification deleted event
        /// </summary>
        /// <value>Push notification deleted event</value>
        [DataMember(Name="PushNotificationDeletedEvent", EmitDefaultValue=false)]
        public List<PushNotificationDeletedEvent> PushNotificationDeletedEvent { get; set; }

        /// <summary>
        /// DNS Verified
        /// </summary>
        /// <value>DNS Verified</value>
        [DataMember(Name="DnsVerifiedEvent", EmitDefaultValue=false)]
        public List<DnsVerifiedEvent> DnsVerifiedEvent { get; set; }

        /// <summary>
        /// Certificate created
        /// </summary>
        /// <value>Certificate created</value>
        [DataMember(Name="CertificateCreatedEvent", EmitDefaultValue=false)]
        public List<CertificateCreatedEvent> CertificateCreatedEvent { get; set; }

        /// <summary>
        /// Certificate renewed
        /// </summary>
        /// <value>Certificate renewed</value>
        [DataMember(Name="CertificateRenewedEvent", EmitDefaultValue=false)]
        public List<CertificateRenewedEvent> CertificateRenewedEvent { get; set; }

        /// <summary>
        /// Panacea vanity url updated
        /// </summary>
        /// <value>Panacea vanity url updated</value>
        [DataMember(Name="WebsiteVanityUrlUpdatedEvent", EmitDefaultValue=false)]
        public List<WebsiteVanityUrlUpdatedEvent> WebsiteVanityUrlUpdatedEvent { get; set; }

        /// <summary>
        /// Website updated
        /// </summary>
        /// <value>Website updated</value>
        [DataMember(Name="WebsiteUpdatedEvent", EmitDefaultValue=false)]
        public List<WebsiteUpdatedEvent> WebsiteUpdatedEvent { get; set; }

        /// <summary>
        /// Order capacity config updated
        /// </summary>
        /// <value>Order capacity config updated</value>
        [DataMember(Name="OrderCapacityUpdatedEvent", EmitDefaultValue=false)]
        public List<OrderCapacityConfigUpdatedEvent> OrderCapacityUpdatedEvent { get; set; }

        /// <summary>
        /// External event
        /// </summary>
        /// <value>External event</value>
        [DataMember(Name="ExternalStoreEvent", EmitDefaultValue=false)]
        public List<ExternalStoreEvent> ExternalStoreEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventSearchResult {\n");
            sb.Append("  AppCreatedEvent: ").Append(AppCreatedEvent).Append("\n");
            sb.Append("  AppUpdatedEvent: ").Append(AppUpdatedEvent).Append("\n");
            sb.Append("  AnalyticsClientEvent: ").Append(AnalyticsClientEvent).Append("\n");
            sb.Append("  OrderAcceptedEvent: ").Append(OrderAcceptedEvent).Append("\n");
            sb.Append("  OrderDispatchedEvent: ").Append(OrderDispatchedEvent).Append("\n");
            sb.Append("  OrderCustomerTrackingCreatedEvent: ").Append(OrderCustomerTrackingCreatedEvent).Append("\n");
            sb.Append("  OrderDeliveryTrackingStatusUpdatedEvent: ").Append(OrderDeliveryTrackingStatusUpdatedEvent).Append("\n");
            sb.Append("  OrderCreatedEvent: ").Append(OrderCreatedEvent).Append("\n");
            sb.Append("  OrderRatingUpdatedEvent: ").Append(OrderRatingUpdatedEvent).Append("\n");
            sb.Append("  OrderRefundedEvent: ").Append(OrderRefundedEvent).Append("\n");
            sb.Append("  OrderRejectedEvent: ").Append(OrderRejectedEvent).Append("\n");
            sb.Append("  OrderTipUpdatedEvent: ").Append(OrderTipUpdatedEvent).Append("\n");
            sb.Append("  OrderTerminalNotifications: ").Append(OrderTerminalNotifications).Append("\n");
            sb.Append("  StoreCreatedEvent: ").Append(StoreCreatedEvent).Append("\n");
            sb.Append("  StoreDeletedEvent: ").Append(StoreDeletedEvent).Append("\n");
            sb.Append("  StoreAddressUpdatedEvent: ").Append(StoreAddressUpdatedEvent).Append("\n");
            sb.Append("  StoreKioskSettingUpdatedEvent: ").Append(StoreKioskSettingUpdatedEvent).Append("\n");
            sb.Append("  DeliveryZoneCreatedEvent: ").Append(DeliveryZoneCreatedEvent).Append("\n");
            sb.Append("  DeliveryZoneUpdatedEvent: ").Append(DeliveryZoneUpdatedEvent).Append("\n");
            sb.Append("  DeliveryZoneDeletedEvent: ").Append(DeliveryZoneDeletedEvent).Append("\n");
            sb.Append("  StoreOpeningHoursUpdatedEvent: ").Append(StoreOpeningHoursUpdatedEvent).Append("\n");
            sb.Append("  StoreMenuAssignedEvent: ").Append(StoreMenuAssignedEvent).Append("\n");
            sb.Append("  StoreBusinessHoursOverrideCreatedEvent: ").Append(StoreBusinessHoursOverrideCreatedEvent).Append("\n");
            sb.Append("  StoreBusinessHoursOverrideDeletedEvent: ").Append(StoreBusinessHoursOverrideDeletedEvent).Append("\n");
            sb.Append("  StoreArchivedEvent: ").Append(StoreArchivedEvent).Append("\n");
            sb.Append("  StoreUnarchivedEvent: ").Append(StoreUnarchivedEvent).Append("\n");
            sb.Append("  StorePublishedEvent: ").Append(StorePublishedEvent).Append("\n");
            sb.Append("  StoreUnpublishedEvent: ").Append(StoreUnpublishedEvent).Append("\n");
            sb.Append("  StoreUpdatedEvent: ").Append(StoreUpdatedEvent).Append("\n");
            sb.Append("  StorePreOrderConfigUpdatedEvent: ").Append(StorePreOrderConfigUpdatedEvent).Append("\n");
            sb.Append("  StoreLogoCreatedEvent: ").Append(StoreLogoCreatedEvent).Append("\n");
            sb.Append("  StoreLogoUpdatedEvent: ").Append(StoreLogoUpdatedEvent).Append("\n");
            sb.Append("  StoreLogoDeletedEvent: ").Append(StoreLogoDeletedEvent).Append("\n");
            sb.Append("  MenuCreatedEvent: ").Append(MenuCreatedEvent).Append("\n");
            sb.Append("  MenuUpdatedEvent: ").Append(MenuUpdatedEvent).Append("\n");
            sb.Append("  MenuUploadedEvent: ").Append(MenuUploadedEvent).Append("\n");
            sb.Append("  MenuBulkEditEvent: ").Append(MenuBulkEditEvent).Append("\n");
            sb.Append("  MenuSectionCreatedEvent: ").Append(MenuSectionCreatedEvent).Append("\n");
            sb.Append("  MenuSectionUpdatedEvent: ").Append(MenuSectionUpdatedEvent).Append("\n");
            sb.Append("  MenuSectionDeletedEvent: ").Append(MenuSectionDeletedEvent).Append("\n");
            sb.Append("  MenuSectionItemCreatedEvent: ").Append(MenuSectionItemCreatedEvent).Append("\n");
            sb.Append("  MenuSectionItemUpdatedEvent: ").Append(MenuSectionItemUpdatedEvent).Append("\n");
            sb.Append("  MenuSectionItemDeletedEvent: ").Append(MenuSectionItemDeletedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetCreatedEvent: ").Append(MenuItemOptionSetCreatedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetUpdatedEvent: ").Append(MenuItemOptionSetUpdatedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetDeletedEvent: ").Append(MenuItemOptionSetDeletedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetItemCreatedEvent: ").Append(MenuItemOptionSetItemCreatedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetItemUpdatedEvent: ").Append(MenuItemOptionSetItemUpdatedEvent).Append("\n");
            sb.Append("  MenuItemOptionSetItemDeletedEvent: ").Append(MenuItemOptionSetItemDeletedEvent).Append("\n");
            sb.Append("  MenuCheckpointCreatedEvent: ").Append(MenuCheckpointCreatedEvent).Append("\n");
            sb.Append("  StoreGroupCreatedEvent: ").Append(StoreGroupCreatedEvent).Append("\n");
            sb.Append("  StoreGroupUpdatedEvent: ").Append(StoreGroupUpdatedEvent).Append("\n");
            sb.Append("  StoreGroupDeletedEvent: ").Append(StoreGroupDeletedEvent).Append("\n");
            sb.Append("  CustomerCreatedEvent: ").Append(CustomerCreatedEvent).Append("\n");
            sb.Append("  CustomerUpdatedEvent: ").Append(CustomerUpdatedEvent).Append("\n");
            sb.Append("  CustomerConsentUpdatedEvent: ").Append(CustomerConsentUpdatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionCreatedEvent: ").Append(WebhookSubscriptionCreatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionUpdatedEvent: ").Append(WebhookSubscriptionUpdatedEvent).Append("\n");
            sb.Append("  WebhookSubscriptionDeletedEvent: ").Append(WebhookSubscriptionDeletedEvent).Append("\n");
            sb.Append("  PrinterTurnedOnEvent: ").Append(PrinterTurnedOnEvent).Append("\n");
            sb.Append("  PrinterTurnedOffEvent: ").Append(PrinterTurnedOffEvent).Append("\n");
            sb.Append("  PrinterAssignedToStoreEvent: ").Append(PrinterAssignedToStoreEvent).Append("\n");
            sb.Append("  PrinterUnassignedFromStoreEvent: ").Append(PrinterUnassignedFromStoreEvent).Append("\n");
            sb.Append("  PhoneCallStartedEvent: ").Append(PhoneCallStartedEvent).Append("\n");
            sb.Append("  PhoneCallEndedEvent: ").Append(PhoneCallEndedEvent).Append("\n");
            sb.Append("  LoyaltyCampaignCreatedEvent: ").Append(LoyaltyCampaignCreatedEvent).Append("\n");
            sb.Append("  LoyaltyCampaignDeletedEvent: ").Append(LoyaltyCampaignDeletedEvent).Append("\n");
            sb.Append("  LoyaltyCampaignUpdatedEvent: ").Append(LoyaltyCampaignUpdatedEvent).Append("\n");
            sb.Append("  RetentionCampaignCreatedEvent: ").Append(RetentionCampaignCreatedEvent).Append("\n");
            sb.Append("  RetentionCampaignDeletedEvent: ").Append(RetentionCampaignDeletedEvent).Append("\n");
            sb.Append("  RetentionCampaignUpdatedEvent: ").Append(RetentionCampaignUpdatedEvent).Append("\n");
            sb.Append("  SmsReceivedEvent: ").Append(SmsReceivedEvent).Append("\n");
            sb.Append("  UserLoginEvent: ").Append(UserLoginEvent).Append("\n");
            sb.Append("  UserCreatedEvent: ").Append(UserCreatedEvent).Append("\n");
            sb.Append("  UserUpdatedEvent: ").Append(UserUpdatedEvent).Append("\n");
            sb.Append("  UserDeletedEvent: ").Append(UserDeletedEvent).Append("\n");
            sb.Append("  UserCreatedPasswordEvent: ").Append(UserCreatedPasswordEvent).Append("\n");
            sb.Append("  UserAnsweredSignupQuestionsEvent: ").Append(UserAnsweredSignupQuestionsEvent).Append("\n");
            sb.Append("  VoucherCreatedEvent: ").Append(VoucherCreatedEvent).Append("\n");
            sb.Append("  VoucherUpdatedEvent: ").Append(VoucherUpdatedEvent).Append("\n");
            sb.Append("  VoucherDeletedEvent: ").Append(VoucherDeletedEvent).Append("\n");
            sb.Append("  TeammateInviteSentEvent: ").Append(TeammateInviteSentEvent).Append("\n");
            sb.Append("  TeammateInviteAcceptedEvent: ").Append(TeammateInviteAcceptedEvent).Append("\n");
            sb.Append("  TeammateUpdatedEvent: ").Append(TeammateUpdatedEvent).Append("\n");
            sb.Append("  TeammateDeletedEvent: ").Append(TeammateDeletedEvent).Append("\n");
            sb.Append("  BankAccountCreatedEvent: ").Append(BankAccountCreatedEvent).Append("\n");
            sb.Append("  BankAccountUpdatedEvent: ").Append(BankAccountUpdatedEvent).Append("\n");
            sb.Append("  BankAccountDeletedEvent: ").Append(BankAccountDeletedEvent).Append("\n");
            sb.Append("  HydraAssignedEvent: ").Append(HydraAssignedEvent).Append("\n");
            sb.Append("  HydraRequestResetEvent: ").Append(HydraRequestResetEvent).Append("\n");
            sb.Append("  HydraStoreAssignedEvent: ").Append(HydraStoreAssignedEvent).Append("\n");
            sb.Append("  HydraStoreUnassignedEvent: ").Append(HydraStoreUnassignedEvent).Append("\n");
            sb.Append("  HydraSettingChangedEvent: ").Append(HydraSettingChangedEvent).Append("\n");
            sb.Append("  HydraUnAssignedEvent: ").Append(HydraUnAssignedEvent).Append("\n");
            sb.Append("  HydraConnectionStatusChangedEvent: ").Append(HydraConnectionStatusChangedEvent).Append("\n");
            sb.Append("  KioskBluetoothPairingModeEvent: ").Append(KioskBluetoothPairingModeEvent).Append("\n");
            sb.Append("  KioskBluetoothUnpairingModeEvent: ").Append(KioskBluetoothUnpairingModeEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalUnpairedEvent: ").Append(KioskBluetoothTerminalUnpairedEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalUpdatedEvent: ").Append(KioskBluetoothTerminalUpdatedEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalInitiateUpdateCheckEvent: ").Append(KioskBluetoothTerminalInitiateUpdateCheckEvent).Append("\n");
            sb.Append("  KioskBluetoothInstallUpdateInitiateEvent: ").Append(KioskBluetoothInstallUpdateInitiateEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalCancelUpdateEvent: ").Append(KioskBluetoothTerminalCancelUpdateEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalFirmwareVersionStatusEvent: ").Append(KioskBluetoothTerminalFirmwareVersionStatusEvent).Append("\n");
            sb.Append("  KioskBluetoothTerminalInstallationStatusEvent: ").Append(KioskBluetoothTerminalInstallationStatusEvent).Append("\n");
            sb.Append("  PushNotificationScheduledEvent: ").Append(PushNotificationScheduledEvent).Append("\n");
            sb.Append("  PushNotificationSentEvent: ").Append(PushNotificationSentEvent).Append("\n");
            sb.Append("  PushNotificationDeletedEvent: ").Append(PushNotificationDeletedEvent).Append("\n");
            sb.Append("  DnsVerifiedEvent: ").Append(DnsVerifiedEvent).Append("\n");
            sb.Append("  CertificateCreatedEvent: ").Append(CertificateCreatedEvent).Append("\n");
            sb.Append("  CertificateRenewedEvent: ").Append(CertificateRenewedEvent).Append("\n");
            sb.Append("  WebsiteVanityUrlUpdatedEvent: ").Append(WebsiteVanityUrlUpdatedEvent).Append("\n");
            sb.Append("  WebsiteUpdatedEvent: ").Append(WebsiteUpdatedEvent).Append("\n");
            sb.Append("  OrderCapacityUpdatedEvent: ").Append(OrderCapacityUpdatedEvent).Append("\n");
            sb.Append("  ExternalStoreEvent: ").Append(ExternalStoreEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventSearchResult);
        }

        /// <summary>
        /// Returns true if EventSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EventSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppCreatedEvent == input.AppCreatedEvent ||
                    this.AppCreatedEvent != null &&
                    this.AppCreatedEvent.SequenceEqual(input.AppCreatedEvent)
                ) && 
                (
                    this.AppUpdatedEvent == input.AppUpdatedEvent ||
                    this.AppUpdatedEvent != null &&
                    this.AppUpdatedEvent.SequenceEqual(input.AppUpdatedEvent)
                ) && 
                (
                    this.AnalyticsClientEvent == input.AnalyticsClientEvent ||
                    this.AnalyticsClientEvent != null &&
                    this.AnalyticsClientEvent.SequenceEqual(input.AnalyticsClientEvent)
                ) && 
                (
                    this.OrderAcceptedEvent == input.OrderAcceptedEvent ||
                    this.OrderAcceptedEvent != null &&
                    this.OrderAcceptedEvent.SequenceEqual(input.OrderAcceptedEvent)
                ) && 
                (
                    this.OrderDispatchedEvent == input.OrderDispatchedEvent ||
                    this.OrderDispatchedEvent != null &&
                    this.OrderDispatchedEvent.SequenceEqual(input.OrderDispatchedEvent)
                ) && 
                (
                    this.OrderCustomerTrackingCreatedEvent == input.OrderCustomerTrackingCreatedEvent ||
                    this.OrderCustomerTrackingCreatedEvent != null &&
                    this.OrderCustomerTrackingCreatedEvent.SequenceEqual(input.OrderCustomerTrackingCreatedEvent)
                ) && 
                (
                    this.OrderDeliveryTrackingStatusUpdatedEvent == input.OrderDeliveryTrackingStatusUpdatedEvent ||
                    this.OrderDeliveryTrackingStatusUpdatedEvent != null &&
                    this.OrderDeliveryTrackingStatusUpdatedEvent.SequenceEqual(input.OrderDeliveryTrackingStatusUpdatedEvent)
                ) && 
                (
                    this.OrderCreatedEvent == input.OrderCreatedEvent ||
                    this.OrderCreatedEvent != null &&
                    this.OrderCreatedEvent.SequenceEqual(input.OrderCreatedEvent)
                ) && 
                (
                    this.OrderRatingUpdatedEvent == input.OrderRatingUpdatedEvent ||
                    this.OrderRatingUpdatedEvent != null &&
                    this.OrderRatingUpdatedEvent.SequenceEqual(input.OrderRatingUpdatedEvent)
                ) && 
                (
                    this.OrderRefundedEvent == input.OrderRefundedEvent ||
                    this.OrderRefundedEvent != null &&
                    this.OrderRefundedEvent.SequenceEqual(input.OrderRefundedEvent)
                ) && 
                (
                    this.OrderRejectedEvent == input.OrderRejectedEvent ||
                    this.OrderRejectedEvent != null &&
                    this.OrderRejectedEvent.SequenceEqual(input.OrderRejectedEvent)
                ) && 
                (
                    this.OrderTipUpdatedEvent == input.OrderTipUpdatedEvent ||
                    this.OrderTipUpdatedEvent != null &&
                    this.OrderTipUpdatedEvent.SequenceEqual(input.OrderTipUpdatedEvent)
                ) && 
                (
                    this.OrderTerminalNotifications == input.OrderTerminalNotifications ||
                    this.OrderTerminalNotifications != null &&
                    this.OrderTerminalNotifications.SequenceEqual(input.OrderTerminalNotifications)
                ) && 
                (
                    this.StoreCreatedEvent == input.StoreCreatedEvent ||
                    this.StoreCreatedEvent != null &&
                    this.StoreCreatedEvent.SequenceEqual(input.StoreCreatedEvent)
                ) && 
                (
                    this.StoreDeletedEvent == input.StoreDeletedEvent ||
                    this.StoreDeletedEvent != null &&
                    this.StoreDeletedEvent.SequenceEqual(input.StoreDeletedEvent)
                ) && 
                (
                    this.StoreAddressUpdatedEvent == input.StoreAddressUpdatedEvent ||
                    this.StoreAddressUpdatedEvent != null &&
                    this.StoreAddressUpdatedEvent.SequenceEqual(input.StoreAddressUpdatedEvent)
                ) && 
                (
                    this.StoreKioskSettingUpdatedEvent == input.StoreKioskSettingUpdatedEvent ||
                    this.StoreKioskSettingUpdatedEvent != null &&
                    this.StoreKioskSettingUpdatedEvent.SequenceEqual(input.StoreKioskSettingUpdatedEvent)
                ) && 
                (
                    this.DeliveryZoneCreatedEvent == input.DeliveryZoneCreatedEvent ||
                    this.DeliveryZoneCreatedEvent != null &&
                    this.DeliveryZoneCreatedEvent.SequenceEqual(input.DeliveryZoneCreatedEvent)
                ) && 
                (
                    this.DeliveryZoneUpdatedEvent == input.DeliveryZoneUpdatedEvent ||
                    this.DeliveryZoneUpdatedEvent != null &&
                    this.DeliveryZoneUpdatedEvent.SequenceEqual(input.DeliveryZoneUpdatedEvent)
                ) && 
                (
                    this.DeliveryZoneDeletedEvent == input.DeliveryZoneDeletedEvent ||
                    this.DeliveryZoneDeletedEvent != null &&
                    this.DeliveryZoneDeletedEvent.SequenceEqual(input.DeliveryZoneDeletedEvent)
                ) && 
                (
                    this.StoreOpeningHoursUpdatedEvent == input.StoreOpeningHoursUpdatedEvent ||
                    this.StoreOpeningHoursUpdatedEvent != null &&
                    this.StoreOpeningHoursUpdatedEvent.SequenceEqual(input.StoreOpeningHoursUpdatedEvent)
                ) && 
                (
                    this.StoreMenuAssignedEvent == input.StoreMenuAssignedEvent ||
                    this.StoreMenuAssignedEvent != null &&
                    this.StoreMenuAssignedEvent.SequenceEqual(input.StoreMenuAssignedEvent)
                ) && 
                (
                    this.StoreBusinessHoursOverrideCreatedEvent == input.StoreBusinessHoursOverrideCreatedEvent ||
                    this.StoreBusinessHoursOverrideCreatedEvent != null &&
                    this.StoreBusinessHoursOverrideCreatedEvent.SequenceEqual(input.StoreBusinessHoursOverrideCreatedEvent)
                ) && 
                (
                    this.StoreBusinessHoursOverrideDeletedEvent == input.StoreBusinessHoursOverrideDeletedEvent ||
                    this.StoreBusinessHoursOverrideDeletedEvent != null &&
                    this.StoreBusinessHoursOverrideDeletedEvent.SequenceEqual(input.StoreBusinessHoursOverrideDeletedEvent)
                ) && 
                (
                    this.StoreArchivedEvent == input.StoreArchivedEvent ||
                    this.StoreArchivedEvent != null &&
                    this.StoreArchivedEvent.SequenceEqual(input.StoreArchivedEvent)
                ) && 
                (
                    this.StoreUnarchivedEvent == input.StoreUnarchivedEvent ||
                    this.StoreUnarchivedEvent != null &&
                    this.StoreUnarchivedEvent.SequenceEqual(input.StoreUnarchivedEvent)
                ) && 
                (
                    this.StorePublishedEvent == input.StorePublishedEvent ||
                    this.StorePublishedEvent != null &&
                    this.StorePublishedEvent.SequenceEqual(input.StorePublishedEvent)
                ) && 
                (
                    this.StoreUnpublishedEvent == input.StoreUnpublishedEvent ||
                    this.StoreUnpublishedEvent != null &&
                    this.StoreUnpublishedEvent.SequenceEqual(input.StoreUnpublishedEvent)
                ) && 
                (
                    this.StoreUpdatedEvent == input.StoreUpdatedEvent ||
                    this.StoreUpdatedEvent != null &&
                    this.StoreUpdatedEvent.SequenceEqual(input.StoreUpdatedEvent)
                ) && 
                (
                    this.StorePreOrderConfigUpdatedEvent == input.StorePreOrderConfigUpdatedEvent ||
                    this.StorePreOrderConfigUpdatedEvent != null &&
                    this.StorePreOrderConfigUpdatedEvent.SequenceEqual(input.StorePreOrderConfigUpdatedEvent)
                ) && 
                (
                    this.StoreLogoCreatedEvent == input.StoreLogoCreatedEvent ||
                    this.StoreLogoCreatedEvent != null &&
                    this.StoreLogoCreatedEvent.SequenceEqual(input.StoreLogoCreatedEvent)
                ) && 
                (
                    this.StoreLogoUpdatedEvent == input.StoreLogoUpdatedEvent ||
                    this.StoreLogoUpdatedEvent != null &&
                    this.StoreLogoUpdatedEvent.SequenceEqual(input.StoreLogoUpdatedEvent)
                ) && 
                (
                    this.StoreLogoDeletedEvent == input.StoreLogoDeletedEvent ||
                    this.StoreLogoDeletedEvent != null &&
                    this.StoreLogoDeletedEvent.SequenceEqual(input.StoreLogoDeletedEvent)
                ) && 
                (
                    this.MenuCreatedEvent == input.MenuCreatedEvent ||
                    this.MenuCreatedEvent != null &&
                    this.MenuCreatedEvent.SequenceEqual(input.MenuCreatedEvent)
                ) && 
                (
                    this.MenuUpdatedEvent == input.MenuUpdatedEvent ||
                    this.MenuUpdatedEvent != null &&
                    this.MenuUpdatedEvent.SequenceEqual(input.MenuUpdatedEvent)
                ) && 
                (
                    this.MenuUploadedEvent == input.MenuUploadedEvent ||
                    this.MenuUploadedEvent != null &&
                    this.MenuUploadedEvent.SequenceEqual(input.MenuUploadedEvent)
                ) && 
                (
                    this.MenuBulkEditEvent == input.MenuBulkEditEvent ||
                    this.MenuBulkEditEvent != null &&
                    this.MenuBulkEditEvent.SequenceEqual(input.MenuBulkEditEvent)
                ) && 
                (
                    this.MenuSectionCreatedEvent == input.MenuSectionCreatedEvent ||
                    this.MenuSectionCreatedEvent != null &&
                    this.MenuSectionCreatedEvent.SequenceEqual(input.MenuSectionCreatedEvent)
                ) && 
                (
                    this.MenuSectionUpdatedEvent == input.MenuSectionUpdatedEvent ||
                    this.MenuSectionUpdatedEvent != null &&
                    this.MenuSectionUpdatedEvent.SequenceEqual(input.MenuSectionUpdatedEvent)
                ) && 
                (
                    this.MenuSectionDeletedEvent == input.MenuSectionDeletedEvent ||
                    this.MenuSectionDeletedEvent != null &&
                    this.MenuSectionDeletedEvent.SequenceEqual(input.MenuSectionDeletedEvent)
                ) && 
                (
                    this.MenuSectionItemCreatedEvent == input.MenuSectionItemCreatedEvent ||
                    this.MenuSectionItemCreatedEvent != null &&
                    this.MenuSectionItemCreatedEvent.SequenceEqual(input.MenuSectionItemCreatedEvent)
                ) && 
                (
                    this.MenuSectionItemUpdatedEvent == input.MenuSectionItemUpdatedEvent ||
                    this.MenuSectionItemUpdatedEvent != null &&
                    this.MenuSectionItemUpdatedEvent.SequenceEqual(input.MenuSectionItemUpdatedEvent)
                ) && 
                (
                    this.MenuSectionItemDeletedEvent == input.MenuSectionItemDeletedEvent ||
                    this.MenuSectionItemDeletedEvent != null &&
                    this.MenuSectionItemDeletedEvent.SequenceEqual(input.MenuSectionItemDeletedEvent)
                ) && 
                (
                    this.MenuItemOptionSetCreatedEvent == input.MenuItemOptionSetCreatedEvent ||
                    this.MenuItemOptionSetCreatedEvent != null &&
                    this.MenuItemOptionSetCreatedEvent.SequenceEqual(input.MenuItemOptionSetCreatedEvent)
                ) && 
                (
                    this.MenuItemOptionSetUpdatedEvent == input.MenuItemOptionSetUpdatedEvent ||
                    this.MenuItemOptionSetUpdatedEvent != null &&
                    this.MenuItemOptionSetUpdatedEvent.SequenceEqual(input.MenuItemOptionSetUpdatedEvent)
                ) && 
                (
                    this.MenuItemOptionSetDeletedEvent == input.MenuItemOptionSetDeletedEvent ||
                    this.MenuItemOptionSetDeletedEvent != null &&
                    this.MenuItemOptionSetDeletedEvent.SequenceEqual(input.MenuItemOptionSetDeletedEvent)
                ) && 
                (
                    this.MenuItemOptionSetItemCreatedEvent == input.MenuItemOptionSetItemCreatedEvent ||
                    this.MenuItemOptionSetItemCreatedEvent != null &&
                    this.MenuItemOptionSetItemCreatedEvent.SequenceEqual(input.MenuItemOptionSetItemCreatedEvent)
                ) && 
                (
                    this.MenuItemOptionSetItemUpdatedEvent == input.MenuItemOptionSetItemUpdatedEvent ||
                    this.MenuItemOptionSetItemUpdatedEvent != null &&
                    this.MenuItemOptionSetItemUpdatedEvent.SequenceEqual(input.MenuItemOptionSetItemUpdatedEvent)
                ) && 
                (
                    this.MenuItemOptionSetItemDeletedEvent == input.MenuItemOptionSetItemDeletedEvent ||
                    this.MenuItemOptionSetItemDeletedEvent != null &&
                    this.MenuItemOptionSetItemDeletedEvent.SequenceEqual(input.MenuItemOptionSetItemDeletedEvent)
                ) && 
                (
                    this.MenuCheckpointCreatedEvent == input.MenuCheckpointCreatedEvent ||
                    this.MenuCheckpointCreatedEvent != null &&
                    this.MenuCheckpointCreatedEvent.SequenceEqual(input.MenuCheckpointCreatedEvent)
                ) && 
                (
                    this.StoreGroupCreatedEvent == input.StoreGroupCreatedEvent ||
                    this.StoreGroupCreatedEvent != null &&
                    this.StoreGroupCreatedEvent.SequenceEqual(input.StoreGroupCreatedEvent)
                ) && 
                (
                    this.StoreGroupUpdatedEvent == input.StoreGroupUpdatedEvent ||
                    this.StoreGroupUpdatedEvent != null &&
                    this.StoreGroupUpdatedEvent.SequenceEqual(input.StoreGroupUpdatedEvent)
                ) && 
                (
                    this.StoreGroupDeletedEvent == input.StoreGroupDeletedEvent ||
                    this.StoreGroupDeletedEvent != null &&
                    this.StoreGroupDeletedEvent.SequenceEqual(input.StoreGroupDeletedEvent)
                ) && 
                (
                    this.CustomerCreatedEvent == input.CustomerCreatedEvent ||
                    this.CustomerCreatedEvent != null &&
                    this.CustomerCreatedEvent.SequenceEqual(input.CustomerCreatedEvent)
                ) && 
                (
                    this.CustomerUpdatedEvent == input.CustomerUpdatedEvent ||
                    this.CustomerUpdatedEvent != null &&
                    this.CustomerUpdatedEvent.SequenceEqual(input.CustomerUpdatedEvent)
                ) && 
                (
                    this.CustomerConsentUpdatedEvent == input.CustomerConsentUpdatedEvent ||
                    this.CustomerConsentUpdatedEvent != null &&
                    this.CustomerConsentUpdatedEvent.SequenceEqual(input.CustomerConsentUpdatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionCreatedEvent == input.WebhookSubscriptionCreatedEvent ||
                    this.WebhookSubscriptionCreatedEvent != null &&
                    this.WebhookSubscriptionCreatedEvent.SequenceEqual(input.WebhookSubscriptionCreatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionUpdatedEvent == input.WebhookSubscriptionUpdatedEvent ||
                    this.WebhookSubscriptionUpdatedEvent != null &&
                    this.WebhookSubscriptionUpdatedEvent.SequenceEqual(input.WebhookSubscriptionUpdatedEvent)
                ) && 
                (
                    this.WebhookSubscriptionDeletedEvent == input.WebhookSubscriptionDeletedEvent ||
                    this.WebhookSubscriptionDeletedEvent != null &&
                    this.WebhookSubscriptionDeletedEvent.SequenceEqual(input.WebhookSubscriptionDeletedEvent)
                ) && 
                (
                    this.PrinterTurnedOnEvent == input.PrinterTurnedOnEvent ||
                    this.PrinterTurnedOnEvent != null &&
                    this.PrinterTurnedOnEvent.SequenceEqual(input.PrinterTurnedOnEvent)
                ) && 
                (
                    this.PrinterTurnedOffEvent == input.PrinterTurnedOffEvent ||
                    this.PrinterTurnedOffEvent != null &&
                    this.PrinterTurnedOffEvent.SequenceEqual(input.PrinterTurnedOffEvent)
                ) && 
                (
                    this.PrinterAssignedToStoreEvent == input.PrinterAssignedToStoreEvent ||
                    this.PrinterAssignedToStoreEvent != null &&
                    this.PrinterAssignedToStoreEvent.SequenceEqual(input.PrinterAssignedToStoreEvent)
                ) && 
                (
                    this.PrinterUnassignedFromStoreEvent == input.PrinterUnassignedFromStoreEvent ||
                    this.PrinterUnassignedFromStoreEvent != null &&
                    this.PrinterUnassignedFromStoreEvent.SequenceEqual(input.PrinterUnassignedFromStoreEvent)
                ) && 
                (
                    this.PhoneCallStartedEvent == input.PhoneCallStartedEvent ||
                    this.PhoneCallStartedEvent != null &&
                    this.PhoneCallStartedEvent.SequenceEqual(input.PhoneCallStartedEvent)
                ) && 
                (
                    this.PhoneCallEndedEvent == input.PhoneCallEndedEvent ||
                    this.PhoneCallEndedEvent != null &&
                    this.PhoneCallEndedEvent.SequenceEqual(input.PhoneCallEndedEvent)
                ) && 
                (
                    this.LoyaltyCampaignCreatedEvent == input.LoyaltyCampaignCreatedEvent ||
                    this.LoyaltyCampaignCreatedEvent != null &&
                    this.LoyaltyCampaignCreatedEvent.SequenceEqual(input.LoyaltyCampaignCreatedEvent)
                ) && 
                (
                    this.LoyaltyCampaignDeletedEvent == input.LoyaltyCampaignDeletedEvent ||
                    this.LoyaltyCampaignDeletedEvent != null &&
                    this.LoyaltyCampaignDeletedEvent.SequenceEqual(input.LoyaltyCampaignDeletedEvent)
                ) && 
                (
                    this.LoyaltyCampaignUpdatedEvent == input.LoyaltyCampaignUpdatedEvent ||
                    this.LoyaltyCampaignUpdatedEvent != null &&
                    this.LoyaltyCampaignUpdatedEvent.SequenceEqual(input.LoyaltyCampaignUpdatedEvent)
                ) && 
                (
                    this.RetentionCampaignCreatedEvent == input.RetentionCampaignCreatedEvent ||
                    this.RetentionCampaignCreatedEvent != null &&
                    this.RetentionCampaignCreatedEvent.SequenceEqual(input.RetentionCampaignCreatedEvent)
                ) && 
                (
                    this.RetentionCampaignDeletedEvent == input.RetentionCampaignDeletedEvent ||
                    this.RetentionCampaignDeletedEvent != null &&
                    this.RetentionCampaignDeletedEvent.SequenceEqual(input.RetentionCampaignDeletedEvent)
                ) && 
                (
                    this.RetentionCampaignUpdatedEvent == input.RetentionCampaignUpdatedEvent ||
                    this.RetentionCampaignUpdatedEvent != null &&
                    this.RetentionCampaignUpdatedEvent.SequenceEqual(input.RetentionCampaignUpdatedEvent)
                ) && 
                (
                    this.SmsReceivedEvent == input.SmsReceivedEvent ||
                    this.SmsReceivedEvent != null &&
                    this.SmsReceivedEvent.SequenceEqual(input.SmsReceivedEvent)
                ) && 
                (
                    this.UserLoginEvent == input.UserLoginEvent ||
                    this.UserLoginEvent != null &&
                    this.UserLoginEvent.SequenceEqual(input.UserLoginEvent)
                ) && 
                (
                    this.UserCreatedEvent == input.UserCreatedEvent ||
                    this.UserCreatedEvent != null &&
                    this.UserCreatedEvent.SequenceEqual(input.UserCreatedEvent)
                ) && 
                (
                    this.UserUpdatedEvent == input.UserUpdatedEvent ||
                    this.UserUpdatedEvent != null &&
                    this.UserUpdatedEvent.SequenceEqual(input.UserUpdatedEvent)
                ) && 
                (
                    this.UserDeletedEvent == input.UserDeletedEvent ||
                    this.UserDeletedEvent != null &&
                    this.UserDeletedEvent.SequenceEqual(input.UserDeletedEvent)
                ) && 
                (
                    this.UserCreatedPasswordEvent == input.UserCreatedPasswordEvent ||
                    this.UserCreatedPasswordEvent != null &&
                    this.UserCreatedPasswordEvent.SequenceEqual(input.UserCreatedPasswordEvent)
                ) && 
                (
                    this.UserAnsweredSignupQuestionsEvent == input.UserAnsweredSignupQuestionsEvent ||
                    this.UserAnsweredSignupQuestionsEvent != null &&
                    this.UserAnsweredSignupQuestionsEvent.SequenceEqual(input.UserAnsweredSignupQuestionsEvent)
                ) && 
                (
                    this.VoucherCreatedEvent == input.VoucherCreatedEvent ||
                    this.VoucherCreatedEvent != null &&
                    this.VoucherCreatedEvent.SequenceEqual(input.VoucherCreatedEvent)
                ) && 
                (
                    this.VoucherUpdatedEvent == input.VoucherUpdatedEvent ||
                    this.VoucherUpdatedEvent != null &&
                    this.VoucherUpdatedEvent.SequenceEqual(input.VoucherUpdatedEvent)
                ) && 
                (
                    this.VoucherDeletedEvent == input.VoucherDeletedEvent ||
                    this.VoucherDeletedEvent != null &&
                    this.VoucherDeletedEvent.SequenceEqual(input.VoucherDeletedEvent)
                ) && 
                (
                    this.TeammateInviteSentEvent == input.TeammateInviteSentEvent ||
                    this.TeammateInviteSentEvent != null &&
                    this.TeammateInviteSentEvent.SequenceEqual(input.TeammateInviteSentEvent)
                ) && 
                (
                    this.TeammateInviteAcceptedEvent == input.TeammateInviteAcceptedEvent ||
                    this.TeammateInviteAcceptedEvent != null &&
                    this.TeammateInviteAcceptedEvent.SequenceEqual(input.TeammateInviteAcceptedEvent)
                ) && 
                (
                    this.TeammateUpdatedEvent == input.TeammateUpdatedEvent ||
                    this.TeammateUpdatedEvent != null &&
                    this.TeammateUpdatedEvent.SequenceEqual(input.TeammateUpdatedEvent)
                ) && 
                (
                    this.TeammateDeletedEvent == input.TeammateDeletedEvent ||
                    this.TeammateDeletedEvent != null &&
                    this.TeammateDeletedEvent.SequenceEqual(input.TeammateDeletedEvent)
                ) && 
                (
                    this.BankAccountCreatedEvent == input.BankAccountCreatedEvent ||
                    this.BankAccountCreatedEvent != null &&
                    this.BankAccountCreatedEvent.SequenceEqual(input.BankAccountCreatedEvent)
                ) && 
                (
                    this.BankAccountUpdatedEvent == input.BankAccountUpdatedEvent ||
                    this.BankAccountUpdatedEvent != null &&
                    this.BankAccountUpdatedEvent.SequenceEqual(input.BankAccountUpdatedEvent)
                ) && 
                (
                    this.BankAccountDeletedEvent == input.BankAccountDeletedEvent ||
                    this.BankAccountDeletedEvent != null &&
                    this.BankAccountDeletedEvent.SequenceEqual(input.BankAccountDeletedEvent)
                ) && 
                (
                    this.HydraAssignedEvent == input.HydraAssignedEvent ||
                    this.HydraAssignedEvent != null &&
                    this.HydraAssignedEvent.SequenceEqual(input.HydraAssignedEvent)
                ) && 
                (
                    this.HydraRequestResetEvent == input.HydraRequestResetEvent ||
                    this.HydraRequestResetEvent != null &&
                    this.HydraRequestResetEvent.SequenceEqual(input.HydraRequestResetEvent)
                ) && 
                (
                    this.HydraStoreAssignedEvent == input.HydraStoreAssignedEvent ||
                    this.HydraStoreAssignedEvent != null &&
                    this.HydraStoreAssignedEvent.SequenceEqual(input.HydraStoreAssignedEvent)
                ) && 
                (
                    this.HydraStoreUnassignedEvent == input.HydraStoreUnassignedEvent ||
                    this.HydraStoreUnassignedEvent != null &&
                    this.HydraStoreUnassignedEvent.SequenceEqual(input.HydraStoreUnassignedEvent)
                ) && 
                (
                    this.HydraSettingChangedEvent == input.HydraSettingChangedEvent ||
                    this.HydraSettingChangedEvent != null &&
                    this.HydraSettingChangedEvent.SequenceEqual(input.HydraSettingChangedEvent)
                ) && 
                (
                    this.HydraUnAssignedEvent == input.HydraUnAssignedEvent ||
                    this.HydraUnAssignedEvent != null &&
                    this.HydraUnAssignedEvent.SequenceEqual(input.HydraUnAssignedEvent)
                ) && 
                (
                    this.HydraConnectionStatusChangedEvent == input.HydraConnectionStatusChangedEvent ||
                    this.HydraConnectionStatusChangedEvent != null &&
                    this.HydraConnectionStatusChangedEvent.SequenceEqual(input.HydraConnectionStatusChangedEvent)
                ) && 
                (
                    this.KioskBluetoothPairingModeEvent == input.KioskBluetoothPairingModeEvent ||
                    this.KioskBluetoothPairingModeEvent != null &&
                    this.KioskBluetoothPairingModeEvent.SequenceEqual(input.KioskBluetoothPairingModeEvent)
                ) && 
                (
                    this.KioskBluetoothUnpairingModeEvent == input.KioskBluetoothUnpairingModeEvent ||
                    this.KioskBluetoothUnpairingModeEvent != null &&
                    this.KioskBluetoothUnpairingModeEvent.SequenceEqual(input.KioskBluetoothUnpairingModeEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalUnpairedEvent == input.KioskBluetoothTerminalUnpairedEvent ||
                    this.KioskBluetoothTerminalUnpairedEvent != null &&
                    this.KioskBluetoothTerminalUnpairedEvent.SequenceEqual(input.KioskBluetoothTerminalUnpairedEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalUpdatedEvent == input.KioskBluetoothTerminalUpdatedEvent ||
                    this.KioskBluetoothTerminalUpdatedEvent != null &&
                    this.KioskBluetoothTerminalUpdatedEvent.SequenceEqual(input.KioskBluetoothTerminalUpdatedEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalInitiateUpdateCheckEvent == input.KioskBluetoothTerminalInitiateUpdateCheckEvent ||
                    this.KioskBluetoothTerminalInitiateUpdateCheckEvent != null &&
                    this.KioskBluetoothTerminalInitiateUpdateCheckEvent.SequenceEqual(input.KioskBluetoothTerminalInitiateUpdateCheckEvent)
                ) && 
                (
                    this.KioskBluetoothInstallUpdateInitiateEvent == input.KioskBluetoothInstallUpdateInitiateEvent ||
                    this.KioskBluetoothInstallUpdateInitiateEvent != null &&
                    this.KioskBluetoothInstallUpdateInitiateEvent.SequenceEqual(input.KioskBluetoothInstallUpdateInitiateEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalCancelUpdateEvent == input.KioskBluetoothTerminalCancelUpdateEvent ||
                    this.KioskBluetoothTerminalCancelUpdateEvent != null &&
                    this.KioskBluetoothTerminalCancelUpdateEvent.SequenceEqual(input.KioskBluetoothTerminalCancelUpdateEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalFirmwareVersionStatusEvent == input.KioskBluetoothTerminalFirmwareVersionStatusEvent ||
                    this.KioskBluetoothTerminalFirmwareVersionStatusEvent != null &&
                    this.KioskBluetoothTerminalFirmwareVersionStatusEvent.SequenceEqual(input.KioskBluetoothTerminalFirmwareVersionStatusEvent)
                ) && 
                (
                    this.KioskBluetoothTerminalInstallationStatusEvent == input.KioskBluetoothTerminalInstallationStatusEvent ||
                    this.KioskBluetoothTerminalInstallationStatusEvent != null &&
                    this.KioskBluetoothTerminalInstallationStatusEvent.SequenceEqual(input.KioskBluetoothTerminalInstallationStatusEvent)
                ) && 
                (
                    this.PushNotificationScheduledEvent == input.PushNotificationScheduledEvent ||
                    this.PushNotificationScheduledEvent != null &&
                    this.PushNotificationScheduledEvent.SequenceEqual(input.PushNotificationScheduledEvent)
                ) && 
                (
                    this.PushNotificationSentEvent == input.PushNotificationSentEvent ||
                    this.PushNotificationSentEvent != null &&
                    this.PushNotificationSentEvent.SequenceEqual(input.PushNotificationSentEvent)
                ) && 
                (
                    this.PushNotificationDeletedEvent == input.PushNotificationDeletedEvent ||
                    this.PushNotificationDeletedEvent != null &&
                    this.PushNotificationDeletedEvent.SequenceEqual(input.PushNotificationDeletedEvent)
                ) && 
                (
                    this.DnsVerifiedEvent == input.DnsVerifiedEvent ||
                    this.DnsVerifiedEvent != null &&
                    this.DnsVerifiedEvent.SequenceEqual(input.DnsVerifiedEvent)
                ) && 
                (
                    this.CertificateCreatedEvent == input.CertificateCreatedEvent ||
                    this.CertificateCreatedEvent != null &&
                    this.CertificateCreatedEvent.SequenceEqual(input.CertificateCreatedEvent)
                ) && 
                (
                    this.CertificateRenewedEvent == input.CertificateRenewedEvent ||
                    this.CertificateRenewedEvent != null &&
                    this.CertificateRenewedEvent.SequenceEqual(input.CertificateRenewedEvent)
                ) && 
                (
                    this.WebsiteVanityUrlUpdatedEvent == input.WebsiteVanityUrlUpdatedEvent ||
                    this.WebsiteVanityUrlUpdatedEvent != null &&
                    this.WebsiteVanityUrlUpdatedEvent.SequenceEqual(input.WebsiteVanityUrlUpdatedEvent)
                ) && 
                (
                    this.WebsiteUpdatedEvent == input.WebsiteUpdatedEvent ||
                    this.WebsiteUpdatedEvent != null &&
                    this.WebsiteUpdatedEvent.SequenceEqual(input.WebsiteUpdatedEvent)
                ) && 
                (
                    this.OrderCapacityUpdatedEvent == input.OrderCapacityUpdatedEvent ||
                    this.OrderCapacityUpdatedEvent != null &&
                    this.OrderCapacityUpdatedEvent.SequenceEqual(input.OrderCapacityUpdatedEvent)
                ) && 
                (
                    this.ExternalStoreEvent == input.ExternalStoreEvent ||
                    this.ExternalStoreEvent != null &&
                    this.ExternalStoreEvent.SequenceEqual(input.ExternalStoreEvent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppCreatedEvent != null)
                    hashCode = hashCode * 59 + this.AppCreatedEvent.GetHashCode();
                if (this.AppUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.AppUpdatedEvent.GetHashCode();
                if (this.AnalyticsClientEvent != null)
                    hashCode = hashCode * 59 + this.AnalyticsClientEvent.GetHashCode();
                if (this.OrderAcceptedEvent != null)
                    hashCode = hashCode * 59 + this.OrderAcceptedEvent.GetHashCode();
                if (this.OrderDispatchedEvent != null)
                    hashCode = hashCode * 59 + this.OrderDispatchedEvent.GetHashCode();
                if (this.OrderCustomerTrackingCreatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderCustomerTrackingCreatedEvent.GetHashCode();
                if (this.OrderDeliveryTrackingStatusUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderDeliveryTrackingStatusUpdatedEvent.GetHashCode();
                if (this.OrderCreatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderCreatedEvent.GetHashCode();
                if (this.OrderRatingUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRatingUpdatedEvent.GetHashCode();
                if (this.OrderRefundedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRefundedEvent.GetHashCode();
                if (this.OrderRejectedEvent != null)
                    hashCode = hashCode * 59 + this.OrderRejectedEvent.GetHashCode();
                if (this.OrderTipUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderTipUpdatedEvent.GetHashCode();
                if (this.OrderTerminalNotifications != null)
                    hashCode = hashCode * 59 + this.OrderTerminalNotifications.GetHashCode();
                if (this.StoreCreatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreCreatedEvent.GetHashCode();
                if (this.StoreDeletedEvent != null)
                    hashCode = hashCode * 59 + this.StoreDeletedEvent.GetHashCode();
                if (this.StoreAddressUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreAddressUpdatedEvent.GetHashCode();
                if (this.StoreKioskSettingUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreKioskSettingUpdatedEvent.GetHashCode();
                if (this.DeliveryZoneCreatedEvent != null)
                    hashCode = hashCode * 59 + this.DeliveryZoneCreatedEvent.GetHashCode();
                if (this.DeliveryZoneUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.DeliveryZoneUpdatedEvent.GetHashCode();
                if (this.DeliveryZoneDeletedEvent != null)
                    hashCode = hashCode * 59 + this.DeliveryZoneDeletedEvent.GetHashCode();
                if (this.StoreOpeningHoursUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreOpeningHoursUpdatedEvent.GetHashCode();
                if (this.StoreMenuAssignedEvent != null)
                    hashCode = hashCode * 59 + this.StoreMenuAssignedEvent.GetHashCode();
                if (this.StoreBusinessHoursOverrideCreatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreBusinessHoursOverrideCreatedEvent.GetHashCode();
                if (this.StoreBusinessHoursOverrideDeletedEvent != null)
                    hashCode = hashCode * 59 + this.StoreBusinessHoursOverrideDeletedEvent.GetHashCode();
                if (this.StoreArchivedEvent != null)
                    hashCode = hashCode * 59 + this.StoreArchivedEvent.GetHashCode();
                if (this.StoreUnarchivedEvent != null)
                    hashCode = hashCode * 59 + this.StoreUnarchivedEvent.GetHashCode();
                if (this.StorePublishedEvent != null)
                    hashCode = hashCode * 59 + this.StorePublishedEvent.GetHashCode();
                if (this.StoreUnpublishedEvent != null)
                    hashCode = hashCode * 59 + this.StoreUnpublishedEvent.GetHashCode();
                if (this.StoreUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreUpdatedEvent.GetHashCode();
                if (this.StorePreOrderConfigUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StorePreOrderConfigUpdatedEvent.GetHashCode();
                if (this.StoreLogoCreatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreLogoCreatedEvent.GetHashCode();
                if (this.StoreLogoUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreLogoUpdatedEvent.GetHashCode();
                if (this.StoreLogoDeletedEvent != null)
                    hashCode = hashCode * 59 + this.StoreLogoDeletedEvent.GetHashCode();
                if (this.MenuCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuCreatedEvent.GetHashCode();
                if (this.MenuUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuUpdatedEvent.GetHashCode();
                if (this.MenuUploadedEvent != null)
                    hashCode = hashCode * 59 + this.MenuUploadedEvent.GetHashCode();
                if (this.MenuBulkEditEvent != null)
                    hashCode = hashCode * 59 + this.MenuBulkEditEvent.GetHashCode();
                if (this.MenuSectionCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionCreatedEvent.GetHashCode();
                if (this.MenuSectionUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionUpdatedEvent.GetHashCode();
                if (this.MenuSectionDeletedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionDeletedEvent.GetHashCode();
                if (this.MenuSectionItemCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionItemCreatedEvent.GetHashCode();
                if (this.MenuSectionItemUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionItemUpdatedEvent.GetHashCode();
                if (this.MenuSectionItemDeletedEvent != null)
                    hashCode = hashCode * 59 + this.MenuSectionItemDeletedEvent.GetHashCode();
                if (this.MenuItemOptionSetCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetCreatedEvent.GetHashCode();
                if (this.MenuItemOptionSetUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetUpdatedEvent.GetHashCode();
                if (this.MenuItemOptionSetDeletedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetDeletedEvent.GetHashCode();
                if (this.MenuItemOptionSetItemCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetItemCreatedEvent.GetHashCode();
                if (this.MenuItemOptionSetItemUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetItemUpdatedEvent.GetHashCode();
                if (this.MenuItemOptionSetItemDeletedEvent != null)
                    hashCode = hashCode * 59 + this.MenuItemOptionSetItemDeletedEvent.GetHashCode();
                if (this.MenuCheckpointCreatedEvent != null)
                    hashCode = hashCode * 59 + this.MenuCheckpointCreatedEvent.GetHashCode();
                if (this.StoreGroupCreatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreGroupCreatedEvent.GetHashCode();
                if (this.StoreGroupUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.StoreGroupUpdatedEvent.GetHashCode();
                if (this.StoreGroupDeletedEvent != null)
                    hashCode = hashCode * 59 + this.StoreGroupDeletedEvent.GetHashCode();
                if (this.CustomerCreatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerCreatedEvent.GetHashCode();
                if (this.CustomerUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerUpdatedEvent.GetHashCode();
                if (this.CustomerConsentUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.CustomerConsentUpdatedEvent.GetHashCode();
                if (this.WebhookSubscriptionCreatedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionCreatedEvent.GetHashCode();
                if (this.WebhookSubscriptionUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionUpdatedEvent.GetHashCode();
                if (this.WebhookSubscriptionDeletedEvent != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionDeletedEvent.GetHashCode();
                if (this.PrinterTurnedOnEvent != null)
                    hashCode = hashCode * 59 + this.PrinterTurnedOnEvent.GetHashCode();
                if (this.PrinterTurnedOffEvent != null)
                    hashCode = hashCode * 59 + this.PrinterTurnedOffEvent.GetHashCode();
                if (this.PrinterAssignedToStoreEvent != null)
                    hashCode = hashCode * 59 + this.PrinterAssignedToStoreEvent.GetHashCode();
                if (this.PrinterUnassignedFromStoreEvent != null)
                    hashCode = hashCode * 59 + this.PrinterUnassignedFromStoreEvent.GetHashCode();
                if (this.PhoneCallStartedEvent != null)
                    hashCode = hashCode * 59 + this.PhoneCallStartedEvent.GetHashCode();
                if (this.PhoneCallEndedEvent != null)
                    hashCode = hashCode * 59 + this.PhoneCallEndedEvent.GetHashCode();
                if (this.LoyaltyCampaignCreatedEvent != null)
                    hashCode = hashCode * 59 + this.LoyaltyCampaignCreatedEvent.GetHashCode();
                if (this.LoyaltyCampaignDeletedEvent != null)
                    hashCode = hashCode * 59 + this.LoyaltyCampaignDeletedEvent.GetHashCode();
                if (this.LoyaltyCampaignUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.LoyaltyCampaignUpdatedEvent.GetHashCode();
                if (this.RetentionCampaignCreatedEvent != null)
                    hashCode = hashCode * 59 + this.RetentionCampaignCreatedEvent.GetHashCode();
                if (this.RetentionCampaignDeletedEvent != null)
                    hashCode = hashCode * 59 + this.RetentionCampaignDeletedEvent.GetHashCode();
                if (this.RetentionCampaignUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.RetentionCampaignUpdatedEvent.GetHashCode();
                if (this.SmsReceivedEvent != null)
                    hashCode = hashCode * 59 + this.SmsReceivedEvent.GetHashCode();
                if (this.UserLoginEvent != null)
                    hashCode = hashCode * 59 + this.UserLoginEvent.GetHashCode();
                if (this.UserCreatedEvent != null)
                    hashCode = hashCode * 59 + this.UserCreatedEvent.GetHashCode();
                if (this.UserUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.UserUpdatedEvent.GetHashCode();
                if (this.UserDeletedEvent != null)
                    hashCode = hashCode * 59 + this.UserDeletedEvent.GetHashCode();
                if (this.UserCreatedPasswordEvent != null)
                    hashCode = hashCode * 59 + this.UserCreatedPasswordEvent.GetHashCode();
                if (this.UserAnsweredSignupQuestionsEvent != null)
                    hashCode = hashCode * 59 + this.UserAnsweredSignupQuestionsEvent.GetHashCode();
                if (this.VoucherCreatedEvent != null)
                    hashCode = hashCode * 59 + this.VoucherCreatedEvent.GetHashCode();
                if (this.VoucherUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.VoucherUpdatedEvent.GetHashCode();
                if (this.VoucherDeletedEvent != null)
                    hashCode = hashCode * 59 + this.VoucherDeletedEvent.GetHashCode();
                if (this.TeammateInviteSentEvent != null)
                    hashCode = hashCode * 59 + this.TeammateInviteSentEvent.GetHashCode();
                if (this.TeammateInviteAcceptedEvent != null)
                    hashCode = hashCode * 59 + this.TeammateInviteAcceptedEvent.GetHashCode();
                if (this.TeammateUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.TeammateUpdatedEvent.GetHashCode();
                if (this.TeammateDeletedEvent != null)
                    hashCode = hashCode * 59 + this.TeammateDeletedEvent.GetHashCode();
                if (this.BankAccountCreatedEvent != null)
                    hashCode = hashCode * 59 + this.BankAccountCreatedEvent.GetHashCode();
                if (this.BankAccountUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.BankAccountUpdatedEvent.GetHashCode();
                if (this.BankAccountDeletedEvent != null)
                    hashCode = hashCode * 59 + this.BankAccountDeletedEvent.GetHashCode();
                if (this.HydraAssignedEvent != null)
                    hashCode = hashCode * 59 + this.HydraAssignedEvent.GetHashCode();
                if (this.HydraRequestResetEvent != null)
                    hashCode = hashCode * 59 + this.HydraRequestResetEvent.GetHashCode();
                if (this.HydraStoreAssignedEvent != null)
                    hashCode = hashCode * 59 + this.HydraStoreAssignedEvent.GetHashCode();
                if (this.HydraStoreUnassignedEvent != null)
                    hashCode = hashCode * 59 + this.HydraStoreUnassignedEvent.GetHashCode();
                if (this.HydraSettingChangedEvent != null)
                    hashCode = hashCode * 59 + this.HydraSettingChangedEvent.GetHashCode();
                if (this.HydraUnAssignedEvent != null)
                    hashCode = hashCode * 59 + this.HydraUnAssignedEvent.GetHashCode();
                if (this.HydraConnectionStatusChangedEvent != null)
                    hashCode = hashCode * 59 + this.HydraConnectionStatusChangedEvent.GetHashCode();
                if (this.KioskBluetoothPairingModeEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothPairingModeEvent.GetHashCode();
                if (this.KioskBluetoothUnpairingModeEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothUnpairingModeEvent.GetHashCode();
                if (this.KioskBluetoothTerminalUnpairedEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalUnpairedEvent.GetHashCode();
                if (this.KioskBluetoothTerminalUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalUpdatedEvent.GetHashCode();
                if (this.KioskBluetoothTerminalInitiateUpdateCheckEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalInitiateUpdateCheckEvent.GetHashCode();
                if (this.KioskBluetoothInstallUpdateInitiateEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothInstallUpdateInitiateEvent.GetHashCode();
                if (this.KioskBluetoothTerminalCancelUpdateEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalCancelUpdateEvent.GetHashCode();
                if (this.KioskBluetoothTerminalFirmwareVersionStatusEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalFirmwareVersionStatusEvent.GetHashCode();
                if (this.KioskBluetoothTerminalInstallationStatusEvent != null)
                    hashCode = hashCode * 59 + this.KioskBluetoothTerminalInstallationStatusEvent.GetHashCode();
                if (this.PushNotificationScheduledEvent != null)
                    hashCode = hashCode * 59 + this.PushNotificationScheduledEvent.GetHashCode();
                if (this.PushNotificationSentEvent != null)
                    hashCode = hashCode * 59 + this.PushNotificationSentEvent.GetHashCode();
                if (this.PushNotificationDeletedEvent != null)
                    hashCode = hashCode * 59 + this.PushNotificationDeletedEvent.GetHashCode();
                if (this.DnsVerifiedEvent != null)
                    hashCode = hashCode * 59 + this.DnsVerifiedEvent.GetHashCode();
                if (this.CertificateCreatedEvent != null)
                    hashCode = hashCode * 59 + this.CertificateCreatedEvent.GetHashCode();
                if (this.CertificateRenewedEvent != null)
                    hashCode = hashCode * 59 + this.CertificateRenewedEvent.GetHashCode();
                if (this.WebsiteVanityUrlUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.WebsiteVanityUrlUpdatedEvent.GetHashCode();
                if (this.WebsiteUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.WebsiteUpdatedEvent.GetHashCode();
                if (this.OrderCapacityUpdatedEvent != null)
                    hashCode = hashCode * 59 + this.OrderCapacityUpdatedEvent.GetHashCode();
                if (this.ExternalStoreEvent != null)
                    hashCode = hashCode * 59 + this.ExternalStoreEvent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

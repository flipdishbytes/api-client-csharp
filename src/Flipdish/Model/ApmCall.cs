/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Describes a single call to the APM system
    /// </summary>
    [DataContract]
    public partial class ApmCall :  IEquatable<ApmCall>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApmCall" /> class.
        /// </summary>
        /// <param name="TimeOfCall">Time of the call.</param>
        /// <param name="StoreName">Name of the store that the call was TO.</param>
        /// <param name="CallerName">Name of the caller.</param>
        /// <param name="CallerNumber">Phone number of the caller.</param>
        /// <param name="CallLengthInSeconds">The amount of time the call took.</param>
        public ApmCall(DateTime? TimeOfCall = default(DateTime?), string StoreName = default(string), string CallerName = default(string), string CallerNumber = default(string), int? CallLengthInSeconds = default(int?))
        {
            this.TimeOfCall = TimeOfCall;
            this.StoreName = StoreName;
            this.CallerName = CallerName;
            this.CallerNumber = CallerNumber;
            this.CallLengthInSeconds = CallLengthInSeconds;
        }
        
        /// <summary>
        /// Time of the call
        /// </summary>
        /// <value>Time of the call</value>
        [DataMember(Name="TimeOfCall", EmitDefaultValue=false)]
        public DateTime? TimeOfCall { get; set; }

        /// <summary>
        /// Name of the store that the call was TO
        /// </summary>
        /// <value>Name of the store that the call was TO</value>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Name of the caller
        /// </summary>
        /// <value>Name of the caller</value>
        [DataMember(Name="CallerName", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// Phone number of the caller
        /// </summary>
        /// <value>Phone number of the caller</value>
        [DataMember(Name="CallerNumber", EmitDefaultValue=false)]
        public string CallerNumber { get; set; }

        /// <summary>
        /// The amount of time the call took
        /// </summary>
        /// <value>The amount of time the call took</value>
        [DataMember(Name="CallLengthInSeconds", EmitDefaultValue=false)]
        public int? CallLengthInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApmCall {\n");
            sb.Append("  TimeOfCall: ").Append(TimeOfCall).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  CallerNumber: ").Append(CallerNumber).Append("\n");
            sb.Append("  CallLengthInSeconds: ").Append(CallLengthInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApmCall);
        }

        /// <summary>
        /// Returns true if ApmCall instances are equal
        /// </summary>
        /// <param name="input">Instance of ApmCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApmCall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeOfCall == input.TimeOfCall ||
                    (this.TimeOfCall != null &&
                    this.TimeOfCall.Equals(input.TimeOfCall))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.CallerNumber == input.CallerNumber ||
                    (this.CallerNumber != null &&
                    this.CallerNumber.Equals(input.CallerNumber))
                ) && 
                (
                    this.CallLengthInSeconds == input.CallLengthInSeconds ||
                    (this.CallLengthInSeconds != null &&
                    this.CallLengthInSeconds.Equals(input.CallLengthInSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeOfCall != null)
                    hashCode = hashCode * 59 + this.TimeOfCall.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.CallerNumber != null)
                    hashCode = hashCode * 59 + this.CallerNumber.GetHashCode();
                if (this.CallLengthInSeconds != null)
                    hashCode = hashCode * 59 + this.CallLengthInSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

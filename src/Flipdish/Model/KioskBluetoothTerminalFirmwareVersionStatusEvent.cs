/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Kiosk Stripe Terminal Update info received event
    /// </summary>
    [DataContract]
    public partial class KioskBluetoothTerminalFirmwareVersionStatusEvent :  IEquatable<KioskBluetoothTerminalFirmwareVersionStatusEvent>
    {
        /// <summary>
        /// ETA to install the update
        /// </summary>
        /// <value>ETA to install the update</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateTimeEstimateEnum
        {
            
            /// <summary>
            /// Enum LessThanOneMinute for value: LessThanOneMinute
            /// </summary>
            [EnumMember(Value = "LessThanOneMinute")]
            LessThanOneMinute = 1,
            
            /// <summary>
            /// Enum OneToTwoMinutes for value: OneToTwoMinutes
            /// </summary>
            [EnumMember(Value = "OneToTwoMinutes")]
            OneToTwoMinutes = 2,
            
            /// <summary>
            /// Enum TwoToFiveMinutes for value: TwoToFiveMinutes
            /// </summary>
            [EnumMember(Value = "TwoToFiveMinutes")]
            TwoToFiveMinutes = 3,
            
            /// <summary>
            /// Enum FiveToFifteenMinutes for value: FiveToFifteenMinutes
            /// </summary>
            [EnumMember(Value = "FiveToFifteenMinutes")]
            FiveToFifteenMinutes = 4
        }

        /// <summary>
        /// ETA to install the update
        /// </summary>
        /// <value>ETA to install the update</value>
        [DataMember(Name="UpdateTimeEstimate", EmitDefaultValue=false)]
        public UpdateTimeEstimateEnum? UpdateTimeEstimate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KioskBluetoothTerminalFirmwareVersionStatusEvent" /> class.
        /// </summary>
        /// <param name="deviceId">Device Id of the Kiosk.</param>
        /// <param name="serialNumber">Serial Number of the device.</param>
        /// <param name="hasFirmwareUpdate">Indicates if Payment Terminal has Firmware Update.</param>
        /// <param name="hasConfigUpdate">Indicates if Payment Terminal has Config Update.</param>
        /// <param name="hasKeyUpdate">Indicates if Payment Terminal has Key Update.</param>
        /// <param name="updateTimeEstimate">ETA to install the update.</param>
        /// <param name="userEventInfo">User who made the changes.</param>
        /// <param name="eventName">The event name.</param>
        /// <param name="flipdishEventId">The identitfier of the event.</param>
        /// <param name="createTime">The time of creation of the event.</param>
        /// <param name="position">Position.</param>
        /// <param name="appId">App id.</param>
        /// <param name="ipAddress">Ip Address.</param>
        public KioskBluetoothTerminalFirmwareVersionStatusEvent(string deviceId = default(string), string serialNumber = default(string), bool? hasFirmwareUpdate = default(bool?), bool? hasConfigUpdate = default(bool?), bool? hasKeyUpdate = default(bool?), UpdateTimeEstimateEnum? updateTimeEstimate = default(UpdateTimeEstimateEnum?), UserEventInfo userEventInfo = default(UserEventInfo), string eventName = default(string), Guid? flipdishEventId = default(Guid?), DateTime? createTime = default(DateTime?), int? position = default(int?), string appId = default(string), string ipAddress = default(string))
        {
            this.DeviceId = deviceId;
            this.SerialNumber = serialNumber;
            this.HasFirmwareUpdate = hasFirmwareUpdate;
            this.HasConfigUpdate = hasConfigUpdate;
            this.HasKeyUpdate = hasKeyUpdate;
            this.UpdateTimeEstimate = updateTimeEstimate;
            this.UserEventInfo = userEventInfo;
            this.EventName = eventName;
            this.FlipdishEventId = flipdishEventId;
            this.CreateTime = createTime;
            this.Position = position;
            this.AppId = appId;
            this.IpAddress = ipAddress;
        }
        
        /// <summary>
        /// Device Id of the Kiosk
        /// </summary>
        /// <value>Device Id of the Kiosk</value>
        [DataMember(Name="DeviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Serial Number of the device
        /// </summary>
        /// <value>Serial Number of the device</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Indicates if Payment Terminal has Firmware Update
        /// </summary>
        /// <value>Indicates if Payment Terminal has Firmware Update</value>
        [DataMember(Name="HasFirmwareUpdate", EmitDefaultValue=false)]
        public bool? HasFirmwareUpdate { get; set; }

        /// <summary>
        /// Indicates if Payment Terminal has Config Update
        /// </summary>
        /// <value>Indicates if Payment Terminal has Config Update</value>
        [DataMember(Name="HasConfigUpdate", EmitDefaultValue=false)]
        public bool? HasConfigUpdate { get; set; }

        /// <summary>
        /// Indicates if Payment Terminal has Key Update
        /// </summary>
        /// <value>Indicates if Payment Terminal has Key Update</value>
        [DataMember(Name="HasKeyUpdate", EmitDefaultValue=false)]
        public bool? HasKeyUpdate { get; set; }


        /// <summary>
        /// User who made the changes
        /// </summary>
        /// <value>User who made the changes</value>
        [DataMember(Name="UserEventInfo", EmitDefaultValue=false)]
        public UserEventInfo UserEventInfo { get; set; }

        /// <summary>
        /// The event name
        /// </summary>
        /// <value>The event name</value>
        [DataMember(Name="EventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// The identitfier of the event
        /// </summary>
        /// <value>The identitfier of the event</value>
        [DataMember(Name="FlipdishEventId", EmitDefaultValue=false)]
        public Guid? FlipdishEventId { get; set; }

        /// <summary>
        /// The time of creation of the event
        /// </summary>
        /// <value>The time of creation of the event</value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; set; }

        /// <summary>
        /// Position
        /// </summary>
        /// <value>Position</value>
        [DataMember(Name="Position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// App id
        /// </summary>
        /// <value>App id</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Ip Address
        /// </summary>
        /// <value>Ip Address</value>
        [DataMember(Name="IpAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KioskBluetoothTerminalFirmwareVersionStatusEvent {\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  HasFirmwareUpdate: ").Append(HasFirmwareUpdate).Append("\n");
            sb.Append("  HasConfigUpdate: ").Append(HasConfigUpdate).Append("\n");
            sb.Append("  HasKeyUpdate: ").Append(HasKeyUpdate).Append("\n");
            sb.Append("  UpdateTimeEstimate: ").Append(UpdateTimeEstimate).Append("\n");
            sb.Append("  UserEventInfo: ").Append(UserEventInfo).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FlipdishEventId: ").Append(FlipdishEventId).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KioskBluetoothTerminalFirmwareVersionStatusEvent);
        }

        /// <summary>
        /// Returns true if KioskBluetoothTerminalFirmwareVersionStatusEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of KioskBluetoothTerminalFirmwareVersionStatusEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KioskBluetoothTerminalFirmwareVersionStatusEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.HasFirmwareUpdate == input.HasFirmwareUpdate ||
                    (this.HasFirmwareUpdate != null &&
                    this.HasFirmwareUpdate.Equals(input.HasFirmwareUpdate))
                ) && 
                (
                    this.HasConfigUpdate == input.HasConfigUpdate ||
                    (this.HasConfigUpdate != null &&
                    this.HasConfigUpdate.Equals(input.HasConfigUpdate))
                ) && 
                (
                    this.HasKeyUpdate == input.HasKeyUpdate ||
                    (this.HasKeyUpdate != null &&
                    this.HasKeyUpdate.Equals(input.HasKeyUpdate))
                ) && 
                (
                    this.UpdateTimeEstimate == input.UpdateTimeEstimate ||
                    (this.UpdateTimeEstimate != null &&
                    this.UpdateTimeEstimate.Equals(input.UpdateTimeEstimate))
                ) && 
                (
                    this.UserEventInfo == input.UserEventInfo ||
                    (this.UserEventInfo != null &&
                    this.UserEventInfo.Equals(input.UserEventInfo))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FlipdishEventId == input.FlipdishEventId ||
                    (this.FlipdishEventId != null &&
                    this.FlipdishEventId.Equals(input.FlipdishEventId))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.HasFirmwareUpdate != null)
                    hashCode = hashCode * 59 + this.HasFirmwareUpdate.GetHashCode();
                if (this.HasConfigUpdate != null)
                    hashCode = hashCode * 59 + this.HasConfigUpdate.GetHashCode();
                if (this.HasKeyUpdate != null)
                    hashCode = hashCode * 59 + this.HasKeyUpdate.GetHashCode();
                if (this.UpdateTimeEstimate != null)
                    hashCode = hashCode * 59 + this.UpdateTimeEstimate.GetHashCode();
                if (this.UserEventInfo != null)
                    hashCode = hashCode * 59 + this.UserEventInfo.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FlipdishEventId != null)
                    hashCode = hashCode * 59 + this.FlipdishEventId.GetHashCode();
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                return hashCode;
            }
        }
    }

}

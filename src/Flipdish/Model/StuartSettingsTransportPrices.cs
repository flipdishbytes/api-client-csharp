/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// If the order exceeds are certain amount this configuration will determine a new vehicle type
    /// </summary>
    [DataContract]
    public partial class StuartSettingsTransportPrices :  IEquatable<StuartSettingsTransportPrices>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StuartSettingsTransportPrices" /> class.
        /// </summary>
        /// <param name="bike">bike.</param>
        /// <param name="cargobike">cargobike.</param>
        /// <param name="cargobikexl">cargobikexl.</param>
        /// <param name="motorbike">motorbike.</param>
        /// <param name="motorbikexl">motorbikexl.</param>
        /// <param name="car">car.</param>
        /// <param name="van">van.</param>
        public StuartSettingsTransportPrices(double? bike = default(double?), double? cargobike = default(double?), double? cargobikexl = default(double?), double? motorbike = default(double?), double? motorbikexl = default(double?), double? car = default(double?), double? van = default(double?))
        {
            this.Bike = bike;
            this.Cargobike = cargobike;
            this.Cargobikexl = cargobikexl;
            this.Motorbike = motorbike;
            this.Motorbikexl = motorbikexl;
            this.Car = car;
            this.Van = van;
        }
        
        /// <summary>
        /// Gets or Sets Bike
        /// </summary>
        [DataMember(Name="Bike", EmitDefaultValue=false)]
        public double? Bike { get; set; }

        /// <summary>
        /// Gets or Sets Cargobike
        /// </summary>
        [DataMember(Name="Cargobike", EmitDefaultValue=false)]
        public double? Cargobike { get; set; }

        /// <summary>
        /// Gets or Sets Cargobikexl
        /// </summary>
        [DataMember(Name="Cargobikexl", EmitDefaultValue=false)]
        public double? Cargobikexl { get; set; }

        /// <summary>
        /// Gets or Sets Motorbike
        /// </summary>
        [DataMember(Name="Motorbike", EmitDefaultValue=false)]
        public double? Motorbike { get; set; }

        /// <summary>
        /// Gets or Sets Motorbikexl
        /// </summary>
        [DataMember(Name="Motorbikexl", EmitDefaultValue=false)]
        public double? Motorbikexl { get; set; }

        /// <summary>
        /// Gets or Sets Car
        /// </summary>
        [DataMember(Name="Car", EmitDefaultValue=false)]
        public double? Car { get; set; }

        /// <summary>
        /// Gets or Sets Van
        /// </summary>
        [DataMember(Name="Van", EmitDefaultValue=false)]
        public double? Van { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StuartSettingsTransportPrices {\n");
            sb.Append("  Bike: ").Append(Bike).Append("\n");
            sb.Append("  Cargobike: ").Append(Cargobike).Append("\n");
            sb.Append("  Cargobikexl: ").Append(Cargobikexl).Append("\n");
            sb.Append("  Motorbike: ").Append(Motorbike).Append("\n");
            sb.Append("  Motorbikexl: ").Append(Motorbikexl).Append("\n");
            sb.Append("  Car: ").Append(Car).Append("\n");
            sb.Append("  Van: ").Append(Van).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StuartSettingsTransportPrices);
        }

        /// <summary>
        /// Returns true if StuartSettingsTransportPrices instances are equal
        /// </summary>
        /// <param name="input">Instance of StuartSettingsTransportPrices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StuartSettingsTransportPrices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bike == input.Bike ||
                    (this.Bike != null &&
                    this.Bike.Equals(input.Bike))
                ) && 
                (
                    this.Cargobike == input.Cargobike ||
                    (this.Cargobike != null &&
                    this.Cargobike.Equals(input.Cargobike))
                ) && 
                (
                    this.Cargobikexl == input.Cargobikexl ||
                    (this.Cargobikexl != null &&
                    this.Cargobikexl.Equals(input.Cargobikexl))
                ) && 
                (
                    this.Motorbike == input.Motorbike ||
                    (this.Motorbike != null &&
                    this.Motorbike.Equals(input.Motorbike))
                ) && 
                (
                    this.Motorbikexl == input.Motorbikexl ||
                    (this.Motorbikexl != null &&
                    this.Motorbikexl.Equals(input.Motorbikexl))
                ) && 
                (
                    this.Car == input.Car ||
                    (this.Car != null &&
                    this.Car.Equals(input.Car))
                ) && 
                (
                    this.Van == input.Van ||
                    (this.Van != null &&
                    this.Van.Equals(input.Van))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bike != null)
                    hashCode = hashCode * 59 + this.Bike.GetHashCode();
                if (this.Cargobike != null)
                    hashCode = hashCode * 59 + this.Cargobike.GetHashCode();
                if (this.Cargobikexl != null)
                    hashCode = hashCode * 59 + this.Cargobikexl.GetHashCode();
                if (this.Motorbike != null)
                    hashCode = hashCode * 59 + this.Motorbike.GetHashCode();
                if (this.Motorbikexl != null)
                    hashCode = hashCode * 59 + this.Motorbikexl.GetHashCode();
                if (this.Car != null)
                    hashCode = hashCode * 59 + this.Car.GetHashCode();
                if (this.Van != null)
                    hashCode = hashCode * 59 + this.Van.GetHashCode();
                return hashCode;
            }
        }
    }

}

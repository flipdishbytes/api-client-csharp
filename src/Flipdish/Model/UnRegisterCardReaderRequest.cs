/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Un-Register card reader request
    /// </summary>
    [DataContract]
    public partial class UnRegisterCardReaderRequest :  IEquatable<UnRegisterCardReaderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnRegisterCardReaderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnRegisterCardReaderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnRegisterCardReaderRequest" /> class.
        /// </summary>
        /// <param name="readerId">Device card readerid (required).</param>
        /// <param name="kioskDeviceId">The kiosk device id (required).</param>
        public UnRegisterCardReaderRequest(string readerId = default(string), string kioskDeviceId = default(string))
        {
            // to ensure "readerId" is required (not null)
            if (readerId == null)
            {
                throw new InvalidDataException("readerId is a required property for UnRegisterCardReaderRequest and cannot be null");
            }
            else
            {
                this.ReaderId = readerId;
            }
            // to ensure "kioskDeviceId" is required (not null)
            if (kioskDeviceId == null)
            {
                throw new InvalidDataException("kioskDeviceId is a required property for UnRegisterCardReaderRequest and cannot be null");
            }
            else
            {
                this.KioskDeviceId = kioskDeviceId;
            }
        }
        
        /// <summary>
        /// Device card readerid
        /// </summary>
        /// <value>Device card readerid</value>
        [DataMember(Name="ReaderId", EmitDefaultValue=false)]
        public string ReaderId { get; set; }

        /// <summary>
        /// The kiosk device id
        /// </summary>
        /// <value>The kiosk device id</value>
        [DataMember(Name="KioskDeviceId", EmitDefaultValue=false)]
        public string KioskDeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnRegisterCardReaderRequest {\n");
            sb.Append("  ReaderId: ").Append(ReaderId).Append("\n");
            sb.Append("  KioskDeviceId: ").Append(KioskDeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnRegisterCardReaderRequest);
        }

        /// <summary>
        /// Returns true if UnRegisterCardReaderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UnRegisterCardReaderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnRegisterCardReaderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReaderId == input.ReaderId ||
                    (this.ReaderId != null &&
                    this.ReaderId.Equals(input.ReaderId))
                ) && 
                (
                    this.KioskDeviceId == input.KioskDeviceId ||
                    (this.KioskDeviceId != null &&
                    this.KioskDeviceId.Equals(input.KioskDeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReaderId != null)
                    hashCode = hashCode * 59 + this.ReaderId.GetHashCode();
                if (this.KioskDeviceId != null)
                    hashCode = hashCode * 59 + this.KioskDeviceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PayoutReport3DetailsSummary
    /// </summary>
    [DataContract]
    public partial class PayoutReport3DetailsSummary :  IEquatable<PayoutReport3DetailsSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReport3DetailsSummary" /> class.
        /// </summary>
        /// <param name="revenue">revenue.</param>
        /// <param name="revenueOfWhichCash">revenueOfWhichCash.</param>
        /// <param name="revenueForFeeCalculations">revenueForFeeCalculations.</param>
        /// <param name="flipdishFees">flipdishFees.</param>
        /// <param name="adjustments">adjustments.</param>
        /// <param name="thirdPartyIntegrationFeesAndTips">thirdPartyIntegrationFeesAndTips.</param>
        /// <param name="total">total.</param>
        public PayoutReport3DetailsSummary(double? revenue = default(double?), double? revenueOfWhichCash = default(double?), double? revenueForFeeCalculations = default(double?), double? flipdishFees = default(double?), double? adjustments = default(double?), double? thirdPartyIntegrationFeesAndTips = default(double?), double? total = default(double?))
        {
            this.Revenue = revenue;
            this.RevenueOfWhichCash = revenueOfWhichCash;
            this.RevenueForFeeCalculations = revenueForFeeCalculations;
            this.FlipdishFees = flipdishFees;
            this.Adjustments = adjustments;
            this.ThirdPartyIntegrationFeesAndTips = thirdPartyIntegrationFeesAndTips;
            this.Total = total;
        }
        
        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>
        [DataMember(Name="Revenue", EmitDefaultValue=false)]
        public double? Revenue { get; set; }

        /// <summary>
        /// Gets or Sets RevenueOfWhichCash
        /// </summary>
        [DataMember(Name="RevenueOfWhichCash", EmitDefaultValue=false)]
        public double? RevenueOfWhichCash { get; set; }

        /// <summary>
        /// Gets or Sets RevenueForFeeCalculations
        /// </summary>
        [DataMember(Name="RevenueForFeeCalculations", EmitDefaultValue=false)]
        public double? RevenueForFeeCalculations { get; set; }

        /// <summary>
        /// Gets or Sets FlipdishFees
        /// </summary>
        [DataMember(Name="FlipdishFees", EmitDefaultValue=false)]
        public double? FlipdishFees { get; set; }

        /// <summary>
        /// Gets or Sets Adjustments
        /// </summary>
        [DataMember(Name="Adjustments", EmitDefaultValue=false)]
        public double? Adjustments { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyIntegrationFeesAndTips
        /// </summary>
        [DataMember(Name="ThirdPartyIntegrationFeesAndTips", EmitDefaultValue=false)]
        public double? ThirdPartyIntegrationFeesAndTips { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="Total", EmitDefaultValue=false)]
        public double? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutReport3DetailsSummary {\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  RevenueOfWhichCash: ").Append(RevenueOfWhichCash).Append("\n");
            sb.Append("  RevenueForFeeCalculations: ").Append(RevenueForFeeCalculations).Append("\n");
            sb.Append("  FlipdishFees: ").Append(FlipdishFees).Append("\n");
            sb.Append("  Adjustments: ").Append(Adjustments).Append("\n");
            sb.Append("  ThirdPartyIntegrationFeesAndTips: ").Append(ThirdPartyIntegrationFeesAndTips).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutReport3DetailsSummary);
        }

        /// <summary>
        /// Returns true if PayoutReport3DetailsSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutReport3DetailsSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutReport3DetailsSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.RevenueOfWhichCash == input.RevenueOfWhichCash ||
                    (this.RevenueOfWhichCash != null &&
                    this.RevenueOfWhichCash.Equals(input.RevenueOfWhichCash))
                ) && 
                (
                    this.RevenueForFeeCalculations == input.RevenueForFeeCalculations ||
                    (this.RevenueForFeeCalculations != null &&
                    this.RevenueForFeeCalculations.Equals(input.RevenueForFeeCalculations))
                ) && 
                (
                    this.FlipdishFees == input.FlipdishFees ||
                    (this.FlipdishFees != null &&
                    this.FlipdishFees.Equals(input.FlipdishFees))
                ) && 
                (
                    this.Adjustments == input.Adjustments ||
                    (this.Adjustments != null &&
                    this.Adjustments.Equals(input.Adjustments))
                ) && 
                (
                    this.ThirdPartyIntegrationFeesAndTips == input.ThirdPartyIntegrationFeesAndTips ||
                    (this.ThirdPartyIntegrationFeesAndTips != null &&
                    this.ThirdPartyIntegrationFeesAndTips.Equals(input.ThirdPartyIntegrationFeesAndTips))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.RevenueOfWhichCash != null)
                    hashCode = hashCode * 59 + this.RevenueOfWhichCash.GetHashCode();
                if (this.RevenueForFeeCalculations != null)
                    hashCode = hashCode * 59 + this.RevenueForFeeCalculations.GetHashCode();
                if (this.FlipdishFees != null)
                    hashCode = hashCode * 59 + this.FlipdishFees.GetHashCode();
                if (this.Adjustments != null)
                    hashCode = hashCode * 59 + this.Adjustments.GetHashCode();
                if (this.ThirdPartyIntegrationFeesAndTips != null)
                    hashCode = hashCode * 59 + this.ThirdPartyIntegrationFeesAndTips.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }
    }

}

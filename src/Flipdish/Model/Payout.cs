/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Holds the information for a whitelabel payout.
    /// </summary>
    [DataContract]
    public partial class Payout :  IEquatable<Payout>
    {
        /// <summary>
        /// Status of the payout
        /// </summary>
        /// <value>Status of the payout</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayoutStatusEnum
        {
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,
            
            /// <summary>
            /// Enum InTransit for value: InTransit
            /// </summary>
            [EnumMember(Value = "InTransit")]
            InTransit = 2,
            
            /// <summary>
            /// Enum Paid for value: Paid
            /// </summary>
            [EnumMember(Value = "Paid")]
            Paid = 3,
            
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 4,
            
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 5
        }

        /// <summary>
        /// Status of the payout
        /// </summary>
        /// <value>Status of the payout</value>
        [DataMember(Name="PayoutStatus", EmitDefaultValue=false)]
        public PayoutStatusEnum? PayoutStatus { get; set; }
        /// <summary>
        /// Type of payout source
        /// </summary>
        /// <value>Type of payout source</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayoutTypeEnum
        {
            
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 1,
            
            /// <summary>
            /// Enum Stripe for value: Stripe
            /// </summary>
            [EnumMember(Value = "Stripe")]
            Stripe = 2
        }

        /// <summary>
        /// Type of payout source
        /// </summary>
        /// <value>Type of payout source</value>
        [DataMember(Name="PayoutType", EmitDefaultValue=false)]
        public PayoutTypeEnum? PayoutType { get; set; }
        /// <summary>
        /// Payout currency
        /// </summary>
        /// <value>Payout currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 113
        }

        /// <summary>
        /// Payout currency
        /// </summary>
        /// <value>Payout currency</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payout" /> class.
        /// </summary>
        /// <param name="payoutId">The id of the payout..</param>
        /// <param name="payeeBankAccountId">Bank account identifier.</param>
        /// <param name="accountName">Account name of the payout destination.</param>
        /// <param name="payoutStatus">Status of the payout.</param>
        /// <param name="createdDate">Date payout was created.</param>
        /// <param name="periodStartTime">This payout includes operations after at this date (inclusive).</param>
        /// <param name="periodEndTime">This payout includes operations before at this date (exclusive).</param>
        /// <param name="destinationBank">Destination bank name.</param>
        /// <param name="destinationAccount">Last 4 digits of the destination bank IBAN.</param>
        /// <param name="amount">Payout amount.</param>
        /// <param name="payoutType">Type of payout source.</param>
        /// <param name="currency">Payout currency.</param>
        /// <param name="cutoffDate">Payouts before this date do not have a details breakdown.</param>
        /// <param name="onlineSalesAmount">Payout online sales amount.</param>
        /// <param name="onlineSalesDeliveryCharges">Payout online sales delivery charges.</param>
        /// <param name="onlineSalesTips">Payout online sales tips.</param>
        /// <param name="onlineSalesServiceCharges">Payout online sales service charges.</param>
        /// <param name="onlineSalesRefundedFees">Payout online sales refunded fees.</param>
        /// <param name="onlineSalesFees">Payout online sales fees.</param>
        /// <param name="posSalesFees">Payout online sales fees.</param>
        /// <param name="deliveryFees">Delivery fees.</param>
        /// <param name="tipFees">Tip fees.</param>
        /// <param name="onlineSalesRefundedAmount">Payout online sales refunded amount.</param>
        /// <param name="posSalesRefundedAmount">POS Payout online sales refunded amount.</param>
        /// <param name="onlineSalesTax">Payout online sales tax.</param>
        /// <param name="totalOnlineRevenue">Payout total online revenue.</param>
        /// <param name="cashSalesFees">Payout cash sales fees.</param>
        /// <param name="cashSalesRefundedFees">Payout cash sales refunded fees.</param>
        /// <param name="customerCashFees">Payout cash fees charged to customer.</param>
        /// <param name="salesFeesVat">Payout sales fees vat.</param>
        /// <param name="totalFees">Payout total fees.</param>
        /// <param name="totalOnlineRevenueAdjustments">Payout total online revenue adjustments.</param>
        /// <param name="chargebackAmount">Payout chargeback amount.</param>
        /// <param name="posSalesChargebackAmount">POS Payout chargeback amount.</param>
        /// <param name="chargebackRefundedFees">Payout chargeback refunded fees.</param>
        /// <param name="totalChargebackCost">Payout chargebacks total cost.</param>
        /// <param name="totalOtherCharges">Payout other charges total.</param>
        /// <param name="openingBalance">Payout opening balance.</param>
        /// <param name="closingBalance">Payout closing balance.</param>
        /// <param name="payGreenSalesAmount">Amount of sales through PayGreen (restaurant vouchers).</param>
        public Payout(int? payoutId = default(int?), int? payeeBankAccountId = default(int?), string accountName = default(string), PayoutStatusEnum? payoutStatus = default(PayoutStatusEnum?), DateTime? createdDate = default(DateTime?), DateTime? periodStartTime = default(DateTime?), DateTime? periodEndTime = default(DateTime?), string destinationBank = default(string), string destinationAccount = default(string), double? amount = default(double?), PayoutTypeEnum? payoutType = default(PayoutTypeEnum?), CurrencyEnum? currency = default(CurrencyEnum?), DateTime? cutoffDate = default(DateTime?), double? onlineSalesAmount = default(double?), double? onlineSalesDeliveryCharges = default(double?), double? onlineSalesTips = default(double?), double? onlineSalesServiceCharges = default(double?), double? onlineSalesRefundedFees = default(double?), double? onlineSalesFees = default(double?), double? posSalesFees = default(double?), double? deliveryFees = default(double?), double? tipFees = default(double?), double? onlineSalesRefundedAmount = default(double?), double? posSalesRefundedAmount = default(double?), double? onlineSalesTax = default(double?), double? totalOnlineRevenue = default(double?), double? cashSalesFees = default(double?), double? cashSalesRefundedFees = default(double?), double? customerCashFees = default(double?), double? salesFeesVat = default(double?), double? totalFees = default(double?), double? totalOnlineRevenueAdjustments = default(double?), double? chargebackAmount = default(double?), double? posSalesChargebackAmount = default(double?), double? chargebackRefundedFees = default(double?), double? totalChargebackCost = default(double?), double? totalOtherCharges = default(double?), double? openingBalance = default(double?), double? closingBalance = default(double?), double? payGreenSalesAmount = default(double?))
        {
            this.PayoutId = payoutId;
            this.PayeeBankAccountId = payeeBankAccountId;
            this.AccountName = accountName;
            this.PayoutStatus = payoutStatus;
            this.CreatedDate = createdDate;
            this.PeriodStartTime = periodStartTime;
            this.PeriodEndTime = periodEndTime;
            this.DestinationBank = destinationBank;
            this.DestinationAccount = destinationAccount;
            this.Amount = amount;
            this.PayoutType = payoutType;
            this.Currency = currency;
            this.CutoffDate = cutoffDate;
            this.OnlineSalesAmount = onlineSalesAmount;
            this.OnlineSalesDeliveryCharges = onlineSalesDeliveryCharges;
            this.OnlineSalesTips = onlineSalesTips;
            this.OnlineSalesServiceCharges = onlineSalesServiceCharges;
            this.OnlineSalesRefundedFees = onlineSalesRefundedFees;
            this.OnlineSalesFees = onlineSalesFees;
            this.PosSalesFees = posSalesFees;
            this.DeliveryFees = deliveryFees;
            this.TipFees = tipFees;
            this.OnlineSalesRefundedAmount = onlineSalesRefundedAmount;
            this.PosSalesRefundedAmount = posSalesRefundedAmount;
            this.OnlineSalesTax = onlineSalesTax;
            this.TotalOnlineRevenue = totalOnlineRevenue;
            this.CashSalesFees = cashSalesFees;
            this.CashSalesRefundedFees = cashSalesRefundedFees;
            this.CustomerCashFees = customerCashFees;
            this.SalesFeesVat = salesFeesVat;
            this.TotalFees = totalFees;
            this.TotalOnlineRevenueAdjustments = totalOnlineRevenueAdjustments;
            this.ChargebackAmount = chargebackAmount;
            this.PosSalesChargebackAmount = posSalesChargebackAmount;
            this.ChargebackRefundedFees = chargebackRefundedFees;
            this.TotalChargebackCost = totalChargebackCost;
            this.TotalOtherCharges = totalOtherCharges;
            this.OpeningBalance = openingBalance;
            this.ClosingBalance = closingBalance;
            this.PayGreenSalesAmount = payGreenSalesAmount;
        }
        
        /// <summary>
        /// The id of the payout.
        /// </summary>
        /// <value>The id of the payout.</value>
        [DataMember(Name="PayoutId", EmitDefaultValue=false)]
        public int? PayoutId { get; set; }

        /// <summary>
        /// Bank account identifier
        /// </summary>
        /// <value>Bank account identifier</value>
        [DataMember(Name="PayeeBankAccountId", EmitDefaultValue=false)]
        public int? PayeeBankAccountId { get; set; }

        /// <summary>
        /// Account name of the payout destination
        /// </summary>
        /// <value>Account name of the payout destination</value>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }


        /// <summary>
        /// Date payout was created
        /// </summary>
        /// <value>Date payout was created</value>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// This payout includes operations after at this date (inclusive)
        /// </summary>
        /// <value>This payout includes operations after at this date (inclusive)</value>
        [DataMember(Name="PeriodStartTime", EmitDefaultValue=false)]
        public DateTime? PeriodStartTime { get; set; }

        /// <summary>
        /// This payout includes operations before at this date (exclusive)
        /// </summary>
        /// <value>This payout includes operations before at this date (exclusive)</value>
        [DataMember(Name="PeriodEndTime", EmitDefaultValue=false)]
        public DateTime? PeriodEndTime { get; set; }

        /// <summary>
        /// Destination bank name
        /// </summary>
        /// <value>Destination bank name</value>
        [DataMember(Name="DestinationBank", EmitDefaultValue=false)]
        public string DestinationBank { get; set; }

        /// <summary>
        /// Last 4 digits of the destination bank IBAN
        /// </summary>
        /// <value>Last 4 digits of the destination bank IBAN</value>
        [DataMember(Name="DestinationAccount", EmitDefaultValue=false)]
        public string DestinationAccount { get; set; }

        /// <summary>
        /// Payout amount
        /// </summary>
        /// <value>Payout amount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }



        /// <summary>
        /// Payouts before this date do not have a details breakdown
        /// </summary>
        /// <value>Payouts before this date do not have a details breakdown</value>
        [DataMember(Name="CutoffDate", EmitDefaultValue=false)]
        public DateTime? CutoffDate { get; set; }

        /// <summary>
        /// Payout online sales amount
        /// </summary>
        /// <value>Payout online sales amount</value>
        [DataMember(Name="OnlineSalesAmount", EmitDefaultValue=false)]
        public double? OnlineSalesAmount { get; set; }

        /// <summary>
        /// Payout online sales delivery charges
        /// </summary>
        /// <value>Payout online sales delivery charges</value>
        [DataMember(Name="OnlineSalesDeliveryCharges", EmitDefaultValue=false)]
        public double? OnlineSalesDeliveryCharges { get; set; }

        /// <summary>
        /// Payout online sales tips
        /// </summary>
        /// <value>Payout online sales tips</value>
        [DataMember(Name="OnlineSalesTips", EmitDefaultValue=false)]
        public double? OnlineSalesTips { get; set; }

        /// <summary>
        /// Payout online sales service charges
        /// </summary>
        /// <value>Payout online sales service charges</value>
        [DataMember(Name="OnlineSalesServiceCharges", EmitDefaultValue=false)]
        public double? OnlineSalesServiceCharges { get; set; }

        /// <summary>
        /// Payout online sales refunded fees
        /// </summary>
        /// <value>Payout online sales refunded fees</value>
        [DataMember(Name="OnlineSalesRefundedFees", EmitDefaultValue=false)]
        public double? OnlineSalesRefundedFees { get; set; }

        /// <summary>
        /// Payout online sales fees
        /// </summary>
        /// <value>Payout online sales fees</value>
        [DataMember(Name="OnlineSalesFees", EmitDefaultValue=false)]
        public double? OnlineSalesFees { get; set; }

        /// <summary>
        /// Payout online sales fees
        /// </summary>
        /// <value>Payout online sales fees</value>
        [DataMember(Name="PosSalesFees", EmitDefaultValue=false)]
        public double? PosSalesFees { get; set; }

        /// <summary>
        /// Delivery fees
        /// </summary>
        /// <value>Delivery fees</value>
        [DataMember(Name="DeliveryFees", EmitDefaultValue=false)]
        public double? DeliveryFees { get; set; }

        /// <summary>
        /// Tip fees
        /// </summary>
        /// <value>Tip fees</value>
        [DataMember(Name="TipFees", EmitDefaultValue=false)]
        public double? TipFees { get; set; }

        /// <summary>
        /// Payout online sales refunded amount
        /// </summary>
        /// <value>Payout online sales refunded amount</value>
        [DataMember(Name="OnlineSalesRefundedAmount", EmitDefaultValue=false)]
        public double? OnlineSalesRefundedAmount { get; set; }

        /// <summary>
        /// POS Payout online sales refunded amount
        /// </summary>
        /// <value>POS Payout online sales refunded amount</value>
        [DataMember(Name="PosSalesRefundedAmount", EmitDefaultValue=false)]
        public double? PosSalesRefundedAmount { get; set; }

        /// <summary>
        /// Payout online sales tax
        /// </summary>
        /// <value>Payout online sales tax</value>
        [DataMember(Name="OnlineSalesTax", EmitDefaultValue=false)]
        public double? OnlineSalesTax { get; set; }

        /// <summary>
        /// Payout total online revenue
        /// </summary>
        /// <value>Payout total online revenue</value>
        [DataMember(Name="TotalOnlineRevenue", EmitDefaultValue=false)]
        public double? TotalOnlineRevenue { get; set; }

        /// <summary>
        /// Payout cash sales fees
        /// </summary>
        /// <value>Payout cash sales fees</value>
        [DataMember(Name="CashSalesFees", EmitDefaultValue=false)]
        public double? CashSalesFees { get; set; }

        /// <summary>
        /// Payout cash sales refunded fees
        /// </summary>
        /// <value>Payout cash sales refunded fees</value>
        [DataMember(Name="CashSalesRefundedFees", EmitDefaultValue=false)]
        public double? CashSalesRefundedFees { get; set; }

        /// <summary>
        /// Payout cash fees charged to customer
        /// </summary>
        /// <value>Payout cash fees charged to customer</value>
        [DataMember(Name="CustomerCashFees", EmitDefaultValue=false)]
        public double? CustomerCashFees { get; set; }

        /// <summary>
        /// Payout sales fees vat
        /// </summary>
        /// <value>Payout sales fees vat</value>
        [DataMember(Name="SalesFeesVat", EmitDefaultValue=false)]
        public double? SalesFeesVat { get; set; }

        /// <summary>
        /// Payout total fees
        /// </summary>
        /// <value>Payout total fees</value>
        [DataMember(Name="TotalFees", EmitDefaultValue=false)]
        public double? TotalFees { get; set; }

        /// <summary>
        /// Payout total online revenue adjustments
        /// </summary>
        /// <value>Payout total online revenue adjustments</value>
        [DataMember(Name="TotalOnlineRevenueAdjustments", EmitDefaultValue=false)]
        public double? TotalOnlineRevenueAdjustments { get; set; }

        /// <summary>
        /// Payout chargeback amount
        /// </summary>
        /// <value>Payout chargeback amount</value>
        [DataMember(Name="ChargebackAmount", EmitDefaultValue=false)]
        public double? ChargebackAmount { get; set; }

        /// <summary>
        /// POS Payout chargeback amount
        /// </summary>
        /// <value>POS Payout chargeback amount</value>
        [DataMember(Name="PosSalesChargebackAmount", EmitDefaultValue=false)]
        public double? PosSalesChargebackAmount { get; set; }

        /// <summary>
        /// Payout chargeback refunded fees
        /// </summary>
        /// <value>Payout chargeback refunded fees</value>
        [DataMember(Name="ChargebackRefundedFees", EmitDefaultValue=false)]
        public double? ChargebackRefundedFees { get; set; }

        /// <summary>
        /// Payout chargebacks total cost
        /// </summary>
        /// <value>Payout chargebacks total cost</value>
        [DataMember(Name="TotalChargebackCost", EmitDefaultValue=false)]
        public double? TotalChargebackCost { get; set; }

        /// <summary>
        /// Payout other charges total
        /// </summary>
        /// <value>Payout other charges total</value>
        [DataMember(Name="TotalOtherCharges", EmitDefaultValue=false)]
        public double? TotalOtherCharges { get; set; }

        /// <summary>
        /// Payout opening balance
        /// </summary>
        /// <value>Payout opening balance</value>
        [DataMember(Name="OpeningBalance", EmitDefaultValue=false)]
        public double? OpeningBalance { get; set; }

        /// <summary>
        /// Payout closing balance
        /// </summary>
        /// <value>Payout closing balance</value>
        [DataMember(Name="ClosingBalance", EmitDefaultValue=false)]
        public double? ClosingBalance { get; set; }

        /// <summary>
        /// Amount of sales through PayGreen (restaurant vouchers)
        /// </summary>
        /// <value>Amount of sales through PayGreen (restaurant vouchers)</value>
        [DataMember(Name="PayGreenSalesAmount", EmitDefaultValue=false)]
        public double? PayGreenSalesAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payout {\n");
            sb.Append("  PayoutId: ").Append(PayoutId).Append("\n");
            sb.Append("  PayeeBankAccountId: ").Append(PayeeBankAccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  PayoutStatus: ").Append(PayoutStatus).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  PeriodStartTime: ").Append(PeriodStartTime).Append("\n");
            sb.Append("  PeriodEndTime: ").Append(PeriodEndTime).Append("\n");
            sb.Append("  DestinationBank: ").Append(DestinationBank).Append("\n");
            sb.Append("  DestinationAccount: ").Append(DestinationAccount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PayoutType: ").Append(PayoutType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CutoffDate: ").Append(CutoffDate).Append("\n");
            sb.Append("  OnlineSalesAmount: ").Append(OnlineSalesAmount).Append("\n");
            sb.Append("  OnlineSalesDeliveryCharges: ").Append(OnlineSalesDeliveryCharges).Append("\n");
            sb.Append("  OnlineSalesTips: ").Append(OnlineSalesTips).Append("\n");
            sb.Append("  OnlineSalesServiceCharges: ").Append(OnlineSalesServiceCharges).Append("\n");
            sb.Append("  OnlineSalesRefundedFees: ").Append(OnlineSalesRefundedFees).Append("\n");
            sb.Append("  OnlineSalesFees: ").Append(OnlineSalesFees).Append("\n");
            sb.Append("  PosSalesFees: ").Append(PosSalesFees).Append("\n");
            sb.Append("  DeliveryFees: ").Append(DeliveryFees).Append("\n");
            sb.Append("  TipFees: ").Append(TipFees).Append("\n");
            sb.Append("  OnlineSalesRefundedAmount: ").Append(OnlineSalesRefundedAmount).Append("\n");
            sb.Append("  PosSalesRefundedAmount: ").Append(PosSalesRefundedAmount).Append("\n");
            sb.Append("  OnlineSalesTax: ").Append(OnlineSalesTax).Append("\n");
            sb.Append("  TotalOnlineRevenue: ").Append(TotalOnlineRevenue).Append("\n");
            sb.Append("  CashSalesFees: ").Append(CashSalesFees).Append("\n");
            sb.Append("  CashSalesRefundedFees: ").Append(CashSalesRefundedFees).Append("\n");
            sb.Append("  CustomerCashFees: ").Append(CustomerCashFees).Append("\n");
            sb.Append("  SalesFeesVat: ").Append(SalesFeesVat).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  TotalOnlineRevenueAdjustments: ").Append(TotalOnlineRevenueAdjustments).Append("\n");
            sb.Append("  ChargebackAmount: ").Append(ChargebackAmount).Append("\n");
            sb.Append("  PosSalesChargebackAmount: ").Append(PosSalesChargebackAmount).Append("\n");
            sb.Append("  ChargebackRefundedFees: ").Append(ChargebackRefundedFees).Append("\n");
            sb.Append("  TotalChargebackCost: ").Append(TotalChargebackCost).Append("\n");
            sb.Append("  TotalOtherCharges: ").Append(TotalOtherCharges).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("  PayGreenSalesAmount: ").Append(PayGreenSalesAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payout);
        }

        /// <summary>
        /// Returns true if Payout instances are equal
        /// </summary>
        /// <param name="input">Instance of Payout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payout input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayoutId == input.PayoutId ||
                    (this.PayoutId != null &&
                    this.PayoutId.Equals(input.PayoutId))
                ) && 
                (
                    this.PayeeBankAccountId == input.PayeeBankAccountId ||
                    (this.PayeeBankAccountId != null &&
                    this.PayeeBankAccountId.Equals(input.PayeeBankAccountId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.PayoutStatus == input.PayoutStatus ||
                    (this.PayoutStatus != null &&
                    this.PayoutStatus.Equals(input.PayoutStatus))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.PeriodStartTime == input.PeriodStartTime ||
                    (this.PeriodStartTime != null &&
                    this.PeriodStartTime.Equals(input.PeriodStartTime))
                ) && 
                (
                    this.PeriodEndTime == input.PeriodEndTime ||
                    (this.PeriodEndTime != null &&
                    this.PeriodEndTime.Equals(input.PeriodEndTime))
                ) && 
                (
                    this.DestinationBank == input.DestinationBank ||
                    (this.DestinationBank != null &&
                    this.DestinationBank.Equals(input.DestinationBank))
                ) && 
                (
                    this.DestinationAccount == input.DestinationAccount ||
                    (this.DestinationAccount != null &&
                    this.DestinationAccount.Equals(input.DestinationAccount))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PayoutType == input.PayoutType ||
                    (this.PayoutType != null &&
                    this.PayoutType.Equals(input.PayoutType))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CutoffDate == input.CutoffDate ||
                    (this.CutoffDate != null &&
                    this.CutoffDate.Equals(input.CutoffDate))
                ) && 
                (
                    this.OnlineSalesAmount == input.OnlineSalesAmount ||
                    (this.OnlineSalesAmount != null &&
                    this.OnlineSalesAmount.Equals(input.OnlineSalesAmount))
                ) && 
                (
                    this.OnlineSalesDeliveryCharges == input.OnlineSalesDeliveryCharges ||
                    (this.OnlineSalesDeliveryCharges != null &&
                    this.OnlineSalesDeliveryCharges.Equals(input.OnlineSalesDeliveryCharges))
                ) && 
                (
                    this.OnlineSalesTips == input.OnlineSalesTips ||
                    (this.OnlineSalesTips != null &&
                    this.OnlineSalesTips.Equals(input.OnlineSalesTips))
                ) && 
                (
                    this.OnlineSalesServiceCharges == input.OnlineSalesServiceCharges ||
                    (this.OnlineSalesServiceCharges != null &&
                    this.OnlineSalesServiceCharges.Equals(input.OnlineSalesServiceCharges))
                ) && 
                (
                    this.OnlineSalesRefundedFees == input.OnlineSalesRefundedFees ||
                    (this.OnlineSalesRefundedFees != null &&
                    this.OnlineSalesRefundedFees.Equals(input.OnlineSalesRefundedFees))
                ) && 
                (
                    this.OnlineSalesFees == input.OnlineSalesFees ||
                    (this.OnlineSalesFees != null &&
                    this.OnlineSalesFees.Equals(input.OnlineSalesFees))
                ) && 
                (
                    this.PosSalesFees == input.PosSalesFees ||
                    (this.PosSalesFees != null &&
                    this.PosSalesFees.Equals(input.PosSalesFees))
                ) && 
                (
                    this.DeliveryFees == input.DeliveryFees ||
                    (this.DeliveryFees != null &&
                    this.DeliveryFees.Equals(input.DeliveryFees))
                ) && 
                (
                    this.TipFees == input.TipFees ||
                    (this.TipFees != null &&
                    this.TipFees.Equals(input.TipFees))
                ) && 
                (
                    this.OnlineSalesRefundedAmount == input.OnlineSalesRefundedAmount ||
                    (this.OnlineSalesRefundedAmount != null &&
                    this.OnlineSalesRefundedAmount.Equals(input.OnlineSalesRefundedAmount))
                ) && 
                (
                    this.PosSalesRefundedAmount == input.PosSalesRefundedAmount ||
                    (this.PosSalesRefundedAmount != null &&
                    this.PosSalesRefundedAmount.Equals(input.PosSalesRefundedAmount))
                ) && 
                (
                    this.OnlineSalesTax == input.OnlineSalesTax ||
                    (this.OnlineSalesTax != null &&
                    this.OnlineSalesTax.Equals(input.OnlineSalesTax))
                ) && 
                (
                    this.TotalOnlineRevenue == input.TotalOnlineRevenue ||
                    (this.TotalOnlineRevenue != null &&
                    this.TotalOnlineRevenue.Equals(input.TotalOnlineRevenue))
                ) && 
                (
                    this.CashSalesFees == input.CashSalesFees ||
                    (this.CashSalesFees != null &&
                    this.CashSalesFees.Equals(input.CashSalesFees))
                ) && 
                (
                    this.CashSalesRefundedFees == input.CashSalesRefundedFees ||
                    (this.CashSalesRefundedFees != null &&
                    this.CashSalesRefundedFees.Equals(input.CashSalesRefundedFees))
                ) && 
                (
                    this.CustomerCashFees == input.CustomerCashFees ||
                    (this.CustomerCashFees != null &&
                    this.CustomerCashFees.Equals(input.CustomerCashFees))
                ) && 
                (
                    this.SalesFeesVat == input.SalesFeesVat ||
                    (this.SalesFeesVat != null &&
                    this.SalesFeesVat.Equals(input.SalesFeesVat))
                ) && 
                (
                    this.TotalFees == input.TotalFees ||
                    (this.TotalFees != null &&
                    this.TotalFees.Equals(input.TotalFees))
                ) && 
                (
                    this.TotalOnlineRevenueAdjustments == input.TotalOnlineRevenueAdjustments ||
                    (this.TotalOnlineRevenueAdjustments != null &&
                    this.TotalOnlineRevenueAdjustments.Equals(input.TotalOnlineRevenueAdjustments))
                ) && 
                (
                    this.ChargebackAmount == input.ChargebackAmount ||
                    (this.ChargebackAmount != null &&
                    this.ChargebackAmount.Equals(input.ChargebackAmount))
                ) && 
                (
                    this.PosSalesChargebackAmount == input.PosSalesChargebackAmount ||
                    (this.PosSalesChargebackAmount != null &&
                    this.PosSalesChargebackAmount.Equals(input.PosSalesChargebackAmount))
                ) && 
                (
                    this.ChargebackRefundedFees == input.ChargebackRefundedFees ||
                    (this.ChargebackRefundedFees != null &&
                    this.ChargebackRefundedFees.Equals(input.ChargebackRefundedFees))
                ) && 
                (
                    this.TotalChargebackCost == input.TotalChargebackCost ||
                    (this.TotalChargebackCost != null &&
                    this.TotalChargebackCost.Equals(input.TotalChargebackCost))
                ) && 
                (
                    this.TotalOtherCharges == input.TotalOtherCharges ||
                    (this.TotalOtherCharges != null &&
                    this.TotalOtherCharges.Equals(input.TotalOtherCharges))
                ) && 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    (this.OpeningBalance != null &&
                    this.OpeningBalance.Equals(input.OpeningBalance))
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    (this.ClosingBalance != null &&
                    this.ClosingBalance.Equals(input.ClosingBalance))
                ) && 
                (
                    this.PayGreenSalesAmount == input.PayGreenSalesAmount ||
                    (this.PayGreenSalesAmount != null &&
                    this.PayGreenSalesAmount.Equals(input.PayGreenSalesAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayoutId != null)
                    hashCode = hashCode * 59 + this.PayoutId.GetHashCode();
                if (this.PayeeBankAccountId != null)
                    hashCode = hashCode * 59 + this.PayeeBankAccountId.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.PayoutStatus != null)
                    hashCode = hashCode * 59 + this.PayoutStatus.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.PeriodStartTime != null)
                    hashCode = hashCode * 59 + this.PeriodStartTime.GetHashCode();
                if (this.PeriodEndTime != null)
                    hashCode = hashCode * 59 + this.PeriodEndTime.GetHashCode();
                if (this.DestinationBank != null)
                    hashCode = hashCode * 59 + this.DestinationBank.GetHashCode();
                if (this.DestinationAccount != null)
                    hashCode = hashCode * 59 + this.DestinationAccount.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PayoutType != null)
                    hashCode = hashCode * 59 + this.PayoutType.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CutoffDate != null)
                    hashCode = hashCode * 59 + this.CutoffDate.GetHashCode();
                if (this.OnlineSalesAmount != null)
                    hashCode = hashCode * 59 + this.OnlineSalesAmount.GetHashCode();
                if (this.OnlineSalesDeliveryCharges != null)
                    hashCode = hashCode * 59 + this.OnlineSalesDeliveryCharges.GetHashCode();
                if (this.OnlineSalesTips != null)
                    hashCode = hashCode * 59 + this.OnlineSalesTips.GetHashCode();
                if (this.OnlineSalesServiceCharges != null)
                    hashCode = hashCode * 59 + this.OnlineSalesServiceCharges.GetHashCode();
                if (this.OnlineSalesRefundedFees != null)
                    hashCode = hashCode * 59 + this.OnlineSalesRefundedFees.GetHashCode();
                if (this.OnlineSalesFees != null)
                    hashCode = hashCode * 59 + this.OnlineSalesFees.GetHashCode();
                if (this.PosSalesFees != null)
                    hashCode = hashCode * 59 + this.PosSalesFees.GetHashCode();
                if (this.DeliveryFees != null)
                    hashCode = hashCode * 59 + this.DeliveryFees.GetHashCode();
                if (this.TipFees != null)
                    hashCode = hashCode * 59 + this.TipFees.GetHashCode();
                if (this.OnlineSalesRefundedAmount != null)
                    hashCode = hashCode * 59 + this.OnlineSalesRefundedAmount.GetHashCode();
                if (this.PosSalesRefundedAmount != null)
                    hashCode = hashCode * 59 + this.PosSalesRefundedAmount.GetHashCode();
                if (this.OnlineSalesTax != null)
                    hashCode = hashCode * 59 + this.OnlineSalesTax.GetHashCode();
                if (this.TotalOnlineRevenue != null)
                    hashCode = hashCode * 59 + this.TotalOnlineRevenue.GetHashCode();
                if (this.CashSalesFees != null)
                    hashCode = hashCode * 59 + this.CashSalesFees.GetHashCode();
                if (this.CashSalesRefundedFees != null)
                    hashCode = hashCode * 59 + this.CashSalesRefundedFees.GetHashCode();
                if (this.CustomerCashFees != null)
                    hashCode = hashCode * 59 + this.CustomerCashFees.GetHashCode();
                if (this.SalesFeesVat != null)
                    hashCode = hashCode * 59 + this.SalesFeesVat.GetHashCode();
                if (this.TotalFees != null)
                    hashCode = hashCode * 59 + this.TotalFees.GetHashCode();
                if (this.TotalOnlineRevenueAdjustments != null)
                    hashCode = hashCode * 59 + this.TotalOnlineRevenueAdjustments.GetHashCode();
                if (this.ChargebackAmount != null)
                    hashCode = hashCode * 59 + this.ChargebackAmount.GetHashCode();
                if (this.PosSalesChargebackAmount != null)
                    hashCode = hashCode * 59 + this.PosSalesChargebackAmount.GetHashCode();
                if (this.ChargebackRefundedFees != null)
                    hashCode = hashCode * 59 + this.ChargebackRefundedFees.GetHashCode();
                if (this.TotalChargebackCost != null)
                    hashCode = hashCode * 59 + this.TotalChargebackCost.GetHashCode();
                if (this.TotalOtherCharges != null)
                    hashCode = hashCode * 59 + this.TotalOtherCharges.GetHashCode();
                if (this.OpeningBalance != null)
                    hashCode = hashCode * 59 + this.OpeningBalance.GetHashCode();
                if (this.ClosingBalance != null)
                    hashCode = hashCode * 59 + this.ClosingBalance.GetHashCode();
                if (this.PayGreenSalesAmount != null)
                    hashCode = hashCode * 59 + this.PayGreenSalesAmount.GetHashCode();
                return hashCode;
            }
        }
    }

}

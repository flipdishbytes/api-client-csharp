/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// CspReport
    /// </summary>
    [DataContract]
    public partial class CspReport :  IEquatable<CspReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CspReport" /> class.
        /// </summary>
        /// <param name="documentUri">documentUri.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="violatedDirective">violatedDirective.</param>
        /// <param name="effectiveDirective">effectiveDirective.</param>
        /// <param name="originalPolicy">originalPolicy.</param>
        /// <param name="blockedUri">blockedUri.</param>
        /// <param name="statusCode">statusCode.</param>
        public CspReport(string documentUri = default(string), string referrer = default(string), string violatedDirective = default(string), string effectiveDirective = default(string), string originalPolicy = default(string), string blockedUri = default(string), int? statusCode = default(int?))
        {
            this.Document_uri = documentUri;
            this.Referrer = referrer;
            this.Violated_directive = violatedDirective;
            this.Effective_directive = effectiveDirective;
            this.Original_policy = originalPolicy;
            this.Blocked_uri = blockedUri;
            this.Status_code = statusCode;
        }
        
        /// <summary>
        /// Gets or Sets Document_uri
        /// </summary>
        [DataMember(Name="Document-uri", EmitDefaultValue=false)]
        public string Document_uri { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name="Referrer", EmitDefaultValue=false)]
        public string Referrer { get; set; }

        /// <summary>
        /// Gets or Sets Violated_directive
        /// </summary>
        [DataMember(Name="Violated-directive", EmitDefaultValue=false)]
        public string Violated_directive { get; set; }

        /// <summary>
        /// Gets or Sets Effective_directive
        /// </summary>
        [DataMember(Name="Effective-directive", EmitDefaultValue=false)]
        public string Effective_directive { get; set; }

        /// <summary>
        /// Gets or Sets Original_policy
        /// </summary>
        [DataMember(Name="Original-policy", EmitDefaultValue=false)]
        public string Original_policy { get; set; }

        /// <summary>
        /// Gets or Sets Blocked_uri
        /// </summary>
        [DataMember(Name="Blocked-uri", EmitDefaultValue=false)]
        public string Blocked_uri { get; set; }

        /// <summary>
        /// Gets or Sets Status_code
        /// </summary>
        [DataMember(Name="Status-code", EmitDefaultValue=false)]
        public int? Status_code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CspReport {\n");
            sb.Append("  Document_uri: ").Append(Document_uri).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  Violated_directive: ").Append(Violated_directive).Append("\n");
            sb.Append("  Effective_directive: ").Append(Effective_directive).Append("\n");
            sb.Append("  Original_policy: ").Append(Original_policy).Append("\n");
            sb.Append("  Blocked_uri: ").Append(Blocked_uri).Append("\n");
            sb.Append("  Status_code: ").Append(Status_code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CspReport);
        }

        /// <summary>
        /// Returns true if CspReport instances are equal
        /// </summary>
        /// <param name="input">Instance of CspReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CspReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Document_uri == input.Document_uri ||
                    (this.Document_uri != null &&
                    this.Document_uri.Equals(input.Document_uri))
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.Violated_directive == input.Violated_directive ||
                    (this.Violated_directive != null &&
                    this.Violated_directive.Equals(input.Violated_directive))
                ) && 
                (
                    this.Effective_directive == input.Effective_directive ||
                    (this.Effective_directive != null &&
                    this.Effective_directive.Equals(input.Effective_directive))
                ) && 
                (
                    this.Original_policy == input.Original_policy ||
                    (this.Original_policy != null &&
                    this.Original_policy.Equals(input.Original_policy))
                ) && 
                (
                    this.Blocked_uri == input.Blocked_uri ||
                    (this.Blocked_uri != null &&
                    this.Blocked_uri.Equals(input.Blocked_uri))
                ) && 
                (
                    this.Status_code == input.Status_code ||
                    (this.Status_code != null &&
                    this.Status_code.Equals(input.Status_code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Document_uri != null)
                    hashCode = hashCode * 59 + this.Document_uri.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.Violated_directive != null)
                    hashCode = hashCode * 59 + this.Violated_directive.GetHashCode();
                if (this.Effective_directive != null)
                    hashCode = hashCode * 59 + this.Effective_directive.GetHashCode();
                if (this.Original_policy != null)
                    hashCode = hashCode * 59 + this.Original_policy.GetHashCode();
                if (this.Blocked_uri != null)
                    hashCode = hashCode * 59 + this.Blocked_uri.GetHashCode();
                if (this.Status_code != null)
                    hashCode = hashCode * 59 + this.Status_code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

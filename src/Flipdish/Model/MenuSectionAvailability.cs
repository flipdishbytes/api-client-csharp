/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// MenuSectionAvailability
    /// </summary>
    [DataContract]
    public partial class MenuSectionAvailability :  IEquatable<MenuSectionAvailability>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AvailabilityMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityModeEnum
        {
            
            /// <summary>
            /// Enum DisplayAlways for "DisplayAlways"
            /// </summary>
            [EnumMember(Value = "DisplayAlways")]
            DisplayAlways,
            
            /// <summary>
            /// Enum DisplayBasedOnTimes for "DisplayBasedOnTimes"
            /// </summary>
            [EnumMember(Value = "DisplayBasedOnTimes")]
            DisplayBasedOnTimes,
            
            /// <summary>
            /// Enum DisplayAlwaysStartCollapsed for "DisplayAlwaysStartCollapsed"
            /// </summary>
            [EnumMember(Value = "DisplayAlwaysStartCollapsed")]
            DisplayAlwaysStartCollapsed,
            
            /// <summary>
            /// Enum DisplayAlwaysStartCollapsedBasedOnTimes for "DisplayAlwaysStartCollapsedBasedOnTimes"
            /// </summary>
            [EnumMember(Value = "DisplayAlwaysStartCollapsedBasedOnTimes")]
            DisplayAlwaysStartCollapsedBasedOnTimes
        }

        /// <summary>
        /// Gets or Sets AvailabilityMode
        /// </summary>
        [DataMember(Name="availabilityMode", EmitDefaultValue=false)]
        public AvailabilityModeEnum? AvailabilityMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionAvailability" /> class.
        /// </summary>
        /// <param name="AvailableTimes">AvailableTimes.</param>
        /// <param name="AvailabilityMode">AvailabilityMode.</param>
        public MenuSectionAvailability(List<BusinessHoursPeriod> AvailableTimes = default(List<BusinessHoursPeriod>), AvailabilityModeEnum? AvailabilityMode = default(AvailabilityModeEnum?))
        {
            this.AvailableTimes = AvailableTimes;
            this.AvailabilityMode = AvailabilityMode;
        }
        
        /// <summary>
        /// Gets or Sets AvailableTimes
        /// </summary>
        [DataMember(Name="availableTimes", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> AvailableTimes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuSectionAvailability {\n");
            sb.Append("  AvailableTimes: ").Append(AvailableTimes).Append("\n");
            sb.Append("  AvailabilityMode: ").Append(AvailabilityMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MenuSectionAvailability);
        }

        /// <summary>
        /// Returns true if MenuSectionAvailability instances are equal
        /// </summary>
        /// <param name="other">Instance of MenuSectionAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuSectionAvailability other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvailableTimes == other.AvailableTimes ||
                    this.AvailableTimes != null &&
                    this.AvailableTimes.SequenceEqual(other.AvailableTimes)
                ) && 
                (
                    this.AvailabilityMode == other.AvailabilityMode ||
                    this.AvailabilityMode != null &&
                    this.AvailabilityMode.Equals(other.AvailabilityMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvailableTimes != null)
                    hash = hash * 59 + this.AvailableTimes.GetHashCode();
                if (this.AvailabilityMode != null)
                    hash = hash * 59 + this.AvailabilityMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Phone call
    /// </summary>
    [DataContract]
    public partial class PhoneCall :  IEquatable<PhoneCall>, IValidatableObject
    {
        /// <summary>
        /// The status of the call
        /// </summary>
        /// <value>The status of the call</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CallStatusEnum
        {
            
            /// <summary>
            /// Enum Queued for value: Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued = 1,
            
            /// <summary>
            /// Enum Ringing for value: Ringing
            /// </summary>
            [EnumMember(Value = "Ringing")]
            Ringing = 2,
            
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 3,
            
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 4,
            
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 5,
            
            /// <summary>
            /// Enum Busy for value: Busy
            /// </summary>
            [EnumMember(Value = "Busy")]
            Busy = 6,
            
            /// <summary>
            /// Enum NoAnswer for value: NoAnswer
            /// </summary>
            [EnumMember(Value = "NoAnswer")]
            NoAnswer = 7,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 8,
            
            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 9
        }

        /// <summary>
        /// The status of the call
        /// </summary>
        /// <value>The status of the call</value>
        [DataMember(Name="CallStatus", EmitDefaultValue=false)]
        public CallStatusEnum? CallStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneCall" /> class.
        /// </summary>
        /// <param name="phoneCallId">Phone call id.</param>
        /// <param name="timeOfCall">Time of the call.</param>
        /// <param name="timeOfCallLocal">Time of the call, local to the store to which the call was made.</param>
        /// <param name="storeId">ID of the store that the call was TO.</param>
        /// <param name="storeName">Name of the store that the call was TO.</param>
        /// <param name="callerName">Name of the caller.</param>
        /// <param name="callerUserId">UserID of the caller.</param>
        /// <param name="callerNumber">Phone number of the caller.</param>
        /// <param name="callLengthInSeconds">The amount of time the call took.</param>
        /// <param name="callStatus">The status of the call.</param>
        public PhoneCall(int? phoneCallId = default(int?), DateTime? timeOfCall = default(DateTime?), DateTime? timeOfCallLocal = default(DateTime?), int? storeId = default(int?), string storeName = default(string), string callerName = default(string), int? callerUserId = default(int?), string callerNumber = default(string), int? callLengthInSeconds = default(int?), CallStatusEnum? callStatus = default(CallStatusEnum?))
        {
            this.PhoneCallId = phoneCallId;
            this.TimeOfCall = timeOfCall;
            this.TimeOfCallLocal = timeOfCallLocal;
            this.StoreId = storeId;
            this.StoreName = storeName;
            this.CallerName = callerName;
            this.CallerUserId = callerUserId;
            this.CallerNumber = callerNumber;
            this.CallLengthInSeconds = callLengthInSeconds;
            this.CallStatus = callStatus;
        }
        
        /// <summary>
        /// Phone call id
        /// </summary>
        /// <value>Phone call id</value>
        [DataMember(Name="PhoneCallId", EmitDefaultValue=false)]
        public int? PhoneCallId { get; set; }

        /// <summary>
        /// Time of the call
        /// </summary>
        /// <value>Time of the call</value>
        [DataMember(Name="TimeOfCall", EmitDefaultValue=false)]
        public DateTime? TimeOfCall { get; set; }

        /// <summary>
        /// Time of the call, local to the store to which the call was made
        /// </summary>
        /// <value>Time of the call, local to the store to which the call was made</value>
        [DataMember(Name="TimeOfCallLocal", EmitDefaultValue=false)]
        public DateTime? TimeOfCallLocal { get; set; }

        /// <summary>
        /// ID of the store that the call was TO
        /// </summary>
        /// <value>ID of the store that the call was TO</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Name of the store that the call was TO
        /// </summary>
        /// <value>Name of the store that the call was TO</value>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Name of the caller
        /// </summary>
        /// <value>Name of the caller</value>
        [DataMember(Name="CallerName", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// UserID of the caller
        /// </summary>
        /// <value>UserID of the caller</value>
        [DataMember(Name="CallerUserId", EmitDefaultValue=false)]
        public int? CallerUserId { get; set; }

        /// <summary>
        /// Phone number of the caller
        /// </summary>
        /// <value>Phone number of the caller</value>
        [DataMember(Name="CallerNumber", EmitDefaultValue=false)]
        public string CallerNumber { get; set; }

        /// <summary>
        /// The amount of time the call took
        /// </summary>
        /// <value>The amount of time the call took</value>
        [DataMember(Name="CallLengthInSeconds", EmitDefaultValue=false)]
        public int? CallLengthInSeconds { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneCall {\n");
            sb.Append("  PhoneCallId: ").Append(PhoneCallId).Append("\n");
            sb.Append("  TimeOfCall: ").Append(TimeOfCall).Append("\n");
            sb.Append("  TimeOfCallLocal: ").Append(TimeOfCallLocal).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  CallerUserId: ").Append(CallerUserId).Append("\n");
            sb.Append("  CallerNumber: ").Append(CallerNumber).Append("\n");
            sb.Append("  CallLengthInSeconds: ").Append(CallLengthInSeconds).Append("\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneCall);
        }

        /// <summary>
        /// Returns true if PhoneCall instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneCall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneCallId == input.PhoneCallId ||
                    (this.PhoneCallId != null &&
                    this.PhoneCallId.Equals(input.PhoneCallId))
                ) && 
                (
                    this.TimeOfCall == input.TimeOfCall ||
                    (this.TimeOfCall != null &&
                    this.TimeOfCall.Equals(input.TimeOfCall))
                ) && 
                (
                    this.TimeOfCallLocal == input.TimeOfCallLocal ||
                    (this.TimeOfCallLocal != null &&
                    this.TimeOfCallLocal.Equals(input.TimeOfCallLocal))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.CallerUserId == input.CallerUserId ||
                    (this.CallerUserId != null &&
                    this.CallerUserId.Equals(input.CallerUserId))
                ) && 
                (
                    this.CallerNumber == input.CallerNumber ||
                    (this.CallerNumber != null &&
                    this.CallerNumber.Equals(input.CallerNumber))
                ) && 
                (
                    this.CallLengthInSeconds == input.CallLengthInSeconds ||
                    (this.CallLengthInSeconds != null &&
                    this.CallLengthInSeconds.Equals(input.CallLengthInSeconds))
                ) && 
                (
                    this.CallStatus == input.CallStatus ||
                    (this.CallStatus != null &&
                    this.CallStatus.Equals(input.CallStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneCallId != null)
                    hashCode = hashCode * 59 + this.PhoneCallId.GetHashCode();
                if (this.TimeOfCall != null)
                    hashCode = hashCode * 59 + this.TimeOfCall.GetHashCode();
                if (this.TimeOfCallLocal != null)
                    hashCode = hashCode * 59 + this.TimeOfCallLocal.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.CallerUserId != null)
                    hashCode = hashCode * 59 + this.CallerUserId.GetHashCode();
                if (this.CallerNumber != null)
                    hashCode = hashCode * 59 + this.CallerNumber.GetHashCode();
                if (this.CallLengthInSeconds != null)
                    hashCode = hashCode * 59 + this.CallLengthInSeconds.GetHashCode();
                if (this.CallStatus != null)
                    hashCode = hashCode * 59 + this.CallStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// AppStoreSubscriptionChangeJobStatusResponse
    /// </summary>
    [DataContract]
    public partial class AppStoreSubscriptionChangeJobStatusResponse :  IEquatable<AppStoreSubscriptionChangeJobStatusResponse>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 2,
            
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 3,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreSubscriptionChangeJobStatusResponse" /> class.
        /// </summary>
        /// <param name="subscriptionChangeJobId">subscriptionChangeJobId.</param>
        /// <param name="status">status.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public AppStoreSubscriptionChangeJobStatusResponse(string subscriptionChangeJobId = default(string), StatusEnum? status = default(StatusEnum?), string errorMessage = default(string))
        {
            this.SubscriptionChangeJobId = subscriptionChangeJobId;
            this.Status = status;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or Sets SubscriptionChangeJobId
        /// </summary>
        [DataMember(Name="SubscriptionChangeJobId", EmitDefaultValue=false)]
        public string SubscriptionChangeJobId { get; set; }


        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppStoreSubscriptionChangeJobStatusResponse {\n");
            sb.Append("  SubscriptionChangeJobId: ").Append(SubscriptionChangeJobId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppStoreSubscriptionChangeJobStatusResponse);
        }

        /// <summary>
        /// Returns true if AppStoreSubscriptionChangeJobStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppStoreSubscriptionChangeJobStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreSubscriptionChangeJobStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubscriptionChangeJobId == input.SubscriptionChangeJobId ||
                    (this.SubscriptionChangeJobId != null &&
                    this.SubscriptionChangeJobId.Equals(input.SubscriptionChangeJobId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubscriptionChangeJobId != null)
                    hashCode = hashCode * 59 + this.SubscriptionChangeJobId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Get Cash Payment Settings for a UserId
    /// </summary>
    [DataContract]
    public partial class KioskCashPaymentSettings :  IEquatable<KioskCashPaymentSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KioskCashPaymentSettings" /> class.
        /// </summary>
        /// <param name="isCashVisibleToCustomer">false :disable cash on kiosk  true :enable cash on kiosk.</param>
        /// <param name="userId">HydraUser ID of the Device.</param>
        public KioskCashPaymentSettings(bool? isCashVisibleToCustomer = default(bool?), int? userId = default(int?))
        {
            this.IsCashVisibleToCustomer = isCashVisibleToCustomer;
            this.UserId = userId;
        }
        
        /// <summary>
        /// false :disable cash on kiosk  true :enable cash on kiosk
        /// </summary>
        /// <value>false :disable cash on kiosk  true :enable cash on kiosk</value>
        [DataMember(Name="IsCashVisibleToCustomer", EmitDefaultValue=false)]
        public bool? IsCashVisibleToCustomer { get; set; }

        /// <summary>
        /// HydraUser ID of the Device
        /// </summary>
        /// <value>HydraUser ID of the Device</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KioskCashPaymentSettings {\n");
            sb.Append("  IsCashVisibleToCustomer: ").Append(IsCashVisibleToCustomer).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KioskCashPaymentSettings);
        }

        /// <summary>
        /// Returns true if KioskCashPaymentSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of KioskCashPaymentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KioskCashPaymentSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsCashVisibleToCustomer == input.IsCashVisibleToCustomer ||
                    (this.IsCashVisibleToCustomer != null &&
                    this.IsCashVisibleToCustomer.Equals(input.IsCashVisibleToCustomer))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsCashVisibleToCustomer != null)
                    hashCode = hashCode * 59 + this.IsCashVisibleToCustomer.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }
    }

}

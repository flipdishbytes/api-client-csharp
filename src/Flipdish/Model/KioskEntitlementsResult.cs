/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Kiosk entitlements and usage
    /// </summary>
    [DataContract]
    public partial class KioskEntitlementsResult :  IEquatable<KioskEntitlementsResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KioskEntitlementsResult" /> class.
        /// </summary>
        /// <param name="entitledQuantity">Number of kiosk devices entitled.</param>
        /// <param name="usedQuantity">The quantity of entitlements that have been used.</param>
        public KioskEntitlementsResult(int? entitledQuantity = default(int?), int? usedQuantity = default(int?))
        {
            this.EntitledQuantity = entitledQuantity;
            this.UsedQuantity = usedQuantity;
        }
        
        /// <summary>
        /// Number of kiosk devices entitled
        /// </summary>
        /// <value>Number of kiosk devices entitled</value>
        [DataMember(Name="EntitledQuantity", EmitDefaultValue=false)]
        public int? EntitledQuantity { get; set; }

        /// <summary>
        /// The quantity of entitlements that have been used
        /// </summary>
        /// <value>The quantity of entitlements that have been used</value>
        [DataMember(Name="UsedQuantity", EmitDefaultValue=false)]
        public int? UsedQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KioskEntitlementsResult {\n");
            sb.Append("  EntitledQuantity: ").Append(EntitledQuantity).Append("\n");
            sb.Append("  UsedQuantity: ").Append(UsedQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KioskEntitlementsResult);
        }

        /// <summary>
        /// Returns true if KioskEntitlementsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of KioskEntitlementsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KioskEntitlementsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntitledQuantity == input.EntitledQuantity ||
                    (this.EntitledQuantity != null &&
                    this.EntitledQuantity.Equals(input.EntitledQuantity))
                ) && 
                (
                    this.UsedQuantity == input.UsedQuantity ||
                    (this.UsedQuantity != null &&
                    this.UsedQuantity.Equals(input.UsedQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitledQuantity != null)
                    hashCode = hashCode * 59 + this.EntitledQuantity.GetHashCode();
                if (this.UsedQuantity != null)
                    hashCode = hashCode * 59 + this.UsedQuantity.GetHashCode();
                return hashCode;
            }
        }
    }

}

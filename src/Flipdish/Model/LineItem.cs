/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Defines a single line item
    /// </summary>
    [DataContract]
    public partial class LineItem :  IEquatable<LineItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="id">Flipdish Item Id, if unknown leave &#39;null&#39;.</param>
        /// <param name="name">Item Name.</param>
        /// <param name="sectionName">Menu section name.</param>
        /// <param name="externalId">External Item Id.</param>
        /// <param name="quantity">Item Quantity.</param>
        /// <param name="price">Item Price.</param>
        /// <param name="notes">Item Notes.</param>
        /// <param name="options">Item Option.</param>
        /// <param name="metadata">Other Item Metadata.</param>
        public LineItem(int? id = default(int?), string name = default(string), string sectionName = default(string), string externalId = default(string), int? quantity = default(int?), Price price = default(Price), string notes = default(string), List<LineItemOption> options = default(List<LineItemOption>), Dictionary<string, string> metadata = default(Dictionary<string, string>))
        {
            this.Id = id;
            this.Name = name;
            this.SectionName = sectionName;
            this.ExternalId = externalId;
            this.Quantity = quantity;
            this.Price = price;
            this.Notes = notes;
            this.Options = options;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Flipdish Item Id, if unknown leave &#39;null&#39;
        /// </summary>
        /// <value>Flipdish Item Id, if unknown leave &#39;null&#39;</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Item Name
        /// </summary>
        /// <value>Item Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Menu section name
        /// </summary>
        /// <value>Menu section name</value>
        [DataMember(Name="SectionName", EmitDefaultValue=false)]
        public string SectionName { get; set; }

        /// <summary>
        /// External Item Id
        /// </summary>
        /// <value>External Item Id</value>
        [DataMember(Name="ExternalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Item Quantity
        /// </summary>
        /// <value>Item Quantity</value>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Item Price
        /// </summary>
        /// <value>Item Price</value>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public Price Price { get; set; }

        /// <summary>
        /// Item Notes
        /// </summary>
        /// <value>Item Notes</value>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Item Option
        /// </summary>
        /// <value>Item Option</value>
        [DataMember(Name="Options", EmitDefaultValue=false)]
        public List<LineItemOption> Options { get; set; }

        /// <summary>
        /// Other Item Metadata
        /// </summary>
        /// <value>Other Item Metadata</value>
        [DataMember(Name="Metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SectionName: ").Append(SectionName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SectionName == input.SectionName ||
                    (this.SectionName != null &&
                    this.SectionName.Equals(input.SectionName))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SectionName != null)
                    hashCode = hashCode * 59 + this.SectionName.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User Note
    /// </summary>
    [DataContract]
    public partial class UserNote :  IEquatable<UserNote>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserNote" /> class.
        /// </summary>
        /// <param name="userNoteId">Identifier for the user note..</param>
        /// <param name="userId">User identifier associated with the note..</param>
        /// <param name="note">Note content..</param>
        /// <param name="tsCreate">Creation timestamp of the note..</param>
        /// <param name="createdByUserId">Identifier of the user who created the note..</param>
        /// <param name="createdByUserName">Name of the user who created the note..</param>
        /// <param name="createdByUserEmail">Email of the user who created the note..</param>
        public UserNote(int? userNoteId = default(int?), int? userId = default(int?), string note = default(string), DateTime? tsCreate = default(DateTime?), int? createdByUserId = default(int?), string createdByUserName = default(string), string createdByUserEmail = default(string))
        {
            this.UserNoteId = userNoteId;
            this.UserId = userId;
            this.Note = note;
            this.TsCreate = tsCreate;
            this.CreatedByUserId = createdByUserId;
            this.CreatedByUserName = createdByUserName;
            this.CreatedByUserEmail = createdByUserEmail;
        }
        
        /// <summary>
        /// Identifier for the user note.
        /// </summary>
        /// <value>Identifier for the user note.</value>
        [DataMember(Name="UserNoteId", EmitDefaultValue=false)]
        public int? UserNoteId { get; set; }

        /// <summary>
        /// User identifier associated with the note.
        /// </summary>
        /// <value>User identifier associated with the note.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Note content.
        /// </summary>
        /// <value>Note content.</value>
        [DataMember(Name="Note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Creation timestamp of the note.
        /// </summary>
        /// <value>Creation timestamp of the note.</value>
        [DataMember(Name="TsCreate", EmitDefaultValue=false)]
        public DateTime? TsCreate { get; set; }

        /// <summary>
        /// Identifier of the user who created the note.
        /// </summary>
        /// <value>Identifier of the user who created the note.</value>
        [DataMember(Name="CreatedByUserId", EmitDefaultValue=false)]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// Name of the user who created the note.
        /// </summary>
        /// <value>Name of the user who created the note.</value>
        [DataMember(Name="CreatedByUserName", EmitDefaultValue=false)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Email of the user who created the note.
        /// </summary>
        /// <value>Email of the user who created the note.</value>
        [DataMember(Name="CreatedByUserEmail", EmitDefaultValue=false)]
        public string CreatedByUserEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserNote {\n");
            sb.Append("  UserNoteId: ").Append(UserNoteId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  TsCreate: ").Append(TsCreate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  CreatedByUserEmail: ").Append(CreatedByUserEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserNote);
        }

        /// <summary>
        /// Returns true if UserNote instances are equal
        /// </summary>
        /// <param name="input">Instance of UserNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserNoteId == input.UserNoteId ||
                    (this.UserNoteId != null &&
                    this.UserNoteId.Equals(input.UserNoteId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.TsCreate == input.TsCreate ||
                    (this.TsCreate != null &&
                    this.TsCreate.Equals(input.TsCreate))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.CreatedByUserName == input.CreatedByUserName ||
                    (this.CreatedByUserName != null &&
                    this.CreatedByUserName.Equals(input.CreatedByUserName))
                ) && 
                (
                    this.CreatedByUserEmail == input.CreatedByUserEmail ||
                    (this.CreatedByUserEmail != null &&
                    this.CreatedByUserEmail.Equals(input.CreatedByUserEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserNoteId != null)
                    hashCode = hashCode * 59 + this.UserNoteId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.TsCreate != null)
                    hashCode = hashCode * 59 + this.TsCreate.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.CreatedByUserName != null)
                    hashCode = hashCode * 59 + this.CreatedByUserName.GetHashCode();
                if (this.CreatedByUserEmail != null)
                    hashCode = hashCode * 59 + this.CreatedByUserEmail.GetHashCode();
                return hashCode;
            }
        }
    }

}

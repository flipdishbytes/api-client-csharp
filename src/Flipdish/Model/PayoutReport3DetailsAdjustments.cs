/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PayoutReport3DetailsAdjustments
    /// </summary>
    [DataContract]
    public partial class PayoutReport3DetailsAdjustments :  IEquatable<PayoutReport3DetailsAdjustments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReport3DetailsAdjustments" /> class.
        /// </summary>
        /// <param name="openingBalance">openingBalance.</param>
        /// <param name="refundsOnCardOrders">refundsOnCardOrders.</param>
        /// <param name="refundsOnCashOrders">refundsOnCashOrders.</param>
        /// <param name="cashCustomerFees">cashCustomerFees.</param>
        /// <param name="chargebacks">chargebacks.</param>
        /// <param name="otherTransactions">otherTransactions.</param>
        /// <param name="closingBalance">closingBalance.</param>
        public PayoutReport3DetailsAdjustments(double? openingBalance = default(double?), double? refundsOnCardOrders = default(double?), double? refundsOnCashOrders = default(double?), double? cashCustomerFees = default(double?), double? chargebacks = default(double?), double? otherTransactions = default(double?), double? closingBalance = default(double?))
        {
            this.OpeningBalance = openingBalance;
            this.RefundsOnCardOrders = refundsOnCardOrders;
            this.RefundsOnCashOrders = refundsOnCashOrders;
            this.CashCustomerFees = cashCustomerFees;
            this.Chargebacks = chargebacks;
            this.OtherTransactions = otherTransactions;
            this.ClosingBalance = closingBalance;
        }
        
        /// <summary>
        /// Gets or Sets OpeningBalance
        /// </summary>
        [DataMember(Name="OpeningBalance", EmitDefaultValue=false)]
        public double? OpeningBalance { get; set; }

        /// <summary>
        /// Gets or Sets RefundsOnCardOrders
        /// </summary>
        [DataMember(Name="RefundsOnCardOrders", EmitDefaultValue=false)]
        public double? RefundsOnCardOrders { get; set; }

        /// <summary>
        /// Gets or Sets RefundsOnCashOrders
        /// </summary>
        [DataMember(Name="RefundsOnCashOrders", EmitDefaultValue=false)]
        public double? RefundsOnCashOrders { get; set; }

        /// <summary>
        /// Gets or Sets CashCustomerFees
        /// </summary>
        [DataMember(Name="CashCustomerFees", EmitDefaultValue=false)]
        public double? CashCustomerFees { get; set; }

        /// <summary>
        /// Gets or Sets Chargebacks
        /// </summary>
        [DataMember(Name="Chargebacks", EmitDefaultValue=false)]
        public double? Chargebacks { get; set; }

        /// <summary>
        /// Gets or Sets OtherTransactions
        /// </summary>
        [DataMember(Name="OtherTransactions", EmitDefaultValue=false)]
        public double? OtherTransactions { get; set; }

        /// <summary>
        /// Gets or Sets ClosingBalance
        /// </summary>
        [DataMember(Name="ClosingBalance", EmitDefaultValue=false)]
        public double? ClosingBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutReport3DetailsAdjustments {\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  RefundsOnCardOrders: ").Append(RefundsOnCardOrders).Append("\n");
            sb.Append("  RefundsOnCashOrders: ").Append(RefundsOnCashOrders).Append("\n");
            sb.Append("  CashCustomerFees: ").Append(CashCustomerFees).Append("\n");
            sb.Append("  Chargebacks: ").Append(Chargebacks).Append("\n");
            sb.Append("  OtherTransactions: ").Append(OtherTransactions).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutReport3DetailsAdjustments);
        }

        /// <summary>
        /// Returns true if PayoutReport3DetailsAdjustments instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutReport3DetailsAdjustments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutReport3DetailsAdjustments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    (this.OpeningBalance != null &&
                    this.OpeningBalance.Equals(input.OpeningBalance))
                ) && 
                (
                    this.RefundsOnCardOrders == input.RefundsOnCardOrders ||
                    (this.RefundsOnCardOrders != null &&
                    this.RefundsOnCardOrders.Equals(input.RefundsOnCardOrders))
                ) && 
                (
                    this.RefundsOnCashOrders == input.RefundsOnCashOrders ||
                    (this.RefundsOnCashOrders != null &&
                    this.RefundsOnCashOrders.Equals(input.RefundsOnCashOrders))
                ) && 
                (
                    this.CashCustomerFees == input.CashCustomerFees ||
                    (this.CashCustomerFees != null &&
                    this.CashCustomerFees.Equals(input.CashCustomerFees))
                ) && 
                (
                    this.Chargebacks == input.Chargebacks ||
                    (this.Chargebacks != null &&
                    this.Chargebacks.Equals(input.Chargebacks))
                ) && 
                (
                    this.OtherTransactions == input.OtherTransactions ||
                    (this.OtherTransactions != null &&
                    this.OtherTransactions.Equals(input.OtherTransactions))
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    (this.ClosingBalance != null &&
                    this.ClosingBalance.Equals(input.ClosingBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpeningBalance != null)
                    hashCode = hashCode * 59 + this.OpeningBalance.GetHashCode();
                if (this.RefundsOnCardOrders != null)
                    hashCode = hashCode * 59 + this.RefundsOnCardOrders.GetHashCode();
                if (this.RefundsOnCashOrders != null)
                    hashCode = hashCode * 59 + this.RefundsOnCashOrders.GetHashCode();
                if (this.CashCustomerFees != null)
                    hashCode = hashCode * 59 + this.CashCustomerFees.GetHashCode();
                if (this.Chargebacks != null)
                    hashCode = hashCode * 59 + this.Chargebacks.GetHashCode();
                if (this.OtherTransactions != null)
                    hashCode = hashCode * 59 + this.OtherTransactions.GetHashCode();
                if (this.ClosingBalance != null)
                    hashCode = hashCode * 59 + this.ClosingBalance.GetHashCode();
                return hashCode;
            }
        }
    }

}

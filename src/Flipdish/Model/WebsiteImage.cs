/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Represents a website image
    /// </summary>
    [DataContract]
    public partial class WebsiteImage :  IEquatable<WebsiteImage>
    {
        /// <summary>
        /// Represents the location of the image
        /// </summary>
        /// <value>Represents the location of the image</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageLocationEnum
        {
            
            /// <summary>
            /// Enum IndexHeader for value: IndexHeader
            /// </summary>
            [EnumMember(Value = "IndexHeader")]
            IndexHeader = 1,
            
            /// <summary>
            /// Enum IndexAboutSectionLeft for value: IndexAboutSectionLeft
            /// </summary>
            [EnumMember(Value = "IndexAboutSectionLeft")]
            IndexAboutSectionLeft = 2,
            
            /// <summary>
            /// Enum IndexAboutSectionRight for value: IndexAboutSectionRight
            /// </summary>
            [EnumMember(Value = "IndexAboutSectionRight")]
            IndexAboutSectionRight = 3,
            
            /// <summary>
            /// Enum IndexGallery for value: IndexGallery
            /// </summary>
            [EnumMember(Value = "IndexGallery")]
            IndexGallery = 4,
            
            /// <summary>
            /// Enum IndexOpeningHoursHeader for value: IndexOpeningHoursHeader
            /// </summary>
            [EnumMember(Value = "IndexOpeningHoursHeader")]
            IndexOpeningHoursHeader = 5,
            
            /// <summary>
            /// Enum IndexTestimonialsHeader for value: IndexTestimonialsHeader
            /// </summary>
            [EnumMember(Value = "IndexTestimonialsHeader")]
            IndexTestimonialsHeader = 6
        }

        /// <summary>
        /// Represents the location of the image
        /// </summary>
        /// <value>Represents the location of the image</value>
        [DataMember(Name="ImageLocation", EmitDefaultValue=false)]
        public ImageLocationEnum? ImageLocation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteImage" /> class.
        /// </summary>
        /// <param name="imageId">Represents the id of the image.</param>
        /// <param name="imageLocation">Represents the location of the image.</param>
        /// <param name="imageUrl">Represents the image url.</param>
        public WebsiteImage(int? imageId = default(int?), ImageLocationEnum? imageLocation = default(ImageLocationEnum?), string imageUrl = default(string))
        {
            this.ImageId = imageId;
            this.ImageLocation = imageLocation;
            this.ImageUrl = imageUrl;
        }
        
        /// <summary>
        /// Represents the id of the image
        /// </summary>
        /// <value>Represents the id of the image</value>
        [DataMember(Name="ImageId", EmitDefaultValue=false)]
        public int? ImageId { get; set; }


        /// <summary>
        /// Represents the image url
        /// </summary>
        /// <value>Represents the image url</value>
        [DataMember(Name="ImageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebsiteImage {\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  ImageLocation: ").Append(ImageLocation).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebsiteImage);
        }

        /// <summary>
        /// Returns true if WebsiteImage instances are equal
        /// </summary>
        /// <param name="input">Instance of WebsiteImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebsiteImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImageId == input.ImageId ||
                    (this.ImageId != null &&
                    this.ImageId.Equals(input.ImageId))
                ) && 
                (
                    this.ImageLocation == input.ImageLocation ||
                    (this.ImageLocation != null &&
                    this.ImageLocation.Equals(input.ImageLocation))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageId != null)
                    hashCode = hashCode * 59 + this.ImageId.GetHashCode();
                if (this.ImageLocation != null)
                    hashCode = hashCode * 59 + this.ImageLocation.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}

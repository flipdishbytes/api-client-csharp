/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Oauth client (also knowns as &#39;app&#39;)
    /// </summary>
    [DataContract]
    public partial class OAuthApp :  IEquatable<OAuthApp>
    {
        /// <summary>
        /// Supported OpenID Connect flows
        /// </summary>
        /// <value>Supported OpenID Connect flows</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowEnum
        {
            
            /// <summary>
            /// Enum AuthorizationCode for value: AuthorizationCode
            /// </summary>
            [EnumMember(Value = "AuthorizationCode")]
            AuthorizationCode = 1,
            
            /// <summary>
            /// Enum Implicit for value: Implicit
            /// </summary>
            [EnumMember(Value = "Implicit")]
            Implicit = 2,
            
            /// <summary>
            /// Enum Hybrid for value: Hybrid
            /// </summary>
            [EnumMember(Value = "Hybrid")]
            Hybrid = 3,
            
            /// <summary>
            /// Enum ClientCredentials for value: ClientCredentials
            /// </summary>
            [EnumMember(Value = "ClientCredentials")]
            ClientCredentials = 4
        }

        /// <summary>
        /// Supported OpenID Connect flows
        /// </summary>
        /// <value>Supported OpenID Connect flows</value>
        [DataMember(Name="Flow", EmitDefaultValue=false)]
        public FlowEnum? Flow { get; set; }
        /// <summary>
        /// ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens
        /// </summary>
        /// <value>ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefreshTokenUsageEnum
        {
            
            /// <summary>
            /// Enum ReUse for value: ReUse
            /// </summary>
            [EnumMember(Value = "ReUse")]
            ReUse = 1,
            
            /// <summary>
            /// Enum OneTimeOnly for value: OneTimeOnly
            /// </summary>
            [EnumMember(Value = "OneTimeOnly")]
            OneTimeOnly = 2
        }

        /// <summary>
        /// ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens
        /// </summary>
        /// <value>ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens</value>
        [DataMember(Name="RefreshTokenUsage", EmitDefaultValue=false)]
        public RefreshTokenUsageEnum? RefreshTokenUsage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApp" /> class.
        /// </summary>
        /// <param name="oauthAppId">OAuth App Identifier.</param>
        /// <param name="oauthAppName">OAuth App Name.</param>
        /// <param name="ownerUserId">OAuth App owner user identifier.</param>
        /// <param name="logoUri">OAuth App logo uri.</param>
        /// <param name="flow">Supported OpenID Connect flows.</param>
        /// <param name="refreshTokenUsage">ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens.</param>
        /// <param name="accessTokenLifetime">Timem it takes for the IdentityToken to expire in seconds.</param>
        /// <param name="absoluteRefreshTokenLifetime">Maximum lifetime of a refresh token in seconds.</param>
        public OAuthApp(string oauthAppId = default(string), string oauthAppName = default(string), int? ownerUserId = default(int?), string logoUri = default(string), FlowEnum? flow = default(FlowEnum?), RefreshTokenUsageEnum? refreshTokenUsage = default(RefreshTokenUsageEnum?), int? accessTokenLifetime = default(int?), int? absoluteRefreshTokenLifetime = default(int?))
        {
            this.OauthAppId = oauthAppId;
            this.OauthAppName = oauthAppName;
            this.OwnerUserId = ownerUserId;
            this.LogoUri = logoUri;
            this.Flow = flow;
            this.RefreshTokenUsage = refreshTokenUsage;
            this.AccessTokenLifetime = accessTokenLifetime;
            this.AbsoluteRefreshTokenLifetime = absoluteRefreshTokenLifetime;
        }
        
        /// <summary>
        /// OAuth App Identifier
        /// </summary>
        /// <value>OAuth App Identifier</value>
        [DataMember(Name="OauthAppId", EmitDefaultValue=false)]
        public string OauthAppId { get; set; }

        /// <summary>
        /// OAuth App Name
        /// </summary>
        /// <value>OAuth App Name</value>
        [DataMember(Name="OauthAppName", EmitDefaultValue=false)]
        public string OauthAppName { get; set; }

        /// <summary>
        /// OAuth App owner user identifier
        /// </summary>
        /// <value>OAuth App owner user identifier</value>
        [DataMember(Name="OwnerUserId", EmitDefaultValue=false)]
        public int? OwnerUserId { get; set; }

        /// <summary>
        /// OAuth App logo uri
        /// </summary>
        /// <value>OAuth App logo uri</value>
        [DataMember(Name="LogoUri", EmitDefaultValue=false)]
        public string LogoUri { get; set; }



        /// <summary>
        /// Timem it takes for the IdentityToken to expire in seconds
        /// </summary>
        /// <value>Timem it takes for the IdentityToken to expire in seconds</value>
        [DataMember(Name="AccessTokenLifetime", EmitDefaultValue=false)]
        public int? AccessTokenLifetime { get; set; }

        /// <summary>
        /// Maximum lifetime of a refresh token in seconds
        /// </summary>
        /// <value>Maximum lifetime of a refresh token in seconds</value>
        [DataMember(Name="AbsoluteRefreshTokenLifetime", EmitDefaultValue=false)]
        public int? AbsoluteRefreshTokenLifetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OAuthApp {\n");
            sb.Append("  OauthAppId: ").Append(OauthAppId).Append("\n");
            sb.Append("  OauthAppName: ").Append(OauthAppName).Append("\n");
            sb.Append("  OwnerUserId: ").Append(OwnerUserId).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  RefreshTokenUsage: ").Append(RefreshTokenUsage).Append("\n");
            sb.Append("  AccessTokenLifetime: ").Append(AccessTokenLifetime).Append("\n");
            sb.Append("  AbsoluteRefreshTokenLifetime: ").Append(AbsoluteRefreshTokenLifetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthApp);
        }

        /// <summary>
        /// Returns true if OAuthApp instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthApp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthApp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthAppId == input.OauthAppId ||
                    (this.OauthAppId != null &&
                    this.OauthAppId.Equals(input.OauthAppId))
                ) && 
                (
                    this.OauthAppName == input.OauthAppName ||
                    (this.OauthAppName != null &&
                    this.OauthAppName.Equals(input.OauthAppName))
                ) && 
                (
                    this.OwnerUserId == input.OwnerUserId ||
                    (this.OwnerUserId != null &&
                    this.OwnerUserId.Equals(input.OwnerUserId))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.RefreshTokenUsage == input.RefreshTokenUsage ||
                    (this.RefreshTokenUsage != null &&
                    this.RefreshTokenUsage.Equals(input.RefreshTokenUsage))
                ) && 
                (
                    this.AccessTokenLifetime == input.AccessTokenLifetime ||
                    (this.AccessTokenLifetime != null &&
                    this.AccessTokenLifetime.Equals(input.AccessTokenLifetime))
                ) && 
                (
                    this.AbsoluteRefreshTokenLifetime == input.AbsoluteRefreshTokenLifetime ||
                    (this.AbsoluteRefreshTokenLifetime != null &&
                    this.AbsoluteRefreshTokenLifetime.Equals(input.AbsoluteRefreshTokenLifetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthAppId != null)
                    hashCode = hashCode * 59 + this.OauthAppId.GetHashCode();
                if (this.OauthAppName != null)
                    hashCode = hashCode * 59 + this.OauthAppName.GetHashCode();
                if (this.OwnerUserId != null)
                    hashCode = hashCode * 59 + this.OwnerUserId.GetHashCode();
                if (this.LogoUri != null)
                    hashCode = hashCode * 59 + this.LogoUri.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.RefreshTokenUsage != null)
                    hashCode = hashCode * 59 + this.RefreshTokenUsage.GetHashCode();
                if (this.AccessTokenLifetime != null)
                    hashCode = hashCode * 59 + this.AccessTokenLifetime.GetHashCode();
                if (this.AbsoluteRefreshTokenLifetime != null)
                    hashCode = hashCode * 59 + this.AbsoluteRefreshTokenLifetime.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Oauth client (also knowns as &#39;app&#39;)
    /// </summary>
    [DataContract]
    public partial class OAuthApp :  IEquatable<OAuthApp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApp" /> class.
        /// </summary>
        /// <param name="oauthAppId">OAuth App Identifier.</param>
        /// <param name="oauthAppName">OAuth App Name.</param>
        /// <param name="ownerUserId">OAuth App owner user identifier.</param>
        /// <param name="logoUri">OAuth App logo uri.</param>
        public OAuthApp(string oauthAppId = default(string), string oauthAppName = default(string), int? ownerUserId = default(int?), string logoUri = default(string))
        {
            this.OauthAppId = oauthAppId;
            this.OauthAppName = oauthAppName;
            this.OwnerUserId = ownerUserId;
            this.LogoUri = logoUri;
        }
        
        /// <summary>
        /// OAuth App Identifier
        /// </summary>
        /// <value>OAuth App Identifier</value>
        [DataMember(Name="OauthAppId", EmitDefaultValue=false)]
        public string OauthAppId { get; set; }

        /// <summary>
        /// OAuth App Name
        /// </summary>
        /// <value>OAuth App Name</value>
        [DataMember(Name="OauthAppName", EmitDefaultValue=false)]
        public string OauthAppName { get; set; }

        /// <summary>
        /// OAuth App owner user identifier
        /// </summary>
        /// <value>OAuth App owner user identifier</value>
        [DataMember(Name="OwnerUserId", EmitDefaultValue=false)]
        public int? OwnerUserId { get; set; }

        /// <summary>
        /// OAuth App logo uri
        /// </summary>
        /// <value>OAuth App logo uri</value>
        [DataMember(Name="LogoUri", EmitDefaultValue=false)]
        public string LogoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OAuthApp {\n");
            sb.Append("  OauthAppId: ").Append(OauthAppId).Append("\n");
            sb.Append("  OauthAppName: ").Append(OauthAppName).Append("\n");
            sb.Append("  OwnerUserId: ").Append(OwnerUserId).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthApp);
        }

        /// <summary>
        /// Returns true if OAuthApp instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthApp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthApp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthAppId == input.OauthAppId ||
                    (this.OauthAppId != null &&
                    this.OauthAppId.Equals(input.OauthAppId))
                ) && 
                (
                    this.OauthAppName == input.OauthAppName ||
                    (this.OauthAppName != null &&
                    this.OauthAppName.Equals(input.OauthAppName))
                ) && 
                (
                    this.OwnerUserId == input.OwnerUserId ||
                    (this.OwnerUserId != null &&
                    this.OwnerUserId.Equals(input.OwnerUserId))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthAppId != null)
                    hashCode = hashCode * 59 + this.OauthAppId.GetHashCode();
                if (this.OauthAppName != null)
                    hashCode = hashCode * 59 + this.OauthAppName.GetHashCode();
                if (this.OwnerUserId != null)
                    hashCode = hashCode * 59 + this.OwnerUserId.GetHashCode();
                if (this.LogoUri != null)
                    hashCode = hashCode * 59 + this.LogoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeliveryType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliveryTypeEnum
        {
            
            /// <summary>
            /// Enum Delivery for "Delivery"
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery,
            
            /// <summary>
            /// Enum Pickup for "Pickup"
            /// </summary>
            [EnumMember(Value = "Pickup")]
            Pickup
        }

        /// <summary>
        /// Gets or Sets PickupLocationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupLocationTypeEnum
        {
            
            /// <summary>
            /// Enum TakeOut for "TakeOut"
            /// </summary>
            [EnumMember(Value = "TakeOut")]
            TakeOut,
            
            /// <summary>
            /// Enum TableService for "TableService"
            /// </summary>
            [EnumMember(Value = "TableService")]
            TableService,
            
            /// <summary>
            /// Enum DineIn for "DineIn"
            /// </summary>
            [EnumMember(Value = "DineIn")]
            DineIn
        }

        /// <summary>
        /// Gets or Sets PaymentAccountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentAccountTypeEnum
        {
            
            /// <summary>
            /// Enum Card for "Card"
            /// </summary>
            [EnumMember(Value = "Card")]
            Card,
            
            /// <summary>
            /// Enum Cash for "Cash"
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash
        }

        /// <summary>
        /// Gets or Sets OrderState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStateEnum
        {
            
            /// <summary>
            /// Enum Created for "Created"
            /// </summary>
            [EnumMember(Value = "Created")]
            Created,
            
            /// <summary>
            /// Enum PlacedCanBeCancelled for "PlacedCanBeCancelled"
            /// </summary>
            [EnumMember(Value = "PlacedCanBeCancelled")]
            PlacedCanBeCancelled,
            
            /// <summary>
            /// Enum ReadyToProcess for "ReadyToProcess"
            /// </summary>
            [EnumMember(Value = "ReadyToProcess")]
            ReadyToProcess,
            
            /// <summary>
            /// Enum AcceptedByRestaurant for "AcceptedByRestaurant"
            /// </summary>
            [EnumMember(Value = "AcceptedByRestaurant")]
            AcceptedByRestaurant,
            
            /// <summary>
            /// Enum Dispatched for "Dispatched"
            /// </summary>
            [EnumMember(Value = "Dispatched")]
            Dispatched,
            
            /// <summary>
            /// Enum Delivered for "Delivered"
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered,
            
            /// <summary>
            /// Enum Cancelled for "Cancelled"
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum ManualReview for "ManualReview"
            /// </summary>
            [EnumMember(Value = "ManualReview")]
            ManualReview,
            
            /// <summary>
            /// Enum RejectedByStore for "RejectedByStore"
            /// </summary>
            [EnumMember(Value = "RejectedByStore")]
            RejectedByStore,
            
            /// <summary>
            /// Enum RejectedByFlipdish for "RejectedByFlipdish"
            /// </summary>
            [EnumMember(Value = "RejectedByFlipdish")]
            RejectedByFlipdish,
            
            /// <summary>
            /// Enum RejectedAutomatically for "RejectedAutomatically"
            /// </summary>
            [EnumMember(Value = "RejectedAutomatically")]
            RejectedAutomatically,
            
            /// <summary>
            /// Enum RejectedAfterBeingAccepted for "RejectedAfterBeingAccepted"
            /// </summary>
            [EnumMember(Value = "RejectedAfterBeingAccepted")]
            RejectedAfterBeingAccepted,
            
            /// <summary>
            /// Enum AcceptedAndRefunded for "AcceptedAndRefunded"
            /// </summary>
            [EnumMember(Value = "AcceptedAndRefunded")]
            AcceptedAndRefunded
        }

        /// <summary>
        /// Gets or Sets AppType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Ios for "Ios"
            /// </summary>
            [EnumMember(Value = "Ios")]
            Ios,
            
            /// <summary>
            /// Enum Android for "Android"
            /// </summary>
            [EnumMember(Value = "Android")]
            Android,
            
            /// <summary>
            /// Enum Web for "Web"
            /// </summary>
            [EnumMember(Value = "Web")]
            Web,
            
            /// <summary>
            /// Enum Kiosk for "Kiosk"
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            Kiosk,
            
            /// <summary>
            /// Enum Pos for "Pos"
            /// </summary>
            [EnumMember(Value = "Pos")]
            Pos,
            
            /// <summary>
            /// Enum TelephoneCall for "TelephoneCall"
            /// </summary>
            [EnumMember(Value = "TelephoneCall")]
            TelephoneCall,
            
            /// <summary>
            /// Enum Sms for "Sms"
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms,
            
            /// <summary>
            /// Enum PwaAndroid for "PwaAndroid"
            /// </summary>
            [EnumMember(Value = "PwaAndroid")]
            PwaAndroid,
            
            /// <summary>
            /// Enum PwaIos for "PwaIos"
            /// </summary>
            [EnumMember(Value = "PwaIos")]
            PwaIos
        }

        /// <summary>
        /// Gets or Sets DeliveryType
        /// </summary>
        [DataMember(Name="DeliveryType", EmitDefaultValue=false)]
        public DeliveryTypeEnum? DeliveryType { get; set; }
        /// <summary>
        /// Gets or Sets PickupLocationType
        /// </summary>
        [DataMember(Name="PickupLocationType", EmitDefaultValue=false)]
        public PickupLocationTypeEnum? PickupLocationType { get; set; }
        /// <summary>
        /// Gets or Sets PaymentAccountType
        /// </summary>
        [DataMember(Name="PaymentAccountType", EmitDefaultValue=false)]
        public PaymentAccountTypeEnum? PaymentAccountType { get; set; }
        /// <summary>
        /// Gets or Sets OrderState
        /// </summary>
        [DataMember(Name="OrderState", EmitDefaultValue=false)]
        public OrderStateEnum? OrderState { get; set; }
        /// <summary>
        /// Gets or Sets AppType
        /// </summary>
        [DataMember(Name="AppType", EmitDefaultValue=false)]
        public AppTypeEnum? AppType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="Store">Store.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Voucher">Voucher.</param>
        /// <param name="Fees">Fees.</param>
        /// <param name="DeliveryType">DeliveryType.</param>
        /// <param name="PickupLocationType">PickupLocationType.</param>
        /// <param name="OrderItems">OrderItems.</param>
        /// <param name="TipAmount">TipAmount.</param>
        /// <param name="DeliveryAmount">DeliveryAmount.</param>
        /// <param name="OrderItemsAmount">OrderItemsAmount.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="OnlineOrderingFee">OnlineOrderingFee.</param>
        /// <param name="PaymentAccountType">PaymentAccountType.</param>
        /// <param name="PaymentAccountDescription">PaymentAccountDescription.</param>
        /// <param name="DeliveryLocation">DeliveryLocation.</param>
        /// <param name="CustomerLocation">CustomerLocation.</param>
        /// <param name="OrderState">OrderState.</param>
        /// <param name="IsPreOrder">IsPreOrder.</param>
        /// <param name="PlacedTime">PlacedTime.</param>
        /// <param name="RequestedForTime">RequestedForTime.</param>
        /// <param name="ChefNote">ChefNote.</param>
        /// <param name="AppType">AppType.</param>
        /// <param name="UserRating">UserRating.</param>
        public Order(int? OrderId = default(int?), StoreSummary Store = default(StoreSummary), CustomerSummary Customer = default(CustomerSummary), VoucherSummary Voucher = default(VoucherSummary), FeeSummary Fees = default(FeeSummary), DeliveryTypeEnum? DeliveryType = default(DeliveryTypeEnum?), PickupLocationTypeEnum? PickupLocationType = default(PickupLocationTypeEnum?), List<OrderItem> OrderItems = default(List<OrderItem>), double? TipAmount = default(double?), double? DeliveryAmount = default(double?), double? OrderItemsAmount = default(double?), double? Amount = default(double?), double? OnlineOrderingFee = default(double?), PaymentAccountTypeEnum? PaymentAccountType = default(PaymentAccountTypeEnum?), string PaymentAccountDescription = default(string), DeliveryLocation DeliveryLocation = default(DeliveryLocation), Coordinates CustomerLocation = default(Coordinates), OrderStateEnum? OrderState = default(OrderStateEnum?), bool? IsPreOrder = default(bool?), DateTime? PlacedTime = default(DateTime?), DateTime? RequestedForTime = default(DateTime?), string ChefNote = default(string), AppTypeEnum? AppType = default(AppTypeEnum?), int? UserRating = default(int?))
        {
            this.OrderId = OrderId;
            this.Store = Store;
            this.Customer = Customer;
            this.Voucher = Voucher;
            this.Fees = Fees;
            this.DeliveryType = DeliveryType;
            this.PickupLocationType = PickupLocationType;
            this.OrderItems = OrderItems;
            this.TipAmount = TipAmount;
            this.DeliveryAmount = DeliveryAmount;
            this.OrderItemsAmount = OrderItemsAmount;
            this.Amount = Amount;
            this.OnlineOrderingFee = OnlineOrderingFee;
            this.PaymentAccountType = PaymentAccountType;
            this.PaymentAccountDescription = PaymentAccountDescription;
            this.DeliveryLocation = DeliveryLocation;
            this.CustomerLocation = CustomerLocation;
            this.OrderState = OrderState;
            this.IsPreOrder = IsPreOrder;
            this.PlacedTime = PlacedTime;
            this.RequestedForTime = RequestedForTime;
            this.ChefNote = ChefNote;
            this.AppType = AppType;
            this.UserRating = UserRating;
        }
        
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name="Store", EmitDefaultValue=false)]
        public StoreSummary Store { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="Customer", EmitDefaultValue=false)]
        public CustomerSummary Customer { get; set; }

        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name="Voucher", EmitDefaultValue=false)]
        public VoucherSummary Voucher { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="Fees", EmitDefaultValue=false)]
        public FeeSummary Fees { get; set; }



        /// <summary>
        /// Gets or Sets OrderItems
        /// </summary>
        [DataMember(Name="OrderItems", EmitDefaultValue=false)]
        public List<OrderItem> OrderItems { get; set; }

        /// <summary>
        /// Gets or Sets TipAmount
        /// </summary>
        [DataMember(Name="TipAmount", EmitDefaultValue=false)]
        public double? TipAmount { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAmount
        /// </summary>
        [DataMember(Name="DeliveryAmount", EmitDefaultValue=false)]
        public double? DeliveryAmount { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemsAmount
        /// </summary>
        [DataMember(Name="OrderItemsAmount", EmitDefaultValue=false)]
        public double? OrderItemsAmount { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets OnlineOrderingFee
        /// </summary>
        [DataMember(Name="OnlineOrderingFee", EmitDefaultValue=false)]
        public double? OnlineOrderingFee { get; set; }


        /// <summary>
        /// Gets or Sets PaymentAccountDescription
        /// </summary>
        [DataMember(Name="PaymentAccountDescription", EmitDefaultValue=false)]
        public string PaymentAccountDescription { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocation
        /// </summary>
        [DataMember(Name="DeliveryLocation", EmitDefaultValue=false)]
        public DeliveryLocation DeliveryLocation { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLocation
        /// </summary>
        [DataMember(Name="CustomerLocation", EmitDefaultValue=false)]
        public Coordinates CustomerLocation { get; set; }


        /// <summary>
        /// Gets or Sets IsPreOrder
        /// </summary>
        [DataMember(Name="IsPreOrder", EmitDefaultValue=false)]
        public bool? IsPreOrder { get; set; }

        /// <summary>
        /// Gets or Sets PlacedTime
        /// </summary>
        [DataMember(Name="PlacedTime", EmitDefaultValue=false)]
        public DateTime? PlacedTime { get; set; }

        /// <summary>
        /// Gets or Sets RequestedForTime
        /// </summary>
        [DataMember(Name="RequestedForTime", EmitDefaultValue=false)]
        public DateTime? RequestedForTime { get; set; }

        /// <summary>
        /// Gets or Sets ChefNote
        /// </summary>
        [DataMember(Name="ChefNote", EmitDefaultValue=false)]
        public string ChefNote { get; set; }


        /// <summary>
        /// Gets or Sets UserRating
        /// </summary>
        [DataMember(Name="UserRating", EmitDefaultValue=false)]
        public int? UserRating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  PickupLocationType: ").Append(PickupLocationType).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  DeliveryAmount: ").Append(DeliveryAmount).Append("\n");
            sb.Append("  OrderItemsAmount: ").Append(OrderItemsAmount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OnlineOrderingFee: ").Append(OnlineOrderingFee).Append("\n");
            sb.Append("  PaymentAccountType: ").Append(PaymentAccountType).Append("\n");
            sb.Append("  PaymentAccountDescription: ").Append(PaymentAccountDescription).Append("\n");
            sb.Append("  DeliveryLocation: ").Append(DeliveryLocation).Append("\n");
            sb.Append("  CustomerLocation: ").Append(CustomerLocation).Append("\n");
            sb.Append("  OrderState: ").Append(OrderState).Append("\n");
            sb.Append("  IsPreOrder: ").Append(IsPreOrder).Append("\n");
            sb.Append("  PlacedTime: ").Append(PlacedTime).Append("\n");
            sb.Append("  RequestedForTime: ").Append(RequestedForTime).Append("\n");
            sb.Append("  ChefNote: ").Append(ChefNote).Append("\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  UserRating: ").Append(UserRating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.Store == other.Store ||
                    this.Store != null &&
                    this.Store.Equals(other.Store)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Voucher == other.Voucher ||
                    this.Voucher != null &&
                    this.Voucher.Equals(other.Voucher)
                ) && 
                (
                    this.Fees == other.Fees ||
                    this.Fees != null &&
                    this.Fees.Equals(other.Fees)
                ) && 
                (
                    this.DeliveryType == other.DeliveryType ||
                    this.DeliveryType != null &&
                    this.DeliveryType.Equals(other.DeliveryType)
                ) && 
                (
                    this.PickupLocationType == other.PickupLocationType ||
                    this.PickupLocationType != null &&
                    this.PickupLocationType.Equals(other.PickupLocationType)
                ) && 
                (
                    this.OrderItems == other.OrderItems ||
                    this.OrderItems != null &&
                    this.OrderItems.SequenceEqual(other.OrderItems)
                ) && 
                (
                    this.TipAmount == other.TipAmount ||
                    this.TipAmount != null &&
                    this.TipAmount.Equals(other.TipAmount)
                ) && 
                (
                    this.DeliveryAmount == other.DeliveryAmount ||
                    this.DeliveryAmount != null &&
                    this.DeliveryAmount.Equals(other.DeliveryAmount)
                ) && 
                (
                    this.OrderItemsAmount == other.OrderItemsAmount ||
                    this.OrderItemsAmount != null &&
                    this.OrderItemsAmount.Equals(other.OrderItemsAmount)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.OnlineOrderingFee == other.OnlineOrderingFee ||
                    this.OnlineOrderingFee != null &&
                    this.OnlineOrderingFee.Equals(other.OnlineOrderingFee)
                ) && 
                (
                    this.PaymentAccountType == other.PaymentAccountType ||
                    this.PaymentAccountType != null &&
                    this.PaymentAccountType.Equals(other.PaymentAccountType)
                ) && 
                (
                    this.PaymentAccountDescription == other.PaymentAccountDescription ||
                    this.PaymentAccountDescription != null &&
                    this.PaymentAccountDescription.Equals(other.PaymentAccountDescription)
                ) && 
                (
                    this.DeliveryLocation == other.DeliveryLocation ||
                    this.DeliveryLocation != null &&
                    this.DeliveryLocation.Equals(other.DeliveryLocation)
                ) && 
                (
                    this.CustomerLocation == other.CustomerLocation ||
                    this.CustomerLocation != null &&
                    this.CustomerLocation.Equals(other.CustomerLocation)
                ) && 
                (
                    this.OrderState == other.OrderState ||
                    this.OrderState != null &&
                    this.OrderState.Equals(other.OrderState)
                ) && 
                (
                    this.IsPreOrder == other.IsPreOrder ||
                    this.IsPreOrder != null &&
                    this.IsPreOrder.Equals(other.IsPreOrder)
                ) && 
                (
                    this.PlacedTime == other.PlacedTime ||
                    this.PlacedTime != null &&
                    this.PlacedTime.Equals(other.PlacedTime)
                ) && 
                (
                    this.RequestedForTime == other.RequestedForTime ||
                    this.RequestedForTime != null &&
                    this.RequestedForTime.Equals(other.RequestedForTime)
                ) && 
                (
                    this.ChefNote == other.ChefNote ||
                    this.ChefNote != null &&
                    this.ChefNote.Equals(other.ChefNote)
                ) && 
                (
                    this.AppType == other.AppType ||
                    this.AppType != null &&
                    this.AppType.Equals(other.AppType)
                ) && 
                (
                    this.UserRating == other.UserRating ||
                    this.UserRating != null &&
                    this.UserRating.Equals(other.UserRating)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Store != null)
                    hash = hash * 59 + this.Store.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Voucher != null)
                    hash = hash * 59 + this.Voucher.GetHashCode();
                if (this.Fees != null)
                    hash = hash * 59 + this.Fees.GetHashCode();
                if (this.DeliveryType != null)
                    hash = hash * 59 + this.DeliveryType.GetHashCode();
                if (this.PickupLocationType != null)
                    hash = hash * 59 + this.PickupLocationType.GetHashCode();
                if (this.OrderItems != null)
                    hash = hash * 59 + this.OrderItems.GetHashCode();
                if (this.TipAmount != null)
                    hash = hash * 59 + this.TipAmount.GetHashCode();
                if (this.DeliveryAmount != null)
                    hash = hash * 59 + this.DeliveryAmount.GetHashCode();
                if (this.OrderItemsAmount != null)
                    hash = hash * 59 + this.OrderItemsAmount.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.OnlineOrderingFee != null)
                    hash = hash * 59 + this.OnlineOrderingFee.GetHashCode();
                if (this.PaymentAccountType != null)
                    hash = hash * 59 + this.PaymentAccountType.GetHashCode();
                if (this.PaymentAccountDescription != null)
                    hash = hash * 59 + this.PaymentAccountDescription.GetHashCode();
                if (this.DeliveryLocation != null)
                    hash = hash * 59 + this.DeliveryLocation.GetHashCode();
                if (this.CustomerLocation != null)
                    hash = hash * 59 + this.CustomerLocation.GetHashCode();
                if (this.OrderState != null)
                    hash = hash * 59 + this.OrderState.GetHashCode();
                if (this.IsPreOrder != null)
                    hash = hash * 59 + this.IsPreOrder.GetHashCode();
                if (this.PlacedTime != null)
                    hash = hash * 59 + this.PlacedTime.GetHashCode();
                if (this.RequestedForTime != null)
                    hash = hash * 59 + this.RequestedForTime.GetHashCode();
                if (this.ChefNote != null)
                    hash = hash * 59 + this.ChefNote.GetHashCode();
                if (this.AppType != null)
                    hash = hash * 59 + this.AppType.GetHashCode();
                if (this.UserRating != null)
                    hash = hash * 59 + this.UserRating.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

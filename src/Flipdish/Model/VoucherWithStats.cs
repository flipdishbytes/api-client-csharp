/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Voucher With Statistics
    /// </summary>
    [DataContract]
    public partial class VoucherWithStats :  IEquatable<VoucherWithStats>, IValidatableObject
    {
        /// <summary>
        /// Voucher Status
        /// </summary>
        /// <value>Voucher Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,
            
            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 2,
            
            /// <summary>
            /// Enum Used for value: Used
            /// </summary>
            [EnumMember(Value = "Used")]
            Used = 3
        }

        /// <summary>
        /// Voucher Status
        /// </summary>
        /// <value>Voucher Status</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Voucher Type
        /// </summary>
        /// <value>Voucher Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherTypeEnum
        {
            
            /// <summary>
            /// Enum PercentageDiscount for value: PercentageDiscount
            /// </summary>
            [EnumMember(Value = "PercentageDiscount")]
            PercentageDiscount = 1,
            
            /// <summary>
            /// Enum LumpDiscount for value: LumpDiscount
            /// </summary>
            [EnumMember(Value = "LumpDiscount")]
            LumpDiscount = 2,
            
            /// <summary>
            /// Enum AddItem for value: AddItem
            /// </summary>
            [EnumMember(Value = "AddItem")]
            AddItem = 3,
            
            /// <summary>
            /// Enum CreditNote for value: CreditNote
            /// </summary>
            [EnumMember(Value = "CreditNote")]
            CreditNote = 4
        }

        /// <summary>
        /// Voucher Type
        /// </summary>
        /// <value>Voucher Type</value>
        [DataMember(Name="VoucherType", EmitDefaultValue=false)]
        public VoucherTypeEnum? VoucherType { get; set; }
        /// <summary>
        /// Voucher Sub Type
        /// </summary>
        /// <value>Voucher Sub Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherSubTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum SignUp for value: SignUp
            /// </summary>
            [EnumMember(Value = "SignUp")]
            SignUp = 2,
            
            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 3,
            
            /// <summary>
            /// Enum Loyalty25 for value: Loyalty25
            /// </summary>
            [EnumMember(Value = "Loyalty25")]
            Loyalty25 = 4,
            
            /// <summary>
            /// Enum Retention for value: Retention
            /// </summary>
            [EnumMember(Value = "Retention")]
            Retention = 5,
            
            /// <summary>
            /// Enum SecondaryRetention for value: SecondaryRetention
            /// </summary>
            [EnumMember(Value = "SecondaryRetention")]
            SecondaryRetention = 6,
            
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 7
        }

        /// <summary>
        /// Voucher Sub Type
        /// </summary>
        /// <value>Voucher Sub Type</value>
        [DataMember(Name="VoucherSubType", EmitDefaultValue=false)]
        public VoucherSubTypeEnum? VoucherSubType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherWithStats" /> class.
        /// </summary>
        /// <param name="totalUsed">Total times the voucher was used.</param>
        /// <param name="totalCustomers">Total amount of customers who used this voucher.</param>
        /// <param name="totalAmountFromOrders">Total amount of money from orders.</param>
        /// <param name="totalDiscounted">Total amount of money given away.</param>
        /// <param name="averageOrderSize">Average Order Size.</param>
        /// <param name="voucherId">Voucher Id.</param>
        /// <param name="code">Voucher Code.</param>
        /// <param name="status">Voucher Status.</param>
        /// <param name="voucherType">Voucher Type.</param>
        /// <param name="voucherSubType">Voucher Sub Type.</param>
        /// <param name="startDate">Voucher Expires On (Time in UTC).</param>
        /// <param name="addItemDetails">Add item details.</param>
        /// <param name="creditNoteDetails">Credit note details.</param>
        /// <param name="lumpDiscountDetails">Lump discount details.</param>
        /// <param name="percentDiscountDetails">Percent discount details.</param>
        /// <param name="description">Voucher Description (Visible on printout).</param>
        /// <param name="isEnabled">Is voucher enabled.</param>
        /// <param name="expiryDate">Voucher Expires On (Time in UTC).</param>
        public VoucherWithStats(int? totalUsed = default(int?), int? totalCustomers = default(int?), double? totalAmountFromOrders = default(double?), double? totalDiscounted = default(double?), double? averageOrderSize = default(double?), int? voucherId = default(int?), string code = default(string), StatusEnum? status = default(StatusEnum?), VoucherTypeEnum? voucherType = default(VoucherTypeEnum?), VoucherSubTypeEnum? voucherSubType = default(VoucherSubTypeEnum?), DateTime? startDate = default(DateTime?), AddItemDetails addItemDetails = default(AddItemDetails), CreditNoteDetails creditNoteDetails = default(CreditNoteDetails), LumpDiscountDetails lumpDiscountDetails = default(LumpDiscountDetails), PercentDiscountDetails percentDiscountDetails = default(PercentDiscountDetails), string description = default(string), bool? isEnabled = default(bool?), DateTime? expiryDate = default(DateTime?))
        {
            this.TotalUsed = totalUsed;
            this.TotalCustomers = totalCustomers;
            this.TotalAmountFromOrders = totalAmountFromOrders;
            this.TotalDiscounted = totalDiscounted;
            this.AverageOrderSize = averageOrderSize;
            this.VoucherId = voucherId;
            this.Code = code;
            this.Status = status;
            this.VoucherType = voucherType;
            this.VoucherSubType = voucherSubType;
            this.StartDate = startDate;
            this.AddItemDetails = addItemDetails;
            this.CreditNoteDetails = creditNoteDetails;
            this.LumpDiscountDetails = lumpDiscountDetails;
            this.PercentDiscountDetails = percentDiscountDetails;
            this.Description = description;
            this.IsEnabled = isEnabled;
            this.ExpiryDate = expiryDate;
        }
        
        /// <summary>
        /// Total times the voucher was used
        /// </summary>
        /// <value>Total times the voucher was used</value>
        [DataMember(Name="TotalUsed", EmitDefaultValue=false)]
        public int? TotalUsed { get; set; }

        /// <summary>
        /// Total amount of customers who used this voucher
        /// </summary>
        /// <value>Total amount of customers who used this voucher</value>
        [DataMember(Name="TotalCustomers", EmitDefaultValue=false)]
        public int? TotalCustomers { get; set; }

        /// <summary>
        /// Total amount of money from orders
        /// </summary>
        /// <value>Total amount of money from orders</value>
        [DataMember(Name="TotalAmountFromOrders", EmitDefaultValue=false)]
        public double? TotalAmountFromOrders { get; set; }

        /// <summary>
        /// Total amount of money given away
        /// </summary>
        /// <value>Total amount of money given away</value>
        [DataMember(Name="TotalDiscounted", EmitDefaultValue=false)]
        public double? TotalDiscounted { get; set; }

        /// <summary>
        /// Average Order Size
        /// </summary>
        /// <value>Average Order Size</value>
        [DataMember(Name="AverageOrderSize", EmitDefaultValue=false)]
        public double? AverageOrderSize { get; set; }

        /// <summary>
        /// Voucher Id
        /// </summary>
        /// <value>Voucher Id</value>
        [DataMember(Name="VoucherId", EmitDefaultValue=false)]
        public int? VoucherId { get; set; }

        /// <summary>
        /// Voucher Code
        /// </summary>
        /// <value>Voucher Code</value>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }




        /// <summary>
        /// Voucher Expires On (Time in UTC)
        /// </summary>
        /// <value>Voucher Expires On (Time in UTC)</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Add item details
        /// </summary>
        /// <value>Add item details</value>
        [DataMember(Name="AddItemDetails", EmitDefaultValue=false)]
        public AddItemDetails AddItemDetails { get; set; }

        /// <summary>
        /// Credit note details
        /// </summary>
        /// <value>Credit note details</value>
        [DataMember(Name="CreditNoteDetails", EmitDefaultValue=false)]
        public CreditNoteDetails CreditNoteDetails { get; set; }

        /// <summary>
        /// Lump discount details
        /// </summary>
        /// <value>Lump discount details</value>
        [DataMember(Name="LumpDiscountDetails", EmitDefaultValue=false)]
        public LumpDiscountDetails LumpDiscountDetails { get; set; }

        /// <summary>
        /// Percent discount details
        /// </summary>
        /// <value>Percent discount details</value>
        [DataMember(Name="PercentDiscountDetails", EmitDefaultValue=false)]
        public PercentDiscountDetails PercentDiscountDetails { get; set; }

        /// <summary>
        /// Voucher Description (Visible on printout)
        /// </summary>
        /// <value>Voucher Description (Visible on printout)</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Is voucher enabled
        /// </summary>
        /// <value>Is voucher enabled</value>
        [DataMember(Name="IsEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Voucher Expires On (Time in UTC)
        /// </summary>
        /// <value>Voucher Expires On (Time in UTC)</value>
        [DataMember(Name="ExpiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoucherWithStats {\n");
            sb.Append("  TotalUsed: ").Append(TotalUsed).Append("\n");
            sb.Append("  TotalCustomers: ").Append(TotalCustomers).Append("\n");
            sb.Append("  TotalAmountFromOrders: ").Append(TotalAmountFromOrders).Append("\n");
            sb.Append("  TotalDiscounted: ").Append(TotalDiscounted).Append("\n");
            sb.Append("  AverageOrderSize: ").Append(AverageOrderSize).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("  VoucherSubType: ").Append(VoucherSubType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  AddItemDetails: ").Append(AddItemDetails).Append("\n");
            sb.Append("  CreditNoteDetails: ").Append(CreditNoteDetails).Append("\n");
            sb.Append("  LumpDiscountDetails: ").Append(LumpDiscountDetails).Append("\n");
            sb.Append("  PercentDiscountDetails: ").Append(PercentDiscountDetails).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoucherWithStats);
        }

        /// <summary>
        /// Returns true if VoucherWithStats instances are equal
        /// </summary>
        /// <param name="input">Instance of VoucherWithStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoucherWithStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalUsed == input.TotalUsed ||
                    (this.TotalUsed != null &&
                    this.TotalUsed.Equals(input.TotalUsed))
                ) && 
                (
                    this.TotalCustomers == input.TotalCustomers ||
                    (this.TotalCustomers != null &&
                    this.TotalCustomers.Equals(input.TotalCustomers))
                ) && 
                (
                    this.TotalAmountFromOrders == input.TotalAmountFromOrders ||
                    (this.TotalAmountFromOrders != null &&
                    this.TotalAmountFromOrders.Equals(input.TotalAmountFromOrders))
                ) && 
                (
                    this.TotalDiscounted == input.TotalDiscounted ||
                    (this.TotalDiscounted != null &&
                    this.TotalDiscounted.Equals(input.TotalDiscounted))
                ) && 
                (
                    this.AverageOrderSize == input.AverageOrderSize ||
                    (this.AverageOrderSize != null &&
                    this.AverageOrderSize.Equals(input.AverageOrderSize))
                ) && 
                (
                    this.VoucherId == input.VoucherId ||
                    (this.VoucherId != null &&
                    this.VoucherId.Equals(input.VoucherId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VoucherType == input.VoucherType ||
                    (this.VoucherType != null &&
                    this.VoucherType.Equals(input.VoucherType))
                ) && 
                (
                    this.VoucherSubType == input.VoucherSubType ||
                    (this.VoucherSubType != null &&
                    this.VoucherSubType.Equals(input.VoucherSubType))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.AddItemDetails == input.AddItemDetails ||
                    (this.AddItemDetails != null &&
                    this.AddItemDetails.Equals(input.AddItemDetails))
                ) && 
                (
                    this.CreditNoteDetails == input.CreditNoteDetails ||
                    (this.CreditNoteDetails != null &&
                    this.CreditNoteDetails.Equals(input.CreditNoteDetails))
                ) && 
                (
                    this.LumpDiscountDetails == input.LumpDiscountDetails ||
                    (this.LumpDiscountDetails != null &&
                    this.LumpDiscountDetails.Equals(input.LumpDiscountDetails))
                ) && 
                (
                    this.PercentDiscountDetails == input.PercentDiscountDetails ||
                    (this.PercentDiscountDetails != null &&
                    this.PercentDiscountDetails.Equals(input.PercentDiscountDetails))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalUsed != null)
                    hashCode = hashCode * 59 + this.TotalUsed.GetHashCode();
                if (this.TotalCustomers != null)
                    hashCode = hashCode * 59 + this.TotalCustomers.GetHashCode();
                if (this.TotalAmountFromOrders != null)
                    hashCode = hashCode * 59 + this.TotalAmountFromOrders.GetHashCode();
                if (this.TotalDiscounted != null)
                    hashCode = hashCode * 59 + this.TotalDiscounted.GetHashCode();
                if (this.AverageOrderSize != null)
                    hashCode = hashCode * 59 + this.AverageOrderSize.GetHashCode();
                if (this.VoucherId != null)
                    hashCode = hashCode * 59 + this.VoucherId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VoucherType != null)
                    hashCode = hashCode * 59 + this.VoucherType.GetHashCode();
                if (this.VoucherSubType != null)
                    hashCode = hashCode * 59 + this.VoucherSubType.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.AddItemDetails != null)
                    hashCode = hashCode * 59 + this.AddItemDetails.GetHashCode();
                if (this.CreditNoteDetails != null)
                    hashCode = hashCode * 59 + this.CreditNoteDetails.GetHashCode();
                if (this.LumpDiscountDetails != null)
                    hashCode = hashCode * 59 + this.LumpDiscountDetails.GetHashCode();
                if (this.PercentDiscountDetails != null)
                    hashCode = hashCode * 59 + this.PercentDiscountDetails.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Voucher With Statistics
    /// </summary>
    [DataContract]
    public partial class VoucherWithStats :  IEquatable<VoucherWithStats>, IValidatableObject
    {
        /// <summary>
        /// Voucher Status
        /// </summary>
        /// <value>Voucher Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,
            
            /// <summary>
            /// Enum NotYetValid for value: NotYetValid
            /// </summary>
            [EnumMember(Value = "NotYetValid")]
            NotYetValid = 2,
            
            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 3,
            
            /// <summary>
            /// Enum Used for value: Used
            /// </summary>
            [EnumMember(Value = "Used")]
            Used = 4,
            
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 5
        }

        /// <summary>
        /// Voucher Status
        /// </summary>
        /// <value>Voucher Status</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Voucher Type
        /// </summary>
        /// <value>Voucher Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherTypeEnum
        {
            
            /// <summary>
            /// Enum PercentageDiscount for value: PercentageDiscount
            /// </summary>
            [EnumMember(Value = "PercentageDiscount")]
            PercentageDiscount = 1,
            
            /// <summary>
            /// Enum LumpDiscount for value: LumpDiscount
            /// </summary>
            [EnumMember(Value = "LumpDiscount")]
            LumpDiscount = 2,
            
            /// <summary>
            /// Enum AddItem for value: AddItem
            /// </summary>
            [EnumMember(Value = "AddItem")]
            AddItem = 3,
            
            /// <summary>
            /// Enum CreditNote for value: CreditNote
            /// </summary>
            [EnumMember(Value = "CreditNote")]
            CreditNote = 4
        }

        /// <summary>
        /// Voucher Type
        /// </summary>
        /// <value>Voucher Type</value>
        [DataMember(Name="VoucherType", EmitDefaultValue=false)]
        public VoucherTypeEnum? VoucherType { get; set; }
        /// <summary>
        /// Voucher Sub Type
        /// </summary>
        /// <value>Voucher Sub Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherSubTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum SignUp for value: SignUp
            /// </summary>
            [EnumMember(Value = "SignUp")]
            SignUp = 2,
            
            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 3,
            
            /// <summary>
            /// Enum Loyalty25 for value: Loyalty25
            /// </summary>
            [EnumMember(Value = "Loyalty25")]
            Loyalty25 = 4,
            
            /// <summary>
            /// Enum Retention for value: Retention
            /// </summary>
            [EnumMember(Value = "Retention")]
            Retention = 5,
            
            /// <summary>
            /// Enum SecondaryRetention for value: SecondaryRetention
            /// </summary>
            [EnumMember(Value = "SecondaryRetention")]
            SecondaryRetention = 6,
            
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 7
        }

        /// <summary>
        /// Voucher Sub Type
        /// </summary>
        /// <value>Voucher Sub Type</value>
        [DataMember(Name="VoucherSubType", EmitDefaultValue=false)]
        public VoucherSubTypeEnum? VoucherSubType { get; set; }
        /// <summary>
        /// Currency of the voucher
        /// </summary>
        /// <value>Currency of the voucher</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112
        }

        /// <summary>
        /// Currency of the voucher
        /// </summary>
        /// <value>Currency of the voucher</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherWithStats" /> class.
        /// </summary>
        /// <param name="totalUsed">Total times the voucher was used.</param>
        /// <param name="totalCustomers">Total amount of customers who used this voucher.</param>
        /// <param name="totalAmountFromOrders">Total amount of money from orders.</param>
        /// <param name="totalDiscounted">Total amount of money given away.</param>
        /// <param name="averageOrderSize">Average Order Size.</param>
        /// <param name="voucherId">Voucher Id.</param>
        /// <param name="status">Voucher Status.</param>
        /// <param name="voucherType">Voucher Type.</param>
        /// <param name="voucherSubType">Voucher Sub Type.</param>
        /// <param name="currency">Currency of the voucher.</param>
        /// <param name="stores">Stores that this voucher applies to.</param>
        /// <param name="storeNames">Stores that this voucher applies to.</param>
        /// <param name="addItemDetails">Add item details.</param>
        /// <param name="creditNoteDetails">Credit note details.</param>
        /// <param name="lumpDiscountDetails">Lump discount details.</param>
        /// <param name="percentDiscountDetails">Percent discount details.</param>
        /// <param name="code">Voucher Code.</param>
        /// <param name="description">Voucher Description (Visible on printout).</param>
        /// <param name="validOnOrdersOver">Valid on orders on or above.</param>
        /// <param name="takesPriority">Takes priority.</param>
        /// <param name="isEnabled">Is voucher enabled.</param>
        /// <param name="isAutomaticallyApplied">Is voucher automatically applied.</param>
        /// <param name="includeDeliveryFee">Include delivery fees.</param>
        /// <param name="isValidForDeliveryOrders">Valid for delivery orders.</param>
        /// <param name="isValidForPickupOrders">Valid for pickup orders.</param>
        /// <param name="isValidForOrdersPayedOnline">Valid for orders payed online.</param>
        /// <param name="isValidForOrdersPayedByCash">Valid for orders payed in cash.</param>
        /// <param name="isValidForFirstOrderOnly">Valid only on the first order by the customer.</param>
        /// <param name="isValidOncePerCustomer">Valid once per customer.</param>
        /// <param name="isValidOnlyOnce">Valid only once, by any customer (once used cannot be used again by any other customer).</param>
        /// <param name="startDate">Voucher Starts On (Time in UTC).</param>
        /// <param name="expiryDate">Voucher Expires On (Time in UTC).</param>
        public VoucherWithStats(int? totalUsed = default(int?), int? totalCustomers = default(int?), double? totalAmountFromOrders = default(double?), double? totalDiscounted = default(double?), double? averageOrderSize = default(double?), int? voucherId = default(int?), StatusEnum? status = default(StatusEnum?), VoucherTypeEnum? voucherType = default(VoucherTypeEnum?), VoucherSubTypeEnum? voucherSubType = default(VoucherSubTypeEnum?), CurrencyEnum? currency = default(CurrencyEnum?), List<int?> stores = default(List<int?>), List<string> storeNames = default(List<string>), AddItemDetails addItemDetails = default(AddItemDetails), CreditNoteDetails creditNoteDetails = default(CreditNoteDetails), LumpDiscountDetails lumpDiscountDetails = default(LumpDiscountDetails), PercentDiscountDetails percentDiscountDetails = default(PercentDiscountDetails), string code = default(string), string description = default(string), double? validOnOrdersOver = default(double?), bool? takesPriority = default(bool?), bool? isEnabled = default(bool?), bool? isAutomaticallyApplied = default(bool?), bool? includeDeliveryFee = default(bool?), bool? isValidForDeliveryOrders = default(bool?), bool? isValidForPickupOrders = default(bool?), bool? isValidForOrdersPayedOnline = default(bool?), bool? isValidForOrdersPayedByCash = default(bool?), bool? isValidForFirstOrderOnly = default(bool?), bool? isValidOncePerCustomer = default(bool?), bool? isValidOnlyOnce = default(bool?), DateTime? startDate = default(DateTime?), DateTime? expiryDate = default(DateTime?))
        {
            this.TotalUsed = totalUsed;
            this.TotalCustomers = totalCustomers;
            this.TotalAmountFromOrders = totalAmountFromOrders;
            this.TotalDiscounted = totalDiscounted;
            this.AverageOrderSize = averageOrderSize;
            this.VoucherId = voucherId;
            this.Status = status;
            this.VoucherType = voucherType;
            this.VoucherSubType = voucherSubType;
            this.Currency = currency;
            this.Stores = stores;
            this.StoreNames = storeNames;
            this.AddItemDetails = addItemDetails;
            this.CreditNoteDetails = creditNoteDetails;
            this.LumpDiscountDetails = lumpDiscountDetails;
            this.PercentDiscountDetails = percentDiscountDetails;
            this.Code = code;
            this.Description = description;
            this.ValidOnOrdersOver = validOnOrdersOver;
            this.TakesPriority = takesPriority;
            this.IsEnabled = isEnabled;
            this.IsAutomaticallyApplied = isAutomaticallyApplied;
            this.IncludeDeliveryFee = includeDeliveryFee;
            this.IsValidForDeliveryOrders = isValidForDeliveryOrders;
            this.IsValidForPickupOrders = isValidForPickupOrders;
            this.IsValidForOrdersPayedOnline = isValidForOrdersPayedOnline;
            this.IsValidForOrdersPayedByCash = isValidForOrdersPayedByCash;
            this.IsValidForFirstOrderOnly = isValidForFirstOrderOnly;
            this.IsValidOncePerCustomer = isValidOncePerCustomer;
            this.IsValidOnlyOnce = isValidOnlyOnce;
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
        }
        
        /// <summary>
        /// Total times the voucher was used
        /// </summary>
        /// <value>Total times the voucher was used</value>
        [DataMember(Name="TotalUsed", EmitDefaultValue=false)]
        public int? TotalUsed { get; set; }

        /// <summary>
        /// Total amount of customers who used this voucher
        /// </summary>
        /// <value>Total amount of customers who used this voucher</value>
        [DataMember(Name="TotalCustomers", EmitDefaultValue=false)]
        public int? TotalCustomers { get; set; }

        /// <summary>
        /// Total amount of money from orders
        /// </summary>
        /// <value>Total amount of money from orders</value>
        [DataMember(Name="TotalAmountFromOrders", EmitDefaultValue=false)]
        public double? TotalAmountFromOrders { get; set; }

        /// <summary>
        /// Total amount of money given away
        /// </summary>
        /// <value>Total amount of money given away</value>
        [DataMember(Name="TotalDiscounted", EmitDefaultValue=false)]
        public double? TotalDiscounted { get; set; }

        /// <summary>
        /// Average Order Size
        /// </summary>
        /// <value>Average Order Size</value>
        [DataMember(Name="AverageOrderSize", EmitDefaultValue=false)]
        public double? AverageOrderSize { get; set; }

        /// <summary>
        /// Voucher Id
        /// </summary>
        /// <value>Voucher Id</value>
        [DataMember(Name="VoucherId", EmitDefaultValue=false)]
        public int? VoucherId { get; set; }





        /// <summary>
        /// Stores that this voucher applies to
        /// </summary>
        /// <value>Stores that this voucher applies to</value>
        [DataMember(Name="Stores", EmitDefaultValue=false)]
        public List<int?> Stores { get; set; }

        /// <summary>
        /// Stores that this voucher applies to
        /// </summary>
        /// <value>Stores that this voucher applies to</value>
        [DataMember(Name="StoreNames", EmitDefaultValue=false)]
        public List<string> StoreNames { get; set; }

        /// <summary>
        /// Add item details
        /// </summary>
        /// <value>Add item details</value>
        [DataMember(Name="AddItemDetails", EmitDefaultValue=false)]
        public AddItemDetails AddItemDetails { get; set; }

        /// <summary>
        /// Credit note details
        /// </summary>
        /// <value>Credit note details</value>
        [DataMember(Name="CreditNoteDetails", EmitDefaultValue=false)]
        public CreditNoteDetails CreditNoteDetails { get; set; }

        /// <summary>
        /// Lump discount details
        /// </summary>
        /// <value>Lump discount details</value>
        [DataMember(Name="LumpDiscountDetails", EmitDefaultValue=false)]
        public LumpDiscountDetails LumpDiscountDetails { get; set; }

        /// <summary>
        /// Percent discount details
        /// </summary>
        /// <value>Percent discount details</value>
        [DataMember(Name="PercentDiscountDetails", EmitDefaultValue=false)]
        public PercentDiscountDetails PercentDiscountDetails { get; set; }

        /// <summary>
        /// Voucher Code
        /// </summary>
        /// <value>Voucher Code</value>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Voucher Description (Visible on printout)
        /// </summary>
        /// <value>Voucher Description (Visible on printout)</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Valid on orders on or above
        /// </summary>
        /// <value>Valid on orders on or above</value>
        [DataMember(Name="ValidOnOrdersOver", EmitDefaultValue=false)]
        public double? ValidOnOrdersOver { get; set; }

        /// <summary>
        /// Takes priority
        /// </summary>
        /// <value>Takes priority</value>
        [DataMember(Name="TakesPriority", EmitDefaultValue=false)]
        public bool? TakesPriority { get; set; }

        /// <summary>
        /// Is voucher enabled
        /// </summary>
        /// <value>Is voucher enabled</value>
        [DataMember(Name="IsEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Is voucher automatically applied
        /// </summary>
        /// <value>Is voucher automatically applied</value>
        [DataMember(Name="IsAutomaticallyApplied", EmitDefaultValue=false)]
        public bool? IsAutomaticallyApplied { get; set; }

        /// <summary>
        /// Include delivery fees
        /// </summary>
        /// <value>Include delivery fees</value>
        [DataMember(Name="IncludeDeliveryFee", EmitDefaultValue=false)]
        public bool? IncludeDeliveryFee { get; set; }

        /// <summary>
        /// Valid for delivery orders
        /// </summary>
        /// <value>Valid for delivery orders</value>
        [DataMember(Name="IsValidForDeliveryOrders", EmitDefaultValue=false)]
        public bool? IsValidForDeliveryOrders { get; set; }

        /// <summary>
        /// Valid for pickup orders
        /// </summary>
        /// <value>Valid for pickup orders</value>
        [DataMember(Name="IsValidForPickupOrders", EmitDefaultValue=false)]
        public bool? IsValidForPickupOrders { get; set; }

        /// <summary>
        /// Valid for orders payed online
        /// </summary>
        /// <value>Valid for orders payed online</value>
        [DataMember(Name="IsValidForOrdersPayedOnline", EmitDefaultValue=false)]
        public bool? IsValidForOrdersPayedOnline { get; set; }

        /// <summary>
        /// Valid for orders payed in cash
        /// </summary>
        /// <value>Valid for orders payed in cash</value>
        [DataMember(Name="IsValidForOrdersPayedByCash", EmitDefaultValue=false)]
        public bool? IsValidForOrdersPayedByCash { get; set; }

        /// <summary>
        /// Valid only on the first order by the customer
        /// </summary>
        /// <value>Valid only on the first order by the customer</value>
        [DataMember(Name="IsValidForFirstOrderOnly", EmitDefaultValue=false)]
        public bool? IsValidForFirstOrderOnly { get; set; }

        /// <summary>
        /// Valid once per customer
        /// </summary>
        /// <value>Valid once per customer</value>
        [DataMember(Name="IsValidOncePerCustomer", EmitDefaultValue=false)]
        public bool? IsValidOncePerCustomer { get; set; }

        /// <summary>
        /// Valid only once, by any customer (once used cannot be used again by any other customer)
        /// </summary>
        /// <value>Valid only once, by any customer (once used cannot be used again by any other customer)</value>
        [DataMember(Name="IsValidOnlyOnce", EmitDefaultValue=false)]
        public bool? IsValidOnlyOnce { get; set; }

        /// <summary>
        /// Voucher Starts On (Time in UTC)
        /// </summary>
        /// <value>Voucher Starts On (Time in UTC)</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Voucher Expires On (Time in UTC)
        /// </summary>
        /// <value>Voucher Expires On (Time in UTC)</value>
        [DataMember(Name="ExpiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoucherWithStats {\n");
            sb.Append("  TotalUsed: ").Append(TotalUsed).Append("\n");
            sb.Append("  TotalCustomers: ").Append(TotalCustomers).Append("\n");
            sb.Append("  TotalAmountFromOrders: ").Append(TotalAmountFromOrders).Append("\n");
            sb.Append("  TotalDiscounted: ").Append(TotalDiscounted).Append("\n");
            sb.Append("  AverageOrderSize: ").Append(AverageOrderSize).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("  VoucherSubType: ").Append(VoucherSubType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("  StoreNames: ").Append(StoreNames).Append("\n");
            sb.Append("  AddItemDetails: ").Append(AddItemDetails).Append("\n");
            sb.Append("  CreditNoteDetails: ").Append(CreditNoteDetails).Append("\n");
            sb.Append("  LumpDiscountDetails: ").Append(LumpDiscountDetails).Append("\n");
            sb.Append("  PercentDiscountDetails: ").Append(PercentDiscountDetails).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ValidOnOrdersOver: ").Append(ValidOnOrdersOver).Append("\n");
            sb.Append("  TakesPriority: ").Append(TakesPriority).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsAutomaticallyApplied: ").Append(IsAutomaticallyApplied).Append("\n");
            sb.Append("  IncludeDeliveryFee: ").Append(IncludeDeliveryFee).Append("\n");
            sb.Append("  IsValidForDeliveryOrders: ").Append(IsValidForDeliveryOrders).Append("\n");
            sb.Append("  IsValidForPickupOrders: ").Append(IsValidForPickupOrders).Append("\n");
            sb.Append("  IsValidForOrdersPayedOnline: ").Append(IsValidForOrdersPayedOnline).Append("\n");
            sb.Append("  IsValidForOrdersPayedByCash: ").Append(IsValidForOrdersPayedByCash).Append("\n");
            sb.Append("  IsValidForFirstOrderOnly: ").Append(IsValidForFirstOrderOnly).Append("\n");
            sb.Append("  IsValidOncePerCustomer: ").Append(IsValidOncePerCustomer).Append("\n");
            sb.Append("  IsValidOnlyOnce: ").Append(IsValidOnlyOnce).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoucherWithStats);
        }

        /// <summary>
        /// Returns true if VoucherWithStats instances are equal
        /// </summary>
        /// <param name="input">Instance of VoucherWithStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoucherWithStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalUsed == input.TotalUsed ||
                    (this.TotalUsed != null &&
                    this.TotalUsed.Equals(input.TotalUsed))
                ) && 
                (
                    this.TotalCustomers == input.TotalCustomers ||
                    (this.TotalCustomers != null &&
                    this.TotalCustomers.Equals(input.TotalCustomers))
                ) && 
                (
                    this.TotalAmountFromOrders == input.TotalAmountFromOrders ||
                    (this.TotalAmountFromOrders != null &&
                    this.TotalAmountFromOrders.Equals(input.TotalAmountFromOrders))
                ) && 
                (
                    this.TotalDiscounted == input.TotalDiscounted ||
                    (this.TotalDiscounted != null &&
                    this.TotalDiscounted.Equals(input.TotalDiscounted))
                ) && 
                (
                    this.AverageOrderSize == input.AverageOrderSize ||
                    (this.AverageOrderSize != null &&
                    this.AverageOrderSize.Equals(input.AverageOrderSize))
                ) && 
                (
                    this.VoucherId == input.VoucherId ||
                    (this.VoucherId != null &&
                    this.VoucherId.Equals(input.VoucherId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VoucherType == input.VoucherType ||
                    (this.VoucherType != null &&
                    this.VoucherType.Equals(input.VoucherType))
                ) && 
                (
                    this.VoucherSubType == input.VoucherSubType ||
                    (this.VoucherSubType != null &&
                    this.VoucherSubType.Equals(input.VoucherSubType))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Stores == input.Stores ||
                    this.Stores != null &&
                    this.Stores.SequenceEqual(input.Stores)
                ) && 
                (
                    this.StoreNames == input.StoreNames ||
                    this.StoreNames != null &&
                    this.StoreNames.SequenceEqual(input.StoreNames)
                ) && 
                (
                    this.AddItemDetails == input.AddItemDetails ||
                    (this.AddItemDetails != null &&
                    this.AddItemDetails.Equals(input.AddItemDetails))
                ) && 
                (
                    this.CreditNoteDetails == input.CreditNoteDetails ||
                    (this.CreditNoteDetails != null &&
                    this.CreditNoteDetails.Equals(input.CreditNoteDetails))
                ) && 
                (
                    this.LumpDiscountDetails == input.LumpDiscountDetails ||
                    (this.LumpDiscountDetails != null &&
                    this.LumpDiscountDetails.Equals(input.LumpDiscountDetails))
                ) && 
                (
                    this.PercentDiscountDetails == input.PercentDiscountDetails ||
                    (this.PercentDiscountDetails != null &&
                    this.PercentDiscountDetails.Equals(input.PercentDiscountDetails))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ValidOnOrdersOver == input.ValidOnOrdersOver ||
                    (this.ValidOnOrdersOver != null &&
                    this.ValidOnOrdersOver.Equals(input.ValidOnOrdersOver))
                ) && 
                (
                    this.TakesPriority == input.TakesPriority ||
                    (this.TakesPriority != null &&
                    this.TakesPriority.Equals(input.TakesPriority))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.IsAutomaticallyApplied == input.IsAutomaticallyApplied ||
                    (this.IsAutomaticallyApplied != null &&
                    this.IsAutomaticallyApplied.Equals(input.IsAutomaticallyApplied))
                ) && 
                (
                    this.IncludeDeliveryFee == input.IncludeDeliveryFee ||
                    (this.IncludeDeliveryFee != null &&
                    this.IncludeDeliveryFee.Equals(input.IncludeDeliveryFee))
                ) && 
                (
                    this.IsValidForDeliveryOrders == input.IsValidForDeliveryOrders ||
                    (this.IsValidForDeliveryOrders != null &&
                    this.IsValidForDeliveryOrders.Equals(input.IsValidForDeliveryOrders))
                ) && 
                (
                    this.IsValidForPickupOrders == input.IsValidForPickupOrders ||
                    (this.IsValidForPickupOrders != null &&
                    this.IsValidForPickupOrders.Equals(input.IsValidForPickupOrders))
                ) && 
                (
                    this.IsValidForOrdersPayedOnline == input.IsValidForOrdersPayedOnline ||
                    (this.IsValidForOrdersPayedOnline != null &&
                    this.IsValidForOrdersPayedOnline.Equals(input.IsValidForOrdersPayedOnline))
                ) && 
                (
                    this.IsValidForOrdersPayedByCash == input.IsValidForOrdersPayedByCash ||
                    (this.IsValidForOrdersPayedByCash != null &&
                    this.IsValidForOrdersPayedByCash.Equals(input.IsValidForOrdersPayedByCash))
                ) && 
                (
                    this.IsValidForFirstOrderOnly == input.IsValidForFirstOrderOnly ||
                    (this.IsValidForFirstOrderOnly != null &&
                    this.IsValidForFirstOrderOnly.Equals(input.IsValidForFirstOrderOnly))
                ) && 
                (
                    this.IsValidOncePerCustomer == input.IsValidOncePerCustomer ||
                    (this.IsValidOncePerCustomer != null &&
                    this.IsValidOncePerCustomer.Equals(input.IsValidOncePerCustomer))
                ) && 
                (
                    this.IsValidOnlyOnce == input.IsValidOnlyOnce ||
                    (this.IsValidOnlyOnce != null &&
                    this.IsValidOnlyOnce.Equals(input.IsValidOnlyOnce))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalUsed != null)
                    hashCode = hashCode * 59 + this.TotalUsed.GetHashCode();
                if (this.TotalCustomers != null)
                    hashCode = hashCode * 59 + this.TotalCustomers.GetHashCode();
                if (this.TotalAmountFromOrders != null)
                    hashCode = hashCode * 59 + this.TotalAmountFromOrders.GetHashCode();
                if (this.TotalDiscounted != null)
                    hashCode = hashCode * 59 + this.TotalDiscounted.GetHashCode();
                if (this.AverageOrderSize != null)
                    hashCode = hashCode * 59 + this.AverageOrderSize.GetHashCode();
                if (this.VoucherId != null)
                    hashCode = hashCode * 59 + this.VoucherId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VoucherType != null)
                    hashCode = hashCode * 59 + this.VoucherType.GetHashCode();
                if (this.VoucherSubType != null)
                    hashCode = hashCode * 59 + this.VoucherSubType.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Stores != null)
                    hashCode = hashCode * 59 + this.Stores.GetHashCode();
                if (this.StoreNames != null)
                    hashCode = hashCode * 59 + this.StoreNames.GetHashCode();
                if (this.AddItemDetails != null)
                    hashCode = hashCode * 59 + this.AddItemDetails.GetHashCode();
                if (this.CreditNoteDetails != null)
                    hashCode = hashCode * 59 + this.CreditNoteDetails.GetHashCode();
                if (this.LumpDiscountDetails != null)
                    hashCode = hashCode * 59 + this.LumpDiscountDetails.GetHashCode();
                if (this.PercentDiscountDetails != null)
                    hashCode = hashCode * 59 + this.PercentDiscountDetails.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ValidOnOrdersOver != null)
                    hashCode = hashCode * 59 + this.ValidOnOrdersOver.GetHashCode();
                if (this.TakesPriority != null)
                    hashCode = hashCode * 59 + this.TakesPriority.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.IsAutomaticallyApplied != null)
                    hashCode = hashCode * 59 + this.IsAutomaticallyApplied.GetHashCode();
                if (this.IncludeDeliveryFee != null)
                    hashCode = hashCode * 59 + this.IncludeDeliveryFee.GetHashCode();
                if (this.IsValidForDeliveryOrders != null)
                    hashCode = hashCode * 59 + this.IsValidForDeliveryOrders.GetHashCode();
                if (this.IsValidForPickupOrders != null)
                    hashCode = hashCode * 59 + this.IsValidForPickupOrders.GetHashCode();
                if (this.IsValidForOrdersPayedOnline != null)
                    hashCode = hashCode * 59 + this.IsValidForOrdersPayedOnline.GetHashCode();
                if (this.IsValidForOrdersPayedByCash != null)
                    hashCode = hashCode * 59 + this.IsValidForOrdersPayedByCash.GetHashCode();
                if (this.IsValidForFirstOrderOnly != null)
                    hashCode = hashCode * 59 + this.IsValidForFirstOrderOnly.GetHashCode();
                if (this.IsValidOncePerCustomer != null)
                    hashCode = hashCode * 59 + this.IsValidOncePerCustomer.GetHashCode();
                if (this.IsValidOnlyOnce != null)
                    hashCode = hashCode * 59 + this.IsValidOnlyOnce.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

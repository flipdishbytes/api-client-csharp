/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// User Role
    /// </summary>
    [DataContract]
    public partial class UserRole :  IEquatable<UserRole>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRole" /> class.
        /// </summary>
        /// <param name="rolesUserIn">Roles the user is in.</param>
        /// <param name="rolesUserNotIn">Roles the user is not in.</param>
        public UserRole(List<string> rolesUserIn = default(List<string>), List<string> rolesUserNotIn = default(List<string>))
        {
            this.RolesUserIn = rolesUserIn;
            this.RolesUserNotIn = rolesUserNotIn;
        }
        
        /// <summary>
        /// Roles the user is in
        /// </summary>
        /// <value>Roles the user is in</value>
        [DataMember(Name="RolesUserIn", EmitDefaultValue=false)]
        public List<string> RolesUserIn { get; set; }

        /// <summary>
        /// Roles the user is not in
        /// </summary>
        /// <value>Roles the user is not in</value>
        [DataMember(Name="RolesUserNotIn", EmitDefaultValue=false)]
        public List<string> RolesUserNotIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRole {\n");
            sb.Append("  RolesUserIn: ").Append(RolesUserIn).Append("\n");
            sb.Append("  RolesUserNotIn: ").Append(RolesUserNotIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRole);
        }

        /// <summary>
        /// Returns true if UserRole instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRole input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RolesUserIn == input.RolesUserIn ||
                    this.RolesUserIn != null &&
                    this.RolesUserIn.SequenceEqual(input.RolesUserIn)
                ) && 
                (
                    this.RolesUserNotIn == input.RolesUserNotIn ||
                    this.RolesUserNotIn != null &&
                    this.RolesUserNotIn.SequenceEqual(input.RolesUserNotIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RolesUserIn != null)
                    hashCode = hashCode * 59 + this.RolesUserIn.GetHashCode();
                if (this.RolesUserNotIn != null)
                    hashCode = hashCode * 59 + this.RolesUserNotIn.GetHashCode();
                return hashCode;
            }
        }
    }

}

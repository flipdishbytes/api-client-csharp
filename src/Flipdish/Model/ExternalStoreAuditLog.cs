/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// External event
    /// </summary>
    [DataContract]
    public partial class ExternalStoreAuditLog :  IEquatable<ExternalStoreAuditLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalStoreAuditLog" /> class.
        /// </summary>
        /// <param name="externalCreateTime">The time of creation of the event.</param>
        /// <param name="storeId">Store Id.</param>
        /// <param name="description">Description.</param>
        /// <param name="source">Identifies the source of the log.</param>
        /// <param name="version">Identifies the version of the {Flipdish.PublicModels.V1.AuditLogs.ExternalStoreAuditLog.Source}.</param>
        /// <param name="descriptionFormat">Description with format placeholders.</param>
        /// <param name="descriptionFields">Description with format placeholders.</param>
        /// <param name="descriptionId">Description.</param>
        /// <param name="ref1">Ref (reference field).</param>
        /// <param name="ref2">Ref2 (reference field).</param>
        /// <param name="ref3">Ref3 (reference field).</param>
        /// <param name="ref4">Ref4 (reference field).</param>
        /// <param name="orderId">Order Id.</param>
        /// <param name="tags">Tags.</param>
        /// <param name="fieldChanges">Field changes list.</param>
        public ExternalStoreAuditLog(DateTime? externalCreateTime = default(DateTime?), int? storeId = default(int?), string description = default(string), string source = default(string), string version = default(string), string descriptionFormat = default(string), string descriptionFields = default(string), string descriptionId = default(string), string ref1 = default(string), string ref2 = default(string), string ref3 = default(string), string ref4 = default(string), int? orderId = default(int?), List<string> tags = default(List<string>), List<AuditLogFieldChangeInformation> fieldChanges = default(List<AuditLogFieldChangeInformation>))
        {
            this.ExternalCreateTime = externalCreateTime;
            this.StoreId = storeId;
            this.Description = description;
            this.Source = source;
            this.Version = version;
            this.DescriptionFormat = descriptionFormat;
            this.DescriptionFields = descriptionFields;
            this.DescriptionId = descriptionId;
            this.Ref1 = ref1;
            this.Ref2 = ref2;
            this.Ref3 = ref3;
            this.Ref4 = ref4;
            this.OrderId = orderId;
            this.Tags = tags;
            this.FieldChanges = fieldChanges;
        }
        
        /// <summary>
        /// The time of creation of the event
        /// </summary>
        /// <value>The time of creation of the event</value>
        [DataMember(Name="ExternalCreateTime", EmitDefaultValue=false)]
        public DateTime? ExternalCreateTime { get; set; }

        /// <summary>
        /// Store Id
        /// </summary>
        /// <value>Store Id</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Identifies the source of the log
        /// </summary>
        /// <value>Identifies the source of the log</value>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Identifies the version of the {Flipdish.PublicModels.V1.AuditLogs.ExternalStoreAuditLog.Source}
        /// </summary>
        /// <value>Identifies the version of the {Flipdish.PublicModels.V1.AuditLogs.ExternalStoreAuditLog.Source}</value>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Description with format placeholders
        /// </summary>
        /// <value>Description with format placeholders</value>
        [DataMember(Name="DescriptionFormat", EmitDefaultValue=false)]
        public string DescriptionFormat { get; set; }

        /// <summary>
        /// Description with format placeholders
        /// </summary>
        /// <value>Description with format placeholders</value>
        [DataMember(Name="DescriptionFields", EmitDefaultValue=false)]
        public string DescriptionFields { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="DescriptionId", EmitDefaultValue=false)]
        public string DescriptionId { get; set; }

        /// <summary>
        /// Ref (reference field)
        /// </summary>
        /// <value>Ref (reference field)</value>
        [DataMember(Name="Ref1", EmitDefaultValue=false)]
        public string Ref1 { get; set; }

        /// <summary>
        /// Ref2 (reference field)
        /// </summary>
        /// <value>Ref2 (reference field)</value>
        [DataMember(Name="Ref2", EmitDefaultValue=false)]
        public string Ref2 { get; set; }

        /// <summary>
        /// Ref3 (reference field)
        /// </summary>
        /// <value>Ref3 (reference field)</value>
        [DataMember(Name="Ref3", EmitDefaultValue=false)]
        public string Ref3 { get; set; }

        /// <summary>
        /// Ref4 (reference field)
        /// </summary>
        /// <value>Ref4 (reference field)</value>
        [DataMember(Name="Ref4", EmitDefaultValue=false)]
        public string Ref4 { get; set; }

        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Tags
        /// </summary>
        /// <value>Tags</value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Field changes list
        /// </summary>
        /// <value>Field changes list</value>
        [DataMember(Name="FieldChanges", EmitDefaultValue=false)]
        public List<AuditLogFieldChangeInformation> FieldChanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalStoreAuditLog {\n");
            sb.Append("  ExternalCreateTime: ").Append(ExternalCreateTime).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  DescriptionFormat: ").Append(DescriptionFormat).Append("\n");
            sb.Append("  DescriptionFields: ").Append(DescriptionFields).Append("\n");
            sb.Append("  DescriptionId: ").Append(DescriptionId).Append("\n");
            sb.Append("  Ref1: ").Append(Ref1).Append("\n");
            sb.Append("  Ref2: ").Append(Ref2).Append("\n");
            sb.Append("  Ref3: ").Append(Ref3).Append("\n");
            sb.Append("  Ref4: ").Append(Ref4).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  FieldChanges: ").Append(FieldChanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalStoreAuditLog);
        }

        /// <summary>
        /// Returns true if ExternalStoreAuditLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalStoreAuditLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalStoreAuditLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalCreateTime == input.ExternalCreateTime ||
                    (this.ExternalCreateTime != null &&
                    this.ExternalCreateTime.Equals(input.ExternalCreateTime))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.DescriptionFormat == input.DescriptionFormat ||
                    (this.DescriptionFormat != null &&
                    this.DescriptionFormat.Equals(input.DescriptionFormat))
                ) && 
                (
                    this.DescriptionFields == input.DescriptionFields ||
                    (this.DescriptionFields != null &&
                    this.DescriptionFields.Equals(input.DescriptionFields))
                ) && 
                (
                    this.DescriptionId == input.DescriptionId ||
                    (this.DescriptionId != null &&
                    this.DescriptionId.Equals(input.DescriptionId))
                ) && 
                (
                    this.Ref1 == input.Ref1 ||
                    (this.Ref1 != null &&
                    this.Ref1.Equals(input.Ref1))
                ) && 
                (
                    this.Ref2 == input.Ref2 ||
                    (this.Ref2 != null &&
                    this.Ref2.Equals(input.Ref2))
                ) && 
                (
                    this.Ref3 == input.Ref3 ||
                    (this.Ref3 != null &&
                    this.Ref3.Equals(input.Ref3))
                ) && 
                (
                    this.Ref4 == input.Ref4 ||
                    (this.Ref4 != null &&
                    this.Ref4.Equals(input.Ref4))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.FieldChanges == input.FieldChanges ||
                    this.FieldChanges != null &&
                    this.FieldChanges.SequenceEqual(input.FieldChanges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalCreateTime != null)
                    hashCode = hashCode * 59 + this.ExternalCreateTime.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.DescriptionFormat != null)
                    hashCode = hashCode * 59 + this.DescriptionFormat.GetHashCode();
                if (this.DescriptionFields != null)
                    hashCode = hashCode * 59 + this.DescriptionFields.GetHashCode();
                if (this.DescriptionId != null)
                    hashCode = hashCode * 59 + this.DescriptionId.GetHashCode();
                if (this.Ref1 != null)
                    hashCode = hashCode * 59 + this.Ref1.GetHashCode();
                if (this.Ref2 != null)
                    hashCode = hashCode * 59 + this.Ref2.GetHashCode();
                if (this.Ref3 != null)
                    hashCode = hashCode * 59 + this.Ref3.GetHashCode();
                if (this.Ref4 != null)
                    hashCode = hashCode * 59 + this.Ref4.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.FieldChanges != null)
                    hashCode = hashCode * 59 + this.FieldChanges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

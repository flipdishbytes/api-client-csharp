/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Payment Account information
    /// </summary>
    [DataContract]
    public partial class PaymentAccount :  IEquatable<PaymentAccount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAccount" /> class.
        /// </summary>
        /// <param name="userId">The user ID associated with the payment account..</param>
        /// <param name="paymentAccountId">Unique identifier for the payment account..</param>
        /// <param name="canRemoveFromCustomerView">Indicates if the payment account can be removed from the customer view..</param>
        /// <param name="bin">Bank Identification Number (BIN) of the payment method..</param>
        /// <param name="isDefaultPaymentMethod">Indicates if this is the default payment method..</param>
        /// <param name="isVisibleToCustomer">Indicates if the payment account is visible to the customer..</param>
        /// <param name="paymentAccountType">The type of payment account (e.g., card, PayPal)..</param>
        /// <param name="description">Description of the payment account..</param>
        /// <param name="customerId">The customer ID associated with the payment account..</param>
        public PaymentAccount(int? userId = default(int?), int? paymentAccountId = default(int?), bool? canRemoveFromCustomerView = default(bool?), string bin = default(string), bool? isDefaultPaymentMethod = default(bool?), bool? isVisibleToCustomer = default(bool?), string paymentAccountType = default(string), string description = default(string), string customerId = default(string))
        {
            this.UserId = userId;
            this.PaymentAccountId = paymentAccountId;
            this.CanRemoveFromCustomerView = canRemoveFromCustomerView;
            this.Bin = bin;
            this.IsDefaultPaymentMethod = isDefaultPaymentMethod;
            this.IsVisibleToCustomer = isVisibleToCustomer;
            this.PaymentAccountType = paymentAccountType;
            this.Description = description;
            this.CustomerId = customerId;
        }
        
        /// <summary>
        /// The user ID associated with the payment account.
        /// </summary>
        /// <value>The user ID associated with the payment account.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Unique identifier for the payment account.
        /// </summary>
        /// <value>Unique identifier for the payment account.</value>
        [DataMember(Name="PaymentAccountId", EmitDefaultValue=false)]
        public int? PaymentAccountId { get; set; }

        /// <summary>
        /// Indicates if the payment account can be removed from the customer view.
        /// </summary>
        /// <value>Indicates if the payment account can be removed from the customer view.</value>
        [DataMember(Name="CanRemoveFromCustomerView", EmitDefaultValue=false)]
        public bool? CanRemoveFromCustomerView { get; set; }

        /// <summary>
        /// Bank Identification Number (BIN) of the payment method.
        /// </summary>
        /// <value>Bank Identification Number (BIN) of the payment method.</value>
        [DataMember(Name="Bin", EmitDefaultValue=false)]
        public string Bin { get; set; }

        /// <summary>
        /// Indicates if this is the default payment method.
        /// </summary>
        /// <value>Indicates if this is the default payment method.</value>
        [DataMember(Name="IsDefaultPaymentMethod", EmitDefaultValue=false)]
        public bool? IsDefaultPaymentMethod { get; set; }

        /// <summary>
        /// Indicates if the payment account is visible to the customer.
        /// </summary>
        /// <value>Indicates if the payment account is visible to the customer.</value>
        [DataMember(Name="IsVisibleToCustomer", EmitDefaultValue=false)]
        public bool? IsVisibleToCustomer { get; set; }

        /// <summary>
        /// The type of payment account (e.g., card, PayPal).
        /// </summary>
        /// <value>The type of payment account (e.g., card, PayPal).</value>
        [DataMember(Name="PaymentAccountType", EmitDefaultValue=false)]
        public string PaymentAccountType { get; set; }

        /// <summary>
        /// Description of the payment account.
        /// </summary>
        /// <value>Description of the payment account.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The customer ID associated with the payment account.
        /// </summary>
        /// <value>The customer ID associated with the payment account.</value>
        [DataMember(Name="CustomerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentAccount {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PaymentAccountId: ").Append(PaymentAccountId).Append("\n");
            sb.Append("  CanRemoveFromCustomerView: ").Append(CanRemoveFromCustomerView).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  IsDefaultPaymentMethod: ").Append(IsDefaultPaymentMethod).Append("\n");
            sb.Append("  IsVisibleToCustomer: ").Append(IsVisibleToCustomer).Append("\n");
            sb.Append("  PaymentAccountType: ").Append(PaymentAccountType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentAccount);
        }

        /// <summary>
        /// Returns true if PaymentAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.PaymentAccountId == input.PaymentAccountId ||
                    (this.PaymentAccountId != null &&
                    this.PaymentAccountId.Equals(input.PaymentAccountId))
                ) && 
                (
                    this.CanRemoveFromCustomerView == input.CanRemoveFromCustomerView ||
                    (this.CanRemoveFromCustomerView != null &&
                    this.CanRemoveFromCustomerView.Equals(input.CanRemoveFromCustomerView))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.IsDefaultPaymentMethod == input.IsDefaultPaymentMethod ||
                    (this.IsDefaultPaymentMethod != null &&
                    this.IsDefaultPaymentMethod.Equals(input.IsDefaultPaymentMethod))
                ) && 
                (
                    this.IsVisibleToCustomer == input.IsVisibleToCustomer ||
                    (this.IsVisibleToCustomer != null &&
                    this.IsVisibleToCustomer.Equals(input.IsVisibleToCustomer))
                ) && 
                (
                    this.PaymentAccountType == input.PaymentAccountType ||
                    (this.PaymentAccountType != null &&
                    this.PaymentAccountType.Equals(input.PaymentAccountType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.PaymentAccountId != null)
                    hashCode = hashCode * 59 + this.PaymentAccountId.GetHashCode();
                if (this.CanRemoveFromCustomerView != null)
                    hashCode = hashCode * 59 + this.CanRemoveFromCustomerView.GetHashCode();
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.IsDefaultPaymentMethod != null)
                    hashCode = hashCode * 59 + this.IsDefaultPaymentMethod.GetHashCode();
                if (this.IsVisibleToCustomer != null)
                    hashCode = hashCode * 59 + this.IsVisibleToCustomer.GetHashCode();
                if (this.PaymentAccountType != null)
                    hashCode = hashCode * 59 + this.PaymentAccountType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                return hashCode;
            }
        }
    }

}

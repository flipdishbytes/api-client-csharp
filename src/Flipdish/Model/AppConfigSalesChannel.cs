/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// App Config Sales Channel
    /// </summary>
    [DataContract]
    public partial class AppConfigSalesChannel :  IEquatable<AppConfigSalesChannel>, IValidatableObject
    {
        /// <summary>
        /// Display a popup to users requesting their email address
        /// </summary>
        /// <value>Display a popup to users requesting their email address</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EmailRequestModeEnum
        {
            
            /// <summary>
            /// Enum DoNotRequest for value: DoNotRequest
            /// </summary>
            [EnumMember(Value = "DoNotRequest")]
            DoNotRequest = 1,
            
            /// <summary>
            /// Enum Request for value: Request
            /// </summary>
            [EnumMember(Value = "Request")]
            Request = 2,
            
            /// <summary>
            /// Enum Require for value: Require
            /// </summary>
            [EnumMember(Value = "Require")]
            Require = 3
        }

        /// <summary>
        /// Display a popup to users requesting their email address
        /// </summary>
        /// <value>Display a popup to users requesting their email address</value>
        [DataMember(Name="EmailRequestMode", EmitDefaultValue=false)]
        public EmailRequestModeEnum? EmailRequestMode { get; set; }
        /// <summary>
        /// Sends users to their native apps or request them to install the pwa
        /// </summary>
        /// <value>Sends users to their native apps or request them to install the pwa</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebToAppRedirectEnum
        {
            
            /// <summary>
            /// Enum NoRedirect for value: NoRedirect
            /// </summary>
            [EnumMember(Value = "NoRedirect")]
            NoRedirect = 1,
            
            /// <summary>
            /// Enum RedirectOnce for value: RedirectOnce
            /// </summary>
            [EnumMember(Value = "RedirectOnce")]
            RedirectOnce = 2,
            
            /// <summary>
            /// Enum RedirectAlways for value: RedirectAlways
            /// </summary>
            [EnumMember(Value = "RedirectAlways")]
            RedirectAlways = 3,
            
            /// <summary>
            /// Enum SuggestPwa for value: SuggestPwa
            /// </summary>
            [EnumMember(Value = "SuggestPwa")]
            SuggestPwa = 4,
            
            /// <summary>
            /// Enum ForcePwa for value: ForcePwa
            /// </summary>
            [EnumMember(Value = "ForcePwa")]
            ForcePwa = 5
        }

        /// <summary>
        /// Sends users to their native apps or request them to install the pwa
        /// </summary>
        /// <value>Sends users to their native apps or request them to install the pwa</value>
        [DataMember(Name="WebToAppRedirect", EmitDefaultValue=false)]
        public WebToAppRedirectEnum? WebToAppRedirect { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppConfigSalesChannel" /> class.
        /// </summary>
        /// <param name="emailRequestMode">Display a popup to users requesting their email address.</param>
        /// <param name="webToAppRedirect">Sends users to their native apps or request them to install the pwa.</param>
        /// <param name="displayDeliveryRestaurantListScreen">Display Pickup Restaurant List Screen.</param>
        public AppConfigSalesChannel(EmailRequestModeEnum? emailRequestMode = default(EmailRequestModeEnum?), WebToAppRedirectEnum? webToAppRedirect = default(WebToAppRedirectEnum?), bool? displayDeliveryRestaurantListScreen = default(bool?))
        {
            this.EmailRequestMode = emailRequestMode;
            this.WebToAppRedirect = webToAppRedirect;
            this.DisplayDeliveryRestaurantListScreen = displayDeliveryRestaurantListScreen;
        }
        


        /// <summary>
        /// Display Pickup Restaurant List Screen
        /// </summary>
        /// <value>Display Pickup Restaurant List Screen</value>
        [DataMember(Name="DisplayDeliveryRestaurantListScreen", EmitDefaultValue=false)]
        public bool? DisplayDeliveryRestaurantListScreen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppConfigSalesChannel {\n");
            sb.Append("  EmailRequestMode: ").Append(EmailRequestMode).Append("\n");
            sb.Append("  WebToAppRedirect: ").Append(WebToAppRedirect).Append("\n");
            sb.Append("  DisplayDeliveryRestaurantListScreen: ").Append(DisplayDeliveryRestaurantListScreen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppConfigSalesChannel);
        }

        /// <summary>
        /// Returns true if AppConfigSalesChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of AppConfigSalesChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppConfigSalesChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailRequestMode == input.EmailRequestMode ||
                    (this.EmailRequestMode != null &&
                    this.EmailRequestMode.Equals(input.EmailRequestMode))
                ) && 
                (
                    this.WebToAppRedirect == input.WebToAppRedirect ||
                    (this.WebToAppRedirect != null &&
                    this.WebToAppRedirect.Equals(input.WebToAppRedirect))
                ) && 
                (
                    this.DisplayDeliveryRestaurantListScreen == input.DisplayDeliveryRestaurantListScreen ||
                    (this.DisplayDeliveryRestaurantListScreen != null &&
                    this.DisplayDeliveryRestaurantListScreen.Equals(input.DisplayDeliveryRestaurantListScreen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailRequestMode != null)
                    hashCode = hashCode * 59 + this.EmailRequestMode.GetHashCode();
                if (this.WebToAppRedirect != null)
                    hashCode = hashCode * 59 + this.WebToAppRedirect.GetHashCode();
                if (this.DisplayDeliveryRestaurantListScreen != null)
                    hashCode = hashCode * 59 + this.DisplayDeliveryRestaurantListScreen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Webhook log
    /// </summary>
    [DataContract]
    public partial class WebhookLog :  IEquatable<WebhookLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookLog" /> class.
        /// </summary>
        /// <param name="webhookSubscriptionOwnerUserId">Webhook subscription owner user identifier.</param>
        /// <param name="eventCreated">Event created.</param>
        /// <param name="webhookTriggered">Webhook triggered.</param>
        /// <param name="webhookEventName">Webhook event name.</param>
        /// <param name="webhookSubscriptionCallbackUrl">Webhook subscription callback url.</param>
        /// <param name="httpResponseStatusCode">Received HTTP repsonse status HTTP code.</param>
        /// <param name="httpResponseStatus">Received HTTP repsonse status.</param>
        /// <param name="requestHeaders">Request headers.</param>
        /// <param name="requestBody">Request body.</param>
        /// <param name="responseHeaders">Received response headers.</param>
        /// <param name="responseBody">Received response body.</param>
        /// <param name="duration">Duration of HTTP request.</param>
        /// <param name="retryCount">Retry count.</param>
        /// <param name="flipdishWebhookId">Flipdish webhook identifier.</param>
        /// <param name="version">Flipdish webhook version.</param>
        public WebhookLog(int? webhookSubscriptionOwnerUserId = default(int?), string eventCreated = default(string), string webhookTriggered = default(string), string webhookEventName = default(string), string webhookSubscriptionCallbackUrl = default(string), string httpResponseStatusCode = default(string), string httpResponseStatus = default(string), string requestHeaders = default(string), string requestBody = default(string), string responseHeaders = default(string), string responseBody = default(string), string duration = default(string), int? retryCount = default(int?), Guid? flipdishWebhookId = default(Guid?), string version = default(string))
        {
            this.WebhookSubscriptionOwnerUserId = webhookSubscriptionOwnerUserId;
            this.EventCreated = eventCreated;
            this.WebhookTriggered = webhookTriggered;
            this.WebhookEventName = webhookEventName;
            this.WebhookSubscriptionCallbackUrl = webhookSubscriptionCallbackUrl;
            this.HttpResponseStatusCode = httpResponseStatusCode;
            this.HttpResponseStatus = httpResponseStatus;
            this.RequestHeaders = requestHeaders;
            this.RequestBody = requestBody;
            this.ResponseHeaders = responseHeaders;
            this.ResponseBody = responseBody;
            this.Duration = duration;
            this.RetryCount = retryCount;
            this.FlipdishWebhookId = flipdishWebhookId;
            this.Version = version;
        }
        
        /// <summary>
        /// Webhook subscription owner user identifier
        /// </summary>
        /// <value>Webhook subscription owner user identifier</value>
        [DataMember(Name="WebhookSubscriptionOwnerUserId", EmitDefaultValue=false)]
        public int? WebhookSubscriptionOwnerUserId { get; set; }

        /// <summary>
        /// Event created
        /// </summary>
        /// <value>Event created</value>
        [DataMember(Name="EventCreated", EmitDefaultValue=false)]
        public string EventCreated { get; set; }

        /// <summary>
        /// Webhook triggered
        /// </summary>
        /// <value>Webhook triggered</value>
        [DataMember(Name="WebhookTriggered", EmitDefaultValue=false)]
        public string WebhookTriggered { get; set; }

        /// <summary>
        /// Webhook event name
        /// </summary>
        /// <value>Webhook event name</value>
        [DataMember(Name="WebhookEventName", EmitDefaultValue=false)]
        public string WebhookEventName { get; set; }

        /// <summary>
        /// Webhook subscription callback url
        /// </summary>
        /// <value>Webhook subscription callback url</value>
        [DataMember(Name="WebhookSubscriptionCallbackUrl", EmitDefaultValue=false)]
        public string WebhookSubscriptionCallbackUrl { get; set; }

        /// <summary>
        /// Received HTTP repsonse status HTTP code
        /// </summary>
        /// <value>Received HTTP repsonse status HTTP code</value>
        [DataMember(Name="HttpResponseStatusCode", EmitDefaultValue=false)]
        public string HttpResponseStatusCode { get; set; }

        /// <summary>
        /// Received HTTP repsonse status
        /// </summary>
        /// <value>Received HTTP repsonse status</value>
        [DataMember(Name="HttpResponseStatus", EmitDefaultValue=false)]
        public string HttpResponseStatus { get; set; }

        /// <summary>
        /// Request headers
        /// </summary>
        /// <value>Request headers</value>
        [DataMember(Name="RequestHeaders", EmitDefaultValue=false)]
        public string RequestHeaders { get; set; }

        /// <summary>
        /// Request body
        /// </summary>
        /// <value>Request body</value>
        [DataMember(Name="RequestBody", EmitDefaultValue=false)]
        public string RequestBody { get; set; }

        /// <summary>
        /// Received response headers
        /// </summary>
        /// <value>Received response headers</value>
        [DataMember(Name="ResponseHeaders", EmitDefaultValue=false)]
        public string ResponseHeaders { get; set; }

        /// <summary>
        /// Received response body
        /// </summary>
        /// <value>Received response body</value>
        [DataMember(Name="ResponseBody", EmitDefaultValue=false)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Duration of HTTP request
        /// </summary>
        /// <value>Duration of HTTP request</value>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Retry count
        /// </summary>
        /// <value>Retry count</value>
        [DataMember(Name="RetryCount", EmitDefaultValue=false)]
        public int? RetryCount { get; set; }

        /// <summary>
        /// Flipdish webhook identifier
        /// </summary>
        /// <value>Flipdish webhook identifier</value>
        [DataMember(Name="FlipdishWebhookId", EmitDefaultValue=false)]
        public Guid? FlipdishWebhookId { get; set; }

        /// <summary>
        /// Flipdish webhook version
        /// </summary>
        /// <value>Flipdish webhook version</value>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookLog {\n");
            sb.Append("  WebhookSubscriptionOwnerUserId: ").Append(WebhookSubscriptionOwnerUserId).Append("\n");
            sb.Append("  EventCreated: ").Append(EventCreated).Append("\n");
            sb.Append("  WebhookTriggered: ").Append(WebhookTriggered).Append("\n");
            sb.Append("  WebhookEventName: ").Append(WebhookEventName).Append("\n");
            sb.Append("  WebhookSubscriptionCallbackUrl: ").Append(WebhookSubscriptionCallbackUrl).Append("\n");
            sb.Append("  HttpResponseStatusCode: ").Append(HttpResponseStatusCode).Append("\n");
            sb.Append("  HttpResponseStatus: ").Append(HttpResponseStatus).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  FlipdishWebhookId: ").Append(FlipdishWebhookId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookLog);
        }

        /// <summary>
        /// Returns true if WebhookLog instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WebhookSubscriptionOwnerUserId == input.WebhookSubscriptionOwnerUserId ||
                    (this.WebhookSubscriptionOwnerUserId != null &&
                    this.WebhookSubscriptionOwnerUserId.Equals(input.WebhookSubscriptionOwnerUserId))
                ) && 
                (
                    this.EventCreated == input.EventCreated ||
                    (this.EventCreated != null &&
                    this.EventCreated.Equals(input.EventCreated))
                ) && 
                (
                    this.WebhookTriggered == input.WebhookTriggered ||
                    (this.WebhookTriggered != null &&
                    this.WebhookTriggered.Equals(input.WebhookTriggered))
                ) && 
                (
                    this.WebhookEventName == input.WebhookEventName ||
                    (this.WebhookEventName != null &&
                    this.WebhookEventName.Equals(input.WebhookEventName))
                ) && 
                (
                    this.WebhookSubscriptionCallbackUrl == input.WebhookSubscriptionCallbackUrl ||
                    (this.WebhookSubscriptionCallbackUrl != null &&
                    this.WebhookSubscriptionCallbackUrl.Equals(input.WebhookSubscriptionCallbackUrl))
                ) && 
                (
                    this.HttpResponseStatusCode == input.HttpResponseStatusCode ||
                    (this.HttpResponseStatusCode != null &&
                    this.HttpResponseStatusCode.Equals(input.HttpResponseStatusCode))
                ) && 
                (
                    this.HttpResponseStatus == input.HttpResponseStatus ||
                    (this.HttpResponseStatus != null &&
                    this.HttpResponseStatus.Equals(input.HttpResponseStatus))
                ) && 
                (
                    this.RequestHeaders == input.RequestHeaders ||
                    (this.RequestHeaders != null &&
                    this.RequestHeaders.Equals(input.RequestHeaders))
                ) && 
                (
                    this.RequestBody == input.RequestBody ||
                    (this.RequestBody != null &&
                    this.RequestBody.Equals(input.RequestBody))
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    (this.ResponseHeaders != null &&
                    this.ResponseHeaders.Equals(input.ResponseHeaders))
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    (this.RetryCount != null &&
                    this.RetryCount.Equals(input.RetryCount))
                ) && 
                (
                    this.FlipdishWebhookId == input.FlipdishWebhookId ||
                    (this.FlipdishWebhookId != null &&
                    this.FlipdishWebhookId.Equals(input.FlipdishWebhookId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebhookSubscriptionOwnerUserId != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionOwnerUserId.GetHashCode();
                if (this.EventCreated != null)
                    hashCode = hashCode * 59 + this.EventCreated.GetHashCode();
                if (this.WebhookTriggered != null)
                    hashCode = hashCode * 59 + this.WebhookTriggered.GetHashCode();
                if (this.WebhookEventName != null)
                    hashCode = hashCode * 59 + this.WebhookEventName.GetHashCode();
                if (this.WebhookSubscriptionCallbackUrl != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionCallbackUrl.GetHashCode();
                if (this.HttpResponseStatusCode != null)
                    hashCode = hashCode * 59 + this.HttpResponseStatusCode.GetHashCode();
                if (this.HttpResponseStatus != null)
                    hashCode = hashCode * 59 + this.HttpResponseStatus.GetHashCode();
                if (this.RequestHeaders != null)
                    hashCode = hashCode * 59 + this.RequestHeaders.GetHashCode();
                if (this.RequestBody != null)
                    hashCode = hashCode * 59 + this.RequestBody.GetHashCode();
                if (this.ResponseHeaders != null)
                    hashCode = hashCode * 59 + this.ResponseHeaders.GetHashCode();
                if (this.ResponseBody != null)
                    hashCode = hashCode * 59 + this.ResponseBody.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.RetryCount != null)
                    hashCode = hashCode * 59 + this.RetryCount.GetHashCode();
                if (this.FlipdishWebhookId != null)
                    hashCode = hashCode * 59 + this.FlipdishWebhookId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

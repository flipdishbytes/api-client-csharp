/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Period opening and closing balance
    /// </summary>
    [DataContract]
    public partial class BalanceDetails :  IEquatable<BalanceDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceDetails" /> class.
        /// </summary>
        /// <param name="openingBalance">openingBalance.</param>
        /// <param name="closingBalance">closingBalance.</param>
        public BalanceDetails(double? openingBalance = default(double?), double? closingBalance = default(double?))
        {
            this.OpeningBalance = openingBalance;
            this.ClosingBalance = closingBalance;
        }
        
        /// <summary>
        /// Gets or Sets OpeningBalance
        /// </summary>
        [DataMember(Name="OpeningBalance", EmitDefaultValue=false)]
        public double? OpeningBalance { get; set; }

        /// <summary>
        /// Gets or Sets ClosingBalance
        /// </summary>
        [DataMember(Name="ClosingBalance", EmitDefaultValue=false)]
        public double? ClosingBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceDetails {\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceDetails);
        }

        /// <summary>
        /// Returns true if BalanceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    (this.OpeningBalance != null &&
                    this.OpeningBalance.Equals(input.OpeningBalance))
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    (this.ClosingBalance != null &&
                    this.ClosingBalance.Equals(input.ClosingBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpeningBalance != null)
                    hashCode = hashCode * 59 + this.OpeningBalance.GetHashCode();
                if (this.ClosingBalance != null)
                    hashCode = hashCode * 59 + this.ClosingBalance.GetHashCode();
                return hashCode;
            }
        }
    }

}

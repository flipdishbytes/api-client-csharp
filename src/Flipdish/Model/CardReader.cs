/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Card reader
    /// </summary>
    [DataContract]
    public partial class CardReader :  IEquatable<CardReader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardReader" /> class.
        /// </summary>
        /// <param name="id">Stripe reader id.</param>
        /// <param name="deviceSoftwareVersion">Software version.</param>
        /// <param name="serialNumber">Device serial number.</param>
        /// <param name="status">Device status online or offline.</param>
        /// <param name="registrationCode">Registration code.</param>
        /// <param name="deviceType">Device type.</param>
        /// <param name="deleted">Indicates that the reader is deleted or not.</param>
        /// <param name="action">Action status.</param>
        public CardReader(string id = default(string), string deviceSoftwareVersion = default(string), string serialNumber = default(string), string status = default(string), string registrationCode = default(string), string deviceType = default(string), bool? deleted = default(bool?), ReaderActionStateInfo action = default(ReaderActionStateInfo))
        {
            this.Id = id;
            this.DeviceSoftwareVersion = deviceSoftwareVersion;
            this.SerialNumber = serialNumber;
            this.Status = status;
            this.RegistrationCode = registrationCode;
            this.DeviceType = deviceType;
            this.Deleted = deleted;
            this.Action = action;
        }
        
        /// <summary>
        /// Stripe reader id
        /// </summary>
        /// <value>Stripe reader id</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Software version
        /// </summary>
        /// <value>Software version</value>
        [DataMember(Name="DeviceSoftwareVersion", EmitDefaultValue=false)]
        public string DeviceSoftwareVersion { get; set; }

        /// <summary>
        /// Device serial number
        /// </summary>
        /// <value>Device serial number</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Device status online or offline
        /// </summary>
        /// <value>Device status online or offline</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Registration code
        /// </summary>
        /// <value>Registration code</value>
        [DataMember(Name="RegistrationCode", EmitDefaultValue=false)]
        public string RegistrationCode { get; set; }

        /// <summary>
        /// Device type
        /// </summary>
        /// <value>Device type</value>
        [DataMember(Name="DeviceType", EmitDefaultValue=false)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Indicates that the reader is deleted or not
        /// </summary>
        /// <value>Indicates that the reader is deleted or not</value>
        [DataMember(Name="Deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Action status
        /// </summary>
        /// <value>Action status</value>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public ReaderActionStateInfo Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardReader {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceSoftwareVersion: ").Append(DeviceSoftwareVersion).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RegistrationCode: ").Append(RegistrationCode).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardReader);
        }

        /// <summary>
        /// Returns true if CardReader instances are equal
        /// </summary>
        /// <param name="input">Instance of CardReader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardReader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceSoftwareVersion == input.DeviceSoftwareVersion ||
                    (this.DeviceSoftwareVersion != null &&
                    this.DeviceSoftwareVersion.Equals(input.DeviceSoftwareVersion))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.RegistrationCode == input.RegistrationCode ||
                    (this.RegistrationCode != null &&
                    this.RegistrationCode.Equals(input.RegistrationCode))
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceSoftwareVersion != null)
                    hashCode = hashCode * 59 + this.DeviceSoftwareVersion.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.RegistrationCode != null)
                    hashCode = hashCode * 59 + this.RegistrationCode.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Fulfillment information (required for all orders)
    /// </summary>
    [DataContract]
    public partial class FulfillmentInfo :  IEquatable<FulfillmentInfo>, IValidatableObject
    {
        /// <summary>
        /// [Required] Dispatch Type (i.e Pickup / Delivery)
        /// </summary>
        /// <value>[Required] Dispatch Type (i.e Pickup / Delivery)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DispatchTypeEnum
        {
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 1,
            
            /// <summary>
            /// Enum Pickup for value: Pickup
            /// </summary>
            [EnumMember(Value = "Pickup")]
            Pickup = 2
        }

        /// <summary>
        /// [Required] Dispatch Type (i.e Pickup / Delivery)
        /// </summary>
        /// <value>[Required] Dispatch Type (i.e Pickup / Delivery)</value>
        [DataMember(Name="DispatchType", EmitDefaultValue=false)]
        public DispatchTypeEnum? DispatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentInfo" /> class.
        /// </summary>
        /// <param name="dispatchType">[Required] Dispatch Type (i.e Pickup / Delivery).</param>
        /// <param name="requestedForUtc">[Required] Time the order is requested for.</param>
        /// <param name="location">Location the order is to be delivered to  [Required] Delivery  [Not Required] Pickup.</param>
        /// <param name="dispatchAmount">Price of the dispatch, normally 0 for collection and a value for delivery  [Required] Delivery  [Not Required] Pickup.</param>
        public FulfillmentInfo(DispatchTypeEnum? dispatchType = default(DispatchTypeEnum?), DateTime? requestedForUtc = default(DateTime?), Location location = default(Location), Price dispatchAmount = default(Price))
        {
            this.DispatchType = dispatchType;
            this.RequestedForUtc = requestedForUtc;
            this.Location = location;
            this.DispatchAmount = dispatchAmount;
        }
        

        /// <summary>
        /// [Required] Time the order is requested for
        /// </summary>
        /// <value>[Required] Time the order is requested for</value>
        [DataMember(Name="RequestedForUtc", EmitDefaultValue=false)]
        public DateTime? RequestedForUtc { get; set; }

        /// <summary>
        /// Location the order is to be delivered to  [Required] Delivery  [Not Required] Pickup
        /// </summary>
        /// <value>Location the order is to be delivered to  [Required] Delivery  [Not Required] Pickup</value>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Price of the dispatch, normally 0 for collection and a value for delivery  [Required] Delivery  [Not Required] Pickup
        /// </summary>
        /// <value>Price of the dispatch, normally 0 for collection and a value for delivery  [Required] Delivery  [Not Required] Pickup</value>
        [DataMember(Name="DispatchAmount", EmitDefaultValue=false)]
        public Price DispatchAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentInfo {\n");
            sb.Append("  DispatchType: ").Append(DispatchType).Append("\n");
            sb.Append("  RequestedForUtc: ").Append(RequestedForUtc).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  DispatchAmount: ").Append(DispatchAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentInfo);
        }

        /// <summary>
        /// Returns true if FulfillmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DispatchType == input.DispatchType ||
                    (this.DispatchType != null &&
                    this.DispatchType.Equals(input.DispatchType))
                ) && 
                (
                    this.RequestedForUtc == input.RequestedForUtc ||
                    (this.RequestedForUtc != null &&
                    this.RequestedForUtc.Equals(input.RequestedForUtc))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.DispatchAmount == input.DispatchAmount ||
                    (this.DispatchAmount != null &&
                    this.DispatchAmount.Equals(input.DispatchAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DispatchType != null)
                    hashCode = hashCode * 59 + this.DispatchType.GetHashCode();
                if (this.RequestedForUtc != null)
                    hashCode = hashCode * 59 + this.RequestedForUtc.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.DispatchAmount != null)
                    hashCode = hashCode * 59 + this.DispatchAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

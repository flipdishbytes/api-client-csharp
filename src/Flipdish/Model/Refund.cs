/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Refund
    /// </summary>
    [DataContract]
    public partial class Refund :  IEquatable<Refund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Refund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        /// <param name="RefundReason">RefundReason.</param>
        /// <param name="RefundAmount">RefundAmount (required).</param>
        /// <param name="NotifyCustomer">NotifyCustomer (required).</param>
        public Refund(string RefundReason = default(string), double? RefundAmount = default(double?), bool? NotifyCustomer = default(bool?))
        {
            // to ensure "RefundAmount" is required (not null)
            if (RefundAmount == null)
            {
                throw new InvalidDataException("RefundAmount is a required property for Refund and cannot be null");
            }
            else
            {
                this.RefundAmount = RefundAmount;
            }
            // to ensure "NotifyCustomer" is required (not null)
            if (NotifyCustomer == null)
            {
                throw new InvalidDataException("NotifyCustomer is a required property for Refund and cannot be null");
            }
            else
            {
                this.NotifyCustomer = NotifyCustomer;
            }
            this.RefundReason = RefundReason;
        }
        
        /// <summary>
        /// Gets or Sets RefundReason
        /// </summary>
        [DataMember(Name="refundReason", EmitDefaultValue=false)]
        public string RefundReason { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name="refundAmount", EmitDefaultValue=false)]
        public double? RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets NotifyCustomer
        /// </summary>
        [DataMember(Name="notifyCustomer", EmitDefaultValue=false)]
        public bool? NotifyCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  RefundReason: ").Append(RefundReason).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  NotifyCustomer: ").Append(NotifyCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refund);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="input">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RefundReason == input.RefundReason ||
                    (this.RefundReason != null &&
                    this.RefundReason.Equals(input.RefundReason))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.NotifyCustomer == input.NotifyCustomer ||
                    (this.NotifyCustomer != null &&
                    this.NotifyCustomer.Equals(input.NotifyCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefundReason != null)
                    hashCode = hashCode * 59 + this.RefundReason.GetHashCode();
                if (this.RefundAmount != null)
                    hashCode = hashCode * 59 + this.RefundAmount.GetHashCode();
                if (this.NotifyCustomer != null)
                    hashCode = hashCode * 59 + this.NotifyCustomer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RefundAmount (double?) minimum
            if(this.RefundAmount < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundAmount, must be a value greater than or equal to 0.", new [] { "RefundAmount" });
            }

            yield break;
        }
    }

}

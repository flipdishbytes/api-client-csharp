/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Order summary
    /// </summary>
    [DataContract]
    public partial class OrderSummary :  IEquatable<OrderSummary>
    {
        /// <summary>
        /// Delivery type
        /// </summary>
        /// <value>Delivery type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliveryTypeEnum
        {
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 1,
            
            /// <summary>
            /// Enum Pickup for value: Pickup
            /// </summary>
            [EnumMember(Value = "Pickup")]
            Pickup = 2
        }

        /// <summary>
        /// Delivery type
        /// </summary>
        /// <value>Delivery type</value>
        [DataMember(Name="DeliveryType", EmitDefaultValue=false)]
        public DeliveryTypeEnum? DeliveryType { get; set; }
        /// <summary>
        /// Pickup location type
        /// </summary>
        /// <value>Pickup location type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupLocationTypeEnum
        {
            
            /// <summary>
            /// Enum TakeOut for value: TakeOut
            /// </summary>
            [EnumMember(Value = "TakeOut")]
            TakeOut = 1,
            
            /// <summary>
            /// Enum TableService for value: TableService
            /// </summary>
            [EnumMember(Value = "TableService")]
            TableService = 2,
            
            /// <summary>
            /// Enum DineIn for value: DineIn
            /// </summary>
            [EnumMember(Value = "DineIn")]
            DineIn = 3
        }

        /// <summary>
        /// Pickup location type
        /// </summary>
        /// <value>Pickup location type</value>
        [DataMember(Name="PickupLocationType", EmitDefaultValue=false)]
        public PickupLocationTypeEnum? PickupLocationType { get; set; }
        /// <summary>
        /// Table service category
        /// </summary>
        /// <value>Table service category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TableServiceCatagoryEnum
        {
            
            /// <summary>
            /// Enum Generic for value: Generic
            /// </summary>
            [EnumMember(Value = "Generic")]
            Generic = 1,
            
            /// <summary>
            /// Enum Villa for value: Villa
            /// </summary>
            [EnumMember(Value = "Villa")]
            Villa = 2,
            
            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 3,
            
            /// <summary>
            /// Enum Room for value: Room
            /// </summary>
            [EnumMember(Value = "Room")]
            Room = 4,
            
            /// <summary>
            /// Enum Area for value: Area
            /// </summary>
            [EnumMember(Value = "Area")]
            Area = 5,
            
            /// <summary>
            /// Enum Table for value: Table
            /// </summary>
            [EnumMember(Value = "Table")]
            Table = 6,
            
            /// <summary>
            /// Enum ParkingBay for value: ParkingBay
            /// </summary>
            [EnumMember(Value = "ParkingBay")]
            ParkingBay = 7,
            
            /// <summary>
            /// Enum Gate for value: Gate
            /// </summary>
            [EnumMember(Value = "Gate")]
            Gate = 8,
            
            /// <summary>
            /// Enum DriveThrough for value: DriveThrough
            /// </summary>
            [EnumMember(Value = "DriveThrough")]
            DriveThrough = 9,
            
            /// <summary>
            /// Enum Team for value: Team
            /// </summary>
            [EnumMember(Value = "Team")]
            Team = 10
        }

        /// <summary>
        /// Table service category
        /// </summary>
        /// <value>Table service category</value>
        [DataMember(Name="TableServiceCatagory", EmitDefaultValue=false)]
        public TableServiceCatagoryEnum? TableServiceCatagory { get; set; }
        /// <summary>
        /// Order state
        /// </summary>
        /// <value>Order state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStateEnum
        {
            
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 1,
            
            /// <summary>
            /// Enum PlacedCanBeCancelled for value: PlacedCanBeCancelled
            /// </summary>
            [EnumMember(Value = "PlacedCanBeCancelled")]
            PlacedCanBeCancelled = 2,
            
            /// <summary>
            /// Enum ReadyToProcess for value: ReadyToProcess
            /// </summary>
            [EnumMember(Value = "ReadyToProcess")]
            ReadyToProcess = 3,
            
            /// <summary>
            /// Enum AcceptedByRestaurant for value: AcceptedByRestaurant
            /// </summary>
            [EnumMember(Value = "AcceptedByRestaurant")]
            AcceptedByRestaurant = 4,
            
            /// <summary>
            /// Enum Dispatched for value: Dispatched
            /// </summary>
            [EnumMember(Value = "Dispatched")]
            Dispatched = 5,
            
            /// <summary>
            /// Enum Delivered for value: Delivered
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered = 6,
            
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 7,
            
            /// <summary>
            /// Enum ManualReview for value: ManualReview
            /// </summary>
            [EnumMember(Value = "ManualReview")]
            ManualReview = 8,
            
            /// <summary>
            /// Enum RejectedByStore for value: RejectedByStore
            /// </summary>
            [EnumMember(Value = "RejectedByStore")]
            RejectedByStore = 9,
            
            /// <summary>
            /// Enum RejectedByFlipdish for value: RejectedByFlipdish
            /// </summary>
            [EnumMember(Value = "RejectedByFlipdish")]
            RejectedByFlipdish = 10,
            
            /// <summary>
            /// Enum RejectedAutomatically for value: RejectedAutomatically
            /// </summary>
            [EnumMember(Value = "RejectedAutomatically")]
            RejectedAutomatically = 11,
            
            /// <summary>
            /// Enum RejectedAfterBeingAccepted for value: RejectedAfterBeingAccepted
            /// </summary>
            [EnumMember(Value = "RejectedAfterBeingAccepted")]
            RejectedAfterBeingAccepted = 12,
            
            /// <summary>
            /// Enum AcceptedAndRefunded for value: AcceptedAndRefunded
            /// </summary>
            [EnumMember(Value = "AcceptedAndRefunded")]
            AcceptedAndRefunded = 13
        }

        /// <summary>
        /// Order state
        /// </summary>
        /// <value>Order state</value>
        [DataMember(Name="OrderState", EmitDefaultValue=false)]
        public OrderStateEnum? OrderState { get; set; }
        /// <summary>
        /// Payment Account
        /// </summary>
        /// <value>Payment Account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentAccountTypeEnum
        {
            
            /// <summary>
            /// Enum Card for value: Card
            /// </summary>
            [EnumMember(Value = "Card")]
            Card = 1,
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 2,
            
            /// <summary>
            /// Enum Ideal for value: Ideal
            /// </summary>
            [EnumMember(Value = "Ideal")]
            Ideal = 3,
            
            /// <summary>
            /// Enum Bancontact for value: Bancontact
            /// </summary>
            [EnumMember(Value = "Bancontact")]
            Bancontact = 4,
            
            /// <summary>
            /// Enum Giropay for value: Giropay
            /// </summary>
            [EnumMember(Value = "Giropay")]
            Giropay = 5,
            
            /// <summary>
            /// Enum Eps for value: Eps
            /// </summary>
            [EnumMember(Value = "Eps")]
            Eps = 6,
            
            /// <summary>
            /// Enum Emv for value: Emv
            /// </summary>
            [EnumMember(Value = "Emv")]
            Emv = 7,
            
            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 8,
            
            /// <summary>
            /// Enum PayGreen for value: PayGreen
            /// </summary>
            [EnumMember(Value = "PayGreen")]
            PayGreen = 9
        }

        /// <summary>
        /// Payment Account
        /// </summary>
        /// <value>Payment Account</value>
        [DataMember(Name="PaymentAccountType", EmitDefaultValue=false)]
        public PaymentAccountTypeEnum? PaymentAccountType { get; set; }
        /// <summary>
        /// Status of the payment
        /// </summary>
        /// <value>Status of the payment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            
            /// <summary>
            /// Enum Paid for value: Paid
            /// </summary>
            [EnumMember(Value = "Paid")]
            Paid = 1,
            
            /// <summary>
            /// Enum Unpaid for value: Unpaid
            /// </summary>
            [EnumMember(Value = "Unpaid")]
            Unpaid = 2,
            
            /// <summary>
            /// Enum Refunded for value: Refunded
            /// </summary>
            [EnumMember(Value = "Refunded")]
            Refunded = 3,
            
            /// <summary>
            /// Enum PartiallyRefunded for value: PartiallyRefunded
            /// </summary>
            [EnumMember(Value = "PartiallyRefunded")]
            PartiallyRefunded = 4,
            
            /// <summary>
            /// Enum Disputed for value: Disputed
            /// </summary>
            [EnumMember(Value = "Disputed")]
            Disputed = 5
        }

        /// <summary>
        /// Status of the payment
        /// </summary>
        /// <value>Status of the payment</value>
        [DataMember(Name="PaymentStatus", EmitDefaultValue=false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// Currency of payment
        /// </summary>
        /// <value>Currency of payment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 113
        }

        /// <summary>
        /// Currency of payment
        /// </summary>
        /// <value>Currency of payment</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Type of app end user is on
        /// </summary>
        /// <value>Type of app end user is on</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum Ios for value: Ios
            /// </summary>
            [EnumMember(Value = "Ios")]
            Ios = 2,
            
            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            [EnumMember(Value = "Android")]
            Android = 3,
            
            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            [EnumMember(Value = "Web")]
            Web = 4,
            
            /// <summary>
            /// Enum Kiosk for value: Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            Kiosk = 5,
            
            /// <summary>
            /// Enum Pos for value: Pos
            /// </summary>
            [EnumMember(Value = "Pos")]
            Pos = 6,
            
            /// <summary>
            /// Enum TelephoneCall for value: TelephoneCall
            /// </summary>
            [EnumMember(Value = "TelephoneCall")]
            TelephoneCall = 7,
            
            /// <summary>
            /// Enum Sms for value: Sms
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms = 8,
            
            /// <summary>
            /// Enum PwaAndroid for value: PwaAndroid
            /// </summary>
            [EnumMember(Value = "PwaAndroid")]
            PwaAndroid = 9,
            
            /// <summary>
            /// Enum PwaIos for value: PwaIos
            /// </summary>
            [EnumMember(Value = "PwaIos")]
            PwaIos = 10,
            
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 11
        }

        /// <summary>
        /// Type of app end user is on
        /// </summary>
        /// <value>Type of app end user is on</value>
        [DataMember(Name="AppType", EmitDefaultValue=false)]
        public AppTypeEnum? AppType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSummary" /> class.
        /// </summary>
        /// <param name="orderId">Order identifier.</param>
        /// <param name="deliveryType">Delivery type.</param>
        /// <param name="pickupLocationType">Pickup location type.</param>
        /// <param name="tableServiceCatagory">Table service category.</param>
        /// <param name="orderState">Order state.</param>
        /// <param name="requestedForTime">Order requested for.</param>
        /// <param name="storeName">Name of the store.</param>
        /// <param name="storeIanaTimeZone">Store IANA time zone.</param>
        /// <param name="customerName">Name of the customer.</param>
        /// <param name="customerPhoneNumber">Phone number of customer.</param>
        /// <param name="amount">This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee  It does include the OnlineOrderingFee.</param>
        /// <param name="refundedAmount">Refunded amount.</param>
        /// <param name="paymentAccountType">Payment Account.</param>
        /// <param name="paymentStatus">Status of the payment.</param>
        /// <param name="currency">Currency of payment.</param>
        /// <param name="appType">Type of app end user is on.</param>
        /// <param name="localOrderId">Local order Id. This is used for displaying a \&quot;shorter\&quot; order ID for customers (eg. Kiosk orders).</param>
        /// <param name="dropOffLocationId">id of the collection/drop off location.</param>
        /// <param name="dropOffLocation">Represents table service drop off location.</param>
        /// <param name="acceptedFor">Time store has accepted the order for.</param>
        /// <param name="channel">Channel where the Order comes from.</param>
        /// <param name="inFraudZone">Was order made within a fraud zone.</param>
        /// <param name="unusualHighValueOrder">Is order of unusually high value.</param>
        /// <param name="channelOrderId">ChannelOrderId from external channel.</param>
        /// <param name="channelOrderDisplayId">ChannelOrderDisplayId from external channel.</param>
        /// <param name="orderDropOffLocation">DropOffLocation selected for this order.</param>
        /// <param name="orderBatchInfo">OrderBatch information.</param>
        /// <param name="deliveryLocation">deliveryLocation.</param>
        public OrderSummary(int? orderId = default(int?), DeliveryTypeEnum? deliveryType = default(DeliveryTypeEnum?), PickupLocationTypeEnum? pickupLocationType = default(PickupLocationTypeEnum?), TableServiceCatagoryEnum? tableServiceCatagory = default(TableServiceCatagoryEnum?), OrderStateEnum? orderState = default(OrderStateEnum?), DateTime? requestedForTime = default(DateTime?), string storeName = default(string), string storeIanaTimeZone = default(string), string customerName = default(string), string customerPhoneNumber = default(string), double? amount = default(double?), double? refundedAmount = default(double?), PaymentAccountTypeEnum? paymentAccountType = default(PaymentAccountTypeEnum?), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), CurrencyEnum? currency = default(CurrencyEnum?), AppTypeEnum? appType = default(AppTypeEnum?), string localOrderId = default(string), int? dropOffLocationId = default(int?), string dropOffLocation = default(string), DateTime? acceptedFor = default(DateTime?), Channel channel = default(Channel), bool? inFraudZone = default(bool?), bool? unusualHighValueOrder = default(bool?), string channelOrderId = default(string), string channelOrderDisplayId = default(string), OrderDropOffLocation orderDropOffLocation = default(OrderDropOffLocation), OrderBatchSummary orderBatchInfo = default(OrderBatchSummary), DeliveryLocation deliveryLocation = default(DeliveryLocation))
        {
            this.OrderId = orderId;
            this.DeliveryType = deliveryType;
            this.PickupLocationType = pickupLocationType;
            this.TableServiceCatagory = tableServiceCatagory;
            this.OrderState = orderState;
            this.RequestedForTime = requestedForTime;
            this.StoreName = storeName;
            this.StoreIanaTimeZone = storeIanaTimeZone;
            this.CustomerName = customerName;
            this.CustomerPhoneNumber = customerPhoneNumber;
            this.Amount = amount;
            this.RefundedAmount = refundedAmount;
            this.PaymentAccountType = paymentAccountType;
            this.PaymentStatus = paymentStatus;
            this.Currency = currency;
            this.AppType = appType;
            this.LocalOrderId = localOrderId;
            this.DropOffLocationId = dropOffLocationId;
            this.DropOffLocation = dropOffLocation;
            this.AcceptedFor = acceptedFor;
            this.Channel = channel;
            this.InFraudZone = inFraudZone;
            this.UnusualHighValueOrder = unusualHighValueOrder;
            this.ChannelOrderId = channelOrderId;
            this.ChannelOrderDisplayId = channelOrderDisplayId;
            this.OrderDropOffLocation = orderDropOffLocation;
            this.OrderBatchInfo = orderBatchInfo;
            this.DeliveryLocation = deliveryLocation;
        }
        
        /// <summary>
        /// Order identifier
        /// </summary>
        /// <value>Order identifier</value>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }





        /// <summary>
        /// Order requested for
        /// </summary>
        /// <value>Order requested for</value>
        [DataMember(Name="RequestedForTime", EmitDefaultValue=false)]
        public DateTime? RequestedForTime { get; set; }

        /// <summary>
        /// Name of the store
        /// </summary>
        /// <value>Name of the store</value>
        [DataMember(Name="StoreName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Store IANA time zone
        /// </summary>
        /// <value>Store IANA time zone</value>
        [DataMember(Name="StoreIanaTimeZone", EmitDefaultValue=false)]
        public string StoreIanaTimeZone { get; set; }

        /// <summary>
        /// Name of the customer
        /// </summary>
        /// <value>Name of the customer</value>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Phone number of customer
        /// </summary>
        /// <value>Phone number of customer</value>
        [DataMember(Name="CustomerPhoneNumber", EmitDefaultValue=false)]
        public string CustomerPhoneNumber { get; set; }

        /// <summary>
        /// This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee  It does include the OnlineOrderingFee
        /// </summary>
        /// <value>This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee  It does include the OnlineOrderingFee</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Refunded amount
        /// </summary>
        /// <value>Refunded amount</value>
        [DataMember(Name="RefundedAmount", EmitDefaultValue=false)]
        public double? RefundedAmount { get; set; }





        /// <summary>
        /// Local order Id. This is used for displaying a \&quot;shorter\&quot; order ID for customers (eg. Kiosk orders)
        /// </summary>
        /// <value>Local order Id. This is used for displaying a \&quot;shorter\&quot; order ID for customers (eg. Kiosk orders)</value>
        [DataMember(Name="LocalOrderId", EmitDefaultValue=false)]
        public string LocalOrderId { get; set; }

        /// <summary>
        /// id of the collection/drop off location
        /// </summary>
        /// <value>id of the collection/drop off location</value>
        [DataMember(Name="DropOffLocationId", EmitDefaultValue=false)]
        public int? DropOffLocationId { get; set; }

        /// <summary>
        /// Represents table service drop off location
        /// </summary>
        /// <value>Represents table service drop off location</value>
        [DataMember(Name="DropOffLocation", EmitDefaultValue=false)]
        public string DropOffLocation { get; set; }

        /// <summary>
        /// Time store has accepted the order for
        /// </summary>
        /// <value>Time store has accepted the order for</value>
        [DataMember(Name="AcceptedFor", EmitDefaultValue=false)]
        public DateTime? AcceptedFor { get; set; }

        /// <summary>
        /// Channel where the Order comes from
        /// </summary>
        /// <value>Channel where the Order comes from</value>
        [DataMember(Name="Channel", EmitDefaultValue=false)]
        public Channel Channel { get; set; }

        /// <summary>
        /// Was order made within a fraud zone
        /// </summary>
        /// <value>Was order made within a fraud zone</value>
        [DataMember(Name="InFraudZone", EmitDefaultValue=false)]
        public bool? InFraudZone { get; set; }

        /// <summary>
        /// Is order of unusually high value
        /// </summary>
        /// <value>Is order of unusually high value</value>
        [DataMember(Name="UnusualHighValueOrder", EmitDefaultValue=false)]
        public bool? UnusualHighValueOrder { get; set; }

        /// <summary>
        /// ChannelOrderId from external channel
        /// </summary>
        /// <value>ChannelOrderId from external channel</value>
        [DataMember(Name="ChannelOrderId", EmitDefaultValue=false)]
        public string ChannelOrderId { get; set; }

        /// <summary>
        /// ChannelOrderDisplayId from external channel
        /// </summary>
        /// <value>ChannelOrderDisplayId from external channel</value>
        [DataMember(Name="ChannelOrderDisplayId", EmitDefaultValue=false)]
        public string ChannelOrderDisplayId { get; set; }

        /// <summary>
        /// DropOffLocation selected for this order
        /// </summary>
        /// <value>DropOffLocation selected for this order</value>
        [DataMember(Name="OrderDropOffLocation", EmitDefaultValue=false)]
        public OrderDropOffLocation OrderDropOffLocation { get; set; }

        /// <summary>
        /// OrderBatch information
        /// </summary>
        /// <value>OrderBatch information</value>
        [DataMember(Name="OrderBatchInfo", EmitDefaultValue=false)]
        public OrderBatchSummary OrderBatchInfo { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocation
        /// </summary>
        [DataMember(Name="DeliveryLocation", EmitDefaultValue=false)]
        public DeliveryLocation DeliveryLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderSummary {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  PickupLocationType: ").Append(PickupLocationType).Append("\n");
            sb.Append("  TableServiceCatagory: ").Append(TableServiceCatagory).Append("\n");
            sb.Append("  OrderState: ").Append(OrderState).Append("\n");
            sb.Append("  RequestedForTime: ").Append(RequestedForTime).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  StoreIanaTimeZone: ").Append(StoreIanaTimeZone).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerPhoneNumber: ").Append(CustomerPhoneNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  PaymentAccountType: ").Append(PaymentAccountType).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  LocalOrderId: ").Append(LocalOrderId).Append("\n");
            sb.Append("  DropOffLocationId: ").Append(DropOffLocationId).Append("\n");
            sb.Append("  DropOffLocation: ").Append(DropOffLocation).Append("\n");
            sb.Append("  AcceptedFor: ").Append(AcceptedFor).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  InFraudZone: ").Append(InFraudZone).Append("\n");
            sb.Append("  UnusualHighValueOrder: ").Append(UnusualHighValueOrder).Append("\n");
            sb.Append("  ChannelOrderId: ").Append(ChannelOrderId).Append("\n");
            sb.Append("  ChannelOrderDisplayId: ").Append(ChannelOrderDisplayId).Append("\n");
            sb.Append("  OrderDropOffLocation: ").Append(OrderDropOffLocation).Append("\n");
            sb.Append("  OrderBatchInfo: ").Append(OrderBatchInfo).Append("\n");
            sb.Append("  DeliveryLocation: ").Append(DeliveryLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderSummary);
        }

        /// <summary>
        /// Returns true if OrderSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.PickupLocationType == input.PickupLocationType ||
                    (this.PickupLocationType != null &&
                    this.PickupLocationType.Equals(input.PickupLocationType))
                ) && 
                (
                    this.TableServiceCatagory == input.TableServiceCatagory ||
                    (this.TableServiceCatagory != null &&
                    this.TableServiceCatagory.Equals(input.TableServiceCatagory))
                ) && 
                (
                    this.OrderState == input.OrderState ||
                    (this.OrderState != null &&
                    this.OrderState.Equals(input.OrderState))
                ) && 
                (
                    this.RequestedForTime == input.RequestedForTime ||
                    (this.RequestedForTime != null &&
                    this.RequestedForTime.Equals(input.RequestedForTime))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.StoreIanaTimeZone == input.StoreIanaTimeZone ||
                    (this.StoreIanaTimeZone != null &&
                    this.StoreIanaTimeZone.Equals(input.StoreIanaTimeZone))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerPhoneNumber == input.CustomerPhoneNumber ||
                    (this.CustomerPhoneNumber != null &&
                    this.CustomerPhoneNumber.Equals(input.CustomerPhoneNumber))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.RefundedAmount == input.RefundedAmount ||
                    (this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(input.RefundedAmount))
                ) && 
                (
                    this.PaymentAccountType == input.PaymentAccountType ||
                    (this.PaymentAccountType != null &&
                    this.PaymentAccountType.Equals(input.PaymentAccountType))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.AppType == input.AppType ||
                    (this.AppType != null &&
                    this.AppType.Equals(input.AppType))
                ) && 
                (
                    this.LocalOrderId == input.LocalOrderId ||
                    (this.LocalOrderId != null &&
                    this.LocalOrderId.Equals(input.LocalOrderId))
                ) && 
                (
                    this.DropOffLocationId == input.DropOffLocationId ||
                    (this.DropOffLocationId != null &&
                    this.DropOffLocationId.Equals(input.DropOffLocationId))
                ) && 
                (
                    this.DropOffLocation == input.DropOffLocation ||
                    (this.DropOffLocation != null &&
                    this.DropOffLocation.Equals(input.DropOffLocation))
                ) && 
                (
                    this.AcceptedFor == input.AcceptedFor ||
                    (this.AcceptedFor != null &&
                    this.AcceptedFor.Equals(input.AcceptedFor))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.InFraudZone == input.InFraudZone ||
                    (this.InFraudZone != null &&
                    this.InFraudZone.Equals(input.InFraudZone))
                ) && 
                (
                    this.UnusualHighValueOrder == input.UnusualHighValueOrder ||
                    (this.UnusualHighValueOrder != null &&
                    this.UnusualHighValueOrder.Equals(input.UnusualHighValueOrder))
                ) && 
                (
                    this.ChannelOrderId == input.ChannelOrderId ||
                    (this.ChannelOrderId != null &&
                    this.ChannelOrderId.Equals(input.ChannelOrderId))
                ) && 
                (
                    this.ChannelOrderDisplayId == input.ChannelOrderDisplayId ||
                    (this.ChannelOrderDisplayId != null &&
                    this.ChannelOrderDisplayId.Equals(input.ChannelOrderDisplayId))
                ) && 
                (
                    this.OrderDropOffLocation == input.OrderDropOffLocation ||
                    (this.OrderDropOffLocation != null &&
                    this.OrderDropOffLocation.Equals(input.OrderDropOffLocation))
                ) && 
                (
                    this.OrderBatchInfo == input.OrderBatchInfo ||
                    (this.OrderBatchInfo != null &&
                    this.OrderBatchInfo.Equals(input.OrderBatchInfo))
                ) && 
                (
                    this.DeliveryLocation == input.DeliveryLocation ||
                    (this.DeliveryLocation != null &&
                    this.DeliveryLocation.Equals(input.DeliveryLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.DeliveryType != null)
                    hashCode = hashCode * 59 + this.DeliveryType.GetHashCode();
                if (this.PickupLocationType != null)
                    hashCode = hashCode * 59 + this.PickupLocationType.GetHashCode();
                if (this.TableServiceCatagory != null)
                    hashCode = hashCode * 59 + this.TableServiceCatagory.GetHashCode();
                if (this.OrderState != null)
                    hashCode = hashCode * 59 + this.OrderState.GetHashCode();
                if (this.RequestedForTime != null)
                    hashCode = hashCode * 59 + this.RequestedForTime.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.StoreIanaTimeZone != null)
                    hashCode = hashCode * 59 + this.StoreIanaTimeZone.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerPhoneNumber != null)
                    hashCode = hashCode * 59 + this.CustomerPhoneNumber.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.RefundedAmount != null)
                    hashCode = hashCode * 59 + this.RefundedAmount.GetHashCode();
                if (this.PaymentAccountType != null)
                    hashCode = hashCode * 59 + this.PaymentAccountType.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.AppType != null)
                    hashCode = hashCode * 59 + this.AppType.GetHashCode();
                if (this.LocalOrderId != null)
                    hashCode = hashCode * 59 + this.LocalOrderId.GetHashCode();
                if (this.DropOffLocationId != null)
                    hashCode = hashCode * 59 + this.DropOffLocationId.GetHashCode();
                if (this.DropOffLocation != null)
                    hashCode = hashCode * 59 + this.DropOffLocation.GetHashCode();
                if (this.AcceptedFor != null)
                    hashCode = hashCode * 59 + this.AcceptedFor.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.InFraudZone != null)
                    hashCode = hashCode * 59 + this.InFraudZone.GetHashCode();
                if (this.UnusualHighValueOrder != null)
                    hashCode = hashCode * 59 + this.UnusualHighValueOrder.GetHashCode();
                if (this.ChannelOrderId != null)
                    hashCode = hashCode * 59 + this.ChannelOrderId.GetHashCode();
                if (this.ChannelOrderDisplayId != null)
                    hashCode = hashCode * 59 + this.ChannelOrderDisplayId.GetHashCode();
                if (this.OrderDropOffLocation != null)
                    hashCode = hashCode * 59 + this.OrderDropOffLocation.GetHashCode();
                if (this.OrderBatchInfo != null)
                    hashCode = hashCode * 59 + this.OrderBatchInfo.GetHashCode();
                if (this.DeliveryLocation != null)
                    hashCode = hashCode * 59 + this.DeliveryLocation.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Invoice Item
    /// </summary>
    [DataContract]
    public partial class InvoiceItem :  IEquatable<InvoiceItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        /// <param name="description">Description (required).</param>
        /// <param name="quantity">Quantity (required).</param>
        /// <param name="unitAmountExcludingTax">Unit Amount Excluding Tax (required).</param>
        /// <param name="tax">Tax (required).</param>
        /// <param name="amount">Amount (required).</param>
        /// <param name="period">Period (required).</param>
        public InvoiceItem(string description = default(string), long? quantity = default(long?), double? unitAmountExcludingTax = default(double?), double? tax = default(double?), double? amount = default(double?), InvoicePeriod period = default(InvoicePeriod))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "unitAmountExcludingTax" is required (not null)
            if (unitAmountExcludingTax == null)
            {
                throw new InvalidDataException("unitAmountExcludingTax is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.UnitAmountExcludingTax = unitAmountExcludingTax;
            }
            // to ensure "tax" is required (not null)
            if (tax == null)
            {
                throw new InvalidDataException("tax is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.Tax = tax;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new InvalidDataException("period is a required property for InvoiceItem and cannot be null");
            }
            else
            {
                this.Period = period;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>
        /// <value>Quantity</value>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Unit Amount Excluding Tax
        /// </summary>
        /// <value>Unit Amount Excluding Tax</value>
        [DataMember(Name="UnitAmountExcludingTax", EmitDefaultValue=false)]
        public double? UnitAmountExcludingTax { get; set; }

        /// <summary>
        /// Tax
        /// </summary>
        /// <value>Tax</value>
        [DataMember(Name="Tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Period
        /// </summary>
        /// <value>Period</value>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public InvoicePeriod Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceItem {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitAmountExcludingTax: ").Append(UnitAmountExcludingTax).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceItem);
        }

        /// <summary>
        /// Returns true if InvoiceItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitAmountExcludingTax == input.UnitAmountExcludingTax ||
                    (this.UnitAmountExcludingTax != null &&
                    this.UnitAmountExcludingTax.Equals(input.UnitAmountExcludingTax))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitAmountExcludingTax != null)
                    hashCode = hashCode * 59 + this.UnitAmountExcludingTax.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                return hashCode;
            }
        }
    }

}

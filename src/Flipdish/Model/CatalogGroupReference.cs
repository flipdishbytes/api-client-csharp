/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Catalog Group associated
    /// </summary>
    [DataContract]
    public partial class CatalogGroupReference :  IEquatable<CatalogGroupReference>, IValidatableObject
    {
        /// <summary>
        /// Type of the SupGroup
        /// </summary>
        /// <value>Type of the SupGroup</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum ModifierGroup for value: ModifierGroup
            /// </summary>
            [EnumMember(Value = "ModifierGroup")]
            ModifierGroup = 2
        }

        /// <summary>
        /// Type of the SupGroup
        /// </summary>
        /// <value>Type of the SupGroup</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogGroupReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogGroupReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogGroupReference" /> class.
        /// </summary>
        /// <param name="catalogGroupId">Identifier of the CatalogGroupId to use as SubProduct (required).</param>
        /// <param name="type">Type of the SupGroup (required).</param>
        /// <param name="group">Details of the sub product.</param>
        /// <param name="minSelection">Minimum number of items that must be selected.</param>
        /// <param name="maxSelection">Maximum number of items that can be selected.</param>
        public CatalogGroupReference(string catalogGroupId = default(string), TypeEnum type = default(TypeEnum), Product group = default(Product), int? minSelection = default(int?), int? maxSelection = default(int?))
        {
            // to ensure "catalogGroupId" is required (not null)
            if (catalogGroupId == null)
            {
                throw new InvalidDataException("catalogGroupId is a required property for CatalogGroupReference and cannot be null");
            }
            else
            {
                this.CatalogGroupId = catalogGroupId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogGroupReference and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Group = group;
            this.MinSelection = minSelection;
            this.MaxSelection = maxSelection;
        }
        
        /// <summary>
        /// Identifier of the CatalogGroupId to use as SubProduct
        /// </summary>
        /// <value>Identifier of the CatalogGroupId to use as SubProduct</value>
        [DataMember(Name="CatalogGroupId", EmitDefaultValue=false)]
        public string CatalogGroupId { get; set; }


        /// <summary>
        /// Details of the sub product
        /// </summary>
        /// <value>Details of the sub product</value>
        [DataMember(Name="Group", EmitDefaultValue=false)]
        public Product Group { get; set; }

        /// <summary>
        /// Minimum number of items that must be selected
        /// </summary>
        /// <value>Minimum number of items that must be selected</value>
        [DataMember(Name="MinSelection", EmitDefaultValue=false)]
        public int? MinSelection { get; set; }

        /// <summary>
        /// Maximum number of items that can be selected
        /// </summary>
        /// <value>Maximum number of items that can be selected</value>
        [DataMember(Name="MaxSelection", EmitDefaultValue=false)]
        public int? MaxSelection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogGroupReference {\n");
            sb.Append("  CatalogGroupId: ").Append(CatalogGroupId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  MinSelection: ").Append(MinSelection).Append("\n");
            sb.Append("  MaxSelection: ").Append(MaxSelection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogGroupReference);
        }

        /// <summary>
        /// Returns true if CatalogGroupReference instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogGroupReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogGroupReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogGroupId == input.CatalogGroupId ||
                    (this.CatalogGroupId != null &&
                    this.CatalogGroupId.Equals(input.CatalogGroupId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.MinSelection == input.MinSelection ||
                    (this.MinSelection != null &&
                    this.MinSelection.Equals(input.MinSelection))
                ) && 
                (
                    this.MaxSelection == input.MaxSelection ||
                    (this.MaxSelection != null &&
                    this.MaxSelection.Equals(input.MaxSelection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogGroupId != null)
                    hashCode = hashCode * 59 + this.CatalogGroupId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.MinSelection != null)
                    hashCode = hashCode * 59 + this.MinSelection.GetHashCode();
                if (this.MaxSelection != null)
                    hashCode = hashCode * 59 + this.MaxSelection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CatalogGroupId (string) maxLength
            if(this.CatalogGroupId != null && this.CatalogGroupId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogGroupId, length must be less than 30.", new [] { "CatalogGroupId" });
            }

            // CatalogGroupId (string) minLength
            if(this.CatalogGroupId != null && this.CatalogGroupId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogGroupId, length must be greater than 0.", new [] { "CatalogGroupId" });
            }

            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store Collection Settings
    /// </summary>
    [DataContract]
    public partial class StoreCollectionSettings :  IEquatable<StoreCollectionSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreCollectionSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreCollectionSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreCollectionSettings" /> class.
        /// </summary>
        /// <param name="pickupEnabled">True if the store accepts pickup orders (required).</param>
        /// <param name="minimumPickupOrderAmount">Minimum pickup order amount (required).</param>
        /// <param name="requireCustomerNameForPickup">True if customer name required for pickup orders (required).</param>
        /// <param name="cashOrdersPickupEnabled">True if the store accepts cash payment for pickup orders (required).</param>
        /// <param name="leadTimeMinutes">Auto accept lead time for collection orders (required).</param>
        /// <param name="etaInPickupConfirmationSmsEnabled">True if order confirmation sms includes estimated time when order will be ready for collection (required).</param>
        public StoreCollectionSettings(bool? pickupEnabled = default(bool?), double? minimumPickupOrderAmount = default(double?), bool? requireCustomerNameForPickup = default(bool?), bool? cashOrdersPickupEnabled = default(bool?), int? leadTimeMinutes = default(int?), bool? etaInPickupConfirmationSmsEnabled = default(bool?))
        {
            // to ensure "pickupEnabled" is required (not null)
            if (pickupEnabled == null)
            {
                throw new InvalidDataException("pickupEnabled is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.PickupEnabled = pickupEnabled;
            }
            // to ensure "minimumPickupOrderAmount" is required (not null)
            if (minimumPickupOrderAmount == null)
            {
                throw new InvalidDataException("minimumPickupOrderAmount is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.MinimumPickupOrderAmount = minimumPickupOrderAmount;
            }
            // to ensure "requireCustomerNameForPickup" is required (not null)
            if (requireCustomerNameForPickup == null)
            {
                throw new InvalidDataException("requireCustomerNameForPickup is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.RequireCustomerNameForPickup = requireCustomerNameForPickup;
            }
            // to ensure "cashOrdersPickupEnabled" is required (not null)
            if (cashOrdersPickupEnabled == null)
            {
                throw new InvalidDataException("cashOrdersPickupEnabled is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.CashOrdersPickupEnabled = cashOrdersPickupEnabled;
            }
            // to ensure "leadTimeMinutes" is required (not null)
            if (leadTimeMinutes == null)
            {
                throw new InvalidDataException("leadTimeMinutes is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.LeadTimeMinutes = leadTimeMinutes;
            }
            // to ensure "etaInPickupConfirmationSmsEnabled" is required (not null)
            if (etaInPickupConfirmationSmsEnabled == null)
            {
                throw new InvalidDataException("etaInPickupConfirmationSmsEnabled is a required property for StoreCollectionSettings and cannot be null");
            }
            else
            {
                this.EtaInPickupConfirmationSmsEnabled = etaInPickupConfirmationSmsEnabled;
            }
        }
        
        /// <summary>
        /// True if the store accepts pickup orders
        /// </summary>
        /// <value>True if the store accepts pickup orders</value>
        [DataMember(Name="PickupEnabled", EmitDefaultValue=false)]
        public bool? PickupEnabled { get; set; }

        /// <summary>
        /// Minimum pickup order amount
        /// </summary>
        /// <value>Minimum pickup order amount</value>
        [DataMember(Name="MinimumPickupOrderAmount", EmitDefaultValue=false)]
        public double? MinimumPickupOrderAmount { get; set; }

        /// <summary>
        /// True if customer name required for pickup orders
        /// </summary>
        /// <value>True if customer name required for pickup orders</value>
        [DataMember(Name="RequireCustomerNameForPickup", EmitDefaultValue=false)]
        public bool? RequireCustomerNameForPickup { get; set; }

        /// <summary>
        /// True if the store accepts cash payment for pickup orders
        /// </summary>
        /// <value>True if the store accepts cash payment for pickup orders</value>
        [DataMember(Name="CashOrdersPickupEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersPickupEnabled { get; set; }

        /// <summary>
        /// Auto accept lead time for collection orders
        /// </summary>
        /// <value>Auto accept lead time for collection orders</value>
        [DataMember(Name="LeadTimeMinutes", EmitDefaultValue=false)]
        public int? LeadTimeMinutes { get; set; }

        /// <summary>
        /// True if order confirmation sms includes estimated time when order will be ready for collection
        /// </summary>
        /// <value>True if order confirmation sms includes estimated time when order will be ready for collection</value>
        [DataMember(Name="EtaInPickupConfirmationSmsEnabled", EmitDefaultValue=false)]
        public bool? EtaInPickupConfirmationSmsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreCollectionSettings {\n");
            sb.Append("  PickupEnabled: ").Append(PickupEnabled).Append("\n");
            sb.Append("  MinimumPickupOrderAmount: ").Append(MinimumPickupOrderAmount).Append("\n");
            sb.Append("  RequireCustomerNameForPickup: ").Append(RequireCustomerNameForPickup).Append("\n");
            sb.Append("  CashOrdersPickupEnabled: ").Append(CashOrdersPickupEnabled).Append("\n");
            sb.Append("  LeadTimeMinutes: ").Append(LeadTimeMinutes).Append("\n");
            sb.Append("  EtaInPickupConfirmationSmsEnabled: ").Append(EtaInPickupConfirmationSmsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreCollectionSettings);
        }

        /// <summary>
        /// Returns true if StoreCollectionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreCollectionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreCollectionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PickupEnabled == input.PickupEnabled ||
                    (this.PickupEnabled != null &&
                    this.PickupEnabled.Equals(input.PickupEnabled))
                ) && 
                (
                    this.MinimumPickupOrderAmount == input.MinimumPickupOrderAmount ||
                    (this.MinimumPickupOrderAmount != null &&
                    this.MinimumPickupOrderAmount.Equals(input.MinimumPickupOrderAmount))
                ) && 
                (
                    this.RequireCustomerNameForPickup == input.RequireCustomerNameForPickup ||
                    (this.RequireCustomerNameForPickup != null &&
                    this.RequireCustomerNameForPickup.Equals(input.RequireCustomerNameForPickup))
                ) && 
                (
                    this.CashOrdersPickupEnabled == input.CashOrdersPickupEnabled ||
                    (this.CashOrdersPickupEnabled != null &&
                    this.CashOrdersPickupEnabled.Equals(input.CashOrdersPickupEnabled))
                ) && 
                (
                    this.LeadTimeMinutes == input.LeadTimeMinutes ||
                    (this.LeadTimeMinutes != null &&
                    this.LeadTimeMinutes.Equals(input.LeadTimeMinutes))
                ) && 
                (
                    this.EtaInPickupConfirmationSmsEnabled == input.EtaInPickupConfirmationSmsEnabled ||
                    (this.EtaInPickupConfirmationSmsEnabled != null &&
                    this.EtaInPickupConfirmationSmsEnabled.Equals(input.EtaInPickupConfirmationSmsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PickupEnabled != null)
                    hashCode = hashCode * 59 + this.PickupEnabled.GetHashCode();
                if (this.MinimumPickupOrderAmount != null)
                    hashCode = hashCode * 59 + this.MinimumPickupOrderAmount.GetHashCode();
                if (this.RequireCustomerNameForPickup != null)
                    hashCode = hashCode * 59 + this.RequireCustomerNameForPickup.GetHashCode();
                if (this.CashOrdersPickupEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersPickupEnabled.GetHashCode();
                if (this.LeadTimeMinutes != null)
                    hashCode = hashCode * 59 + this.LeadTimeMinutes.GetHashCode();
                if (this.EtaInPickupConfirmationSmsEnabled != null)
                    hashCode = hashCode * 59 + this.EtaInPickupConfirmationSmsEnabled.GetHashCode();
                return hashCode;
            }
        }
    }

}

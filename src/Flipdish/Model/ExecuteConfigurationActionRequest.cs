/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Execute Configuration
    /// </summary>
    [DataContract]
    public partial class ExecuteConfigurationActionRequest :  IEquatable<ExecuteConfigurationActionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteConfigurationActionRequest" /> class.
        /// </summary>
        /// <param name="key">Key - of field triggering the action.</param>
        /// <param name="action">Action for element.</param>
        public ExecuteConfigurationActionRequest(string key = default(string), string action = default(string))
        {
            this.Key = key;
            this.Action = action;
        }
        
        /// <summary>
        /// Key - of field triggering the action
        /// </summary>
        /// <value>Key - of field triggering the action</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Action for element
        /// </summary>
        /// <value>Action for element</value>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecuteConfigurationActionRequest {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecuteConfigurationActionRequest);
        }

        /// <summary>
        /// Returns true if ExecuteConfigurationActionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecuteConfigurationActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecuteConfigurationActionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                return hashCode;
            }
        }
    }

}

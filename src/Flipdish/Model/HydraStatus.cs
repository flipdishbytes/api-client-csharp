/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Hdyra status
    /// </summary>
    [DataContract]
    public partial class HydraStatus :  IEquatable<HydraStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HydraStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraStatus" /> class.
        /// </summary>
        /// <param name="appId">appId (required).</param>
        /// <param name="storeId">Store to assign the hydra.</param>
        /// <param name="isRegistered">The device has been already registered (required).</param>
        /// <param name="pinCode">6 digit PIN code (not starting with zero)..</param>
        public HydraStatus(string appId = default(string), int? storeId = default(int?), bool? isRegistered = default(bool?), int? pinCode = default(int?))
        {
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for HydraStatus and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            // to ensure "isRegistered" is required (not null)
            if (isRegistered == null)
            {
                throw new InvalidDataException("isRegistered is a required property for HydraStatus and cannot be null");
            }
            else
            {
                this.IsRegistered = isRegistered;
            }
            this.StoreId = storeId;
            this.PinCode = pinCode;
        }
        
        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Store to assign the hydra
        /// </summary>
        /// <value>Store to assign the hydra</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// The device has been already registered
        /// </summary>
        /// <value>The device has been already registered</value>
        [DataMember(Name="IsRegistered", EmitDefaultValue=false)]
        public bool? IsRegistered { get; set; }

        /// <summary>
        /// 6 digit PIN code (not starting with zero).
        /// </summary>
        /// <value>6 digit PIN code (not starting with zero).</value>
        [DataMember(Name="PinCode", EmitDefaultValue=false)]
        public int? PinCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HydraStatus {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  PinCode: ").Append(PinCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HydraStatus);
        }

        /// <summary>
        /// Returns true if HydraStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of HydraStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HydraStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.IsRegistered == input.IsRegistered ||
                    (this.IsRegistered != null &&
                    this.IsRegistered.Equals(input.IsRegistered))
                ) && 
                (
                    this.PinCode == input.PinCode ||
                    (this.PinCode != null &&
                    this.PinCode.Equals(input.PinCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.IsRegistered != null)
                    hashCode = hashCode * 59 + this.IsRegistered.GetHashCode();
                if (this.PinCode != null)
                    hashCode = hashCode * 59 + this.PinCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PinCode (int?) maximum
            if(this.PinCode > (int?)999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PinCode, must be a value less than or equal to 999999.", new [] { "PinCode" });
            }

            // PinCode (int?) minimum
            if(this.PinCode < (int?)100000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PinCode, must be a value greater than or equal to 100000.", new [] { "PinCode" });
            }

            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Update Voucher Usage
    /// </summary>
    [DataContract]
    public partial class UpdateVoucherUsage :  IEquatable<UpdateVoucherUsage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateVoucherUsage" /> class.
        /// </summary>
        /// <param name="isUsed">Flag indicating whether the voucher is used.</param>
        /// <param name="usedByCustomerId">Indicates Customer that used the voucher..</param>
        /// <param name="transactionKey">An opaque string, to ensure idempotency. This allows for safely retrying requests without accidentally performing the same stamp operation twice.   This will typically contain the the ID of the sale order..</param>
        public UpdateVoucherUsage(bool? isUsed = default(bool?), int? usedByCustomerId = default(int?), string transactionKey = default(string))
        {
            this.IsUsed = isUsed;
            this.UsedByCustomerId = usedByCustomerId;
            this.TransactionKey = transactionKey;
        }
        
        /// <summary>
        /// Flag indicating whether the voucher is used
        /// </summary>
        /// <value>Flag indicating whether the voucher is used</value>
        [DataMember(Name="IsUsed", EmitDefaultValue=false)]
        public bool? IsUsed { get; set; }

        /// <summary>
        /// Indicates Customer that used the voucher.
        /// </summary>
        /// <value>Indicates Customer that used the voucher.</value>
        [DataMember(Name="UsedByCustomerId", EmitDefaultValue=false)]
        public int? UsedByCustomerId { get; set; }

        /// <summary>
        /// An opaque string, to ensure idempotency. This allows for safely retrying requests without accidentally performing the same stamp operation twice.   This will typically contain the the ID of the sale order.
        /// </summary>
        /// <value>An opaque string, to ensure idempotency. This allows for safely retrying requests without accidentally performing the same stamp operation twice.   This will typically contain the the ID of the sale order.</value>
        [DataMember(Name="TransactionKey", EmitDefaultValue=false)]
        public string TransactionKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateVoucherUsage {\n");
            sb.Append("  IsUsed: ").Append(IsUsed).Append("\n");
            sb.Append("  UsedByCustomerId: ").Append(UsedByCustomerId).Append("\n");
            sb.Append("  TransactionKey: ").Append(TransactionKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateVoucherUsage);
        }

        /// <summary>
        /// Returns true if UpdateVoucherUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateVoucherUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateVoucherUsage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsUsed == input.IsUsed ||
                    (this.IsUsed != null &&
                    this.IsUsed.Equals(input.IsUsed))
                ) && 
                (
                    this.UsedByCustomerId == input.UsedByCustomerId ||
                    (this.UsedByCustomerId != null &&
                    this.UsedByCustomerId.Equals(input.UsedByCustomerId))
                ) && 
                (
                    this.TransactionKey == input.TransactionKey ||
                    (this.TransactionKey != null &&
                    this.TransactionKey.Equals(input.TransactionKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsUsed != null)
                    hashCode = hashCode * 59 + this.IsUsed.GetHashCode();
                if (this.UsedByCustomerId != null)
                    hashCode = hashCode * 59 + this.UsedByCustomerId.GetHashCode();
                if (this.TransactionKey != null)
                    hashCode = hashCode * 59 + this.TransactionKey.GetHashCode();
                return hashCode;
            }
        }
    }

}

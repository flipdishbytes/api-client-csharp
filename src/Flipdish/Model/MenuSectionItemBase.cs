/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// MenuSectionItemBase
    /// </summary>
    [DataContract]
    public partial class MenuSectionItemBase :  IEquatable<MenuSectionItemBase>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets SpicinessRating
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpicinessRatingEnum
        {
            
            /// <summary>
            /// Enum NotRated for "NotRated"
            /// </summary>
            [EnumMember(Value = "NotRated")]
            NotRated,
            
            /// <summary>
            /// Enum Mild for "Mild"
            /// </summary>
            [EnumMember(Value = "Mild")]
            Mild,
            
            /// <summary>
            /// Enum Medium for "Medium"
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium,
            
            /// <summary>
            /// Enum Hot for "Hot"
            /// </summary>
            [EnumMember(Value = "Hot")]
            Hot
        }

        /// <summary>
        /// Gets or Sets SpicinessRating
        /// </summary>
        [DataMember(Name="SpicinessRating", EmitDefaultValue=false)]
        public SpicinessRatingEnum? SpicinessRating { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSectionItemBase" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="SpicinessRating">SpicinessRating.</param>
        /// <param name="Price">Price.</param>
        /// <param name="DisplayOrder">DisplayOrder.</param>
        /// <param name="Alcohol">Alcohol.</param>
        /// <param name="IsAvailable">IsAvailable.</param>
        public MenuSectionItemBase(string Name = default(string), string Description = default(string), SpicinessRatingEnum? SpicinessRating = default(SpicinessRatingEnum?), double? Price = default(double?), int? DisplayOrder = default(int?), bool? Alcohol = default(bool?), bool? IsAvailable = default(bool?))
        {
            this.Name = Name;
            this.Description = Description;
            this.SpicinessRating = SpicinessRating;
            this.Price = Price;
            this.DisplayOrder = DisplayOrder;
            this.Alcohol = Alcohol;
            this.IsAvailable = IsAvailable;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="DisplayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Alcohol
        /// </summary>
        [DataMember(Name="Alcohol", EmitDefaultValue=false)]
        public bool? Alcohol { get; set; }

        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name="IsAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuSectionItemBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SpicinessRating: ").Append(SpicinessRating).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Alcohol: ").Append(Alcohol).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MenuSectionItemBase);
        }

        /// <summary>
        /// Returns true if MenuSectionItemBase instances are equal
        /// </summary>
        /// <param name="other">Instance of MenuSectionItemBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuSectionItemBase other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.SpicinessRating == other.SpicinessRating ||
                    this.SpicinessRating != null &&
                    this.SpicinessRating.Equals(other.SpicinessRating)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.DisplayOrder == other.DisplayOrder ||
                    this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(other.DisplayOrder)
                ) && 
                (
                    this.Alcohol == other.Alcohol ||
                    this.Alcohol != null &&
                    this.Alcohol.Equals(other.Alcohol)
                ) && 
                (
                    this.IsAvailable == other.IsAvailable ||
                    this.IsAvailable != null &&
                    this.IsAvailable.Equals(other.IsAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.SpicinessRating != null)
                    hash = hash * 59 + this.SpicinessRating.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.DisplayOrder != null)
                    hash = hash * 59 + this.DisplayOrder.GetHashCode();
                if (this.Alcohol != null)
                    hash = hash * 59 + this.Alcohol.GetHashCode();
                if (this.IsAvailable != null)
                    hash = hash * 59 + this.IsAvailable.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Information to create a reference to a {Flipdish.Menus.PublicModels.V1.Catalog.Product}
    /// </summary>
    [DataContract]
    public partial class CreateProductReference :  IEquatable<CreateProductReference>
    {
        /// <summary>
        /// Type of the SupProduct
        /// </summary>
        /// <value>Type of the SupProduct</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 1,
            
            /// <summary>
            /// Enum Modifier for value: Modifier
            /// </summary>
            [EnumMember(Value = "Modifier")]
            Modifier = 2
        }

        /// <summary>
        /// Type of the SupProduct
        /// </summary>
        /// <value>Type of the SupProduct</value>
        [DataMember(Name="ProductType", EmitDefaultValue=false)]
        public ProductTypeEnum ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProductReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateProductReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProductReference" /> class.
        /// </summary>
        /// <param name="catalogItemId">Identifier of the CatalogItemId to use as SubProduct (required).</param>
        /// <param name="productType">Type of the SupProduct (required).</param>
        /// <param name="preselectedQuantity">Quantity of the modifier that will be set when the parent product is placed in the basket.</param>
        public CreateProductReference(string catalogItemId = default(string), ProductTypeEnum productType = default(ProductTypeEnum), int? preselectedQuantity = default(int?))
        {
            // to ensure "catalogItemId" is required (not null)
            if (catalogItemId == null)
            {
                throw new InvalidDataException("catalogItemId is a required property for CreateProductReference and cannot be null");
            }
            else
            {
                this.CatalogItemId = catalogItemId;
            }
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new InvalidDataException("productType is a required property for CreateProductReference and cannot be null");
            }
            else
            {
                this.ProductType = productType;
            }
            this.PreselectedQuantity = preselectedQuantity;
        }
        
        /// <summary>
        /// Identifier of the CatalogItemId to use as SubProduct
        /// </summary>
        /// <value>Identifier of the CatalogItemId to use as SubProduct</value>
        [DataMember(Name="CatalogItemId", EmitDefaultValue=false)]
        public string CatalogItemId { get; set; }


        /// <summary>
        /// Quantity of the modifier that will be set when the parent product is placed in the basket
        /// </summary>
        /// <value>Quantity of the modifier that will be set when the parent product is placed in the basket</value>
        [DataMember(Name="PreselectedQuantity", EmitDefaultValue=false)]
        public int? PreselectedQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProductReference {\n");
            sb.Append("  CatalogItemId: ").Append(CatalogItemId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  PreselectedQuantity: ").Append(PreselectedQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProductReference);
        }

        /// <summary>
        /// Returns true if CreateProductReference instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProductReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProductReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogItemId == input.CatalogItemId ||
                    (this.CatalogItemId != null &&
                    this.CatalogItemId.Equals(input.CatalogItemId))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.PreselectedQuantity == input.PreselectedQuantity ||
                    (this.PreselectedQuantity != null &&
                    this.PreselectedQuantity.Equals(input.PreselectedQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogItemId != null)
                    hashCode = hashCode * 59 + this.CatalogItemId.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.PreselectedQuantity != null)
                    hashCode = hashCode * 59 + this.PreselectedQuantity.GetHashCode();
                return hashCode;
            }
        }
    }

}

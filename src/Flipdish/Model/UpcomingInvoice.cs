/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// UpcomingInvoice
    /// </summary>
    [DataContract]
    public partial class UpcomingInvoice :  IEquatable<UpcomingInvoice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpcomingInvoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpcomingInvoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpcomingInvoice" /> class.
        /// </summary>
        /// <param name="amount">Amount.</param>
        /// <param name="nextBillingDate">Next billing date.</param>
        /// <param name="subtotal">Subtotal (required).</param>
        /// <param name="totalExcludingTax">Total excluding tax.</param>
        /// <param name="amountDue">Amount due (required).</param>
        /// <param name="tax">Tax (required).</param>
        /// <param name="items">Items.</param>
        /// <param name="discounts">Discounts.</param>
        public UpcomingInvoice(double? amount = default(double?), DateTime? nextBillingDate = default(DateTime?), long? subtotal = default(long?), long? totalExcludingTax = default(long?), long? amountDue = default(long?), long? tax = default(long?), List<InvoiceItem> items = default(List<InvoiceItem>), List<InvoiceDiscount> discounts = default(List<InvoiceDiscount>))
        {
            // to ensure "subtotal" is required (not null)
            if (subtotal == null)
            {
                throw new InvalidDataException("subtotal is a required property for UpcomingInvoice and cannot be null");
            }
            else
            {
                this.Subtotal = subtotal;
            }
            // to ensure "amountDue" is required (not null)
            if (amountDue == null)
            {
                throw new InvalidDataException("amountDue is a required property for UpcomingInvoice and cannot be null");
            }
            else
            {
                this.AmountDue = amountDue;
            }
            // to ensure "tax" is required (not null)
            if (tax == null)
            {
                throw new InvalidDataException("tax is a required property for UpcomingInvoice and cannot be null");
            }
            else
            {
                this.Tax = tax;
            }
            this.Amount = amount;
            this.NextBillingDate = nextBillingDate;
            this.TotalExcludingTax = totalExcludingTax;
            this.Items = items;
            this.Discounts = discounts;
        }
        
        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Next billing date
        /// </summary>
        /// <value>Next billing date</value>
        [DataMember(Name="NextBillingDate", EmitDefaultValue=false)]
        public DateTime? NextBillingDate { get; set; }

        /// <summary>
        /// Subtotal
        /// </summary>
        /// <value>Subtotal</value>
        [DataMember(Name="Subtotal", EmitDefaultValue=false)]
        public long? Subtotal { get; set; }

        /// <summary>
        /// Total excluding tax
        /// </summary>
        /// <value>Total excluding tax</value>
        [DataMember(Name="TotalExcludingTax", EmitDefaultValue=false)]
        public long? TotalExcludingTax { get; set; }

        /// <summary>
        /// Amount due
        /// </summary>
        /// <value>Amount due</value>
        [DataMember(Name="AmountDue", EmitDefaultValue=false)]
        public long? AmountDue { get; set; }

        /// <summary>
        /// Tax
        /// </summary>
        /// <value>Tax</value>
        [DataMember(Name="Tax", EmitDefaultValue=false)]
        public long? Tax { get; set; }

        /// <summary>
        /// Items
        /// </summary>
        /// <value>Items</value>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<InvoiceItem> Items { get; set; }

        /// <summary>
        /// Discounts
        /// </summary>
        /// <value>Discounts</value>
        [DataMember(Name="Discounts", EmitDefaultValue=false)]
        public List<InvoiceDiscount> Discounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpcomingInvoice {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  NextBillingDate: ").Append(NextBillingDate).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  TotalExcludingTax: ").Append(TotalExcludingTax).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpcomingInvoice);
        }

        /// <summary>
        /// Returns true if UpcomingInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of UpcomingInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpcomingInvoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.NextBillingDate == input.NextBillingDate ||
                    (this.NextBillingDate != null &&
                    this.NextBillingDate.Equals(input.NextBillingDate))
                ) && 
                (
                    this.Subtotal == input.Subtotal ||
                    (this.Subtotal != null &&
                    this.Subtotal.Equals(input.Subtotal))
                ) && 
                (
                    this.TotalExcludingTax == input.TotalExcludingTax ||
                    (this.TotalExcludingTax != null &&
                    this.TotalExcludingTax.Equals(input.TotalExcludingTax))
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.NextBillingDate != null)
                    hashCode = hashCode * 59 + this.NextBillingDate.GetHashCode();
                if (this.Subtotal != null)
                    hashCode = hashCode * 59 + this.Subtotal.GetHashCode();
                if (this.TotalExcludingTax != null)
                    hashCode = hashCode * 59 + this.TotalExcludingTax.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                return hashCode;
            }
        }
    }

}

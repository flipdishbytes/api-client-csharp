/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// GetReceiptByOrderIdQueryResponse
    /// </summary>
    [DataContract]
    public partial class GetReceiptByOrderIdQueryResponse :  IEquatable<GetReceiptByOrderIdQueryResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetReceiptByOrderIdQueryResponse" /> class.
        /// </summary>
        /// <param name="previousOrder">previousOrder.</param>
        /// <param name="tsRequestedForLocal">tsRequestedForLocal.</param>
        /// <param name="tsOrderPlacedLocal">tsOrderPlacedLocal.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="address">address.</param>
        /// <param name="vatNumber">vatNumber.</param>
        /// <param name="paymentMethodDescription">paymentMethodDescription.</param>
        public GetReceiptByOrderIdQueryResponse(PreviousOrder previousOrder = default(PreviousOrder), DateTime? tsRequestedForLocal = default(DateTime?), DateTime? tsOrderPlacedLocal = default(DateTime?), string logoUrl = default(string), string address = default(string), string vatNumber = default(string), string paymentMethodDescription = default(string))
        {
            this.PreviousOrder = previousOrder;
            this.TsRequestedForLocal = tsRequestedForLocal;
            this.TsOrderPlacedLocal = tsOrderPlacedLocal;
            this.LogoUrl = logoUrl;
            this.Address = address;
            this.VatNumber = vatNumber;
            this.PaymentMethodDescription = paymentMethodDescription;
        }
        
        /// <summary>
        /// Gets or Sets PreviousOrder
        /// </summary>
        [DataMember(Name="PreviousOrder", EmitDefaultValue=false)]
        public PreviousOrder PreviousOrder { get; set; }

        /// <summary>
        /// Gets or Sets TsRequestedForLocal
        /// </summary>
        [DataMember(Name="TsRequestedForLocal", EmitDefaultValue=false)]
        public DateTime? TsRequestedForLocal { get; set; }

        /// <summary>
        /// Gets or Sets TsOrderPlacedLocal
        /// </summary>
        [DataMember(Name="TsOrderPlacedLocal", EmitDefaultValue=false)]
        public DateTime? TsOrderPlacedLocal { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="LogoUrl", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name="VatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodDescription
        /// </summary>
        [DataMember(Name="PaymentMethodDescription", EmitDefaultValue=false)]
        public string PaymentMethodDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetReceiptByOrderIdQueryResponse {\n");
            sb.Append("  PreviousOrder: ").Append(PreviousOrder).Append("\n");
            sb.Append("  TsRequestedForLocal: ").Append(TsRequestedForLocal).Append("\n");
            sb.Append("  TsOrderPlacedLocal: ").Append(TsOrderPlacedLocal).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  PaymentMethodDescription: ").Append(PaymentMethodDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetReceiptByOrderIdQueryResponse);
        }

        /// <summary>
        /// Returns true if GetReceiptByOrderIdQueryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetReceiptByOrderIdQueryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetReceiptByOrderIdQueryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PreviousOrder == input.PreviousOrder ||
                    (this.PreviousOrder != null &&
                    this.PreviousOrder.Equals(input.PreviousOrder))
                ) && 
                (
                    this.TsRequestedForLocal == input.TsRequestedForLocal ||
                    (this.TsRequestedForLocal != null &&
                    this.TsRequestedForLocal.Equals(input.TsRequestedForLocal))
                ) && 
                (
                    this.TsOrderPlacedLocal == input.TsOrderPlacedLocal ||
                    (this.TsOrderPlacedLocal != null &&
                    this.TsOrderPlacedLocal.Equals(input.TsOrderPlacedLocal))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.PaymentMethodDescription == input.PaymentMethodDescription ||
                    (this.PaymentMethodDescription != null &&
                    this.PaymentMethodDescription.Equals(input.PaymentMethodDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreviousOrder != null)
                    hashCode = hashCode * 59 + this.PreviousOrder.GetHashCode();
                if (this.TsRequestedForLocal != null)
                    hashCode = hashCode * 59 + this.TsRequestedForLocal.GetHashCode();
                if (this.TsOrderPlacedLocal != null)
                    hashCode = hashCode * 59 + this.TsOrderPlacedLocal.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.PaymentMethodDescription != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDescription.GetHashCode();
                return hashCode;
            }
        }
    }

}

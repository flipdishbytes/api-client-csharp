/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Defines a customer
    /// </summary>
    [DataContract]
    public partial class Customer :  IEquatable<Customer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="customerId">Id of the customer.</param>
        /// <param name="registrationDate">Customer registration date.</param>
        /// <param name="cashOrdersEnabled">Customer can place cash orders.</param>
        /// <param name="cardOrdersEnabled">Customer can place card orders.</param>
        /// <param name="marketingEnabled">Customer can receive marketing.</param>
        public Customer(int? customerId = default(int?), DateTime? registrationDate = default(DateTime?), bool? cashOrdersEnabled = default(bool?), bool? cardOrdersEnabled = default(bool?), bool? marketingEnabled = default(bool?))
        {
            this.CustomerId = customerId;
            this.RegistrationDate = registrationDate;
            this.CashOrdersEnabled = cashOrdersEnabled;
            this.CardOrdersEnabled = cardOrdersEnabled;
            this.MarketingEnabled = marketingEnabled;
        }
        
        /// <summary>
        /// Id of the customer
        /// </summary>
        /// <value>Id of the customer</value>
        [DataMember(Name="CustomerId", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Customer registration date
        /// </summary>
        /// <value>Customer registration date</value>
        [DataMember(Name="RegistrationDate", EmitDefaultValue=false)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Customer can place cash orders
        /// </summary>
        /// <value>Customer can place cash orders</value>
        [DataMember(Name="CashOrdersEnabled", EmitDefaultValue=false)]
        public bool? CashOrdersEnabled { get; set; }

        /// <summary>
        /// Customer can place card orders
        /// </summary>
        /// <value>Customer can place card orders</value>
        [DataMember(Name="CardOrdersEnabled", EmitDefaultValue=false)]
        public bool? CardOrdersEnabled { get; set; }

        /// <summary>
        /// Customer can receive marketing
        /// </summary>
        /// <value>Customer can receive marketing</value>
        [DataMember(Name="MarketingEnabled", EmitDefaultValue=false)]
        public bool? MarketingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  CashOrdersEnabled: ").Append(CashOrdersEnabled).Append("\n");
            sb.Append("  CardOrdersEnabled: ").Append(CardOrdersEnabled).Append("\n");
            sb.Append("  MarketingEnabled: ").Append(MarketingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.CashOrdersEnabled == input.CashOrdersEnabled ||
                    (this.CashOrdersEnabled != null &&
                    this.CashOrdersEnabled.Equals(input.CashOrdersEnabled))
                ) && 
                (
                    this.CardOrdersEnabled == input.CardOrdersEnabled ||
                    (this.CardOrdersEnabled != null &&
                    this.CardOrdersEnabled.Equals(input.CardOrdersEnabled))
                ) && 
                (
                    this.MarketingEnabled == input.MarketingEnabled ||
                    (this.MarketingEnabled != null &&
                    this.MarketingEnabled.Equals(input.MarketingEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.CashOrdersEnabled != null)
                    hashCode = hashCode * 59 + this.CashOrdersEnabled.GetHashCode();
                if (this.CardOrdersEnabled != null)
                    hashCode = hashCode * 59 + this.CardOrdersEnabled.GetHashCode();
                if (this.MarketingEnabled != null)
                    hashCode = hashCode * 59 + this.MarketingEnabled.GetHashCode();
                return hashCode;
            }
        }
    }

}

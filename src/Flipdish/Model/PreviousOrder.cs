/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PreviousOrder
    /// </summary>
    [DataContract]
    public partial class PreviousOrder :  IEquatable<PreviousOrder>
    {
        /// <summary>
        /// Defines Currency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 5,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 6,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 7,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 8,
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 9,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 10,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 11,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 12,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 13,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 14,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 15,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 16,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 17,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 18,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 19,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 20,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 21,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 22,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 23,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 24,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 25,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 26,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 27,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 28,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 29,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 30,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 31,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 32,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 33,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 34,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 35,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 36,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 37,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 38,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 39,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 40,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 41,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 42,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 43,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 44,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 45,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 46,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 47,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 48,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 49,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 50,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 51,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 52,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 53,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 54,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 55,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 56,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 57,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 58,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 59,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 60,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 61,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 62,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 63,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 64,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 65,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 66,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 67,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 68,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 69,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 70,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 71,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 72,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 73,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 74,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 75,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 76,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 77,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 78,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 81,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 82,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 83,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 84,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 85,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 86,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 87,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 88,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 89,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 90,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 91,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 92,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 93,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 94,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 95,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 96,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 97,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 98,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 99,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 100,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 101,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 102,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 103,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 104,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 105,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 106,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 107,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 108,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 109,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 110,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 111,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 112,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 113
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviousOrder" /> class.
        /// </summary>
        /// <param name="deliveryType">deliveryType.</param>
        /// <param name="deliveryLocationAddressString">deliveryLocationAddressString.</param>
        /// <param name="paymentAccountType">paymentAccountType.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="restaurantName">restaurantName.</param>
        /// <param name="localOrderId">localOrderId.</param>
        /// <param name="tableServiceCategory">tableServiceCategory.</param>
        /// <param name="pickupLocationOptionValue">pickupLocationOptionValue.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="phoneNumberInternationalFormatString">phoneNumberInternationalFormatString.</param>
        /// <param name="deliveryInstructions">deliveryInstructions.</param>
        /// <param name="currency">currency.</param>
        /// <param name="processingFee">processingFee.</param>
        /// <param name="serviceChargePercentage">serviceChargePercentage.</param>
        /// <param name="serviceChargeAmount">serviceChargeAmount.</param>
        /// <param name="tipAmount">tipAmount.</param>
        /// <param name="deliveryAmount">deliveryAmount.</param>
        /// <param name="depositReturnFeeAmount">depositReturnFeeAmount.</param>
        /// <param name="totalTax">totalTax.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="items">items.</param>
        /// <param name="taxRates">taxRates.</param>
        /// <param name="whiteLabelId">whiteLabelId.</param>
        public PreviousOrder(string deliveryType = default(string), string deliveryLocationAddressString = default(string), string paymentAccountType = default(string), int? orderId = default(int?), string restaurantName = default(string), string localOrderId = default(string), string tableServiceCategory = default(string), string pickupLocationOptionValue = default(string), string customerName = default(string), string phoneNumberInternationalFormatString = default(string), string deliveryInstructions = default(string), CurrencyEnum? currency = default(CurrencyEnum?), double? processingFee = default(double?), double? serviceChargePercentage = default(double?), double? serviceChargeAmount = default(double?), double? tipAmount = default(double?), double? deliveryAmount = default(double?), double? depositReturnFeeAmount = default(double?), double? totalTax = default(double?), double? totalAmount = default(double?), List<PreviousOrderItem> items = default(List<PreviousOrderItem>), List<TaxRate> taxRates = default(List<TaxRate>), int? whiteLabelId = default(int?))
        {
            this.DeliveryType = deliveryType;
            this.DeliveryLocationAddressString = deliveryLocationAddressString;
            this.PaymentAccountType = paymentAccountType;
            this.OrderId = orderId;
            this.RestaurantName = restaurantName;
            this.LocalOrderId = localOrderId;
            this.TableServiceCategory = tableServiceCategory;
            this.PickupLocationOptionValue = pickupLocationOptionValue;
            this.CustomerName = customerName;
            this.PhoneNumberInternationalFormatString = phoneNumberInternationalFormatString;
            this.DeliveryInstructions = deliveryInstructions;
            this.Currency = currency;
            this.ProcessingFee = processingFee;
            this.ServiceChargePercentage = serviceChargePercentage;
            this.ServiceChargeAmount = serviceChargeAmount;
            this.TipAmount = tipAmount;
            this.DeliveryAmount = deliveryAmount;
            this.DepositReturnFeeAmount = depositReturnFeeAmount;
            this.TotalTax = totalTax;
            this.TotalAmount = totalAmount;
            this.Items = items;
            this.TaxRates = taxRates;
            this.WhiteLabelId = whiteLabelId;
        }
        
        /// <summary>
        /// Gets or Sets DeliveryType
        /// </summary>
        [DataMember(Name="DeliveryType", EmitDefaultValue=false)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocationAddressString
        /// </summary>
        [DataMember(Name="DeliveryLocationAddressString", EmitDefaultValue=false)]
        public string DeliveryLocationAddressString { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAccountType
        /// </summary>
        [DataMember(Name="PaymentAccountType", EmitDefaultValue=false)]
        public string PaymentAccountType { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets RestaurantName
        /// </summary>
        [DataMember(Name="RestaurantName", EmitDefaultValue=false)]
        public string RestaurantName { get; set; }

        /// <summary>
        /// Gets or Sets LocalOrderId
        /// </summary>
        [DataMember(Name="LocalOrderId", EmitDefaultValue=false)]
        public string LocalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets TableServiceCategory
        /// </summary>
        [DataMember(Name="TableServiceCategory", EmitDefaultValue=false)]
        public string TableServiceCategory { get; set; }

        /// <summary>
        /// Gets or Sets PickupLocationOptionValue
        /// </summary>
        [DataMember(Name="PickupLocationOptionValue", EmitDefaultValue=false)]
        public string PickupLocationOptionValue { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberInternationalFormatString
        /// </summary>
        [DataMember(Name="PhoneNumberInternationalFormatString", EmitDefaultValue=false)]
        public string PhoneNumberInternationalFormatString { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryInstructions
        /// </summary>
        [DataMember(Name="DeliveryInstructions", EmitDefaultValue=false)]
        public string DeliveryInstructions { get; set; }


        /// <summary>
        /// Gets or Sets ProcessingFee
        /// </summary>
        [DataMember(Name="ProcessingFee", EmitDefaultValue=false)]
        public double? ProcessingFee { get; set; }

        /// <summary>
        /// Gets or Sets ServiceChargePercentage
        /// </summary>
        [DataMember(Name="ServiceChargePercentage", EmitDefaultValue=false)]
        public double? ServiceChargePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ServiceChargeAmount
        /// </summary>
        [DataMember(Name="ServiceChargeAmount", EmitDefaultValue=false)]
        public double? ServiceChargeAmount { get; set; }

        /// <summary>
        /// Gets or Sets TipAmount
        /// </summary>
        [DataMember(Name="TipAmount", EmitDefaultValue=false)]
        public double? TipAmount { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAmount
        /// </summary>
        [DataMember(Name="DeliveryAmount", EmitDefaultValue=false)]
        public double? DeliveryAmount { get; set; }

        /// <summary>
        /// Gets or Sets DepositReturnFeeAmount
        /// </summary>
        [DataMember(Name="DepositReturnFeeAmount", EmitDefaultValue=false)]
        public double? DepositReturnFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalTax
        /// </summary>
        [DataMember(Name="TotalTax", EmitDefaultValue=false)]
        public double? TotalTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="TotalAmount", EmitDefaultValue=false)]
        public double? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<PreviousOrderItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets TaxRates
        /// </summary>
        [DataMember(Name="TaxRates", EmitDefaultValue=false)]
        public List<TaxRate> TaxRates { get; set; }

        /// <summary>
        /// Gets or Sets WhiteLabelId
        /// </summary>
        [DataMember(Name="WhiteLabelId", EmitDefaultValue=false)]
        public int? WhiteLabelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreviousOrder {\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  DeliveryLocationAddressString: ").Append(DeliveryLocationAddressString).Append("\n");
            sb.Append("  PaymentAccountType: ").Append(PaymentAccountType).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RestaurantName: ").Append(RestaurantName).Append("\n");
            sb.Append("  LocalOrderId: ").Append(LocalOrderId).Append("\n");
            sb.Append("  TableServiceCategory: ").Append(TableServiceCategory).Append("\n");
            sb.Append("  PickupLocationOptionValue: ").Append(PickupLocationOptionValue).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  PhoneNumberInternationalFormatString: ").Append(PhoneNumberInternationalFormatString).Append("\n");
            sb.Append("  DeliveryInstructions: ").Append(DeliveryInstructions).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ProcessingFee: ").Append(ProcessingFee).Append("\n");
            sb.Append("  ServiceChargePercentage: ").Append(ServiceChargePercentage).Append("\n");
            sb.Append("  ServiceChargeAmount: ").Append(ServiceChargeAmount).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  DeliveryAmount: ").Append(DeliveryAmount).Append("\n");
            sb.Append("  DepositReturnFeeAmount: ").Append(DepositReturnFeeAmount).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  TaxRates: ").Append(TaxRates).Append("\n");
            sb.Append("  WhiteLabelId: ").Append(WhiteLabelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreviousOrder);
        }

        /// <summary>
        /// Returns true if PreviousOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PreviousOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviousOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.DeliveryLocationAddressString == input.DeliveryLocationAddressString ||
                    (this.DeliveryLocationAddressString != null &&
                    this.DeliveryLocationAddressString.Equals(input.DeliveryLocationAddressString))
                ) && 
                (
                    this.PaymentAccountType == input.PaymentAccountType ||
                    (this.PaymentAccountType != null &&
                    this.PaymentAccountType.Equals(input.PaymentAccountType))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.RestaurantName == input.RestaurantName ||
                    (this.RestaurantName != null &&
                    this.RestaurantName.Equals(input.RestaurantName))
                ) && 
                (
                    this.LocalOrderId == input.LocalOrderId ||
                    (this.LocalOrderId != null &&
                    this.LocalOrderId.Equals(input.LocalOrderId))
                ) && 
                (
                    this.TableServiceCategory == input.TableServiceCategory ||
                    (this.TableServiceCategory != null &&
                    this.TableServiceCategory.Equals(input.TableServiceCategory))
                ) && 
                (
                    this.PickupLocationOptionValue == input.PickupLocationOptionValue ||
                    (this.PickupLocationOptionValue != null &&
                    this.PickupLocationOptionValue.Equals(input.PickupLocationOptionValue))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.PhoneNumberInternationalFormatString == input.PhoneNumberInternationalFormatString ||
                    (this.PhoneNumberInternationalFormatString != null &&
                    this.PhoneNumberInternationalFormatString.Equals(input.PhoneNumberInternationalFormatString))
                ) && 
                (
                    this.DeliveryInstructions == input.DeliveryInstructions ||
                    (this.DeliveryInstructions != null &&
                    this.DeliveryInstructions.Equals(input.DeliveryInstructions))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ProcessingFee == input.ProcessingFee ||
                    (this.ProcessingFee != null &&
                    this.ProcessingFee.Equals(input.ProcessingFee))
                ) && 
                (
                    this.ServiceChargePercentage == input.ServiceChargePercentage ||
                    (this.ServiceChargePercentage != null &&
                    this.ServiceChargePercentage.Equals(input.ServiceChargePercentage))
                ) && 
                (
                    this.ServiceChargeAmount == input.ServiceChargeAmount ||
                    (this.ServiceChargeAmount != null &&
                    this.ServiceChargeAmount.Equals(input.ServiceChargeAmount))
                ) && 
                (
                    this.TipAmount == input.TipAmount ||
                    (this.TipAmount != null &&
                    this.TipAmount.Equals(input.TipAmount))
                ) && 
                (
                    this.DeliveryAmount == input.DeliveryAmount ||
                    (this.DeliveryAmount != null &&
                    this.DeliveryAmount.Equals(input.DeliveryAmount))
                ) && 
                (
                    this.DepositReturnFeeAmount == input.DepositReturnFeeAmount ||
                    (this.DepositReturnFeeAmount != null &&
                    this.DepositReturnFeeAmount.Equals(input.DepositReturnFeeAmount))
                ) && 
                (
                    this.TotalTax == input.TotalTax ||
                    (this.TotalTax != null &&
                    this.TotalTax.Equals(input.TotalTax))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.TaxRates == input.TaxRates ||
                    this.TaxRates != null &&
                    this.TaxRates.SequenceEqual(input.TaxRates)
                ) && 
                (
                    this.WhiteLabelId == input.WhiteLabelId ||
                    (this.WhiteLabelId != null &&
                    this.WhiteLabelId.Equals(input.WhiteLabelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryType != null)
                    hashCode = hashCode * 59 + this.DeliveryType.GetHashCode();
                if (this.DeliveryLocationAddressString != null)
                    hashCode = hashCode * 59 + this.DeliveryLocationAddressString.GetHashCode();
                if (this.PaymentAccountType != null)
                    hashCode = hashCode * 59 + this.PaymentAccountType.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.RestaurantName != null)
                    hashCode = hashCode * 59 + this.RestaurantName.GetHashCode();
                if (this.LocalOrderId != null)
                    hashCode = hashCode * 59 + this.LocalOrderId.GetHashCode();
                if (this.TableServiceCategory != null)
                    hashCode = hashCode * 59 + this.TableServiceCategory.GetHashCode();
                if (this.PickupLocationOptionValue != null)
                    hashCode = hashCode * 59 + this.PickupLocationOptionValue.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.PhoneNumberInternationalFormatString != null)
                    hashCode = hashCode * 59 + this.PhoneNumberInternationalFormatString.GetHashCode();
                if (this.DeliveryInstructions != null)
                    hashCode = hashCode * 59 + this.DeliveryInstructions.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ProcessingFee != null)
                    hashCode = hashCode * 59 + this.ProcessingFee.GetHashCode();
                if (this.ServiceChargePercentage != null)
                    hashCode = hashCode * 59 + this.ServiceChargePercentage.GetHashCode();
                if (this.ServiceChargeAmount != null)
                    hashCode = hashCode * 59 + this.ServiceChargeAmount.GetHashCode();
                if (this.TipAmount != null)
                    hashCode = hashCode * 59 + this.TipAmount.GetHashCode();
                if (this.DeliveryAmount != null)
                    hashCode = hashCode * 59 + this.DeliveryAmount.GetHashCode();
                if (this.DepositReturnFeeAmount != null)
                    hashCode = hashCode * 59 + this.DepositReturnFeeAmount.GetHashCode();
                if (this.TotalTax != null)
                    hashCode = hashCode * 59 + this.TotalTax.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.TaxRates != null)
                    hashCode = hashCode * 59 + this.TaxRates.GetHashCode();
                if (this.WhiteLabelId != null)
                    hashCode = hashCode * 59 + this.WhiteLabelId.GetHashCode();
                return hashCode;
            }
        }
    }

}

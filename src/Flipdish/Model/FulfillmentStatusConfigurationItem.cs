/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Fulfillment Status Item
    /// </summary>
    [DataContract]
    public partial class FulfillmentStatusConfigurationItem :  IEquatable<FulfillmentStatusConfigurationItem>, IValidatableObject
    {
        /// <summary>
        /// How will state change (manually or automated, including timed)
        /// </summary>
        /// <value>How will state change (manually or automated, including timed)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChangeTypeEnum
        {
            
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 1,
            
            /// <summary>
            /// Enum Automated for value: Automated
            /// </summary>
            [EnumMember(Value = "Automated")]
            Automated = 2,
            
            /// <summary>
            /// Enum Integrated for value: Integrated
            /// </summary>
            [EnumMember(Value = "Integrated")]
            Integrated = 3
        }

        /// <summary>
        /// How will state change (manually or automated, including timed)
        /// </summary>
        /// <value>How will state change (manually or automated, including timed)</value>
        [DataMember(Name="ChangeType", EmitDefaultValue=false)]
        public ChangeTypeEnum? ChangeType { get; set; }
        /// <summary>
        /// Defines OrderTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypesEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 2,
            
            /// <summary>
            /// Enum Collection for value: Collection
            /// </summary>
            [EnumMember(Value = "Collection")]
            Collection = 3,
            
            /// <summary>
            /// Enum DineIn for value: DineIn
            /// </summary>
            [EnumMember(Value = "DineIn")]
            DineIn = 4
        }


        /// <summary>
        /// If empty then applies to all ordertypes, otherwise a list of order types this state applies to
        /// </summary>
        /// <value>If empty then applies to all ordertypes, otherwise a list of order types this state applies to</value>
        [DataMember(Name="OrderTypes", EmitDefaultValue=false)]
        public List<OrderTypesEnum> OrderTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentStatusConfigurationItem" /> class.
        /// </summary>
        /// <param name="statusId">Status Id (no whitespaces).</param>
        /// <param name="statusName">Status name.</param>
        /// <param name="enabled">Is status enabled.</param>
        /// <param name="displayName">The short status string that is displayed to users in apps, portal. If empty then Order Status Name is displayed instead.</param>
        /// <param name="icon">Icon/Image that represents that status visual.</param>
        /// <param name="publicDescription">A string which could be used in notification templates with a placeholder (SMS, email, push, web page with status).</param>
        /// <param name="_internal">Is internal state (internal states not shown to customers).</param>
        /// <param name="nextStatuses">list of statuses that this status can move to (can be back or forth).</param>
        /// <param name="defaultNextStatus">The default next status (on a dropdown or quick button on terminal or portal).</param>
        /// <param name="changeType">How will state change (manually or automated, including timed).</param>
        /// <param name="includeInReports">Include in reports.</param>
        /// <param name="isCustom">Is custom state. If not, then it&#39;s a system state.</param>
        /// <param name="orderTypes">If empty then applies to all ordertypes, otherwise a list of order types this state applies to.</param>
        /// <param name="communication">Whether state should fire off a notification to the customer.</param>
        /// <param name="visualOrder">Integer for ordering results in choices (eg. dropdowns).</param>
        public FulfillmentStatusConfigurationItem(string statusId = default(string), string statusName = default(string), bool? enabled = default(bool?), string displayName = default(string), string icon = default(string), string publicDescription = default(string), bool? _internal = default(bool?), List<string> nextStatuses = default(List<string>), List<NextStatusWithOrderType> defaultNextStatus = default(List<NextStatusWithOrderType>), ChangeTypeEnum? changeType = default(ChangeTypeEnum?), bool? includeInReports = default(bool?), bool? isCustom = default(bool?), List<OrderTypesEnum> orderTypes = default(List<OrderTypesEnum>), bool? communication = default(bool?), int? visualOrder = default(int?))
        {
            this.StatusId = statusId;
            this.StatusName = statusName;
            this.Enabled = enabled;
            this.DisplayName = displayName;
            this.Icon = icon;
            this.PublicDescription = publicDescription;
            this.Internal = _internal;
            this.NextStatuses = nextStatuses;
            this.DefaultNextStatus = defaultNextStatus;
            this.ChangeType = changeType;
            this.IncludeInReports = includeInReports;
            this.IsCustom = isCustom;
            this.OrderTypes = orderTypes;
            this.Communication = communication;
            this.VisualOrder = visualOrder;
        }
        
        /// <summary>
        /// Status Id (no whitespaces)
        /// </summary>
        /// <value>Status Id (no whitespaces)</value>
        [DataMember(Name="StatusId", EmitDefaultValue=false)]
        public string StatusId { get; set; }

        /// <summary>
        /// Status name
        /// </summary>
        /// <value>Status name</value>
        [DataMember(Name="StatusName", EmitDefaultValue=false)]
        public string StatusName { get; set; }

        /// <summary>
        /// Is status enabled
        /// </summary>
        /// <value>Is status enabled</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The short status string that is displayed to users in apps, portal. If empty then Order Status Name is displayed instead
        /// </summary>
        /// <value>The short status string that is displayed to users in apps, portal. If empty then Order Status Name is displayed instead</value>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Icon/Image that represents that status visual
        /// </summary>
        /// <value>Icon/Image that represents that status visual</value>
        [DataMember(Name="Icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// A string which could be used in notification templates with a placeholder (SMS, email, push, web page with status)
        /// </summary>
        /// <value>A string which could be used in notification templates with a placeholder (SMS, email, push, web page with status)</value>
        [DataMember(Name="PublicDescription", EmitDefaultValue=false)]
        public string PublicDescription { get; set; }

        /// <summary>
        /// Is internal state (internal states not shown to customers)
        /// </summary>
        /// <value>Is internal state (internal states not shown to customers)</value>
        [DataMember(Name="Internal", EmitDefaultValue=false)]
        public bool? Internal { get; set; }

        /// <summary>
        /// list of statuses that this status can move to (can be back or forth)
        /// </summary>
        /// <value>list of statuses that this status can move to (can be back or forth)</value>
        [DataMember(Name="NextStatuses", EmitDefaultValue=false)]
        public List<string> NextStatuses { get; set; }

        /// <summary>
        /// The default next status (on a dropdown or quick button on terminal or portal)
        /// </summary>
        /// <value>The default next status (on a dropdown or quick button on terminal or portal)</value>
        [DataMember(Name="DefaultNextStatus", EmitDefaultValue=false)]
        public List<NextStatusWithOrderType> DefaultNextStatus { get; set; }


        /// <summary>
        /// Include in reports
        /// </summary>
        /// <value>Include in reports</value>
        [DataMember(Name="IncludeInReports", EmitDefaultValue=false)]
        public bool? IncludeInReports { get; set; }

        /// <summary>
        /// Is custom state. If not, then it&#39;s a system state
        /// </summary>
        /// <value>Is custom state. If not, then it&#39;s a system state</value>
        [DataMember(Name="IsCustom", EmitDefaultValue=false)]
        public bool? IsCustom { get; set; }


        /// <summary>
        /// Whether state should fire off a notification to the customer
        /// </summary>
        /// <value>Whether state should fire off a notification to the customer</value>
        [DataMember(Name="Communication", EmitDefaultValue=false)]
        public bool? Communication { get; set; }

        /// <summary>
        /// Integer for ordering results in choices (eg. dropdowns)
        /// </summary>
        /// <value>Integer for ordering results in choices (eg. dropdowns)</value>
        [DataMember(Name="VisualOrder", EmitDefaultValue=false)]
        public int? VisualOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentStatusConfigurationItem {\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  PublicDescription: ").Append(PublicDescription).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  NextStatuses: ").Append(NextStatuses).Append("\n");
            sb.Append("  DefaultNextStatus: ").Append(DefaultNextStatus).Append("\n");
            sb.Append("  ChangeType: ").Append(ChangeType).Append("\n");
            sb.Append("  IncludeInReports: ").Append(IncludeInReports).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("  OrderTypes: ").Append(OrderTypes).Append("\n");
            sb.Append("  Communication: ").Append(Communication).Append("\n");
            sb.Append("  VisualOrder: ").Append(VisualOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentStatusConfigurationItem);
        }

        /// <summary>
        /// Returns true if FulfillmentStatusConfigurationItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentStatusConfigurationItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentStatusConfigurationItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.PublicDescription == input.PublicDescription ||
                    (this.PublicDescription != null &&
                    this.PublicDescription.Equals(input.PublicDescription))
                ) && 
                (
                    this.Internal == input.Internal ||
                    (this.Internal != null &&
                    this.Internal.Equals(input.Internal))
                ) && 
                (
                    this.NextStatuses == input.NextStatuses ||
                    this.NextStatuses != null &&
                    this.NextStatuses.SequenceEqual(input.NextStatuses)
                ) && 
                (
                    this.DefaultNextStatus == input.DefaultNextStatus ||
                    this.DefaultNextStatus != null &&
                    this.DefaultNextStatus.SequenceEqual(input.DefaultNextStatus)
                ) && 
                (
                    this.ChangeType == input.ChangeType ||
                    (this.ChangeType != null &&
                    this.ChangeType.Equals(input.ChangeType))
                ) && 
                (
                    this.IncludeInReports == input.IncludeInReports ||
                    (this.IncludeInReports != null &&
                    this.IncludeInReports.Equals(input.IncludeInReports))
                ) && 
                (
                    this.IsCustom == input.IsCustom ||
                    (this.IsCustom != null &&
                    this.IsCustom.Equals(input.IsCustom))
                ) && 
                (
                    this.OrderTypes == input.OrderTypes ||
                    this.OrderTypes != null &&
                    this.OrderTypes.SequenceEqual(input.OrderTypes)
                ) && 
                (
                    this.Communication == input.Communication ||
                    (this.Communication != null &&
                    this.Communication.Equals(input.Communication))
                ) && 
                (
                    this.VisualOrder == input.VisualOrder ||
                    (this.VisualOrder != null &&
                    this.VisualOrder.Equals(input.VisualOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.PublicDescription != null)
                    hashCode = hashCode * 59 + this.PublicDescription.GetHashCode();
                if (this.Internal != null)
                    hashCode = hashCode * 59 + this.Internal.GetHashCode();
                if (this.NextStatuses != null)
                    hashCode = hashCode * 59 + this.NextStatuses.GetHashCode();
                if (this.DefaultNextStatus != null)
                    hashCode = hashCode * 59 + this.DefaultNextStatus.GetHashCode();
                if (this.ChangeType != null)
                    hashCode = hashCode * 59 + this.ChangeType.GetHashCode();
                if (this.IncludeInReports != null)
                    hashCode = hashCode * 59 + this.IncludeInReports.GetHashCode();
                if (this.IsCustom != null)
                    hashCode = hashCode * 59 + this.IsCustom.GetHashCode();
                if (this.OrderTypes != null)
                    hashCode = hashCode * 59 + this.OrderTypes.GetHashCode();
                if (this.Communication != null)
                    hashCode = hashCode * 59 + this.Communication.GetHashCode();
                if (this.VisualOrder != null)
                    hashCode = hashCode * 59 + this.VisualOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Menu
    /// </summary>
    [DataContract]
    public partial class Menu :  IEquatable<Menu>, IValidatableObject
    {
        /// <summary>
        /// Defines MenuSectionBehaviour
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MenuSectionBehaviourEnum
        {
            
            /// <summary>
            /// Enum ExpandSingle for value: ExpandSingle
            /// </summary>
            [EnumMember(Value = "ExpandSingle")]
            ExpandSingle = 1,
            
            /// <summary>
            /// Enum ExpandMultiple for value: ExpandMultiple
            /// </summary>
            [EnumMember(Value = "ExpandMultiple")]
            ExpandMultiple = 2
        }

        /// <summary>
        /// Gets or Sets MenuSectionBehaviour
        /// </summary>
        [DataMember(Name="menuSectionBehaviour", EmitDefaultValue=false)]
        public MenuSectionBehaviourEnum? MenuSectionBehaviour { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Menu" /> class.
        /// </summary>
        /// <param name="MenuId">MenuId.</param>
        /// <param name="ModifiedTime">ModifiedTime.</param>
        /// <param name="VersionNumber">VersionNumber.</param>
        /// <param name="ImageUrl">ImageUrl.</param>
        /// <param name="MenuSections">MenuSections.</param>
        /// <param name="DisplaySectionLinks">DisplaySectionLinks.</param>
        /// <param name="MenuSectionBehaviour">MenuSectionBehaviour.</param>
        public Menu(int? MenuId = default(int?), DateTime? ModifiedTime = default(DateTime?), int? VersionNumber = default(int?), string ImageUrl = default(string), List<MenuSection> MenuSections = default(List<MenuSection>), bool? DisplaySectionLinks = default(bool?), MenuSectionBehaviourEnum? MenuSectionBehaviour = default(MenuSectionBehaviourEnum?))
        {
            this.MenuId = MenuId;
            this.ModifiedTime = ModifiedTime;
            this.VersionNumber = VersionNumber;
            this.ImageUrl = ImageUrl;
            this.MenuSections = MenuSections;
            this.DisplaySectionLinks = DisplaySectionLinks;
            this.MenuSectionBehaviour = MenuSectionBehaviour;
        }
        
        /// <summary>
        /// Gets or Sets MenuId
        /// </summary>
        [DataMember(Name="menuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedTime
        /// </summary>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public DateTime? ModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="versionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets MenuSections
        /// </summary>
        [DataMember(Name="menuSections", EmitDefaultValue=false)]
        public List<MenuSection> MenuSections { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySectionLinks
        /// </summary>
        [DataMember(Name="displaySectionLinks", EmitDefaultValue=false)]
        public bool? DisplaySectionLinks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Menu {\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  MenuSections: ").Append(MenuSections).Append("\n");
            sb.Append("  DisplaySectionLinks: ").Append(DisplaySectionLinks).Append("\n");
            sb.Append("  MenuSectionBehaviour: ").Append(MenuSectionBehaviour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Menu);
        }

        /// <summary>
        /// Returns true if Menu instances are equal
        /// </summary>
        /// <param name="input">Instance of Menu to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Menu input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.MenuSections == input.MenuSections ||
                    this.MenuSections != null &&
                    this.MenuSections.SequenceEqual(input.MenuSections)
                ) && 
                (
                    this.DisplaySectionLinks == input.DisplaySectionLinks ||
                    (this.DisplaySectionLinks != null &&
                    this.DisplaySectionLinks.Equals(input.DisplaySectionLinks))
                ) && 
                (
                    this.MenuSectionBehaviour == input.MenuSectionBehaviour ||
                    (this.MenuSectionBehaviour != null &&
                    this.MenuSectionBehaviour.Equals(input.MenuSectionBehaviour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.MenuSections != null)
                    hashCode = hashCode * 59 + this.MenuSections.GetHashCode();
                if (this.DisplaySectionLinks != null)
                    hashCode = hashCode * 59 + this.DisplaySectionLinks.GetHashCode();
                if (this.MenuSectionBehaviour != null)
                    hashCode = hashCode * 59 + this.MenuSectionBehaviour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Allergen
    /// </summary>
    [DataContract]
    public partial class Allergen :  IEquatable<Allergen>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Allergen" /> class.
        /// </summary>
        /// <param name="allergenId">A unique identifier for the allergen.</param>
        /// <param name="name">English Name of the allergen.</param>
        /// <param name="localizedName">Localized name of the allergen.</param>
        /// <param name="iconUrl">Url to the icon for the allergen.</param>
        public Allergen(string allergenId = default(string), string name = default(string), string localizedName = default(string), string iconUrl = default(string))
        {
            this.AllergenId = allergenId;
            this.Name = name;
            this.LocalizedName = localizedName;
            this.IconUrl = iconUrl;
        }
        
        /// <summary>
        /// A unique identifier for the allergen
        /// </summary>
        /// <value>A unique identifier for the allergen</value>
        [DataMember(Name="AllergenId", EmitDefaultValue=false)]
        public string AllergenId { get; set; }

        /// <summary>
        /// English Name of the allergen
        /// </summary>
        /// <value>English Name of the allergen</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Localized name of the allergen
        /// </summary>
        /// <value>Localized name of the allergen</value>
        [DataMember(Name="LocalizedName", EmitDefaultValue=false)]
        public string LocalizedName { get; set; }

        /// <summary>
        /// Url to the icon for the allergen
        /// </summary>
        /// <value>Url to the icon for the allergen</value>
        [DataMember(Name="IconUrl", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Allergen {\n");
            sb.Append("  AllergenId: ").Append(AllergenId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Allergen);
        }

        /// <summary>
        /// Returns true if Allergen instances are equal
        /// </summary>
        /// <param name="input">Instance of Allergen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Allergen input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllergenId == input.AllergenId ||
                    (this.AllergenId != null &&
                    this.AllergenId.Equals(input.AllergenId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LocalizedName == input.LocalizedName ||
                    (this.LocalizedName != null &&
                    this.LocalizedName.Equals(input.LocalizedName))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllergenId != null)
                    hashCode = hashCode * 59 + this.AllergenId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LocalizedName != null)
                    hashCode = hashCode * 59 + this.LocalizedName.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}

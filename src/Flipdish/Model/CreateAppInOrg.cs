/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Create an App in an Organisation Request
    /// </summary>
    [DataContract]
    public partial class CreateAppInOrg :  IEquatable<CreateAppInOrg>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAppInOrg" /> class.
        /// </summary>
        /// <param name="name">Name.</param>
        /// <param name="countryId">Country in ISO 3166-1 alpha-2 standard.</param>
        /// <param name="mainColor">Main color for the different sales channels.</param>
        /// <param name="appId">A predefined AppId.</param>
        /// <param name="logoImageUrl">Logo image URL.</param>
        public CreateAppInOrg(string name = default(string), string countryId = default(string), string mainColor = default(string), string appId = default(string), string logoImageUrl = default(string))
        {
            this.Name = name;
            this.CountryId = countryId;
            this.MainColor = mainColor;
            this.AppId = appId;
            this.LogoImageUrl = logoImageUrl;
        }
        
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Country in ISO 3166-1 alpha-2 standard
        /// </summary>
        /// <value>Country in ISO 3166-1 alpha-2 standard</value>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// Main color for the different sales channels
        /// </summary>
        /// <value>Main color for the different sales channels</value>
        [DataMember(Name="MainColor", EmitDefaultValue=false)]
        public string MainColor { get; set; }

        /// <summary>
        /// A predefined AppId
        /// </summary>
        /// <value>A predefined AppId</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Logo image URL
        /// </summary>
        /// <value>Logo image URL</value>
        [DataMember(Name="LogoImageUrl", EmitDefaultValue=false)]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAppInOrg {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  MainColor: ").Append(MainColor).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAppInOrg);
        }

        /// <summary>
        /// Returns true if CreateAppInOrg instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAppInOrg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAppInOrg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.MainColor == input.MainColor ||
                    (this.MainColor != null &&
                    this.MainColor.Equals(input.MainColor))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.LogoImageUrl == input.LogoImageUrl ||
                    (this.LogoImageUrl != null &&
                    this.LogoImageUrl.Equals(input.LogoImageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.MainColor != null)
                    hashCode = hashCode * 59 + this.MainColor.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.LogoImageUrl != null)
                    hashCode = hashCode * 59 + this.LogoImageUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// OrderDm
    /// </summary>
    [DataContract]
    public partial class OrderDm :  IEquatable<OrderDm>
    {
        /// <summary>
        /// Defines DeliveryType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliveryTypeEnum
        {
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 1,
            
            /// <summary>
            /// Enum Pickup for value: Pickup
            /// </summary>
            [EnumMember(Value = "Pickup")]
            Pickup = 2
        }

        /// <summary>
        /// Gets or Sets DeliveryType
        /// </summary>
        [DataMember(Name="DeliveryType", EmitDefaultValue=false)]
        public DeliveryTypeEnum? DeliveryType { get; set; }
        /// <summary>
        /// Defines PickupLocationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupLocationTypeEnum
        {
            
            /// <summary>
            /// Enum TakeOut for value: TakeOut
            /// </summary>
            [EnumMember(Value = "TakeOut")]
            TakeOut = 1,
            
            /// <summary>
            /// Enum TableService for value: TableService
            /// </summary>
            [EnumMember(Value = "TableService")]
            TableService = 2,
            
            /// <summary>
            /// Enum DineIn for value: DineIn
            /// </summary>
            [EnumMember(Value = "DineIn")]
            DineIn = 3
        }

        /// <summary>
        /// Gets or Sets PickupLocationType
        /// </summary>
        [DataMember(Name="PickupLocationType", EmitDefaultValue=false)]
        public PickupLocationTypeEnum? PickupLocationType { get; set; }
        /// <summary>
        /// Defines TableServiceCatagory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TableServiceCatagoryEnum
        {
            
            /// <summary>
            /// Enum Generic for value: Generic
            /// </summary>
            [EnumMember(Value = "Generic")]
            Generic = 1,
            
            /// <summary>
            /// Enum Villa for value: Villa
            /// </summary>
            [EnumMember(Value = "Villa")]
            Villa = 2,
            
            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 3,
            
            /// <summary>
            /// Enum Room for value: Room
            /// </summary>
            [EnumMember(Value = "Room")]
            Room = 4,
            
            /// <summary>
            /// Enum Area for value: Area
            /// </summary>
            [EnumMember(Value = "Area")]
            Area = 5,
            
            /// <summary>
            /// Enum Table for value: Table
            /// </summary>
            [EnumMember(Value = "Table")]
            Table = 6,
            
            /// <summary>
            /// Enum ParkingBay for value: ParkingBay
            /// </summary>
            [EnumMember(Value = "ParkingBay")]
            ParkingBay = 7,
            
            /// <summary>
            /// Enum Gate for value: Gate
            /// </summary>
            [EnumMember(Value = "Gate")]
            Gate = 8,
            
            /// <summary>
            /// Enum DriveThrough for value: DriveThrough
            /// </summary>
            [EnumMember(Value = "DriveThrough")]
            DriveThrough = 9,
            
            /// <summary>
            /// Enum Team for value: Team
            /// </summary>
            [EnumMember(Value = "Team")]
            Team = 10
        }

        /// <summary>
        /// Gets or Sets TableServiceCatagory
        /// </summary>
        [DataMember(Name="TableServiceCatagory", EmitDefaultValue=false)]
        public TableServiceCatagoryEnum? TableServiceCatagory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDm" /> class.
        /// </summary>
        /// <param name="userLocation">userLocation.</param>
        /// <param name="requestedDeliveryOrPickupTimeUtc">requestedDeliveryOrPickupTimeUtc.</param>
        /// <param name="tipAmount">tipAmount.</param>
        /// <param name="deliveryLocationId">deliveryLocationId.</param>
        /// <param name="orderItemVms">orderItemVms.</param>
        /// <param name="virtualRestaurantId">virtualRestaurantId.</param>
        /// <param name="physicalRestaurantId">physicalRestaurantId.</param>
        /// <param name="deliveryType">deliveryType.</param>
        /// <param name="pickupLocationType">pickupLocationType.</param>
        /// <param name="pickupLocationId">pickupLocationId.</param>
        /// <param name="tableServiceCatagory">tableServiceCatagory.</param>
        /// <param name="paymentAccountId">paymentAccountId.</param>
        /// <param name="isAsapOrder">isAsapOrder.</param>
        /// <param name="menuId">menuId.</param>
        /// <param name="menuVersion">menuVersion.</param>
        public OrderDm(CoordinatesDm userLocation = default(CoordinatesDm), DateTime? requestedDeliveryOrPickupTimeUtc = default(DateTime?), double? tipAmount = default(double?), int? deliveryLocationId = default(int?), List<OrderItemDm> orderItemVms = default(List<OrderItemDm>), int? virtualRestaurantId = default(int?), int? physicalRestaurantId = default(int?), DeliveryTypeEnum? deliveryType = default(DeliveryTypeEnum?), PickupLocationTypeEnum? pickupLocationType = default(PickupLocationTypeEnum?), int? pickupLocationId = default(int?), TableServiceCatagoryEnum? tableServiceCatagory = default(TableServiceCatagoryEnum?), int? paymentAccountId = default(int?), bool? isAsapOrder = default(bool?), int? menuId = default(int?), int? menuVersion = default(int?))
        {
            this.UserLocation = userLocation;
            this.RequestedDeliveryOrPickupTimeUtc = requestedDeliveryOrPickupTimeUtc;
            this.TipAmount = tipAmount;
            this.DeliveryLocationId = deliveryLocationId;
            this.OrderItemVms = orderItemVms;
            this.VirtualRestaurantId = virtualRestaurantId;
            this.PhysicalRestaurantId = physicalRestaurantId;
            this.DeliveryType = deliveryType;
            this.PickupLocationType = pickupLocationType;
            this.PickupLocationId = pickupLocationId;
            this.TableServiceCatagory = tableServiceCatagory;
            this.PaymentAccountId = paymentAccountId;
            this.IsAsapOrder = isAsapOrder;
            this.MenuId = menuId;
            this.MenuVersion = menuVersion;
        }
        
        /// <summary>
        /// Gets or Sets UserLocation
        /// </summary>
        [DataMember(Name="UserLocation", EmitDefaultValue=false)]
        public CoordinatesDm UserLocation { get; set; }

        /// <summary>
        /// Gets or Sets RequestedDeliveryOrPickupTimeUtc
        /// </summary>
        [DataMember(Name="RequestedDeliveryOrPickupTimeUtc", EmitDefaultValue=false)]
        public DateTime? RequestedDeliveryOrPickupTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets TipAmount
        /// </summary>
        [DataMember(Name="TipAmount", EmitDefaultValue=false)]
        public double? TipAmount { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocationId
        /// </summary>
        [DataMember(Name="DeliveryLocationId", EmitDefaultValue=false)]
        public int? DeliveryLocationId { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemVms
        /// </summary>
        [DataMember(Name="OrderItemVms", EmitDefaultValue=false)]
        public List<OrderItemDm> OrderItemVms { get; set; }

        /// <summary>
        /// Gets or Sets VirtualRestaurantId
        /// </summary>
        [DataMember(Name="VirtualRestaurantId", EmitDefaultValue=false)]
        public int? VirtualRestaurantId { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalRestaurantId
        /// </summary>
        [DataMember(Name="PhysicalRestaurantId", EmitDefaultValue=false)]
        public int? PhysicalRestaurantId { get; set; }



        /// <summary>
        /// Gets or Sets PickupLocationId
        /// </summary>
        [DataMember(Name="PickupLocationId", EmitDefaultValue=false)]
        public int? PickupLocationId { get; set; }


        /// <summary>
        /// Gets or Sets PaymentAccountId
        /// </summary>
        [DataMember(Name="PaymentAccountId", EmitDefaultValue=false)]
        public int? PaymentAccountId { get; set; }

        /// <summary>
        /// Gets or Sets IsPreOrder
        /// </summary>
        [DataMember(Name="IsPreOrder", EmitDefaultValue=false)]
        public bool? IsPreOrder { get; private set; }

        /// <summary>
        /// Gets or Sets IsAsapOrder
        /// </summary>
        [DataMember(Name="IsAsapOrder", EmitDefaultValue=false)]
        public bool? IsAsapOrder { get; set; }

        /// <summary>
        /// Gets or Sets MenuId
        /// </summary>
        [DataMember(Name="MenuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Gets or Sets MenuVersion
        /// </summary>
        [DataMember(Name="MenuVersion", EmitDefaultValue=false)]
        public int? MenuVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDm {\n");
            sb.Append("  UserLocation: ").Append(UserLocation).Append("\n");
            sb.Append("  RequestedDeliveryOrPickupTimeUtc: ").Append(RequestedDeliveryOrPickupTimeUtc).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  DeliveryLocationId: ").Append(DeliveryLocationId).Append("\n");
            sb.Append("  OrderItemVms: ").Append(OrderItemVms).Append("\n");
            sb.Append("  VirtualRestaurantId: ").Append(VirtualRestaurantId).Append("\n");
            sb.Append("  PhysicalRestaurantId: ").Append(PhysicalRestaurantId).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  PickupLocationType: ").Append(PickupLocationType).Append("\n");
            sb.Append("  PickupLocationId: ").Append(PickupLocationId).Append("\n");
            sb.Append("  TableServiceCatagory: ").Append(TableServiceCatagory).Append("\n");
            sb.Append("  PaymentAccountId: ").Append(PaymentAccountId).Append("\n");
            sb.Append("  IsPreOrder: ").Append(IsPreOrder).Append("\n");
            sb.Append("  IsAsapOrder: ").Append(IsAsapOrder).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  MenuVersion: ").Append(MenuVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDm);
        }

        /// <summary>
        /// Returns true if OrderDm instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserLocation == input.UserLocation ||
                    (this.UserLocation != null &&
                    this.UserLocation.Equals(input.UserLocation))
                ) && 
                (
                    this.RequestedDeliveryOrPickupTimeUtc == input.RequestedDeliveryOrPickupTimeUtc ||
                    (this.RequestedDeliveryOrPickupTimeUtc != null &&
                    this.RequestedDeliveryOrPickupTimeUtc.Equals(input.RequestedDeliveryOrPickupTimeUtc))
                ) && 
                (
                    this.TipAmount == input.TipAmount ||
                    (this.TipAmount != null &&
                    this.TipAmount.Equals(input.TipAmount))
                ) && 
                (
                    this.DeliveryLocationId == input.DeliveryLocationId ||
                    (this.DeliveryLocationId != null &&
                    this.DeliveryLocationId.Equals(input.DeliveryLocationId))
                ) && 
                (
                    this.OrderItemVms == input.OrderItemVms ||
                    this.OrderItemVms != null &&
                    this.OrderItemVms.SequenceEqual(input.OrderItemVms)
                ) && 
                (
                    this.VirtualRestaurantId == input.VirtualRestaurantId ||
                    (this.VirtualRestaurantId != null &&
                    this.VirtualRestaurantId.Equals(input.VirtualRestaurantId))
                ) && 
                (
                    this.PhysicalRestaurantId == input.PhysicalRestaurantId ||
                    (this.PhysicalRestaurantId != null &&
                    this.PhysicalRestaurantId.Equals(input.PhysicalRestaurantId))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.PickupLocationType == input.PickupLocationType ||
                    (this.PickupLocationType != null &&
                    this.PickupLocationType.Equals(input.PickupLocationType))
                ) && 
                (
                    this.PickupLocationId == input.PickupLocationId ||
                    (this.PickupLocationId != null &&
                    this.PickupLocationId.Equals(input.PickupLocationId))
                ) && 
                (
                    this.TableServiceCatagory == input.TableServiceCatagory ||
                    (this.TableServiceCatagory != null &&
                    this.TableServiceCatagory.Equals(input.TableServiceCatagory))
                ) && 
                (
                    this.PaymentAccountId == input.PaymentAccountId ||
                    (this.PaymentAccountId != null &&
                    this.PaymentAccountId.Equals(input.PaymentAccountId))
                ) && 
                (
                    this.IsPreOrder == input.IsPreOrder ||
                    (this.IsPreOrder != null &&
                    this.IsPreOrder.Equals(input.IsPreOrder))
                ) && 
                (
                    this.IsAsapOrder == input.IsAsapOrder ||
                    (this.IsAsapOrder != null &&
                    this.IsAsapOrder.Equals(input.IsAsapOrder))
                ) && 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.MenuVersion == input.MenuVersion ||
                    (this.MenuVersion != null &&
                    this.MenuVersion.Equals(input.MenuVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserLocation != null)
                    hashCode = hashCode * 59 + this.UserLocation.GetHashCode();
                if (this.RequestedDeliveryOrPickupTimeUtc != null)
                    hashCode = hashCode * 59 + this.RequestedDeliveryOrPickupTimeUtc.GetHashCode();
                if (this.TipAmount != null)
                    hashCode = hashCode * 59 + this.TipAmount.GetHashCode();
                if (this.DeliveryLocationId != null)
                    hashCode = hashCode * 59 + this.DeliveryLocationId.GetHashCode();
                if (this.OrderItemVms != null)
                    hashCode = hashCode * 59 + this.OrderItemVms.GetHashCode();
                if (this.VirtualRestaurantId != null)
                    hashCode = hashCode * 59 + this.VirtualRestaurantId.GetHashCode();
                if (this.PhysicalRestaurantId != null)
                    hashCode = hashCode * 59 + this.PhysicalRestaurantId.GetHashCode();
                if (this.DeliveryType != null)
                    hashCode = hashCode * 59 + this.DeliveryType.GetHashCode();
                if (this.PickupLocationType != null)
                    hashCode = hashCode * 59 + this.PickupLocationType.GetHashCode();
                if (this.PickupLocationId != null)
                    hashCode = hashCode * 59 + this.PickupLocationId.GetHashCode();
                if (this.TableServiceCatagory != null)
                    hashCode = hashCode * 59 + this.TableServiceCatagory.GetHashCode();
                if (this.PaymentAccountId != null)
                    hashCode = hashCode * 59 + this.PaymentAccountId.GetHashCode();
                if (this.IsPreOrder != null)
                    hashCode = hashCode * 59 + this.IsPreOrder.GetHashCode();
                if (this.IsAsapOrder != null)
                    hashCode = hashCode * 59 + this.IsAsapOrder.GetHashCode();
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.MenuVersion != null)
                    hashCode = hashCode * 59 + this.MenuVersion.GetHashCode();
                return hashCode;
            }
        }
    }

}

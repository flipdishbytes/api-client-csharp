/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Card reader state information
    /// </summary>
    [DataContract]
    public partial class ReaderActionStateInfo :  IEquatable<ReaderActionStateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReaderActionStateInfo" /> class.
        /// </summary>
        /// <param name="actionState">Action state.</param>
        /// <param name="failureCode">Failure code.</param>
        /// <param name="type">Type.</param>
        public ReaderActionStateInfo(string actionState = default(string), string failureCode = default(string), string type = default(string))
        {
            this.ActionState = actionState;
            this.FailureCode = failureCode;
            this.Type = type;
        }
        
        /// <summary>
        /// Action state
        /// </summary>
        /// <value>Action state</value>
        [DataMember(Name="ActionState", EmitDefaultValue=false)]
        public string ActionState { get; set; }

        /// <summary>
        /// Failure code
        /// </summary>
        /// <value>Failure code</value>
        [DataMember(Name="FailureCode", EmitDefaultValue=false)]
        public string FailureCode { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReaderActionStateInfo {\n");
            sb.Append("  ActionState: ").Append(ActionState).Append("\n");
            sb.Append("  FailureCode: ").Append(FailureCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReaderActionStateInfo);
        }

        /// <summary>
        /// Returns true if ReaderActionStateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReaderActionStateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReaderActionStateInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionState == input.ActionState ||
                    (this.ActionState != null &&
                    this.ActionState.Equals(input.ActionState))
                ) && 
                (
                    this.FailureCode == input.FailureCode ||
                    (this.FailureCode != null &&
                    this.FailureCode.Equals(input.FailureCode))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionState != null)
                    hashCode = hashCode * 59 + this.ActionState.GetHashCode();
                if (this.FailureCode != null)
                    hashCode = hashCode * 59 + this.FailureCode.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

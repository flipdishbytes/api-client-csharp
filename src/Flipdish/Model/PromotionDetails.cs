/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Promotion
    /// </summary>
    [DataContract]
    public partial class PromotionDetails :  IEquatable<PromotionDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionDetails" /> class.
        /// </summary>
        /// <param name="promotionId">Promotion Id.</param>
        /// <param name="name">The name of the promotion.</param>
        /// <param name="promotionAwards">The items that this promotion will award.</param>
        public PromotionDetails(int? promotionId = default(int?), string name = default(string), List<PromotionAward> promotionAwards = default(List<PromotionAward>))
        {
            this.PromotionId = promotionId;
            this.Name = name;
            this.PromotionAwards = promotionAwards;
        }
        
        /// <summary>
        /// Promotion Id
        /// </summary>
        /// <value>Promotion Id</value>
        [DataMember(Name="PromotionId", EmitDefaultValue=false)]
        public int? PromotionId { get; set; }

        /// <summary>
        /// The name of the promotion
        /// </summary>
        /// <value>The name of the promotion</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The items that this promotion will award
        /// </summary>
        /// <value>The items that this promotion will award</value>
        [DataMember(Name="PromotionAwards", EmitDefaultValue=false)]
        public List<PromotionAward> PromotionAwards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionDetails {\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PromotionAwards: ").Append(PromotionAwards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionDetails);
        }

        /// <summary>
        /// Returns true if PromotionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PromotionAwards == input.PromotionAwards ||
                    this.PromotionAwards != null &&
                    this.PromotionAwards.SequenceEqual(input.PromotionAwards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PromotionAwards != null)
                    hashCode = hashCode * 59 + this.PromotionAwards.GetHashCode();
                return hashCode;
            }
        }
    }

}

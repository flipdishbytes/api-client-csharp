/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Represents a LocationArea and its Location list
    /// </summary>
    [DataContract]
    public partial class LocationAreaWithLocations :  IEquatable<LocationAreaWithLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAreaWithLocations" /> class.
        /// </summary>
        /// <param name="locationAreaId">Id of the LocationArea.</param>
        /// <param name="storeId">Id of the Store that this LocationArea belongs to.</param>
        /// <param name="locationAreaName">Descriptive LocationArea name.</param>
        /// <param name="locations">List of Locations that belongs to this Location Area.</param>
        /// <param name="isDeleted">Returns if the LocationArea is deleted or not.</param>
        public LocationAreaWithLocations(int? locationAreaId = default(int?), int? storeId = default(int?), string locationAreaName = default(string), List<LocationAreaLocation> locations = default(List<LocationAreaLocation>), bool? isDeleted = default(bool?))
        {
            this.LocationAreaId = locationAreaId;
            this.StoreId = storeId;
            this.LocationAreaName = locationAreaName;
            this.Locations = locations;
            this.IsDeleted = isDeleted;
        }
        
        /// <summary>
        /// Id of the LocationArea
        /// </summary>
        /// <value>Id of the LocationArea</value>
        [DataMember(Name="LocationAreaId", EmitDefaultValue=false)]
        public int? LocationAreaId { get; set; }

        /// <summary>
        /// Id of the Store that this LocationArea belongs to
        /// </summary>
        /// <value>Id of the Store that this LocationArea belongs to</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// Descriptive LocationArea name
        /// </summary>
        /// <value>Descriptive LocationArea name</value>
        [DataMember(Name="LocationAreaName", EmitDefaultValue=false)]
        public string LocationAreaName { get; set; }

        /// <summary>
        /// List of Locations that belongs to this Location Area
        /// </summary>
        /// <value>List of Locations that belongs to this Location Area</value>
        [DataMember(Name="Locations", EmitDefaultValue=false)]
        public List<LocationAreaLocation> Locations { get; set; }

        /// <summary>
        /// Returns if the LocationArea is deleted or not
        /// </summary>
        /// <value>Returns if the LocationArea is deleted or not</value>
        [DataMember(Name="IsDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationAreaWithLocations {\n");
            sb.Append("  LocationAreaId: ").Append(LocationAreaId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  LocationAreaName: ").Append(LocationAreaName).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationAreaWithLocations);
        }

        /// <summary>
        /// Returns true if LocationAreaWithLocations instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationAreaWithLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationAreaWithLocations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationAreaId == input.LocationAreaId ||
                    (this.LocationAreaId != null &&
                    this.LocationAreaId.Equals(input.LocationAreaId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.LocationAreaName == input.LocationAreaName ||
                    (this.LocationAreaName != null &&
                    this.LocationAreaName.Equals(input.LocationAreaName))
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationAreaId != null)
                    hashCode = hashCode * 59 + this.LocationAreaId.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.LocationAreaName != null)
                    hashCode = hashCode * 59 + this.LocationAreaName.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Webhook subscription
    /// </summary>
    [DataContract]
    public partial class WebhookSubscription :  IEquatable<WebhookSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSubscription" /> class.
        /// </summary>
        /// <param name="id">Webhook subscription identifier.</param>
        /// <param name="ownerUserId">Webhook subscription owner user identifier.</param>
        /// <param name="version">Webhook subscription owner user identifier.</param>
        /// <param name="eventNames">Webhook subscription event names.</param>
        /// <param name="callbackUrl">Callback url. Flipdish system POST messages to this url..</param>
        /// <param name="enabled">Is webhook subscription enabled..</param>
        /// <param name="verifyToken">This is your token which will be in the Header of each POST request from Flipdish with name: X-Verify-Token..</param>
        public WebhookSubscription(int? id = default(int?), int? ownerUserId = default(int?), string version = default(string), List<string> eventNames = default(List<string>), string callbackUrl = default(string), bool? enabled = default(bool?), string verifyToken = default(string))
        {
            this.Id = id;
            this.OwnerUserId = ownerUserId;
            this.Version = version;
            this.EventNames = eventNames;
            this.CallbackUrl = callbackUrl;
            this.Enabled = enabled;
            this.VerifyToken = verifyToken;
        }
        
        /// <summary>
        /// Webhook subscription identifier
        /// </summary>
        /// <value>Webhook subscription identifier</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Webhook subscription owner user identifier
        /// </summary>
        /// <value>Webhook subscription owner user identifier</value>
        [DataMember(Name="OwnerUserId", EmitDefaultValue=false)]
        public int? OwnerUserId { get; set; }

        /// <summary>
        /// Webhook subscription owner user identifier
        /// </summary>
        /// <value>Webhook subscription owner user identifier</value>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Webhook subscription event names
        /// </summary>
        /// <value>Webhook subscription event names</value>
        [DataMember(Name="EventNames", EmitDefaultValue=false)]
        public List<string> EventNames { get; set; }

        /// <summary>
        /// Callback url. Flipdish system POST messages to this url.
        /// </summary>
        /// <value>Callback url. Flipdish system POST messages to this url.</value>
        [DataMember(Name="CallbackUrl", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Is webhook subscription enabled.
        /// </summary>
        /// <value>Is webhook subscription enabled.</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// This is your token which will be in the Header of each POST request from Flipdish with name: X-Verify-Token.
        /// </summary>
        /// <value>This is your token which will be in the Header of each POST request from Flipdish with name: X-Verify-Token.</value>
        [DataMember(Name="VerifyToken", EmitDefaultValue=false)]
        public string VerifyToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerUserId: ").Append(OwnerUserId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  EventNames: ").Append(EventNames).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  VerifyToken: ").Append(VerifyToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookSubscription);
        }

        /// <summary>
        /// Returns true if WebhookSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OwnerUserId == input.OwnerUserId ||
                    (this.OwnerUserId != null &&
                    this.OwnerUserId.Equals(input.OwnerUserId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.EventNames == input.EventNames ||
                    this.EventNames != null &&
                    this.EventNames.SequenceEqual(input.EventNames)
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.VerifyToken == input.VerifyToken ||
                    (this.VerifyToken != null &&
                    this.VerifyToken.Equals(input.VerifyToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OwnerUserId != null)
                    hashCode = hashCode * 59 + this.OwnerUserId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.EventNames != null)
                    hashCode = hashCode * 59 + this.EventNames.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.VerifyToken != null)
                    hashCode = hashCode * 59 + this.VerifyToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

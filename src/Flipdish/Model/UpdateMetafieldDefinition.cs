/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Information to update a {Flipdish.PublicModels.V1.Metafields.MetafieldDefinition}
    /// </summary>
    [DataContract]
    public partial class UpdateMetafieldDefinition :  IEquatable<UpdateMetafieldDefinition>
    {
        /// <summary>
        /// Defines Behaviors
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BehaviorsEnum
        {
            
            /// <summary>
            /// Enum SendToOrder for value: SendToOrder
            /// </summary>
            [EnumMember(Value = "SendToOrder")]
            SendToOrder = 1,
            
            /// <summary>
            /// Enum SendToMenu for value: SendToMenu
            /// </summary>
            [EnumMember(Value = "SendToMenu")]
            SendToMenu = 2
        }


        /// <summary>
        /// Enable Metafield Behaviors
        /// </summary>
        /// <value>Enable Metafield Behaviors</value>
        [DataMember(Name="Behaviors", EmitDefaultValue=false)]
        public List<BehaviorsEnum> Behaviors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMetafieldDefinition" /> class.
        /// </summary>
        /// <param name="name">Field Name.</param>
        /// <param name="description">Field Description.</param>
        /// <param name="behaviors">Enable Metafield Behaviors.</param>
        public UpdateMetafieldDefinition(string name = default(string), string description = default(string), List<BehaviorsEnum> behaviors = default(List<BehaviorsEnum>))
        {
            this.Name = name;
            this.Description = description;
            this.Behaviors = behaviors;
        }
        
        /// <summary>
        /// Field Name
        /// </summary>
        /// <value>Field Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Field Description
        /// </summary>
        /// <value>Field Description</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateMetafieldDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Behaviors: ").Append(Behaviors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateMetafieldDefinition);
        }

        /// <summary>
        /// Returns true if UpdateMetafieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateMetafieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateMetafieldDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Behaviors == input.Behaviors ||
                    this.Behaviors != null &&
                    this.Behaviors.SequenceEqual(input.Behaviors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Behaviors != null)
                    hashCode = hashCode * 59 + this.Behaviors.GetHashCode();
                return hashCode;
            }
        }
    }

}

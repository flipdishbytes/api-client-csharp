/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class SubscriptionProduct :  IEquatable<SubscriptionProduct>
    {
        /// <summary>
        /// Payment Frequency
        /// </summary>
        /// <value>Payment Frequency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentFrequencyEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 4
        }

        /// <summary>
        /// Payment Frequency
        /// </summary>
        /// <value>Payment Frequency</value>
        [DataMember(Name="PaymentFrequency", EmitDefaultValue=false)]
        public PaymentFrequencyEnum PaymentFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionProduct" /> class.
        /// </summary>
        /// <param name="productId">Product Identifier (required).</param>
        /// <param name="name">Name (required).</param>
        /// <param name="quantity">Quantity (required).</param>
        /// <param name="pricePerUnit">Price Per Unit.</param>
        /// <param name="priceTotal">Price Total.</param>
        /// <param name="paymentFrequency">Payment Frequency (required).</param>
        /// <param name="stores">Stores.</param>
        public SubscriptionProduct(string productId = default(string), string name = default(string), long? quantity = default(long?), double? pricePerUnit = default(double?), double? priceTotal = default(double?), PaymentFrequencyEnum paymentFrequency = default(PaymentFrequencyEnum), List<SubscriptionStore> stores = default(List<SubscriptionStore>))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new InvalidDataException("productId is a required property for SubscriptionProduct and cannot be null");
            }
            else
            {
                this.ProductId = productId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SubscriptionProduct and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for SubscriptionProduct and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "paymentFrequency" is required (not null)
            if (paymentFrequency == null)
            {
                throw new InvalidDataException("paymentFrequency is a required property for SubscriptionProduct and cannot be null");
            }
            else
            {
                this.PaymentFrequency = paymentFrequency;
            }
            this.PricePerUnit = pricePerUnit;
            this.PriceTotal = priceTotal;
            this.Stores = stores;
        }
        
        /// <summary>
        /// Product Identifier
        /// </summary>
        /// <value>Product Identifier</value>
        [DataMember(Name="ProductId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>
        /// <value>Quantity</value>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Price Per Unit
        /// </summary>
        /// <value>Price Per Unit</value>
        [DataMember(Name="PricePerUnit", EmitDefaultValue=false)]
        public double? PricePerUnit { get; set; }

        /// <summary>
        /// Price Total
        /// </summary>
        /// <value>Price Total</value>
        [DataMember(Name="PriceTotal", EmitDefaultValue=false)]
        public double? PriceTotal { get; set; }


        /// <summary>
        /// Stores
        /// </summary>
        /// <value>Stores</value>
        [DataMember(Name="Stores", EmitDefaultValue=false)]
        public List<SubscriptionStore> Stores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionProduct {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  PriceTotal: ").Append(PriceTotal).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionProduct);
        }

        /// <summary>
        /// Returns true if SubscriptionProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.PriceTotal == input.PriceTotal ||
                    (this.PriceTotal != null &&
                    this.PriceTotal.Equals(input.PriceTotal))
                ) && 
                (
                    this.PaymentFrequency == input.PaymentFrequency ||
                    (this.PaymentFrequency != null &&
                    this.PaymentFrequency.Equals(input.PaymentFrequency))
                ) && 
                (
                    this.Stores == input.Stores ||
                    this.Stores != null &&
                    this.Stores.SequenceEqual(input.Stores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.PriceTotal != null)
                    hashCode = hashCode * 59 + this.PriceTotal.GetHashCode();
                if (this.PaymentFrequency != null)
                    hashCode = hashCode * 59 + this.PaymentFrequency.GetHashCode();
                if (this.Stores != null)
                    hashCode = hashCode * 59 + this.Stores.GetHashCode();
                return hashCode;
            }
        }
    }

}

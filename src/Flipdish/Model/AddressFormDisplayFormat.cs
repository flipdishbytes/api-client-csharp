/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// AddressFormDisplayFormat
    /// </summary>
    [DataContract]
    public partial class AddressFormDisplayFormat :  IEquatable<AddressFormDisplayFormat>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressFormDisplayFormat" /> class.
        /// </summary>
        /// <param name="oneLine">oneLine.</param>
        /// <param name="twoLines">twoLines.</param>
        public AddressFormDisplayFormat(string oneLine = default(string), List<string> twoLines = default(List<string>))
        {
            this.OneLine = oneLine;
            this.TwoLines = twoLines;
        }
        
        /// <summary>
        /// Gets or Sets OneLine
        /// </summary>
        [DataMember(Name="OneLine", EmitDefaultValue=false)]
        public string OneLine { get; set; }

        /// <summary>
        /// Gets or Sets TwoLines
        /// </summary>
        [DataMember(Name="TwoLines", EmitDefaultValue=false)]
        public List<string> TwoLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressFormDisplayFormat {\n");
            sb.Append("  OneLine: ").Append(OneLine).Append("\n");
            sb.Append("  TwoLines: ").Append(TwoLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressFormDisplayFormat);
        }

        /// <summary>
        /// Returns true if AddressFormDisplayFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressFormDisplayFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressFormDisplayFormat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OneLine == input.OneLine ||
                    (this.OneLine != null &&
                    this.OneLine.Equals(input.OneLine))
                ) && 
                (
                    this.TwoLines == input.TwoLines ||
                    this.TwoLines != null &&
                    this.TwoLines.SequenceEqual(input.TwoLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OneLine != null)
                    hashCode = hashCode * 59 + this.OneLine.GetHashCode();
                if (this.TwoLines != null)
                    hashCode = hashCode * 59 + this.TwoLines.GetHashCode();
                return hashCode;
            }
        }
    }

}

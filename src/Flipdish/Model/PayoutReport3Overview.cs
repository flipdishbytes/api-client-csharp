/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PayoutReport3Overview
    /// </summary>
    [DataContract]
    public partial class PayoutReport3Overview :  IEquatable<PayoutReport3Overview>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReport3Overview" /> class.
        /// </summary>
        /// <param name="payoutReport3OverviewHeader">payoutReport3OverviewHeader.</param>
        /// <param name="payoutStores">payoutStores.</param>
        public PayoutReport3Overview(PayoutReport3OverviewHeader payoutReport3OverviewHeader = default(PayoutReport3OverviewHeader), List<PayoutReport3Store> payoutStores = default(List<PayoutReport3Store>))
        {
            this.PayoutReport3OverviewHeader = payoutReport3OverviewHeader;
            this.PayoutStores = payoutStores;
        }
        
        /// <summary>
        /// Gets or Sets PayoutReport3OverviewHeader
        /// </summary>
        [DataMember(Name="PayoutReport3OverviewHeader", EmitDefaultValue=false)]
        public PayoutReport3OverviewHeader PayoutReport3OverviewHeader { get; set; }

        /// <summary>
        /// Gets or Sets PayoutStores
        /// </summary>
        [DataMember(Name="PayoutStores", EmitDefaultValue=false)]
        public List<PayoutReport3Store> PayoutStores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutReport3Overview {\n");
            sb.Append("  PayoutReport3OverviewHeader: ").Append(PayoutReport3OverviewHeader).Append("\n");
            sb.Append("  PayoutStores: ").Append(PayoutStores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutReport3Overview);
        }

        /// <summary>
        /// Returns true if PayoutReport3Overview instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutReport3Overview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutReport3Overview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayoutReport3OverviewHeader == input.PayoutReport3OverviewHeader ||
                    (this.PayoutReport3OverviewHeader != null &&
                    this.PayoutReport3OverviewHeader.Equals(input.PayoutReport3OverviewHeader))
                ) && 
                (
                    this.PayoutStores == input.PayoutStores ||
                    this.PayoutStores != null &&
                    this.PayoutStores.SequenceEqual(input.PayoutStores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayoutReport3OverviewHeader != null)
                    hashCode = hashCode * 59 + this.PayoutReport3OverviewHeader.GetHashCode();
                if (this.PayoutStores != null)
                    hashCode = hashCode * 59 + this.PayoutStores.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Store Service Charge
    /// </summary>
    [DataContract]
    public partial class ServiceCharge :  IEquatable<ServiceCharge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCharge" /> class.
        /// </summary>
        /// <param name="storeId">Store identifier.</param>
        /// <param name="percentageValue">The Default Service Charge Value.</param>
        /// <param name="enabled">Enable Service Charge for store true(on) / false(off).</param>
        /// <param name="isOptional">Sets the service charge to be optional.</param>
        /// <param name="displayWithProcessingFee">Display service charge together with processing fee.</param>
        /// <param name="includesVouchers">If true, will include voucher value in calculation   i.e 10E order with 1E service charge and 5E voucher would have service charge at 0.5E.</param>
        public ServiceCharge(int? storeId = default(int?), double? percentageValue = default(double?), bool? enabled = default(bool?), bool? isOptional = default(bool?), bool? displayWithProcessingFee = default(bool?), bool? includesVouchers = default(bool?))
        {
            this.StoreId = storeId;
            this.PercentageValue = percentageValue;
            this.Enabled = enabled;
            this.IsOptional = isOptional;
            this.DisplayWithProcessingFee = displayWithProcessingFee;
            this.IncludesVouchers = includesVouchers;
        }
        
        /// <summary>
        /// Store identifier
        /// </summary>
        /// <value>Store identifier</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public int? StoreId { get; set; }

        /// <summary>
        /// The Default Service Charge Value
        /// </summary>
        /// <value>The Default Service Charge Value</value>
        [DataMember(Name="PercentageValue", EmitDefaultValue=false)]
        public double? PercentageValue { get; set; }

        /// <summary>
        /// Enable Service Charge for store true(on) / false(off)
        /// </summary>
        /// <value>Enable Service Charge for store true(on) / false(off)</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Sets the service charge to be optional
        /// </summary>
        /// <value>Sets the service charge to be optional</value>
        [DataMember(Name="IsOptional", EmitDefaultValue=false)]
        public bool? IsOptional { get; set; }

        /// <summary>
        /// Display service charge together with processing fee
        /// </summary>
        /// <value>Display service charge together with processing fee</value>
        [DataMember(Name="DisplayWithProcessingFee", EmitDefaultValue=false)]
        public bool? DisplayWithProcessingFee { get; set; }

        /// <summary>
        /// If true, will include voucher value in calculation   i.e 10E order with 1E service charge and 5E voucher would have service charge at 0.5E
        /// </summary>
        /// <value>If true, will include voucher value in calculation   i.e 10E order with 1E service charge and 5E voucher would have service charge at 0.5E</value>
        [DataMember(Name="IncludesVouchers", EmitDefaultValue=false)]
        public bool? IncludesVouchers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceCharge {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  PercentageValue: ").Append(PercentageValue).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IsOptional: ").Append(IsOptional).Append("\n");
            sb.Append("  DisplayWithProcessingFee: ").Append(DisplayWithProcessingFee).Append("\n");
            sb.Append("  IncludesVouchers: ").Append(IncludesVouchers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceCharge);
        }

        /// <summary>
        /// Returns true if ServiceCharge instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceCharge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceCharge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.PercentageValue == input.PercentageValue ||
                    (this.PercentageValue != null &&
                    this.PercentageValue.Equals(input.PercentageValue))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.IsOptional == input.IsOptional ||
                    (this.IsOptional != null &&
                    this.IsOptional.Equals(input.IsOptional))
                ) && 
                (
                    this.DisplayWithProcessingFee == input.DisplayWithProcessingFee ||
                    (this.DisplayWithProcessingFee != null &&
                    this.DisplayWithProcessingFee.Equals(input.DisplayWithProcessingFee))
                ) && 
                (
                    this.IncludesVouchers == input.IncludesVouchers ||
                    (this.IncludesVouchers != null &&
                    this.IncludesVouchers.Equals(input.IncludesVouchers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.PercentageValue != null)
                    hashCode = hashCode * 59 + this.PercentageValue.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.IsOptional != null)
                    hashCode = hashCode * 59 + this.IsOptional.GetHashCode();
                if (this.DisplayWithProcessingFee != null)
                    hashCode = hashCode * 59 + this.DisplayWithProcessingFee.GetHashCode();
                if (this.IncludesVouchers != null)
                    hashCode = hashCode * 59 + this.IncludesVouchers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

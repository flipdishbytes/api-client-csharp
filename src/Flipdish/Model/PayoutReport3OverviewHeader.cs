/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// PayoutReport3OverviewHeader
    /// </summary>
    [DataContract]
    public partial class PayoutReport3OverviewHeader :  IEquatable<PayoutReport3OverviewHeader>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutReport3OverviewHeader" /> class.
        /// </summary>
        /// <param name="payoutId">payoutId.</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="payoutStatus">payoutStatus.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="periodStartTime">periodStartTime.</param>
        /// <param name="periodEndTime">periodEndTime.</param>
        /// <param name="destinationBank">destinationBank.</param>
        /// <param name="destinationAccount">destinationAccount.</param>
        public PayoutReport3OverviewHeader(int? payoutId = default(int?), int? bankAccountId = default(int?), string accountName = default(string), string payoutStatus = default(string), DateTime? createdDate = default(DateTime?), DateTime? periodStartTime = default(DateTime?), DateTime? periodEndTime = default(DateTime?), string destinationBank = default(string), string destinationAccount = default(string))
        {
            this.PayoutId = payoutId;
            this.BankAccountId = bankAccountId;
            this.AccountName = accountName;
            this.PayoutStatus = payoutStatus;
            this.CreatedDate = createdDate;
            this.PeriodStartTime = periodStartTime;
            this.PeriodEndTime = periodEndTime;
            this.DestinationBank = destinationBank;
            this.DestinationAccount = destinationAccount;
        }
        
        /// <summary>
        /// Gets or Sets PayoutId
        /// </summary>
        [DataMember(Name="PayoutId", EmitDefaultValue=false)]
        public int? PayoutId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name="BankAccountId", EmitDefaultValue=false)]
        public int? BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets PayoutStatus
        /// </summary>
        [DataMember(Name="PayoutStatus", EmitDefaultValue=false)]
        public string PayoutStatus { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets PeriodStartTime
        /// </summary>
        [DataMember(Name="PeriodStartTime", EmitDefaultValue=false)]
        public DateTime? PeriodStartTime { get; set; }

        /// <summary>
        /// Gets or Sets PeriodEndTime
        /// </summary>
        [DataMember(Name="PeriodEndTime", EmitDefaultValue=false)]
        public DateTime? PeriodEndTime { get; set; }

        /// <summary>
        /// Gets or Sets DestinationBank
        /// </summary>
        [DataMember(Name="DestinationBank", EmitDefaultValue=false)]
        public string DestinationBank { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAccount
        /// </summary>
        [DataMember(Name="DestinationAccount", EmitDefaultValue=false)]
        public string DestinationAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutReport3OverviewHeader {\n");
            sb.Append("  PayoutId: ").Append(PayoutId).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  PayoutStatus: ").Append(PayoutStatus).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  PeriodStartTime: ").Append(PeriodStartTime).Append("\n");
            sb.Append("  PeriodEndTime: ").Append(PeriodEndTime).Append("\n");
            sb.Append("  DestinationBank: ").Append(DestinationBank).Append("\n");
            sb.Append("  DestinationAccount: ").Append(DestinationAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutReport3OverviewHeader);
        }

        /// <summary>
        /// Returns true if PayoutReport3OverviewHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutReport3OverviewHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutReport3OverviewHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayoutId == input.PayoutId ||
                    (this.PayoutId != null &&
                    this.PayoutId.Equals(input.PayoutId))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.PayoutStatus == input.PayoutStatus ||
                    (this.PayoutStatus != null &&
                    this.PayoutStatus.Equals(input.PayoutStatus))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.PeriodStartTime == input.PeriodStartTime ||
                    (this.PeriodStartTime != null &&
                    this.PeriodStartTime.Equals(input.PeriodStartTime))
                ) && 
                (
                    this.PeriodEndTime == input.PeriodEndTime ||
                    (this.PeriodEndTime != null &&
                    this.PeriodEndTime.Equals(input.PeriodEndTime))
                ) && 
                (
                    this.DestinationBank == input.DestinationBank ||
                    (this.DestinationBank != null &&
                    this.DestinationBank.Equals(input.DestinationBank))
                ) && 
                (
                    this.DestinationAccount == input.DestinationAccount ||
                    (this.DestinationAccount != null &&
                    this.DestinationAccount.Equals(input.DestinationAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayoutId != null)
                    hashCode = hashCode * 59 + this.PayoutId.GetHashCode();
                if (this.BankAccountId != null)
                    hashCode = hashCode * 59 + this.BankAccountId.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.PayoutStatus != null)
                    hashCode = hashCode * 59 + this.PayoutStatus.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.PeriodStartTime != null)
                    hashCode = hashCode * 59 + this.PeriodStartTime.GetHashCode();
                if (this.PeriodEndTime != null)
                    hashCode = hashCode * 59 + this.PeriodEndTime.GetHashCode();
                if (this.DestinationBank != null)
                    hashCode = hashCode * 59 + this.DestinationBank.GetHashCode();
                if (this.DestinationAccount != null)
                    hashCode = hashCode * 59 + this.DestinationAccount.GetHashCode();
                return hashCode;
            }
        }
    }

}

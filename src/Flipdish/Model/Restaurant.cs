/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Restaurant search result
    /// </summary>
    [DataContract]
    public partial class Restaurant :  IEquatable<Restaurant>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Restaurant" /> class.
        /// </summary>
        /// <param name="whiteLabelConfigs">Collection of white label configurations.</param>
        /// <param name="virtualRestaurantId">Virtual restaurant identifier.</param>
        /// <param name="virtualRestaurantName">Virtual restaurant name.</param>
        /// <param name="virtualRestaurantUrl">Virtual restaurant URL.</param>
        /// <param name="physicalRestaurantId">Physical restaurant identifier.</param>
        /// <param name="physicalRestaurantName">Physical restaurant name.</param>
        /// <param name="physicalRestaurantAddress">Physical restaurant address.</param>
        /// <param name="menuId">Menu identifier.</param>
        /// <param name="isArchived">Indicates if the restaurant is archived.</param>
        /// <param name="isPublished">Indicates if the restaurant is published.</param>
        /// <param name="flipdishStripeCustomConnectedAccounts">List of Flipdish Stripe custom connected account identifiers.</param>
        public Restaurant(List<WhiteLabelConfig> whiteLabelConfigs = default(List<WhiteLabelConfig>), int? virtualRestaurantId = default(int?), string virtualRestaurantName = default(string), string virtualRestaurantUrl = default(string), int? physicalRestaurantId = default(int?), string physicalRestaurantName = default(string), string physicalRestaurantAddress = default(string), int? menuId = default(int?), bool? isArchived = default(bool?), bool? isPublished = default(bool?), List<int?> flipdishStripeCustomConnectedAccounts = default(List<int?>))
        {
            this.WhiteLabelConfigs = whiteLabelConfigs;
            this.VirtualRestaurantId = virtualRestaurantId;
            this.VirtualRestaurantName = virtualRestaurantName;
            this.VirtualRestaurantUrl = virtualRestaurantUrl;
            this.PhysicalRestaurantId = physicalRestaurantId;
            this.PhysicalRestaurantName = physicalRestaurantName;
            this.PhysicalRestaurantAddress = physicalRestaurantAddress;
            this.MenuId = menuId;
            this.IsArchived = isArchived;
            this.IsPublished = isPublished;
            this.FlipdishStripeCustomConnectedAccounts = flipdishStripeCustomConnectedAccounts;
        }
        
        /// <summary>
        /// Collection of white label configurations
        /// </summary>
        /// <value>Collection of white label configurations</value>
        [DataMember(Name="WhiteLabelConfigs", EmitDefaultValue=false)]
        public List<WhiteLabelConfig> WhiteLabelConfigs { get; set; }

        /// <summary>
        /// Virtual restaurant identifier
        /// </summary>
        /// <value>Virtual restaurant identifier</value>
        [DataMember(Name="VirtualRestaurantId", EmitDefaultValue=false)]
        public int? VirtualRestaurantId { get; set; }

        /// <summary>
        /// Virtual restaurant name
        /// </summary>
        /// <value>Virtual restaurant name</value>
        [DataMember(Name="VirtualRestaurantName", EmitDefaultValue=false)]
        public string VirtualRestaurantName { get; set; }

        /// <summary>
        /// Virtual restaurant URL
        /// </summary>
        /// <value>Virtual restaurant URL</value>
        [DataMember(Name="VirtualRestaurantUrl", EmitDefaultValue=false)]
        public string VirtualRestaurantUrl { get; set; }

        /// <summary>
        /// Physical restaurant identifier
        /// </summary>
        /// <value>Physical restaurant identifier</value>
        [DataMember(Name="PhysicalRestaurantId", EmitDefaultValue=false)]
        public int? PhysicalRestaurantId { get; set; }

        /// <summary>
        /// Physical restaurant name
        /// </summary>
        /// <value>Physical restaurant name</value>
        [DataMember(Name="PhysicalRestaurantName", EmitDefaultValue=false)]
        public string PhysicalRestaurantName { get; set; }

        /// <summary>
        /// Physical restaurant address
        /// </summary>
        /// <value>Physical restaurant address</value>
        [DataMember(Name="PhysicalRestaurantAddress", EmitDefaultValue=false)]
        public string PhysicalRestaurantAddress { get; set; }

        /// <summary>
        /// Menu identifier
        /// </summary>
        /// <value>Menu identifier</value>
        [DataMember(Name="MenuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Indicates if the restaurant is archived
        /// </summary>
        /// <value>Indicates if the restaurant is archived</value>
        [DataMember(Name="IsArchived", EmitDefaultValue=false)]
        public bool? IsArchived { get; set; }

        /// <summary>
        /// Indicates if the restaurant is published
        /// </summary>
        /// <value>Indicates if the restaurant is published</value>
        [DataMember(Name="IsPublished", EmitDefaultValue=false)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// List of Flipdish Stripe custom connected account identifiers
        /// </summary>
        /// <value>List of Flipdish Stripe custom connected account identifiers</value>
        [DataMember(Name="FlipdishStripeCustomConnectedAccounts", EmitDefaultValue=false)]
        public List<int?> FlipdishStripeCustomConnectedAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Restaurant {\n");
            sb.Append("  WhiteLabelConfigs: ").Append(WhiteLabelConfigs).Append("\n");
            sb.Append("  VirtualRestaurantId: ").Append(VirtualRestaurantId).Append("\n");
            sb.Append("  VirtualRestaurantName: ").Append(VirtualRestaurantName).Append("\n");
            sb.Append("  VirtualRestaurantUrl: ").Append(VirtualRestaurantUrl).Append("\n");
            sb.Append("  PhysicalRestaurantId: ").Append(PhysicalRestaurantId).Append("\n");
            sb.Append("  PhysicalRestaurantName: ").Append(PhysicalRestaurantName).Append("\n");
            sb.Append("  PhysicalRestaurantAddress: ").Append(PhysicalRestaurantAddress).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("  FlipdishStripeCustomConnectedAccounts: ").Append(FlipdishStripeCustomConnectedAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Restaurant);
        }

        /// <summary>
        /// Returns true if Restaurant instances are equal
        /// </summary>
        /// <param name="input">Instance of Restaurant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Restaurant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WhiteLabelConfigs == input.WhiteLabelConfigs ||
                    this.WhiteLabelConfigs != null &&
                    this.WhiteLabelConfigs.SequenceEqual(input.WhiteLabelConfigs)
                ) && 
                (
                    this.VirtualRestaurantId == input.VirtualRestaurantId ||
                    (this.VirtualRestaurantId != null &&
                    this.VirtualRestaurantId.Equals(input.VirtualRestaurantId))
                ) && 
                (
                    this.VirtualRestaurantName == input.VirtualRestaurantName ||
                    (this.VirtualRestaurantName != null &&
                    this.VirtualRestaurantName.Equals(input.VirtualRestaurantName))
                ) && 
                (
                    this.VirtualRestaurantUrl == input.VirtualRestaurantUrl ||
                    (this.VirtualRestaurantUrl != null &&
                    this.VirtualRestaurantUrl.Equals(input.VirtualRestaurantUrl))
                ) && 
                (
                    this.PhysicalRestaurantId == input.PhysicalRestaurantId ||
                    (this.PhysicalRestaurantId != null &&
                    this.PhysicalRestaurantId.Equals(input.PhysicalRestaurantId))
                ) && 
                (
                    this.PhysicalRestaurantName == input.PhysicalRestaurantName ||
                    (this.PhysicalRestaurantName != null &&
                    this.PhysicalRestaurantName.Equals(input.PhysicalRestaurantName))
                ) && 
                (
                    this.PhysicalRestaurantAddress == input.PhysicalRestaurantAddress ||
                    (this.PhysicalRestaurantAddress != null &&
                    this.PhysicalRestaurantAddress.Equals(input.PhysicalRestaurantAddress))
                ) && 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.IsArchived == input.IsArchived ||
                    (this.IsArchived != null &&
                    this.IsArchived.Equals(input.IsArchived))
                ) && 
                (
                    this.IsPublished == input.IsPublished ||
                    (this.IsPublished != null &&
                    this.IsPublished.Equals(input.IsPublished))
                ) && 
                (
                    this.FlipdishStripeCustomConnectedAccounts == input.FlipdishStripeCustomConnectedAccounts ||
                    this.FlipdishStripeCustomConnectedAccounts != null &&
                    this.FlipdishStripeCustomConnectedAccounts.SequenceEqual(input.FlipdishStripeCustomConnectedAccounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhiteLabelConfigs != null)
                    hashCode = hashCode * 59 + this.WhiteLabelConfigs.GetHashCode();
                if (this.VirtualRestaurantId != null)
                    hashCode = hashCode * 59 + this.VirtualRestaurantId.GetHashCode();
                if (this.VirtualRestaurantName != null)
                    hashCode = hashCode * 59 + this.VirtualRestaurantName.GetHashCode();
                if (this.VirtualRestaurantUrl != null)
                    hashCode = hashCode * 59 + this.VirtualRestaurantUrl.GetHashCode();
                if (this.PhysicalRestaurantId != null)
                    hashCode = hashCode * 59 + this.PhysicalRestaurantId.GetHashCode();
                if (this.PhysicalRestaurantName != null)
                    hashCode = hashCode * 59 + this.PhysicalRestaurantName.GetHashCode();
                if (this.PhysicalRestaurantAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalRestaurantAddress.GetHashCode();
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.IsArchived != null)
                    hashCode = hashCode * 59 + this.IsArchived.GetHashCode();
                if (this.IsPublished != null)
                    hashCode = hashCode * 59 + this.IsPublished.GetHashCode();
                if (this.FlipdishStripeCustomConnectedAccounts != null)
                    hashCode = hashCode * 59 + this.FlipdishStripeCustomConnectedAccounts.GetHashCode();
                return hashCode;
            }
        }
    }

}

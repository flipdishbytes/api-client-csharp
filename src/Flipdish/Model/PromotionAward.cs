/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Promotion
    /// </summary>
    [DataContract]
    public partial class PromotionAward :  IEquatable<PromotionAward>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionAward" /> class.
        /// </summary>
        /// <param name="promotionAwardId">Promotion Award Id.</param>
        /// <param name="menuItemPublicId">The public id of the menu item that will be awarded.</param>
        public PromotionAward(int? promotionAwardId = default(int?), Guid? menuItemPublicId = default(Guid?))
        {
            this.PromotionAwardId = promotionAwardId;
            this.MenuItemPublicId = menuItemPublicId;
        }
        
        /// <summary>
        /// Promotion Award Id
        /// </summary>
        /// <value>Promotion Award Id</value>
        [DataMember(Name="PromotionAwardId", EmitDefaultValue=false)]
        public int? PromotionAwardId { get; set; }

        /// <summary>
        /// The public id of the menu item that will be awarded
        /// </summary>
        /// <value>The public id of the menu item that will be awarded</value>
        [DataMember(Name="MenuItemPublicId", EmitDefaultValue=false)]
        public Guid? MenuItemPublicId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionAward {\n");
            sb.Append("  PromotionAwardId: ").Append(PromotionAwardId).Append("\n");
            sb.Append("  MenuItemPublicId: ").Append(MenuItemPublicId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionAward);
        }

        /// <summary>
        /// Returns true if PromotionAward instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionAward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionAward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromotionAwardId == input.PromotionAwardId ||
                    (this.PromotionAwardId != null &&
                    this.PromotionAwardId.Equals(input.PromotionAwardId))
                ) && 
                (
                    this.MenuItemPublicId == input.MenuItemPublicId ||
                    (this.MenuItemPublicId != null &&
                    this.MenuItemPublicId.Equals(input.MenuItemPublicId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionAwardId != null)
                    hashCode = hashCode * 59 + this.PromotionAwardId.GetHashCode();
                if (this.MenuItemPublicId != null)
                    hashCode = hashCode * 59 + this.MenuItemPublicId.GetHashCode();
                return hashCode;
            }
        }
    }

}

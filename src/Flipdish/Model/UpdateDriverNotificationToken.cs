/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// UpdateDriver Push Notification Token
    /// </summary>
    [DataContract]
    public partial class UpdateDriverNotificationToken :  IEquatable<UpdateDriverNotificationToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDriverNotificationToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDriverNotificationToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDriverNotificationToken" /> class.
        /// </summary>
        /// <param name="pushNotificationsToken">Push notifications token, cannot be null (required).</param>
        public UpdateDriverNotificationToken(string pushNotificationsToken = default(string))
        {
            // to ensure "pushNotificationsToken" is required (not null)
            if (pushNotificationsToken == null)
            {
                throw new InvalidDataException("pushNotificationsToken is a required property for UpdateDriverNotificationToken and cannot be null");
            }
            else
            {
                this.PushNotificationsToken = pushNotificationsToken;
            }
        }
        
        /// <summary>
        /// Push notifications token, cannot be null
        /// </summary>
        /// <value>Push notifications token, cannot be null</value>
        [DataMember(Name="PushNotificationsToken", EmitDefaultValue=false)]
        public string PushNotificationsToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDriverNotificationToken {\n");
            sb.Append("  PushNotificationsToken: ").Append(PushNotificationsToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateDriverNotificationToken);
        }

        /// <summary>
        /// Returns true if UpdateDriverNotificationToken instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateDriverNotificationToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDriverNotificationToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PushNotificationsToken == input.PushNotificationsToken ||
                    (this.PushNotificationsToken != null &&
                    this.PushNotificationsToken.Equals(input.PushNotificationsToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PushNotificationsToken != null)
                    hashCode = hashCode * 59 + this.PushNotificationsToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// StoreSummary
    /// </summary>
    [DataContract]
    public partial class StoreSummary :  IEquatable<StoreSummary>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUR for "EUR"
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR,
            
            /// <summary>
            /// Enum USD for "USD"
            /// </summary>
            [EnumMember(Value = "USD")]
            USD,
            
            /// <summary>
            /// Enum GBP for "GBP"
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP,
            
            /// <summary>
            /// Enum CAD for "CAD"
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD,
            
            /// <summary>
            /// Enum AUD for "AUD"
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD,
            
            /// <summary>
            /// Enum DJF for "DJF"
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF,
            
            /// <summary>
            /// Enum ZAR for "ZAR"
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR,
            
            /// <summary>
            /// Enum ETB for "ETB"
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB,
            
            /// <summary>
            /// Enum AED for "AED"
            /// </summary>
            [EnumMember(Value = "AED")]
            AED,
            
            /// <summary>
            /// Enum BHD for "BHD"
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD,
            
            /// <summary>
            /// Enum DZD for "DZD"
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD,
            
            /// <summary>
            /// Enum EGP for "EGP"
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP,
            
            /// <summary>
            /// Enum IQD for "IQD"
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD,
            
            /// <summary>
            /// Enum JOD for "JOD"
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD,
            
            /// <summary>
            /// Enum KWD for "KWD"
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD,
            
            /// <summary>
            /// Enum LBP for "LBP"
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP,
            
            /// <summary>
            /// Enum LYD for "LYD"
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD,
            
            /// <summary>
            /// Enum MAD for "MAD"
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD,
            
            /// <summary>
            /// Enum OMR for "OMR"
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR,
            
            /// <summary>
            /// Enum QAR for "QAR"
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR,
            
            /// <summary>
            /// Enum SAR for "SAR"
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR,
            
            /// <summary>
            /// Enum SYP for "SYP"
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP,
            
            /// <summary>
            /// Enum TND for "TND"
            /// </summary>
            [EnumMember(Value = "TND")]
            TND,
            
            /// <summary>
            /// Enum YER for "YER"
            /// </summary>
            [EnumMember(Value = "YER")]
            YER,
            
            /// <summary>
            /// Enum CLP for "CLP"
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP,
            
            /// <summary>
            /// Enum INR for "INR"
            /// </summary>
            [EnumMember(Value = "INR")]
            INR,
            
            /// <summary>
            /// Enum AZN for "AZN"
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN,
            
            /// <summary>
            /// Enum RUB for "RUB"
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB,
            
            /// <summary>
            /// Enum BYN for "BYN"
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN,
            
            /// <summary>
            /// Enum BGN for "BGN"
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN,
            
            /// <summary>
            /// Enum NGN for "NGN"
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN,
            
            /// <summary>
            /// Enum BDT for "BDT"
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT,
            
            /// <summary>
            /// Enum CNY for "CNY"
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY,
            
            /// <summary>
            /// Enum BAM for "BAM"
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM,
            
            /// <summary>
            /// Enum CZK for "CZK"
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK,
            
            /// <summary>
            /// Enum DKK for "DKK"
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK,
            
            /// <summary>
            /// Enum CHF for "CHF"
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF,
            
            /// <summary>
            /// Enum MVR for "MVR"
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR,
            
            /// <summary>
            /// Enum BTN for "BTN"
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN,
            
            /// <summary>
            /// Enum XCD for "XCD"
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD,
            
            /// <summary>
            /// Enum BZD for "BZD"
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD,
            
            /// <summary>
            /// Enum HKD for "HKD"
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD,
            
            /// <summary>
            /// Enum IDR for "IDR"
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR,
            
            /// <summary>
            /// Enum JMD for "JMD"
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD,
            
            /// <summary>
            /// Enum MYR for "MYR"
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR,
            
            /// <summary>
            /// Enum NZD for "NZD"
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD,
            
            /// <summary>
            /// Enum PHP for "PHP"
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP,
            
            /// <summary>
            /// Enum SGD for "SGD"
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD,
            
            /// <summary>
            /// Enum TTD for "TTD"
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD,
            
            /// <summary>
            /// Enum XDR for "XDR"
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR,
            
            /// <summary>
            /// Enum ARS for "ARS"
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS,
            
            /// <summary>
            /// Enum BOB for "BOB"
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB,
            
            /// <summary>
            /// Enum COP for "COP"
            /// </summary>
            [EnumMember(Value = "COP")]
            COP,
            
            /// <summary>
            /// Enum CRC for "CRC"
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC,
            
            /// <summary>
            /// Enum CUP for "CUP"
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP,
            
            /// <summary>
            /// Enum DOP for "DOP"
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP,
            
            /// <summary>
            /// Enum GTQ for "GTQ"
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ,
            
            /// <summary>
            /// Enum HNL for "HNL"
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL,
            
            /// <summary>
            /// Enum MXN for "MXN"
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN,
            
            /// <summary>
            /// Enum NIO for "NIO"
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO,
            
            /// <summary>
            /// Enum PAB for "PAB"
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB,
            
            /// <summary>
            /// Enum PEN for "PEN"
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN,
            
            /// <summary>
            /// Enum PYG for "PYG"
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG,
            
            /// <summary>
            /// Enum UYU for "UYU"
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU,
            
            /// <summary>
            /// Enum VEF for "VEF"
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF,
            
            /// <summary>
            /// Enum IRR for "IRR"
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR,
            
            /// <summary>
            /// Enum XOF for "XOF"
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF,
            
            /// <summary>
            /// Enum CDF for "CDF"
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF,
            
            /// <summary>
            /// Enum XAF for "XAF"
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF,
            
            /// <summary>
            /// Enum HTG for "HTG"
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG,
            
            /// <summary>
            /// Enum ILS for "ILS"
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS,
            
            /// <summary>
            /// Enum HRK for "HRK"
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK,
            
            /// <summary>
            /// Enum HUF for "HUF"
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF,
            
            /// <summary>
            /// Enum AMD for "AMD"
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD,
            
            /// <summary>
            /// Enum ISK for "ISK"
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK,
            
            /// <summary>
            /// Enum JPY for "JPY"
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY,
            
            /// <summary>
            /// Enum GEL for "GEL"
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL,
            
            /// <summary>
            /// Enum KZT for "KZT"
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT,
            
            /// <summary>
            /// Enum KHR for "KHR"
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR,
            
            /// <summary>
            /// Enum KRW for "KRW"
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW,
            
            /// <summary>
            /// Enum KGS for "KGS"
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS,
            
            /// <summary>
            /// Enum LAK for "LAK"
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK,
            
            /// <summary>
            /// Enum MKD for "MKD"
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD,
            
            /// <summary>
            /// Enum MNT for "MNT"
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT,
            
            /// <summary>
            /// Enum BND for "BND"
            /// </summary>
            [EnumMember(Value = "BND")]
            BND,
            
            /// <summary>
            /// Enum MMK for "MMK"
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK,
            
            /// <summary>
            /// Enum NOK for "NOK"
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK,
            
            /// <summary>
            /// Enum NPR for "NPR"
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR,
            
            /// <summary>
            /// Enum PKR for "PKR"
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR,
            
            /// <summary>
            /// Enum PLN for "PLN"
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN,
            
            /// <summary>
            /// Enum AFN for "AFN"
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN,
            
            /// <summary>
            /// Enum BRL for "BRL"
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL,
            
            /// <summary>
            /// Enum MDL for "MDL"
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL,
            
            /// <summary>
            /// Enum RON for "RON"
            /// </summary>
            [EnumMember(Value = "RON")]
            RON,
            
            /// <summary>
            /// Enum RWF for "RWF"
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF,
            
            /// <summary>
            /// Enum SEK for "SEK"
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK,
            
            /// <summary>
            /// Enum LKR for "LKR"
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR,
            
            /// <summary>
            /// Enum SOS for "SOS"
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS,
            
            /// <summary>
            /// Enum ALL for "ALL"
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL,
            
            /// <summary>
            /// Enum RSD for "RSD"
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD,
            
            /// <summary>
            /// Enum KES for "KES"
            /// </summary>
            [EnumMember(Value = "KES")]
            KES,
            
            /// <summary>
            /// Enum TJS for "TJS"
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS,
            
            /// <summary>
            /// Enum THB for "THB"
            /// </summary>
            [EnumMember(Value = "THB")]
            THB,
            
            /// <summary>
            /// Enum ERN for "ERN"
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN,
            
            /// <summary>
            /// Enum TMT for "TMT"
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT,
            
            /// <summary>
            /// Enum BWP for "BWP"
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP,
            
            /// <summary>
            /// Enum TRY for "TRY"
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY,
            
            /// <summary>
            /// Enum UAH for "UAH"
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH,
            
            /// <summary>
            /// Enum UZS for "UZS"
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS,
            
            /// <summary>
            /// Enum VND for "VND"
            /// </summary>
            [EnumMember(Value = "VND")]
            VND,
            
            /// <summary>
            /// Enum MOP for "MOP"
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP,
            
            /// <summary>
            /// Enum TWD for "TWD"
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreSummary" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="MenuId">MenuId.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="Currency">Currency.</param>
        public StoreSummary(int? Id = default(int?), string Name = default(string), int? MenuId = default(int?), Dictionary<string, string> Metadata = default(Dictionary<string, string>), CurrencyEnum? Currency = default(CurrencyEnum?))
        {
            this.Id = Id;
            this.Name = Name;
            this.MenuId = MenuId;
            this.Metadata = Metadata;
            this.Currency = Currency;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MenuId
        /// </summary>
        [DataMember(Name="MenuId", EmitDefaultValue=false)]
        public int? MenuId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="Metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoreSummary);
        }

        /// <summary>
        /// Returns true if StoreSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of StoreSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.MenuId == other.MenuId ||
                    this.MenuId != null &&
                    this.MenuId.Equals(other.MenuId)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(other.Metadata)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.MenuId != null)
                    hash = hash * 59 + this.MenuId.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Subscription Base + token
    /// </summary>
    [DataContract]
    public partial class SubscriptionWithToken :  IEquatable<SubscriptionWithToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionWithToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionWithToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionWithToken" /> class.
        /// </summary>
        /// <param name="token">Token (required).</param>
        /// <param name="quantity">Number of physical restaurants (required).</param>
        /// <param name="subscriptionPlanId">Subscription plan identifier (required).</param>
        /// <param name="appId">App name Id of the subscription (required).</param>
        /// <param name="vatNumber">Last 4 digits of the card.</param>
        /// <param name="vatCountryCode">Expiry date of the card (required).</param>
        public SubscriptionWithToken(string token = default(string), int? quantity = default(int?), int? subscriptionPlanId = default(int?), string appId = default(string), string vatNumber = default(string), string vatCountryCode = default(string))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for SubscriptionWithToken and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for SubscriptionWithToken and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "subscriptionPlanId" is required (not null)
            if (subscriptionPlanId == null)
            {
                throw new InvalidDataException("subscriptionPlanId is a required property for SubscriptionWithToken and cannot be null");
            }
            else
            {
                this.SubscriptionPlanId = subscriptionPlanId;
            }
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for SubscriptionWithToken and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            // to ensure "vatCountryCode" is required (not null)
            if (vatCountryCode == null)
            {
                throw new InvalidDataException("vatCountryCode is a required property for SubscriptionWithToken and cannot be null");
            }
            else
            {
                this.VatCountryCode = vatCountryCode;
            }
            this.VatNumber = vatNumber;
        }
        
        /// <summary>
        /// Token
        /// </summary>
        /// <value>Token</value>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Number of physical restaurants
        /// </summary>
        /// <value>Number of physical restaurants</value>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Subscription plan identifier
        /// </summary>
        /// <value>Subscription plan identifier</value>
        [DataMember(Name="SubscriptionPlanId", EmitDefaultValue=false)]
        public int? SubscriptionPlanId { get; set; }

        /// <summary>
        /// App name Id of the subscription
        /// </summary>
        /// <value>App name Id of the subscription</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Last 4 digits of the card
        /// </summary>
        /// <value>Last 4 digits of the card</value>
        [DataMember(Name="VatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Expiry date of the card
        /// </summary>
        /// <value>Expiry date of the card</value>
        [DataMember(Name="VatCountryCode", EmitDefaultValue=false)]
        public string VatCountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionWithToken {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SubscriptionPlanId: ").Append(SubscriptionPlanId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  VatCountryCode: ").Append(VatCountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionWithToken);
        }

        /// <summary>
        /// Returns true if SubscriptionWithToken instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionWithToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionWithToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SubscriptionPlanId == input.SubscriptionPlanId ||
                    (this.SubscriptionPlanId != null &&
                    this.SubscriptionPlanId.Equals(input.SubscriptionPlanId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.VatCountryCode == input.VatCountryCode ||
                    (this.VatCountryCode != null &&
                    this.VatCountryCode.Equals(input.VatCountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SubscriptionPlanId != null)
                    hashCode = hashCode * 59 + this.SubscriptionPlanId.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.VatCountryCode != null)
                    hashCode = hashCode * 59 + this.VatCountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int?) maximum
            if(this.Quantity > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 2147483647.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}

/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract]
    public partial class Field :  IEquatable<Field>
    {
        /// <summary>
        /// Defines FieldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 1,
            
            /// <summary>
            /// Enum TextArea for value: TextArea
            /// </summary>
            [EnumMember(Value = "TextArea")]
            TextArea = 2,
            
            /// <summary>
            /// Enum Integer for value: Integer
            /// </summary>
            [EnumMember(Value = "Integer")]
            Integer = 3,
            
            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 4,
            
            /// <summary>
            /// Enum Date for value: Date
            /// </summary>
            [EnumMember(Value = "Date")]
            Date = 5,
            
            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 6,
            
            /// <summary>
            /// Enum Time for value: Time
            /// </summary>
            [EnumMember(Value = "Time")]
            Time = 7,
            
            /// <summary>
            /// Enum Select for value: Select
            /// </summary>
            [EnumMember(Value = "Select")]
            Select = 8,
            
            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 9,
            
            /// <summary>
            /// Enum ActionButton for value: ActionButton
            /// </summary>
            [EnumMember(Value = "ActionButton")]
            ActionButton = 10
        }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="FieldType", EmitDefaultValue=false)]
        public FieldTypeEnum FieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Field() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="key">key (required).</param>
        /// <param name="tooltip">tooltip.</param>
        /// <param name="position">position (required).</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="validValues">validValues.</param>
        /// <param name="validationRegex">validationRegex.</param>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="isFlipdishRestricted">isFlipdishRestricted.</param>
        public Field(string name = default(string), string description = default(string), string key = default(string), string tooltip = default(string), int? position = default(int?), string defaultValue = default(string), List<ValidValue> validValues = default(List<ValidValue>), string validationRegex = default(string), FieldTypeEnum fieldType = default(FieldTypeEnum), bool? isFlipdishRestricted = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Field and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Field and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for Field and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for Field and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "fieldType" is required (not null)
            if (fieldType == null)
            {
                throw new InvalidDataException("fieldType is a required property for Field and cannot be null");
            }
            else
            {
                this.FieldType = fieldType;
            }
            this.Tooltip = tooltip;
            this.DefaultValue = defaultValue;
            this.ValidValues = validValues;
            this.ValidationRegex = validationRegex;
            this.IsFlipdishRestricted = isFlipdishRestricted;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="Tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="Position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="DefaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets ValidValues
        /// </summary>
        [DataMember(Name="ValidValues", EmitDefaultValue=false)]
        public List<ValidValue> ValidValues { get; set; }

        /// <summary>
        /// Gets or Sets ValidationRegex
        /// </summary>
        [DataMember(Name="ValidationRegex", EmitDefaultValue=false)]
        public string ValidationRegex { get; set; }


        /// <summary>
        /// Gets or Sets IsFlipdishRestricted
        /// </summary>
        [DataMember(Name="IsFlipdishRestricted", EmitDefaultValue=false)]
        public bool? IsFlipdishRestricted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  ValidValues: ").Append(ValidValues).Append("\n");
            sb.Append("  ValidationRegex: ").Append(ValidationRegex).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  IsFlipdishRestricted: ").Append(IsFlipdishRestricted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Field);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="input">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.ValidValues == input.ValidValues ||
                    this.ValidValues != null &&
                    this.ValidValues.SequenceEqual(input.ValidValues)
                ) && 
                (
                    this.ValidationRegex == input.ValidationRegex ||
                    (this.ValidationRegex != null &&
                    this.ValidationRegex.Equals(input.ValidationRegex))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.IsFlipdishRestricted == input.IsFlipdishRestricted ||
                    (this.IsFlipdishRestricted != null &&
                    this.IsFlipdishRestricted.Equals(input.IsFlipdishRestricted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.ValidValues != null)
                    hashCode = hashCode * 59 + this.ValidValues.GetHashCode();
                if (this.ValidationRegex != null)
                    hashCode = hashCode * 59 + this.ValidationRegex.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.IsFlipdishRestricted != null)
                    hashCode = hashCode * 59 + this.IsFlipdishRestricted.GetHashCode();
                return hashCode;
            }
        }
    }

}

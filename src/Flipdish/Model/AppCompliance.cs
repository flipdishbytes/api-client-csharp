/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Application compliance model
    /// </summary>
    [DataContract]
    public partial class AppCompliance :  IEquatable<AppCompliance>
    {
        /// <summary>
        /// Type of compliance.  This controls if the Flipdish websites and apps display cookie consent banners and adjust cookies to be inline with various regulations.   You should set this correctly based on your region.
        /// </summary>
        /// <value>Type of compliance.  This controls if the Flipdish websites and apps display cookie consent banners and adjust cookies to be inline with various regulations.   You should set this correctly based on your region.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceTypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum GdprCompliance for value: GdprCompliance
            /// </summary>
            [EnumMember(Value = "GdprCompliance")]
            GdprCompliance = 2
        }

        /// <summary>
        /// Type of compliance.  This controls if the Flipdish websites and apps display cookie consent banners and adjust cookies to be inline with various regulations.   You should set this correctly based on your region.
        /// </summary>
        /// <value>Type of compliance.  This controls if the Flipdish websites and apps display cookie consent banners and adjust cookies to be inline with various regulations.   You should set this correctly based on your region.</value>
        [DataMember(Name="ComplianceType", EmitDefaultValue=false)]
        public ComplianceTypeEnum? ComplianceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCompliance" /> class.
        /// </summary>
        /// <param name="appId">App ID.</param>
        /// <param name="complianceType">Type of compliance.  This controls if the Flipdish websites and apps display cookie consent banners and adjust cookies to be inline with various regulations.   You should set this correctly based on your region..</param>
        public AppCompliance(string appId = default(string), ComplianceTypeEnum? complianceType = default(ComplianceTypeEnum?))
        {
            this.AppId = appId;
            this.ComplianceType = complianceType;
        }
        
        /// <summary>
        /// App ID
        /// </summary>
        /// <value>App ID</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppCompliance {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  ComplianceType: ").Append(ComplianceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppCompliance);
        }

        /// <summary>
        /// Returns true if AppCompliance instances are equal
        /// </summary>
        /// <param name="input">Instance of AppCompliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppCompliance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.ComplianceType == input.ComplianceType ||
                    (this.ComplianceType != null &&
                    this.ComplianceType.Equals(input.ComplianceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.ComplianceType != null)
                    hashCode = hashCode * 59 + this.ComplianceType.GetHashCode();
                return hashCode;
            }
        }
    }

}

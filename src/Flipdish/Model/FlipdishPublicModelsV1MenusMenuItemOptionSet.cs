/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// FlipdishPublicModelsV1MenusMenuItemOptionSet
    /// </summary>
    [DataContract]
    public partial class FlipdishPublicModelsV1MenusMenuItemOptionSet :  IEquatable<FlipdishPublicModelsV1MenusMenuItemOptionSet>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CellLayoutType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CellLayoutTypeEnum
        {
            
            /// <summary>
            /// Enum Small for "Small"
            /// </summary>
            [EnumMember(Value = "Small")]
            Small,
            
            /// <summary>
            /// Enum Medium for "Medium"
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium,
            
            /// <summary>
            /// Enum Large for "Large"
            /// </summary>
            [EnumMember(Value = "Large")]
            Large
        }

        /// <summary>
        /// Gets or Sets CellLayoutType
        /// </summary>
        [DataMember(Name="cellLayoutType", EmitDefaultValue=false)]
        public CellLayoutTypeEnum? CellLayoutType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlipdishPublicModelsV1MenusMenuItemOptionSet" /> class.
        /// </summary>
        /// <param name="MenuItemOptionSetId">MenuItemOptionSetId.</param>
        /// <param name="ImageUrl">ImageUrl.</param>
        /// <param name="MenuItemOptionSetItems">MenuItemOptionSetItems.</param>
        /// <param name="Name">Name.</param>
        /// <param name="IsMasterOptionSet">IsMasterOptionSet.</param>
        /// <param name="DisplayOrder">DisplayOrder.</param>
        /// <param name="MinSelectCount">MinSelectCount.</param>
        /// <param name="MaxSelectCount">MaxSelectCount.</param>
        /// <param name="CellLayoutType">CellLayoutType.</param>
        public FlipdishPublicModelsV1MenusMenuItemOptionSet(int? MenuItemOptionSetId = default(int?), string ImageUrl = default(string), List<FlipdishPublicModelsV1MenusMenuItemOptionSetItem> MenuItemOptionSetItems = default(List<FlipdishPublicModelsV1MenusMenuItemOptionSetItem>), string Name = default(string), bool? IsMasterOptionSet = default(bool?), int? DisplayOrder = default(int?), int? MinSelectCount = default(int?), int? MaxSelectCount = default(int?), CellLayoutTypeEnum? CellLayoutType = default(CellLayoutTypeEnum?))
        {
            this.MenuItemOptionSetId = MenuItemOptionSetId;
            this.ImageUrl = ImageUrl;
            this.MenuItemOptionSetItems = MenuItemOptionSetItems;
            this.Name = Name;
            this.IsMasterOptionSet = IsMasterOptionSet;
            this.DisplayOrder = DisplayOrder;
            this.MinSelectCount = MinSelectCount;
            this.MaxSelectCount = MaxSelectCount;
            this.CellLayoutType = CellLayoutType;
        }
        
        /// <summary>
        /// Gets or Sets MenuItemOptionSetId
        /// </summary>
        [DataMember(Name="menuItemOptionSetId", EmitDefaultValue=false)]
        public int? MenuItemOptionSetId { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets MenuItemOptionSetItems
        /// </summary>
        [DataMember(Name="menuItemOptionSetItems", EmitDefaultValue=false)]
        public List<FlipdishPublicModelsV1MenusMenuItemOptionSetItem> MenuItemOptionSetItems { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsMasterOptionSet
        /// </summary>
        [DataMember(Name="isMasterOptionSet", EmitDefaultValue=false)]
        public bool? IsMasterOptionSet { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets MinSelectCount
        /// </summary>
        [DataMember(Name="minSelectCount", EmitDefaultValue=false)]
        public int? MinSelectCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxSelectCount
        /// </summary>
        [DataMember(Name="maxSelectCount", EmitDefaultValue=false)]
        public int? MaxSelectCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlipdishPublicModelsV1MenusMenuItemOptionSet {\n");
            sb.Append("  MenuItemOptionSetId: ").Append(MenuItemOptionSetId).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  MenuItemOptionSetItems: ").Append(MenuItemOptionSetItems).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsMasterOptionSet: ").Append(IsMasterOptionSet).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  MinSelectCount: ").Append(MinSelectCount).Append("\n");
            sb.Append("  MaxSelectCount: ").Append(MaxSelectCount).Append("\n");
            sb.Append("  CellLayoutType: ").Append(CellLayoutType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlipdishPublicModelsV1MenusMenuItemOptionSet);
        }

        /// <summary>
        /// Returns true if FlipdishPublicModelsV1MenusMenuItemOptionSet instances are equal
        /// </summary>
        /// <param name="other">Instance of FlipdishPublicModelsV1MenusMenuItemOptionSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlipdishPublicModelsV1MenusMenuItemOptionSet other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MenuItemOptionSetId == other.MenuItemOptionSetId ||
                    this.MenuItemOptionSetId != null &&
                    this.MenuItemOptionSetId.Equals(other.MenuItemOptionSetId)
                ) && 
                (
                    this.ImageUrl == other.ImageUrl ||
                    this.ImageUrl != null &&
                    this.ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    this.MenuItemOptionSetItems == other.MenuItemOptionSetItems ||
                    this.MenuItemOptionSetItems != null &&
                    this.MenuItemOptionSetItems.SequenceEqual(other.MenuItemOptionSetItems)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.IsMasterOptionSet == other.IsMasterOptionSet ||
                    this.IsMasterOptionSet != null &&
                    this.IsMasterOptionSet.Equals(other.IsMasterOptionSet)
                ) && 
                (
                    this.DisplayOrder == other.DisplayOrder ||
                    this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(other.DisplayOrder)
                ) && 
                (
                    this.MinSelectCount == other.MinSelectCount ||
                    this.MinSelectCount != null &&
                    this.MinSelectCount.Equals(other.MinSelectCount)
                ) && 
                (
                    this.MaxSelectCount == other.MaxSelectCount ||
                    this.MaxSelectCount != null &&
                    this.MaxSelectCount.Equals(other.MaxSelectCount)
                ) && 
                (
                    this.CellLayoutType == other.CellLayoutType ||
                    this.CellLayoutType != null &&
                    this.CellLayoutType.Equals(other.CellLayoutType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MenuItemOptionSetId != null)
                    hash = hash * 59 + this.MenuItemOptionSetId.GetHashCode();
                if (this.ImageUrl != null)
                    hash = hash * 59 + this.ImageUrl.GetHashCode();
                if (this.MenuItemOptionSetItems != null)
                    hash = hash * 59 + this.MenuItemOptionSetItems.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.IsMasterOptionSet != null)
                    hash = hash * 59 + this.IsMasterOptionSet.GetHashCode();
                if (this.DisplayOrder != null)
                    hash = hash * 59 + this.DisplayOrder.GetHashCode();
                if (this.MinSelectCount != null)
                    hash = hash * 59 + this.MinSelectCount.GetHashCode();
                if (this.MaxSelectCount != null)
                    hash = hash * 59 + this.MaxSelectCount.GetHashCode();
                if (this.CellLayoutType != null)
                    hash = hash * 59 + this.CellLayoutType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

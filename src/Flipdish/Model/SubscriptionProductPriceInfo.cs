/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// Price info
    /// </summary>
    [DataContract]
    public partial class SubscriptionProductPriceInfo :  IEquatable<SubscriptionProductPriceInfo>
    {
        /// <summary>
        /// Scope (eg. per store or per whitelabel)
        /// </summary>
        /// <value>Scope (eg. per store or per whitelabel)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum Store for value: Store
            /// </summary>
            [EnumMember(Value = "Store")]
            Store = 1,
            
            /// <summary>
            /// Enum Whitelabel for value: Whitelabel
            /// </summary>
            [EnumMember(Value = "Whitelabel")]
            Whitelabel = 2
        }

        /// <summary>
        /// Scope (eg. per store or per whitelabel)
        /// </summary>
        /// <value>Scope (eg. per store or per whitelabel)</value>
        [DataMember(Name="Scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionProductPriceInfo" /> class.
        /// </summary>
        /// <param name="amount">Price amount.</param>
        /// <param name="currency">Currency code.</param>
        /// <param name="scope">Scope (eg. per store or per whitelabel).</param>
        public SubscriptionProductPriceInfo(double? amount = default(double?), string currency = default(string), ScopeEnum? scope = default(ScopeEnum?))
        {
            this.Amount = amount;
            this.Currency = currency;
            this.Scope = scope;
        }
        
        /// <summary>
        /// Price amount
        /// </summary>
        /// <value>Price amount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Currency code
        /// </summary>
        /// <value>Currency code</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public string Currency { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionProductPriceInfo {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionProductPriceInfo);
        }

        /// <summary>
        /// Returns true if SubscriptionProductPriceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionProductPriceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionProductPriceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                return hashCode;
            }
        }
    }

}

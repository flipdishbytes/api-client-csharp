/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// White label configuration details
    /// </summary>
    [DataContract]
    public partial class WhiteLabelConfig :  IEquatable<WhiteLabelConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhiteLabelConfig" /> class.
        /// </summary>
        /// <param name="whiteLabelId">White label identifier.</param>
        /// <param name="whiteLabelName">White label name.</param>
        /// <param name="countryId">Country identifier.</param>
        /// <param name="appNameId">App id.</param>
        /// <param name="website">Website URL.</param>
        /// <param name="panaceaVanityUrl">Panacea vanity URL.</param>
        public WhiteLabelConfig(int? whiteLabelId = default(int?), string whiteLabelName = default(string), string countryId = default(string), string appNameId = default(string), string website = default(string), string panaceaVanityUrl = default(string))
        {
            this.WhiteLabelId = whiteLabelId;
            this.WhiteLabelName = whiteLabelName;
            this.CountryId = countryId;
            this.AppNameId = appNameId;
            this.Website = website;
            this.PanaceaVanityUrl = panaceaVanityUrl;
        }
        
        /// <summary>
        /// White label identifier
        /// </summary>
        /// <value>White label identifier</value>
        [DataMember(Name="WhiteLabelId", EmitDefaultValue=false)]
        public int? WhiteLabelId { get; set; }

        /// <summary>
        /// White label name
        /// </summary>
        /// <value>White label name</value>
        [DataMember(Name="WhiteLabelName", EmitDefaultValue=false)]
        public string WhiteLabelName { get; set; }

        /// <summary>
        /// Country identifier
        /// </summary>
        /// <value>Country identifier</value>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// App id
        /// </summary>
        /// <value>App id</value>
        [DataMember(Name="AppNameId", EmitDefaultValue=false)]
        public string AppNameId { get; set; }

        /// <summary>
        /// Website URL
        /// </summary>
        /// <value>Website URL</value>
        [DataMember(Name="Website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Panacea vanity URL
        /// </summary>
        /// <value>Panacea vanity URL</value>
        [DataMember(Name="PanaceaVanityUrl", EmitDefaultValue=false)]
        public string PanaceaVanityUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhiteLabelConfig {\n");
            sb.Append("  WhiteLabelId: ").Append(WhiteLabelId).Append("\n");
            sb.Append("  WhiteLabelName: ").Append(WhiteLabelName).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  AppNameId: ").Append(AppNameId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  PanaceaVanityUrl: ").Append(PanaceaVanityUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhiteLabelConfig);
        }

        /// <summary>
        /// Returns true if WhiteLabelConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of WhiteLabelConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhiteLabelConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WhiteLabelId == input.WhiteLabelId ||
                    (this.WhiteLabelId != null &&
                    this.WhiteLabelId.Equals(input.WhiteLabelId))
                ) && 
                (
                    this.WhiteLabelName == input.WhiteLabelName ||
                    (this.WhiteLabelName != null &&
                    this.WhiteLabelName.Equals(input.WhiteLabelName))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.AppNameId == input.AppNameId ||
                    (this.AppNameId != null &&
                    this.AppNameId.Equals(input.AppNameId))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.PanaceaVanityUrl == input.PanaceaVanityUrl ||
                    (this.PanaceaVanityUrl != null &&
                    this.PanaceaVanityUrl.Equals(input.PanaceaVanityUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhiteLabelId != null)
                    hashCode = hashCode * 59 + this.WhiteLabelId.GetHashCode();
                if (this.WhiteLabelName != null)
                    hashCode = hashCode * 59 + this.WhiteLabelName.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.AppNameId != null)
                    hashCode = hashCode * 59 + this.AppNameId.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.PanaceaVanityUrl != null)
                    hashCode = hashCode * 59 + this.PanaceaVanityUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}

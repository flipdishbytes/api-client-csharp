/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// App
    /// </summary>
    [DataContract]
    public partial class App :  IEquatable<App>, IValidatableObject
    {
        /// <summary>
        /// App access level for the logged in user
        /// </summary>
        /// <value>App access level for the logged in user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppAccessLevelEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Owner for value: Owner
            /// </summary>
            [EnumMember(Value = "Owner")]
            Owner = 2,
            
            /// <summary>
            /// Enum StoreOwner for value: StoreOwner
            /// </summary>
            [EnumMember(Value = "StoreOwner")]
            StoreOwner = 3,
            
            /// <summary>
            /// Enum ManagedOwner for value: ManagedOwner
            /// </summary>
            [EnumMember(Value = "ManagedOwner")]
            ManagedOwner = 4,
            
            /// <summary>
            /// Enum StoreManager for value: StoreManager
            /// </summary>
            [EnumMember(Value = "StoreManager")]
            StoreManager = 5,
            
            /// <summary>
            /// Enum StoreStaff for value: StoreStaff
            /// </summary>
            [EnumMember(Value = "StoreStaff")]
            StoreStaff = 6,
            
            /// <summary>
            /// Enum StoreReadOnlyAccess for value: StoreReadOnlyAccess
            /// </summary>
            [EnumMember(Value = "StoreReadOnlyAccess")]
            StoreReadOnlyAccess = 7,
            
            /// <summary>
            /// Enum FinanceManger for value: FinanceManger
            /// </summary>
            [EnumMember(Value = "FinanceManger")]
            FinanceManger = 8
        }

        /// <summary>
        /// App access level for the logged in user
        /// </summary>
        /// <value>App access level for the logged in user</value>
        [DataMember(Name="AppAccessLevel", EmitDefaultValue=false)]
        public AppAccessLevelEnum? AppAccessLevel { get; set; }
        /// <summary>
        /// Defines AppResourceSet
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppResourceSetEnum
        {
            
            /// <summary>
            /// Enum ViewApp for value: ViewApp
            /// </summary>
            [EnumMember(Value = "ViewApp")]
            ViewApp = 1,
            
            /// <summary>
            /// Enum CreateApp for value: CreateApp
            /// </summary>
            [EnumMember(Value = "CreateApp")]
            CreateApp = 2,
            
            /// <summary>
            /// Enum UpdateApp for value: UpdateApp
            /// </summary>
            [EnumMember(Value = "UpdateApp")]
            UpdateApp = 3,
            
            /// <summary>
            /// Enum EditAppAssets for value: EditAppAssets
            /// </summary>
            [EnumMember(Value = "EditAppAssets")]
            EditAppAssets = 4,
            
            /// <summary>
            /// Enum ViewTeammates for value: ViewTeammates
            /// </summary>
            [EnumMember(Value = "ViewTeammates")]
            ViewTeammates = 5,
            
            /// <summary>
            /// Enum EditTeammates for value: EditTeammates
            /// </summary>
            [EnumMember(Value = "EditTeammates")]
            EditTeammates = 6,
            
            /// <summary>
            /// Enum CreateTeammateOwner for value: CreateTeammateOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateOwner")]
            CreateTeammateOwner = 7,
            
            /// <summary>
            /// Enum CreateTeammateManagedOwner for value: CreateTeammateManagedOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateManagedOwner")]
            CreateTeammateManagedOwner = 8,
            
            /// <summary>
            /// Enum CreateTeammateStoreOwner for value: CreateTeammateStoreOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreOwner")]
            CreateTeammateStoreOwner = 9,
            
            /// <summary>
            /// Enum CreateTeammateStoreManager for value: CreateTeammateStoreManager
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreManager")]
            CreateTeammateStoreManager = 10,
            
            /// <summary>
            /// Enum CreateTeammateStoreStaff for value: CreateTeammateStoreStaff
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreStaff")]
            CreateTeammateStoreStaff = 11,
            
            /// <summary>
            /// Enum CreateTeammateStoreReadAccess for value: CreateTeammateStoreReadAccess
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreReadAccess")]
            CreateTeammateStoreReadAccess = 12,
            
            /// <summary>
            /// Enum CreateTeammateFinanceManager for value: CreateTeammateFinanceManager
            /// </summary>
            [EnumMember(Value = "CreateTeammateFinanceManager")]
            CreateTeammateFinanceManager = 13,
            
            /// <summary>
            /// Enum ViewApmConfigurations for value: ViewApmConfigurations
            /// </summary>
            [EnumMember(Value = "ViewApmConfigurations")]
            ViewApmConfigurations = 14,
            
            /// <summary>
            /// Enum EditApmConfigurations for value: EditApmConfigurations
            /// </summary>
            [EnumMember(Value = "EditApmConfigurations")]
            EditApmConfigurations = 15,
            
            /// <summary>
            /// Enum ViewCampaignsConfigurations for value: ViewCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "ViewCampaignsConfigurations")]
            ViewCampaignsConfigurations = 16,
            
            /// <summary>
            /// Enum CreateCampaignsConfigurations for value: CreateCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "CreateCampaignsConfigurations")]
            CreateCampaignsConfigurations = 17,
            
            /// <summary>
            /// Enum UpdateCampaignsConfigurations for value: UpdateCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "UpdateCampaignsConfigurations")]
            UpdateCampaignsConfigurations = 18,
            
            /// <summary>
            /// Enum ViewDevelopersSettings for value: ViewDevelopersSettings
            /// </summary>
            [EnumMember(Value = "ViewDevelopersSettings")]
            ViewDevelopersSettings = 19,
            
            /// <summary>
            /// Enum EditDevelopersSettings for value: EditDevelopersSettings
            /// </summary>
            [EnumMember(Value = "EditDevelopersSettings")]
            EditDevelopersSettings = 20,
            
            /// <summary>
            /// Enum ViewOrders for value: ViewOrders
            /// </summary>
            [EnumMember(Value = "ViewOrders")]
            ViewOrders = 21,
            
            /// <summary>
            /// Enum UpdateOrdersAccept for value: UpdateOrdersAccept
            /// </summary>
            [EnumMember(Value = "UpdateOrdersAccept")]
            UpdateOrdersAccept = 22,
            
            /// <summary>
            /// Enum UpdateOrdersReject for value: UpdateOrdersReject
            /// </summary>
            [EnumMember(Value = "UpdateOrdersReject")]
            UpdateOrdersReject = 23,
            
            /// <summary>
            /// Enum UpdateOrdersRefund for value: UpdateOrdersRefund
            /// </summary>
            [EnumMember(Value = "UpdateOrdersRefund")]
            UpdateOrdersRefund = 24,
            
            /// <summary>
            /// Enum UpdateOrdersDispatch for value: UpdateOrdersDispatch
            /// </summary>
            [EnumMember(Value = "UpdateOrdersDispatch")]
            UpdateOrdersDispatch = 25,
            
            /// <summary>
            /// Enum ViewStores for value: ViewStores
            /// </summary>
            [EnumMember(Value = "ViewStores")]
            ViewStores = 26,
            
            /// <summary>
            /// Enum EditStores for value: EditStores
            /// </summary>
            [EnumMember(Value = "EditStores")]
            EditStores = 27,
            
            /// <summary>
            /// Enum ViewStoresOpeningHours for value: ViewStoresOpeningHours
            /// </summary>
            [EnumMember(Value = "ViewStoresOpeningHours")]
            ViewStoresOpeningHours = 28,
            
            /// <summary>
            /// Enum UpdateStoresOpenForCollectionOrDelivery for value: UpdateStoresOpenForCollectionOrDelivery
            /// </summary>
            [EnumMember(Value = "UpdateStoresOpenForCollectionOrDelivery")]
            UpdateStoresOpenForCollectionOrDelivery = 29,
            
            /// <summary>
            /// Enum UpdateStoresOpeningHours for value: UpdateStoresOpeningHours
            /// </summary>
            [EnumMember(Value = "UpdateStoresOpeningHours")]
            UpdateStoresOpeningHours = 30,
            
            /// <summary>
            /// Enum ViewStoresOpeningHoursOverride for value: ViewStoresOpeningHoursOverride
            /// </summary>
            [EnumMember(Value = "ViewStoresOpeningHoursOverride")]
            ViewStoresOpeningHoursOverride = 31,
            
            /// <summary>
            /// Enum EditStoresOpeningHoursOverride for value: EditStoresOpeningHoursOverride
            /// </summary>
            [EnumMember(Value = "EditStoresOpeningHoursOverride")]
            EditStoresOpeningHoursOverride = 32,
            
            /// <summary>
            /// Enum EditStoresOpeningHoursOverrideTemporary for value: EditStoresOpeningHoursOverrideTemporary
            /// </summary>
            [EnumMember(Value = "EditStoresOpeningHoursOverrideTemporary")]
            EditStoresOpeningHoursOverrideTemporary = 33,
            
            /// <summary>
            /// Enum UpdateStoresName for value: UpdateStoresName
            /// </summary>
            [EnumMember(Value = "UpdateStoresName")]
            UpdateStoresName = 34,
            
            /// <summary>
            /// Enum EditStoreKioskSettings for value: EditStoreKioskSettings
            /// </summary>
            [EnumMember(Value = "EditStoreKioskSettings")]
            EditStoreKioskSettings = 35,
            
            /// <summary>
            /// Enum EditStoreOrderCapacity for value: EditStoreOrderCapacity
            /// </summary>
            [EnumMember(Value = "EditStoreOrderCapacity")]
            EditStoreOrderCapacity = 36,
            
            /// <summary>
            /// Enum UpdatePrinterTerminalsAssign for value: UpdatePrinterTerminalsAssign
            /// </summary>
            [EnumMember(Value = "UpdatePrinterTerminalsAssign")]
            UpdatePrinterTerminalsAssign = 37,
            
            /// <summary>
            /// Enum UpdatePrinterTerminalsToggle for value: UpdatePrinterTerminalsToggle
            /// </summary>
            [EnumMember(Value = "UpdatePrinterTerminalsToggle")]
            UpdatePrinterTerminalsToggle = 38,
            
            /// <summary>
            /// Enum EditStoreNotifications for value: EditStoreNotifications
            /// </summary>
            [EnumMember(Value = "EditStoreNotifications")]
            EditStoreNotifications = 39,
            
            /// <summary>
            /// Enum ViewStoreGroups for value: ViewStoreGroups
            /// </summary>
            [EnumMember(Value = "ViewStoreGroups")]
            ViewStoreGroups = 40,
            
            /// <summary>
            /// Enum CreateStoreGroups for value: CreateStoreGroups
            /// </summary>
            [EnumMember(Value = "CreateStoreGroups")]
            CreateStoreGroups = 41,
            
            /// <summary>
            /// Enum UpdateStoreGroups for value: UpdateStoreGroups
            /// </summary>
            [EnumMember(Value = "UpdateStoreGroups")]
            UpdateStoreGroups = 42,
            
            /// <summary>
            /// Enum DeleteStoreGroups for value: DeleteStoreGroups
            /// </summary>
            [EnumMember(Value = "DeleteStoreGroups")]
            DeleteStoreGroups = 43,
            
            /// <summary>
            /// Enum ViewDeliveryZones for value: ViewDeliveryZones
            /// </summary>
            [EnumMember(Value = "ViewDeliveryZones")]
            ViewDeliveryZones = 44,
            
            /// <summary>
            /// Enum CreateDeliveryZones for value: CreateDeliveryZones
            /// </summary>
            [EnumMember(Value = "CreateDeliveryZones")]
            CreateDeliveryZones = 45,
            
            /// <summary>
            /// Enum UpdateDeliveryZones for value: UpdateDeliveryZones
            /// </summary>
            [EnumMember(Value = "UpdateDeliveryZones")]
            UpdateDeliveryZones = 46,
            
            /// <summary>
            /// Enum DeleteDeliveryZones for value: DeleteDeliveryZones
            /// </summary>
            [EnumMember(Value = "DeleteDeliveryZones")]
            DeleteDeliveryZones = 47,
            
            /// <summary>
            /// Enum ViewMenu for value: ViewMenu
            /// </summary>
            [EnumMember(Value = "ViewMenu")]
            ViewMenu = 48,
            
            /// <summary>
            /// Enum CreateMenu for value: CreateMenu
            /// </summary>
            [EnumMember(Value = "CreateMenu")]
            CreateMenu = 49,
            
            /// <summary>
            /// Enum UpdateMenu for value: UpdateMenu
            /// </summary>
            [EnumMember(Value = "UpdateMenu")]
            UpdateMenu = 50,
            
            /// <summary>
            /// Enum DeleteMenu for value: DeleteMenu
            /// </summary>
            [EnumMember(Value = "DeleteMenu")]
            DeleteMenu = 51,
            
            /// <summary>
            /// Enum UpdateMenuLock for value: UpdateMenuLock
            /// </summary>
            [EnumMember(Value = "UpdateMenuLock")]
            UpdateMenuLock = 52,
            
            /// <summary>
            /// Enum UpdateMenuItemsHideTemporarily for value: UpdateMenuItemsHideTemporarily
            /// </summary>
            [EnumMember(Value = "UpdateMenuItemsHideTemporarily")]
            UpdateMenuItemsHideTemporarily = 53,
            
            /// <summary>
            /// Enum EditMenuImage for value: EditMenuImage
            /// </summary>
            [EnumMember(Value = "EditMenuImage")]
            EditMenuImage = 54,
            
            /// <summary>
            /// Enum ViewVouchers for value: ViewVouchers
            /// </summary>
            [EnumMember(Value = "ViewVouchers")]
            ViewVouchers = 55,
            
            /// <summary>
            /// Enum EditVouchers for value: EditVouchers
            /// </summary>
            [EnumMember(Value = "EditVouchers")]
            EditVouchers = 56,
            
            /// <summary>
            /// Enum UpdateVouchersExtendDisable for value: UpdateVouchersExtendDisable
            /// </summary>
            [EnumMember(Value = "UpdateVouchersExtendDisable")]
            UpdateVouchersExtendDisable = 57,
            
            /// <summary>
            /// Enum ViewWebsiteContent for value: ViewWebsiteContent
            /// </summary>
            [EnumMember(Value = "ViewWebsiteContent")]
            ViewWebsiteContent = 58,
            
            /// <summary>
            /// Enum EditWebsiteContent for value: EditWebsiteContent
            /// </summary>
            [EnumMember(Value = "EditWebsiteContent")]
            EditWebsiteContent = 59,
            
            /// <summary>
            /// Enum ViewWebsiteDnsVerified for value: ViewWebsiteDnsVerified
            /// </summary>
            [EnumMember(Value = "ViewWebsiteDnsVerified")]
            ViewWebsiteDnsVerified = 60,
            
            /// <summary>
            /// Enum ViewWebsiteCertificateCreated for value: ViewWebsiteCertificateCreated
            /// </summary>
            [EnumMember(Value = "ViewWebsiteCertificateCreated")]
            ViewWebsiteCertificateCreated = 61,
            
            /// <summary>
            /// Enum ViewWebsiteCertificateRenewed for value: ViewWebsiteCertificateRenewed
            /// </summary>
            [EnumMember(Value = "ViewWebsiteCertificateRenewed")]
            ViewWebsiteCertificateRenewed = 62,
            
            /// <summary>
            /// Enum ViewBankAccounts for value: ViewBankAccounts
            /// </summary>
            [EnumMember(Value = "ViewBankAccounts")]
            ViewBankAccounts = 63,
            
            /// <summary>
            /// Enum CreateBankAccounts for value: CreateBankAccounts
            /// </summary>
            [EnumMember(Value = "CreateBankAccounts")]
            CreateBankAccounts = 64,
            
            /// <summary>
            /// Enum UpdateBankAccounts for value: UpdateBankAccounts
            /// </summary>
            [EnumMember(Value = "UpdateBankAccounts")]
            UpdateBankAccounts = 65,
            
            /// <summary>
            /// Enum UpdateBankAccountsAssign for value: UpdateBankAccountsAssign
            /// </summary>
            [EnumMember(Value = "UpdateBankAccountsAssign")]
            UpdateBankAccountsAssign = 66,
            
            /// <summary>
            /// Enum ViewAssignedBankAccount for value: ViewAssignedBankAccount
            /// </summary>
            [EnumMember(Value = "ViewAssignedBankAccount")]
            ViewAssignedBankAccount = 67,
            
            /// <summary>
            /// Enum VerifyBankAccounts for value: VerifyBankAccounts
            /// </summary>
            [EnumMember(Value = "VerifyBankAccounts")]
            VerifyBankAccounts = 68,
            
            /// <summary>
            /// Enum ViewFeesConfigurations for value: ViewFeesConfigurations
            /// </summary>
            [EnumMember(Value = "ViewFeesConfigurations")]
            ViewFeesConfigurations = 69,
            
            /// <summary>
            /// Enum EditFeesConfigurations for value: EditFeesConfigurations
            /// </summary>
            [EnumMember(Value = "EditFeesConfigurations")]
            EditFeesConfigurations = 70,
            
            /// <summary>
            /// Enum ViewHydraConfig for value: ViewHydraConfig
            /// </summary>
            [EnumMember(Value = "ViewHydraConfig")]
            ViewHydraConfig = 71,
            
            /// <summary>
            /// Enum UpdateHydraConfigManage for value: UpdateHydraConfigManage
            /// </summary>
            [EnumMember(Value = "UpdateHydraConfigManage")]
            UpdateHydraConfigManage = 72,
            
            /// <summary>
            /// Enum ViewAppStatistics for value: ViewAppStatistics
            /// </summary>
            [EnumMember(Value = "ViewAppStatistics")]
            ViewAppStatistics = 73,
            
            /// <summary>
            /// Enum ViewApmStatistics for value: ViewApmStatistics
            /// </summary>
            [EnumMember(Value = "ViewApmStatistics")]
            ViewApmStatistics = 74,
            
            /// <summary>
            /// Enum ViewCampaignsStatistics for value: ViewCampaignsStatistics
            /// </summary>
            [EnumMember(Value = "ViewCampaignsStatistics")]
            ViewCampaignsStatistics = 75,
            
            /// <summary>
            /// Enum ViewCustomerStatistics for value: ViewCustomerStatistics
            /// </summary>
            [EnumMember(Value = "ViewCustomerStatistics")]
            ViewCustomerStatistics = 76,
            
            /// <summary>
            /// Enum ViewLiveStatistics for value: ViewLiveStatistics
            /// </summary>
            [EnumMember(Value = "ViewLiveStatistics")]
            ViewLiveStatistics = 77,
            
            /// <summary>
            /// Enum ViewOrderStatistics for value: ViewOrderStatistics
            /// </summary>
            [EnumMember(Value = "ViewOrderStatistics")]
            ViewOrderStatistics = 78,
            
            /// <summary>
            /// Enum ViewSalesStatistics for value: ViewSalesStatistics
            /// </summary>
            [EnumMember(Value = "ViewSalesStatistics")]
            ViewSalesStatistics = 79,
            
            /// <summary>
            /// Enum ViewSalesEndOfDayStatistics for value: ViewSalesEndOfDayStatistics
            /// </summary>
            [EnumMember(Value = "ViewSalesEndOfDayStatistics")]
            ViewSalesEndOfDayStatistics = 80,
            
            /// <summary>
            /// Enum ViewVouchersStatistics for value: ViewVouchersStatistics
            /// </summary>
            [EnumMember(Value = "ViewVouchersStatistics")]
            ViewVouchersStatistics = 81,
            
            /// <summary>
            /// Enum ViewApmAuditLogs for value: ViewApmAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewApmAuditLogs")]
            ViewApmAuditLogs = 82,
            
            /// <summary>
            /// Enum ViewStoreAuditLogs for value: ViewStoreAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewStoreAuditLogs")]
            ViewStoreAuditLogs = 83,
            
            /// <summary>
            /// Enum ViewMenuAuditLogs for value: ViewMenuAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewMenuAuditLogs")]
            ViewMenuAuditLogs = 84,
            
            /// <summary>
            /// Enum ViewBankAccountAuditLogs for value: ViewBankAccountAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewBankAccountAuditLogs")]
            ViewBankAccountAuditLogs = 85,
            
            /// <summary>
            /// Enum ViewFeeConfigurationsAuditLogs for value: ViewFeeConfigurationsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewFeeConfigurationsAuditLogs")]
            ViewFeeConfigurationsAuditLogs = 86,
            
            /// <summary>
            /// Enum ViewOrdersAuditLogs for value: ViewOrdersAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewOrdersAuditLogs")]
            ViewOrdersAuditLogs = 87,
            
            /// <summary>
            /// Enum ViewVouchersAuditLogs for value: ViewVouchersAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewVouchersAuditLogs")]
            ViewVouchersAuditLogs = 88,
            
            /// <summary>
            /// Enum ViewUserEventsAuditLogs for value: ViewUserEventsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewUserEventsAuditLogs")]
            ViewUserEventsAuditLogs = 89,
            
            /// <summary>
            /// Enum ViewCampaignsAuditLogs for value: ViewCampaignsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewCampaignsAuditLogs")]
            ViewCampaignsAuditLogs = 90,
            
            /// <summary>
            /// Enum ViewTeammatesAuditLogs for value: ViewTeammatesAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewTeammatesAuditLogs")]
            ViewTeammatesAuditLogs = 91,
            
            /// <summary>
            /// Enum ViewAppAuditLogs for value: ViewAppAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewAppAuditLogs")]
            ViewAppAuditLogs = 92,
            
            /// <summary>
            /// Enum ViewCustomerAuditLogs for value: ViewCustomerAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewCustomerAuditLogs")]
            ViewCustomerAuditLogs = 93,
            
            /// <summary>
            /// Enum ViewPrinterAuditLogs for value: ViewPrinterAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewPrinterAuditLogs")]
            ViewPrinterAuditLogs = 94,
            
            /// <summary>
            /// Enum ViewHydraAuditLogs for value: ViewHydraAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewHydraAuditLogs")]
            ViewHydraAuditLogs = 95,
            
            /// <summary>
            /// Enum ViewPushNotificationAuditLogs for value: ViewPushNotificationAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewPushNotificationAuditLogs")]
            ViewPushNotificationAuditLogs = 96,
            
            /// <summary>
            /// Enum SendPushNotificationToCustomer for value: SendPushNotificationToCustomer
            /// </summary>
            [EnumMember(Value = "SendPushNotificationToCustomer")]
            SendPushNotificationToCustomer = 97,
            
            /// <summary>
            /// Enum InviteDriverToApp for value: InviteDriverToApp
            /// </summary>
            [EnumMember(Value = "InviteDriverToApp")]
            InviteDriverToApp = 98,
            
            /// <summary>
            /// Enum GetDriverForApp for value: GetDriverForApp
            /// </summary>
            [EnumMember(Value = "GetDriverForApp")]
            GetDriverForApp = 99,
            
            /// <summary>
            /// Enum RemoveDriverFromApp for value: RemoveDriverFromApp
            /// </summary>
            [EnumMember(Value = "RemoveDriverFromApp")]
            RemoveDriverFromApp = 100,
            
            /// <summary>
            /// Enum AssignDriverToOrder for value: AssignDriverToOrder
            /// </summary>
            [EnumMember(Value = "AssignDriverToOrder")]
            AssignDriverToOrder = 101,
            
            /// <summary>
            /// Enum UnassignDriverFromOrder for value: UnassignDriverFromOrder
            /// </summary>
            [EnumMember(Value = "UnassignDriverFromOrder")]
            UnassignDriverFromOrder = 102,
            
            /// <summary>
            /// Enum UpdateOrdersDeliveryTrackingStatus for value: UpdateOrdersDeliveryTrackingStatus
            /// </summary>
            [EnumMember(Value = "UpdateOrdersDeliveryTrackingStatus")]
            UpdateOrdersDeliveryTrackingStatus = 103
        }


        /// <summary>
        /// Constitutes a list of available resources
        /// </summary>
        /// <value>Constitutes a list of available resources</value>
        [DataMember(Name="AppResourceSet", EmitDefaultValue=false)]
        public List<AppResourceSetEnum> AppResourceSet { get; set; }
        /// <summary>
        /// Application Category
        /// </summary>
        /// <value>Application Category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationCategoryEnum
        {
            
            /// <summary>
            /// Enum Restaurant for value: Restaurant
            /// </summary>
            [EnumMember(Value = "Restaurant")]
            Restaurant = 1,
            
            /// <summary>
            /// Enum Cafe for value: Cafe
            /// </summary>
            [EnumMember(Value = "Cafe")]
            Cafe = 2,
            
            /// <summary>
            /// Enum Convenience for value: Convenience
            /// </summary>
            [EnumMember(Value = "Convenience")]
            Convenience = 3
        }

        /// <summary>
        /// Application Category
        /// </summary>
        /// <value>Application Category</value>
        [DataMember(Name="ApplicationCategory", EmitDefaultValue=false)]
        public ApplicationCategoryEnum? ApplicationCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        /// <param name="appId">App Identifier.</param>
        /// <param name="hasIosApp">Has iOS app in store.</param>
        /// <param name="hasAndroidApp">Has Android app in play store.</param>
        /// <param name="countryId">Country identifier.</param>
        /// <param name="logoImageUrl">Application Logo.</param>
        /// <param name="languages">Languages to be available in the application.</param>
        /// <param name="availableAppLanguages">Available Languages for Apps\\Staff.</param>
        /// <param name="appAccessLevel">App access level for the logged in user.</param>
        /// <param name="appResourceSet">Constitutes a list of available resources.</param>
        /// <param name="features">Feature flags.</param>
        /// <param name="mapCenter">Center of the map coordinates.</param>
        /// <param name="mapNorthEast">North East(Top Right) Corner of the map coordinates.</param>
        /// <param name="mapSouthWest">South West (Bottom Left) Corner of the map coordinates.</param>
        /// <param name="name">App name.</param>
        /// <param name="hostName">HostName on which the app is allowed to be hosted.</param>
        /// <param name="mainColor">Main color of the web \\ android \\ ios applications.</param>
        /// <param name="applicationCategory">Application Category.</param>
        /// <param name="isPanaceaEnabled">Is Panacea Enabled.</param>
        /// <param name="cookieConsentPromptEnabled">Cookie Consent Prompt Enabled.</param>
        public App(string appId = default(string), bool? hasIosApp = default(bool?), bool? hasAndroidApp = default(bool?), string countryId = default(string), string logoImageUrl = default(string), List<Language> languages = default(List<Language>), List<Language> availableAppLanguages = default(List<Language>), AppAccessLevelEnum? appAccessLevel = default(AppAccessLevelEnum?), List<AppResourceSetEnum> appResourceSet = default(List<AppResourceSetEnum>), List<string> features = default(List<string>), Coordinates mapCenter = default(Coordinates), Coordinates mapNorthEast = default(Coordinates), Coordinates mapSouthWest = default(Coordinates), string name = default(string), string hostName = default(string), string mainColor = default(string), ApplicationCategoryEnum? applicationCategory = default(ApplicationCategoryEnum?), bool? isPanaceaEnabled = default(bool?), bool? cookieConsentPromptEnabled = default(bool?))
        {
            this.AppId = appId;
            this.HasIosApp = hasIosApp;
            this.HasAndroidApp = hasAndroidApp;
            this.CountryId = countryId;
            this.LogoImageUrl = logoImageUrl;
            this.Languages = languages;
            this.AvailableAppLanguages = availableAppLanguages;
            this.AppAccessLevel = appAccessLevel;
            this.AppResourceSet = appResourceSet;
            this.Features = features;
            this.MapCenter = mapCenter;
            this.MapNorthEast = mapNorthEast;
            this.MapSouthWest = mapSouthWest;
            this.Name = name;
            this.HostName = hostName;
            this.MainColor = mainColor;
            this.ApplicationCategory = applicationCategory;
            this.IsPanaceaEnabled = isPanaceaEnabled;
            this.CookieConsentPromptEnabled = cookieConsentPromptEnabled;
        }
        
        /// <summary>
        /// App Identifier
        /// </summary>
        /// <value>App Identifier</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Has iOS app in store
        /// </summary>
        /// <value>Has iOS app in store</value>
        [DataMember(Name="HasIosApp", EmitDefaultValue=false)]
        public bool? HasIosApp { get; set; }

        /// <summary>
        /// Has Android app in play store
        /// </summary>
        /// <value>Has Android app in play store</value>
        [DataMember(Name="HasAndroidApp", EmitDefaultValue=false)]
        public bool? HasAndroidApp { get; set; }

        /// <summary>
        /// Country identifier
        /// </summary>
        /// <value>Country identifier</value>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// Application Logo
        /// </summary>
        /// <value>Application Logo</value>
        [DataMember(Name="LogoImageUrl", EmitDefaultValue=false)]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Languages to be available in the application
        /// </summary>
        /// <value>Languages to be available in the application</value>
        [DataMember(Name="Languages", EmitDefaultValue=false)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Available Languages for Apps\\Staff
        /// </summary>
        /// <value>Available Languages for Apps\\Staff</value>
        [DataMember(Name="AvailableAppLanguages", EmitDefaultValue=false)]
        public List<Language> AvailableAppLanguages { get; set; }



        /// <summary>
        /// Feature flags
        /// </summary>
        /// <value>Feature flags</value>
        [DataMember(Name="Features", EmitDefaultValue=false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Center of the map coordinates
        /// </summary>
        /// <value>Center of the map coordinates</value>
        [DataMember(Name="MapCenter", EmitDefaultValue=false)]
        public Coordinates MapCenter { get; set; }

        /// <summary>
        /// North East(Top Right) Corner of the map coordinates
        /// </summary>
        /// <value>North East(Top Right) Corner of the map coordinates</value>
        [DataMember(Name="MapNorthEast", EmitDefaultValue=false)]
        public Coordinates MapNorthEast { get; set; }

        /// <summary>
        /// South West (Bottom Left) Corner of the map coordinates
        /// </summary>
        /// <value>South West (Bottom Left) Corner of the map coordinates</value>
        [DataMember(Name="MapSouthWest", EmitDefaultValue=false)]
        public Coordinates MapSouthWest { get; set; }

        /// <summary>
        /// App name
        /// </summary>
        /// <value>App name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// HostName on which the app is allowed to be hosted
        /// </summary>
        /// <value>HostName on which the app is allowed to be hosted</value>
        [DataMember(Name="HostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Main color of the web \\ android \\ ios applications
        /// </summary>
        /// <value>Main color of the web \\ android \\ ios applications</value>
        [DataMember(Name="MainColor", EmitDefaultValue=false)]
        public string MainColor { get; set; }


        /// <summary>
        /// Is Panacea Enabled
        /// </summary>
        /// <value>Is Panacea Enabled</value>
        [DataMember(Name="IsPanaceaEnabled", EmitDefaultValue=false)]
        public bool? IsPanaceaEnabled { get; set; }

        /// <summary>
        /// Cookie Consent Prompt Enabled
        /// </summary>
        /// <value>Cookie Consent Prompt Enabled</value>
        [DataMember(Name="CookieConsentPromptEnabled", EmitDefaultValue=false)]
        public bool? CookieConsentPromptEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class App {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  HasIosApp: ").Append(HasIosApp).Append("\n");
            sb.Append("  HasAndroidApp: ").Append(HasAndroidApp).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  AvailableAppLanguages: ").Append(AvailableAppLanguages).Append("\n");
            sb.Append("  AppAccessLevel: ").Append(AppAccessLevel).Append("\n");
            sb.Append("  AppResourceSet: ").Append(AppResourceSet).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  MapCenter: ").Append(MapCenter).Append("\n");
            sb.Append("  MapNorthEast: ").Append(MapNorthEast).Append("\n");
            sb.Append("  MapSouthWest: ").Append(MapSouthWest).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  MainColor: ").Append(MainColor).Append("\n");
            sb.Append("  ApplicationCategory: ").Append(ApplicationCategory).Append("\n");
            sb.Append("  IsPanaceaEnabled: ").Append(IsPanaceaEnabled).Append("\n");
            sb.Append("  CookieConsentPromptEnabled: ").Append(CookieConsentPromptEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as App);
        }

        /// <summary>
        /// Returns true if App instances are equal
        /// </summary>
        /// <param name="input">Instance of App to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(App input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.HasIosApp == input.HasIosApp ||
                    (this.HasIosApp != null &&
                    this.HasIosApp.Equals(input.HasIosApp))
                ) && 
                (
                    this.HasAndroidApp == input.HasAndroidApp ||
                    (this.HasAndroidApp != null &&
                    this.HasAndroidApp.Equals(input.HasAndroidApp))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.LogoImageUrl == input.LogoImageUrl ||
                    (this.LogoImageUrl != null &&
                    this.LogoImageUrl.Equals(input.LogoImageUrl))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.AvailableAppLanguages == input.AvailableAppLanguages ||
                    this.AvailableAppLanguages != null &&
                    this.AvailableAppLanguages.SequenceEqual(input.AvailableAppLanguages)
                ) && 
                (
                    this.AppAccessLevel == input.AppAccessLevel ||
                    (this.AppAccessLevel != null &&
                    this.AppAccessLevel.Equals(input.AppAccessLevel))
                ) && 
                (
                    this.AppResourceSet == input.AppResourceSet ||
                    this.AppResourceSet != null &&
                    this.AppResourceSet.SequenceEqual(input.AppResourceSet)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.MapCenter == input.MapCenter ||
                    (this.MapCenter != null &&
                    this.MapCenter.Equals(input.MapCenter))
                ) && 
                (
                    this.MapNorthEast == input.MapNorthEast ||
                    (this.MapNorthEast != null &&
                    this.MapNorthEast.Equals(input.MapNorthEast))
                ) && 
                (
                    this.MapSouthWest == input.MapSouthWest ||
                    (this.MapSouthWest != null &&
                    this.MapSouthWest.Equals(input.MapSouthWest))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.MainColor == input.MainColor ||
                    (this.MainColor != null &&
                    this.MainColor.Equals(input.MainColor))
                ) && 
                (
                    this.ApplicationCategory == input.ApplicationCategory ||
                    (this.ApplicationCategory != null &&
                    this.ApplicationCategory.Equals(input.ApplicationCategory))
                ) && 
                (
                    this.IsPanaceaEnabled == input.IsPanaceaEnabled ||
                    (this.IsPanaceaEnabled != null &&
                    this.IsPanaceaEnabled.Equals(input.IsPanaceaEnabled))
                ) && 
                (
                    this.CookieConsentPromptEnabled == input.CookieConsentPromptEnabled ||
                    (this.CookieConsentPromptEnabled != null &&
                    this.CookieConsentPromptEnabled.Equals(input.CookieConsentPromptEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.HasIosApp != null)
                    hashCode = hashCode * 59 + this.HasIosApp.GetHashCode();
                if (this.HasAndroidApp != null)
                    hashCode = hashCode * 59 + this.HasAndroidApp.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.LogoImageUrl != null)
                    hashCode = hashCode * 59 + this.LogoImageUrl.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.AvailableAppLanguages != null)
                    hashCode = hashCode * 59 + this.AvailableAppLanguages.GetHashCode();
                if (this.AppAccessLevel != null)
                    hashCode = hashCode * 59 + this.AppAccessLevel.GetHashCode();
                if (this.AppResourceSet != null)
                    hashCode = hashCode * 59 + this.AppResourceSet.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.MapCenter != null)
                    hashCode = hashCode * 59 + this.MapCenter.GetHashCode();
                if (this.MapNorthEast != null)
                    hashCode = hashCode * 59 + this.MapNorthEast.GetHashCode();
                if (this.MapSouthWest != null)
                    hashCode = hashCode * 59 + this.MapSouthWest.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.MainColor != null)
                    hashCode = hashCode * 59 + this.MainColor.GetHashCode();
                if (this.ApplicationCategory != null)
                    hashCode = hashCode * 59 + this.ApplicationCategory.GetHashCode();
                if (this.IsPanaceaEnabled != null)
                    hashCode = hashCode * 59 + this.IsPanaceaEnabled.GetHashCode();
                if (this.CookieConsentPromptEnabled != null)
                    hashCode = hashCode * 59 + this.CookieConsentPromptEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryId (string) maxLength
            if(this.CountryId != null && this.CountryId.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryId, length must be less than 2.", new [] { "CountryId" });
            }

            // CountryId (string) minLength
            if(this.CountryId != null && this.CountryId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryId, length must be greater than 0.", new [] { "CountryId" });
            }

            yield break;
        }
    }

}

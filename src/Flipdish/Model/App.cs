/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flipdish.Client.SwaggerDateConverter;

namespace Flipdish.Model
{
    /// <summary>
    /// App
    /// </summary>
    [DataContract]
    public partial class App :  IEquatable<App>
    {
        /// <summary>
        /// App access level for the logged in user
        /// </summary>
        /// <value>App access level for the logged in user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppAccessLevelEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Owner for value: Owner
            /// </summary>
            [EnumMember(Value = "Owner")]
            Owner = 2,
            
            /// <summary>
            /// Enum StoreOwner for value: StoreOwner
            /// </summary>
            [EnumMember(Value = "StoreOwner")]
            StoreOwner = 3,
            
            /// <summary>
            /// Enum ManagedOwner for value: ManagedOwner
            /// </summary>
            [EnumMember(Value = "ManagedOwner")]
            ManagedOwner = 4,
            
            /// <summary>
            /// Enum Integrator for value: Integrator
            /// </summary>
            [EnumMember(Value = "Integrator")]
            Integrator = 5,
            
            /// <summary>
            /// Enum StoreManager for value: StoreManager
            /// </summary>
            [EnumMember(Value = "StoreManager")]
            StoreManager = 6,
            
            /// <summary>
            /// Enum StoreStaff for value: StoreStaff
            /// </summary>
            [EnumMember(Value = "StoreStaff")]
            StoreStaff = 7,
            
            /// <summary>
            /// Enum StoreReadOnlyAccess for value: StoreReadOnlyAccess
            /// </summary>
            [EnumMember(Value = "StoreReadOnlyAccess")]
            StoreReadOnlyAccess = 8,
            
            /// <summary>
            /// Enum FinanceManger for value: FinanceManger
            /// </summary>
            [EnumMember(Value = "FinanceManger")]
            FinanceManger = 9,
            
            /// <summary>
            /// Enum Onboarding for value: Onboarding
            /// </summary>
            [EnumMember(Value = "Onboarding")]
            Onboarding = 10,
            
            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 11
        }

        /// <summary>
        /// App access level for the logged in user
        /// </summary>
        /// <value>App access level for the logged in user</value>
        [DataMember(Name="AppAccessLevel", EmitDefaultValue=false)]
        public AppAccessLevelEnum? AppAccessLevel { get; set; }
        /// <summary>
        /// Defines AppResourceSet
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppResourceSetEnum
        {
            
            /// <summary>
            /// Enum ViewApp for value: ViewApp
            /// </summary>
            [EnumMember(Value = "ViewApp")]
            ViewApp = 1,
            
            /// <summary>
            /// Enum CreateApp for value: CreateApp
            /// </summary>
            [EnumMember(Value = "CreateApp")]
            CreateApp = 2,
            
            /// <summary>
            /// Enum UpdateApp for value: UpdateApp
            /// </summary>
            [EnumMember(Value = "UpdateApp")]
            UpdateApp = 3,
            
            /// <summary>
            /// Enum EditAppAssets for value: EditAppAssets
            /// </summary>
            [EnumMember(Value = "EditAppAssets")]
            EditAppAssets = 4,
            
            /// <summary>
            /// Enum EditAppFeatures for value: EditAppFeatures
            /// </summary>
            [EnumMember(Value = "EditAppFeatures")]
            EditAppFeatures = 5,
            
            /// <summary>
            /// Enum ViewTeammates for value: ViewTeammates
            /// </summary>
            [EnumMember(Value = "ViewTeammates")]
            ViewTeammates = 6,
            
            /// <summary>
            /// Enum EditTeammates for value: EditTeammates
            /// </summary>
            [EnumMember(Value = "EditTeammates")]
            EditTeammates = 7,
            
            /// <summary>
            /// Enum CreateTeammateOwner for value: CreateTeammateOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateOwner")]
            CreateTeammateOwner = 8,
            
            /// <summary>
            /// Enum CreateTeammateManagedOwner for value: CreateTeammateManagedOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateManagedOwner")]
            CreateTeammateManagedOwner = 9,
            
            /// <summary>
            /// Enum CreateTeammateStoreOwner for value: CreateTeammateStoreOwner
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreOwner")]
            CreateTeammateStoreOwner = 10,
            
            /// <summary>
            /// Enum CreateTeammateStoreManager for value: CreateTeammateStoreManager
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreManager")]
            CreateTeammateStoreManager = 11,
            
            /// <summary>
            /// Enum CreateTeammateStoreStaff for value: CreateTeammateStoreStaff
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreStaff")]
            CreateTeammateStoreStaff = 12,
            
            /// <summary>
            /// Enum CreateTeammateStoreReadAccess for value: CreateTeammateStoreReadAccess
            /// </summary>
            [EnumMember(Value = "CreateTeammateStoreReadAccess")]
            CreateTeammateStoreReadAccess = 13,
            
            /// <summary>
            /// Enum CreateTeammateFinanceManager for value: CreateTeammateFinanceManager
            /// </summary>
            [EnumMember(Value = "CreateTeammateFinanceManager")]
            CreateTeammateFinanceManager = 14,
            
            /// <summary>
            /// Enum CreateTeammateIntegrator for value: CreateTeammateIntegrator
            /// </summary>
            [EnumMember(Value = "CreateTeammateIntegrator")]
            CreateTeammateIntegrator = 15,
            
            /// <summary>
            /// Enum CreateTeammateOnboarding for value: CreateTeammateOnboarding
            /// </summary>
            [EnumMember(Value = "CreateTeammateOnboarding")]
            CreateTeammateOnboarding = 16,
            
            /// <summary>
            /// Enum ViewApmConfigurations for value: ViewApmConfigurations
            /// </summary>
            [EnumMember(Value = "ViewApmConfigurations")]
            ViewApmConfigurations = 17,
            
            /// <summary>
            /// Enum EditApmConfigurations for value: EditApmConfigurations
            /// </summary>
            [EnumMember(Value = "EditApmConfigurations")]
            EditApmConfigurations = 18,
            
            /// <summary>
            /// Enum ViewCampaignsConfigurations for value: ViewCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "ViewCampaignsConfigurations")]
            ViewCampaignsConfigurations = 19,
            
            /// <summary>
            /// Enum CreateCampaignsConfigurations for value: CreateCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "CreateCampaignsConfigurations")]
            CreateCampaignsConfigurations = 20,
            
            /// <summary>
            /// Enum UpdateCampaignsConfigurations for value: UpdateCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "UpdateCampaignsConfigurations")]
            UpdateCampaignsConfigurations = 21,
            
            /// <summary>
            /// Enum DeleteCampaignsConfigurations for value: DeleteCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "DeleteCampaignsConfigurations")]
            DeleteCampaignsConfigurations = 22,
            
            /// <summary>
            /// Enum StampLoyaltyCardAgainstCampaignsConfigurations for value: StampLoyaltyCardAgainstCampaignsConfigurations
            /// </summary>
            [EnumMember(Value = "StampLoyaltyCardAgainstCampaignsConfigurations")]
            StampLoyaltyCardAgainstCampaignsConfigurations = 23,
            
            /// <summary>
            /// Enum ViewDevelopersSettings for value: ViewDevelopersSettings
            /// </summary>
            [EnumMember(Value = "ViewDevelopersSettings")]
            ViewDevelopersSettings = 24,
            
            /// <summary>
            /// Enum EditDevelopersSettings for value: EditDevelopersSettings
            /// </summary>
            [EnumMember(Value = "EditDevelopersSettings")]
            EditDevelopersSettings = 25,
            
            /// <summary>
            /// Enum ViewOrders for value: ViewOrders
            /// </summary>
            [EnumMember(Value = "ViewOrders")]
            ViewOrders = 26,
            
            /// <summary>
            /// Enum UpdateOrdersAccept for value: UpdateOrdersAccept
            /// </summary>
            [EnumMember(Value = "UpdateOrdersAccept")]
            UpdateOrdersAccept = 27,
            
            /// <summary>
            /// Enum UpdateOrdersReject for value: UpdateOrdersReject
            /// </summary>
            [EnumMember(Value = "UpdateOrdersReject")]
            UpdateOrdersReject = 28,
            
            /// <summary>
            /// Enum UpdateOrdersRefund for value: UpdateOrdersRefund
            /// </summary>
            [EnumMember(Value = "UpdateOrdersRefund")]
            UpdateOrdersRefund = 29,
            
            /// <summary>
            /// Enum UpdateOrdersDispatch for value: UpdateOrdersDispatch
            /// </summary>
            [EnumMember(Value = "UpdateOrdersDispatch")]
            UpdateOrdersDispatch = 30,
            
            /// <summary>
            /// Enum ViewStores for value: ViewStores
            /// </summary>
            [EnumMember(Value = "ViewStores")]
            ViewStores = 31,
            
            /// <summary>
            /// Enum CreateStores for value: CreateStores
            /// </summary>
            [EnumMember(Value = "CreateStores")]
            CreateStores = 32,
            
            /// <summary>
            /// Enum EditStores for value: EditStores
            /// </summary>
            [EnumMember(Value = "EditStores")]
            EditStores = 33,
            
            /// <summary>
            /// Enum ViewStoresOpeningHours for value: ViewStoresOpeningHours
            /// </summary>
            [EnumMember(Value = "ViewStoresOpeningHours")]
            ViewStoresOpeningHours = 34,
            
            /// <summary>
            /// Enum UpdateStoresOpenForCollectionOrDelivery for value: UpdateStoresOpenForCollectionOrDelivery
            /// </summary>
            [EnumMember(Value = "UpdateStoresOpenForCollectionOrDelivery")]
            UpdateStoresOpenForCollectionOrDelivery = 35,
            
            /// <summary>
            /// Enum UpdateStoresOpeningHours for value: UpdateStoresOpeningHours
            /// </summary>
            [EnumMember(Value = "UpdateStoresOpeningHours")]
            UpdateStoresOpeningHours = 36,
            
            /// <summary>
            /// Enum ViewStoresOpeningHoursOverride for value: ViewStoresOpeningHoursOverride
            /// </summary>
            [EnumMember(Value = "ViewStoresOpeningHoursOverride")]
            ViewStoresOpeningHoursOverride = 37,
            
            /// <summary>
            /// Enum EditStoresOpeningHoursOverride for value: EditStoresOpeningHoursOverride
            /// </summary>
            [EnumMember(Value = "EditStoresOpeningHoursOverride")]
            EditStoresOpeningHoursOverride = 38,
            
            /// <summary>
            /// Enum EditStoresOpeningHoursOverrideTemporary for value: EditStoresOpeningHoursOverrideTemporary
            /// </summary>
            [EnumMember(Value = "EditStoresOpeningHoursOverrideTemporary")]
            EditStoresOpeningHoursOverrideTemporary = 39,
            
            /// <summary>
            /// Enum UpdateStoresName for value: UpdateStoresName
            /// </summary>
            [EnumMember(Value = "UpdateStoresName")]
            UpdateStoresName = 40,
            
            /// <summary>
            /// Enum EditStoreKioskSettings for value: EditStoreKioskSettings
            /// </summary>
            [EnumMember(Value = "EditStoreKioskSettings")]
            EditStoreKioskSettings = 41,
            
            /// <summary>
            /// Enum EditStoreOrderCapacity for value: EditStoreOrderCapacity
            /// </summary>
            [EnumMember(Value = "EditStoreOrderCapacity")]
            EditStoreOrderCapacity = 42,
            
            /// <summary>
            /// Enum UpdatePrinterTerminalsAssign for value: UpdatePrinterTerminalsAssign
            /// </summary>
            [EnumMember(Value = "UpdatePrinterTerminalsAssign")]
            UpdatePrinterTerminalsAssign = 43,
            
            /// <summary>
            /// Enum UpdatePrinterTerminalsToggle for value: UpdatePrinterTerminalsToggle
            /// </summary>
            [EnumMember(Value = "UpdatePrinterTerminalsToggle")]
            UpdatePrinterTerminalsToggle = 44,
            
            /// <summary>
            /// Enum EditStoreNotifications for value: EditStoreNotifications
            /// </summary>
            [EnumMember(Value = "EditStoreNotifications")]
            EditStoreNotifications = 45,
            
            /// <summary>
            /// Enum ViewStoreGroups for value: ViewStoreGroups
            /// </summary>
            [EnumMember(Value = "ViewStoreGroups")]
            ViewStoreGroups = 46,
            
            /// <summary>
            /// Enum CreateStoreGroups for value: CreateStoreGroups
            /// </summary>
            [EnumMember(Value = "CreateStoreGroups")]
            CreateStoreGroups = 47,
            
            /// <summary>
            /// Enum UpdateStoreGroups for value: UpdateStoreGroups
            /// </summary>
            [EnumMember(Value = "UpdateStoreGroups")]
            UpdateStoreGroups = 48,
            
            /// <summary>
            /// Enum DeleteStoreGroups for value: DeleteStoreGroups
            /// </summary>
            [EnumMember(Value = "DeleteStoreGroups")]
            DeleteStoreGroups = 49,
            
            /// <summary>
            /// Enum ViewDeliveryZones for value: ViewDeliveryZones
            /// </summary>
            [EnumMember(Value = "ViewDeliveryZones")]
            ViewDeliveryZones = 50,
            
            /// <summary>
            /// Enum CreateDeliveryZones for value: CreateDeliveryZones
            /// </summary>
            [EnumMember(Value = "CreateDeliveryZones")]
            CreateDeliveryZones = 51,
            
            /// <summary>
            /// Enum UpdateDeliveryZones for value: UpdateDeliveryZones
            /// </summary>
            [EnumMember(Value = "UpdateDeliveryZones")]
            UpdateDeliveryZones = 52,
            
            /// <summary>
            /// Enum DeleteDeliveryZones for value: DeleteDeliveryZones
            /// </summary>
            [EnumMember(Value = "DeleteDeliveryZones")]
            DeleteDeliveryZones = 53,
            
            /// <summary>
            /// Enum ViewMenu for value: ViewMenu
            /// </summary>
            [EnumMember(Value = "ViewMenu")]
            ViewMenu = 54,
            
            /// <summary>
            /// Enum CreateMenu for value: CreateMenu
            /// </summary>
            [EnumMember(Value = "CreateMenu")]
            CreateMenu = 55,
            
            /// <summary>
            /// Enum UpdateMenu for value: UpdateMenu
            /// </summary>
            [EnumMember(Value = "UpdateMenu")]
            UpdateMenu = 56,
            
            /// <summary>
            /// Enum DeleteMenu for value: DeleteMenu
            /// </summary>
            [EnumMember(Value = "DeleteMenu")]
            DeleteMenu = 57,
            
            /// <summary>
            /// Enum UpdateMenuLock for value: UpdateMenuLock
            /// </summary>
            [EnumMember(Value = "UpdateMenuLock")]
            UpdateMenuLock = 58,
            
            /// <summary>
            /// Enum UpdateMenuItemsHideTemporarily for value: UpdateMenuItemsHideTemporarily
            /// </summary>
            [EnumMember(Value = "UpdateMenuItemsHideTemporarily")]
            UpdateMenuItemsHideTemporarily = 59,
            
            /// <summary>
            /// Enum EditMenuImage for value: EditMenuImage
            /// </summary>
            [EnumMember(Value = "EditMenuImage")]
            EditMenuImage = 60,
            
            /// <summary>
            /// Enum ViewVouchers for value: ViewVouchers
            /// </summary>
            [EnumMember(Value = "ViewVouchers")]
            ViewVouchers = 61,
            
            /// <summary>
            /// Enum EditVouchers for value: EditVouchers
            /// </summary>
            [EnumMember(Value = "EditVouchers")]
            EditVouchers = 62,
            
            /// <summary>
            /// Enum ViewWebsiteContent for value: ViewWebsiteContent
            /// </summary>
            [EnumMember(Value = "ViewWebsiteContent")]
            ViewWebsiteContent = 63,
            
            /// <summary>
            /// Enum EditWebsiteContent for value: EditWebsiteContent
            /// </summary>
            [EnumMember(Value = "EditWebsiteContent")]
            EditWebsiteContent = 64,
            
            /// <summary>
            /// Enum ViewWebsiteDnsVerified for value: ViewWebsiteDnsVerified
            /// </summary>
            [EnumMember(Value = "ViewWebsiteDnsVerified")]
            ViewWebsiteDnsVerified = 65,
            
            /// <summary>
            /// Enum ViewWebsiteCertificateCreated for value: ViewWebsiteCertificateCreated
            /// </summary>
            [EnumMember(Value = "ViewWebsiteCertificateCreated")]
            ViewWebsiteCertificateCreated = 66,
            
            /// <summary>
            /// Enum ViewWebsiteCertificateRenewed for value: ViewWebsiteCertificateRenewed
            /// </summary>
            [EnumMember(Value = "ViewWebsiteCertificateRenewed")]
            ViewWebsiteCertificateRenewed = 67,
            
            /// <summary>
            /// Enum ViewBankAccounts for value: ViewBankAccounts
            /// </summary>
            [EnumMember(Value = "ViewBankAccounts")]
            ViewBankAccounts = 68,
            
            /// <summary>
            /// Enum CreateBankAccounts for value: CreateBankAccounts
            /// </summary>
            [EnumMember(Value = "CreateBankAccounts")]
            CreateBankAccounts = 69,
            
            /// <summary>
            /// Enum UpdateBankAccounts for value: UpdateBankAccounts
            /// </summary>
            [EnumMember(Value = "UpdateBankAccounts")]
            UpdateBankAccounts = 70,
            
            /// <summary>
            /// Enum UpdateBankAccountsAssign for value: UpdateBankAccountsAssign
            /// </summary>
            [EnumMember(Value = "UpdateBankAccountsAssign")]
            UpdateBankAccountsAssign = 71,
            
            /// <summary>
            /// Enum ViewAssignedBankAccount for value: ViewAssignedBankAccount
            /// </summary>
            [EnumMember(Value = "ViewAssignedBankAccount")]
            ViewAssignedBankAccount = 72,
            
            /// <summary>
            /// Enum VerifyBankAccounts for value: VerifyBankAccounts
            /// </summary>
            [EnumMember(Value = "VerifyBankAccounts")]
            VerifyBankAccounts = 73,
            
            /// <summary>
            /// Enum ViewServiceChargeConfigurations for value: ViewServiceChargeConfigurations
            /// </summary>
            [EnumMember(Value = "ViewServiceChargeConfigurations")]
            ViewServiceChargeConfigurations = 74,
            
            /// <summary>
            /// Enum EditServiceChargeConfigurations for value: EditServiceChargeConfigurations
            /// </summary>
            [EnumMember(Value = "EditServiceChargeConfigurations")]
            EditServiceChargeConfigurations = 75,
            
            /// <summary>
            /// Enum EditStoreDeliveryZoneFees for value: EditStoreDeliveryZoneFees
            /// </summary>
            [EnumMember(Value = "EditStoreDeliveryZoneFees")]
            EditStoreDeliveryZoneFees = 76,
            
            /// <summary>
            /// Enum EditStoreDeliveryFeesLimited for value: EditStoreDeliveryFeesLimited
            /// </summary>
            [EnumMember(Value = "EditStoreDeliveryFeesLimited")]
            EditStoreDeliveryFeesLimited = 77,
            
            /// <summary>
            /// Enum ViewHydraConfig for value: ViewHydraConfig
            /// </summary>
            [EnumMember(Value = "ViewHydraConfig")]
            ViewHydraConfig = 78,
            
            /// <summary>
            /// Enum UpdateHydraConfigManage for value: UpdateHydraConfigManage
            /// </summary>
            [EnumMember(Value = "UpdateHydraConfigManage")]
            UpdateHydraConfigManage = 79,
            
            /// <summary>
            /// Enum InitiateBluetoothPairingMode for value: InitiateBluetoothPairingMode
            /// </summary>
            [EnumMember(Value = "InitiateBluetoothPairingMode")]
            InitiateBluetoothPairingMode = 80,
            
            /// <summary>
            /// Enum DeleteTerminal for value: DeleteTerminal
            /// </summary>
            [EnumMember(Value = "DeleteTerminal")]
            DeleteTerminal = 81,
            
            /// <summary>
            /// Enum ViewKioskTelemetry for value: ViewKioskTelemetry
            /// </summary>
            [EnumMember(Value = "ViewKioskTelemetry")]
            ViewKioskTelemetry = 82,
            
            /// <summary>
            /// Enum ViewCustomers for value: ViewCustomers
            /// </summary>
            [EnumMember(Value = "ViewCustomers")]
            ViewCustomers = 83,
            
            /// <summary>
            /// Enum EditCustomers for value: EditCustomers
            /// </summary>
            [EnumMember(Value = "EditCustomers")]
            EditCustomers = 84,
            
            /// <summary>
            /// Enum CreateCustomers for value: CreateCustomers
            /// </summary>
            [EnumMember(Value = "CreateCustomers")]
            CreateCustomers = 85,
            
            /// <summary>
            /// Enum CreateCatalogElements for value: CreateCatalogElements
            /// </summary>
            [EnumMember(Value = "CreateCatalogElements")]
            CreateCatalogElements = 86,
            
            /// <summary>
            /// Enum UpdateCatalogElements for value: UpdateCatalogElements
            /// </summary>
            [EnumMember(Value = "UpdateCatalogElements")]
            UpdateCatalogElements = 87,
            
            /// <summary>
            /// Enum ViewCatalogElements for value: ViewCatalogElements
            /// </summary>
            [EnumMember(Value = "ViewCatalogElements")]
            ViewCatalogElements = 88,
            
            /// <summary>
            /// Enum DeleteCatalogElements for value: DeleteCatalogElements
            /// </summary>
            [EnumMember(Value = "DeleteCatalogElements")]
            DeleteCatalogElements = 89,
            
            /// <summary>
            /// Enum ViewMetafieldDefinitions for value: ViewMetafieldDefinitions
            /// </summary>
            [EnumMember(Value = "ViewMetafieldDefinitions")]
            ViewMetafieldDefinitions = 90,
            
            /// <summary>
            /// Enum CreateMetafieldDefinitions for value: CreateMetafieldDefinitions
            /// </summary>
            [EnumMember(Value = "CreateMetafieldDefinitions")]
            CreateMetafieldDefinitions = 91,
            
            /// <summary>
            /// Enum UpdateMetafieldDefinitions for value: UpdateMetafieldDefinitions
            /// </summary>
            [EnumMember(Value = "UpdateMetafieldDefinitions")]
            UpdateMetafieldDefinitions = 92,
            
            /// <summary>
            /// Enum DeleteMetafieldDefinitions for value: DeleteMetafieldDefinitions
            /// </summary>
            [EnumMember(Value = "DeleteMetafieldDefinitions")]
            DeleteMetafieldDefinitions = 93,
            
            /// <summary>
            /// Enum UpdateMetafields for value: UpdateMetafields
            /// </summary>
            [EnumMember(Value = "UpdateMetafields")]
            UpdateMetafields = 94,
            
            /// <summary>
            /// Enum ViewCatalogMenuChanges for value: ViewCatalogMenuChanges
            /// </summary>
            [EnumMember(Value = "ViewCatalogMenuChanges")]
            ViewCatalogMenuChanges = 95,
            
            /// <summary>
            /// Enum PublishCatalogMenuChanges for value: PublishCatalogMenuChanges
            /// </summary>
            [EnumMember(Value = "PublishCatalogMenuChanges")]
            PublishCatalogMenuChanges = 96,
            
            /// <summary>
            /// Enum ViewAppStatistics for value: ViewAppStatistics
            /// </summary>
            [EnumMember(Value = "ViewAppStatistics")]
            ViewAppStatistics = 97,
            
            /// <summary>
            /// Enum ViewApmStatistics for value: ViewApmStatistics
            /// </summary>
            [EnumMember(Value = "ViewApmStatistics")]
            ViewApmStatistics = 98,
            
            /// <summary>
            /// Enum ViewCampaignsStatistics for value: ViewCampaignsStatistics
            /// </summary>
            [EnumMember(Value = "ViewCampaignsStatistics")]
            ViewCampaignsStatistics = 99,
            
            /// <summary>
            /// Enum ViewCustomerStatistics for value: ViewCustomerStatistics
            /// </summary>
            [EnumMember(Value = "ViewCustomerStatistics")]
            ViewCustomerStatistics = 100,
            
            /// <summary>
            /// Enum ViewLiveStatistics for value: ViewLiveStatistics
            /// </summary>
            [EnumMember(Value = "ViewLiveStatistics")]
            ViewLiveStatistics = 101,
            
            /// <summary>
            /// Enum ViewOrderStatistics for value: ViewOrderStatistics
            /// </summary>
            [EnumMember(Value = "ViewOrderStatistics")]
            ViewOrderStatistics = 102,
            
            /// <summary>
            /// Enum ViewSalesStatistics for value: ViewSalesStatistics
            /// </summary>
            [EnumMember(Value = "ViewSalesStatistics")]
            ViewSalesStatistics = 103,
            
            /// <summary>
            /// Enum ViewSalesEndOfDayStatistics for value: ViewSalesEndOfDayStatistics
            /// </summary>
            [EnumMember(Value = "ViewSalesEndOfDayStatistics")]
            ViewSalesEndOfDayStatistics = 104,
            
            /// <summary>
            /// Enum ViewVouchersStatistics for value: ViewVouchersStatistics
            /// </summary>
            [EnumMember(Value = "ViewVouchersStatistics")]
            ViewVouchersStatistics = 105,
            
            /// <summary>
            /// Enum DownloadCustomerCsvExport for value: DownloadCustomerCsvExport
            /// </summary>
            [EnumMember(Value = "DownloadCustomerCsvExport")]
            DownloadCustomerCsvExport = 106,
            
            /// <summary>
            /// Enum ViewApmAuditLogs for value: ViewApmAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewApmAuditLogs")]
            ViewApmAuditLogs = 107,
            
            /// <summary>
            /// Enum ViewStoreAuditLogs for value: ViewStoreAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewStoreAuditLogs")]
            ViewStoreAuditLogs = 108,
            
            /// <summary>
            /// Enum ViewMenuAuditLogs for value: ViewMenuAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewMenuAuditLogs")]
            ViewMenuAuditLogs = 109,
            
            /// <summary>
            /// Enum ViewBankAccountAuditLogs for value: ViewBankAccountAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewBankAccountAuditLogs")]
            ViewBankAccountAuditLogs = 110,
            
            /// <summary>
            /// Enum ViewFeeConfigurationsAuditLogs for value: ViewFeeConfigurationsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewFeeConfigurationsAuditLogs")]
            ViewFeeConfigurationsAuditLogs = 111,
            
            /// <summary>
            /// Enum ViewOrdersAuditLogs for value: ViewOrdersAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewOrdersAuditLogs")]
            ViewOrdersAuditLogs = 112,
            
            /// <summary>
            /// Enum ViewVouchersAuditLogs for value: ViewVouchersAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewVouchersAuditLogs")]
            ViewVouchersAuditLogs = 113,
            
            /// <summary>
            /// Enum ViewUserEventsAuditLogs for value: ViewUserEventsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewUserEventsAuditLogs")]
            ViewUserEventsAuditLogs = 114,
            
            /// <summary>
            /// Enum ViewCampaignsAuditLogs for value: ViewCampaignsAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewCampaignsAuditLogs")]
            ViewCampaignsAuditLogs = 115,
            
            /// <summary>
            /// Enum ViewTeammatesAuditLogs for value: ViewTeammatesAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewTeammatesAuditLogs")]
            ViewTeammatesAuditLogs = 116,
            
            /// <summary>
            /// Enum ViewAppAuditLogs for value: ViewAppAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewAppAuditLogs")]
            ViewAppAuditLogs = 117,
            
            /// <summary>
            /// Enum ViewCustomerAuditLogs for value: ViewCustomerAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewCustomerAuditLogs")]
            ViewCustomerAuditLogs = 118,
            
            /// <summary>
            /// Enum ViewPrinterAuditLogs for value: ViewPrinterAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewPrinterAuditLogs")]
            ViewPrinterAuditLogs = 119,
            
            /// <summary>
            /// Enum ViewHydraAuditLogs for value: ViewHydraAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewHydraAuditLogs")]
            ViewHydraAuditLogs = 120,
            
            /// <summary>
            /// Enum ViewPushNotificationAuditLogs for value: ViewPushNotificationAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewPushNotificationAuditLogs")]
            ViewPushNotificationAuditLogs = 121,
            
            /// <summary>
            /// Enum ViewStripeCustomConnectedAccountAuditLogs for value: ViewStripeCustomConnectedAccountAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewStripeCustomConnectedAccountAuditLogs")]
            ViewStripeCustomConnectedAccountAuditLogs = 122,
            
            /// <summary>
            /// Enum ViewKioskBluetoothDeviceAuditLogs for value: ViewKioskBluetoothDeviceAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewKioskBluetoothDeviceAuditLogs")]
            ViewKioskBluetoothDeviceAuditLogs = 123,
            
            /// <summary>
            /// Enum ViewExternalAuditLogs for value: ViewExternalAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewExternalAuditLogs")]
            ViewExternalAuditLogs = 124,
            
            /// <summary>
            /// Enum CreateExternalAuditLogEvents for value: CreateExternalAuditLogEvents
            /// </summary>
            [EnumMember(Value = "CreateExternalAuditLogEvents")]
            CreateExternalAuditLogEvents = 125,
            
            /// <summary>
            /// Enum ViewCatalogAuditLogs for value: ViewCatalogAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewCatalogAuditLogs")]
            ViewCatalogAuditLogs = 126,
            
            /// <summary>
            /// Enum ViewOrderFulfillmentAuditLogs for value: ViewOrderFulfillmentAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewOrderFulfillmentAuditLogs")]
            ViewOrderFulfillmentAuditLogs = 127,
            
            /// <summary>
            /// Enum ViewChannelAuditLogs for value: ViewChannelAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewChannelAuditLogs")]
            ViewChannelAuditLogs = 128,
            
            /// <summary>
            /// Enum ViewAppStoreAuditLogs for value: ViewAppStoreAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewAppStoreAuditLogs")]
            ViewAppStoreAuditLogs = 129,
            
            /// <summary>
            /// Enum SendPushNotificationToCustomer for value: SendPushNotificationToCustomer
            /// </summary>
            [EnumMember(Value = "SendPushNotificationToCustomer")]
            SendPushNotificationToCustomer = 130,
            
            /// <summary>
            /// Enum InviteDriverToApp for value: InviteDriverToApp
            /// </summary>
            [EnumMember(Value = "InviteDriverToApp")]
            InviteDriverToApp = 131,
            
            /// <summary>
            /// Enum GetDriverForApp for value: GetDriverForApp
            /// </summary>
            [EnumMember(Value = "GetDriverForApp")]
            GetDriverForApp = 132,
            
            /// <summary>
            /// Enum RemoveDriverFromApp for value: RemoveDriverFromApp
            /// </summary>
            [EnumMember(Value = "RemoveDriverFromApp")]
            RemoveDriverFromApp = 133,
            
            /// <summary>
            /// Enum AssignDriverToOrder for value: AssignDriverToOrder
            /// </summary>
            [EnumMember(Value = "AssignDriverToOrder")]
            AssignDriverToOrder = 134,
            
            /// <summary>
            /// Enum UnassignDriverFromOrder for value: UnassignDriverFromOrder
            /// </summary>
            [EnumMember(Value = "UnassignDriverFromOrder")]
            UnassignDriverFromOrder = 135,
            
            /// <summary>
            /// Enum UpdateOrdersDeliveryTrackingStatus for value: UpdateOrdersDeliveryTrackingStatus
            /// </summary>
            [EnumMember(Value = "UpdateOrdersDeliveryTrackingStatus")]
            UpdateOrdersDeliveryTrackingStatus = 136,
            
            /// <summary>
            /// Enum UpdateOrderFulfillmentStatus for value: UpdateOrderFulfillmentStatus
            /// </summary>
            [EnumMember(Value = "UpdateOrderFulfillmentStatus")]
            UpdateOrderFulfillmentStatus = 137,
            
            /// <summary>
            /// Enum ViewFulfillmentStatesConfiguration for value: ViewFulfillmentStatesConfiguration
            /// </summary>
            [EnumMember(Value = "ViewFulfillmentStatesConfiguration")]
            ViewFulfillmentStatesConfiguration = 138,
            
            /// <summary>
            /// Enum CreateFulfillmentStatesConfiguration for value: CreateFulfillmentStatesConfiguration
            /// </summary>
            [EnumMember(Value = "CreateFulfillmentStatesConfiguration")]
            CreateFulfillmentStatesConfiguration = 139,
            
            /// <summary>
            /// Enum UpdateFulfillmentStatesConfiguration for value: UpdateFulfillmentStatesConfiguration
            /// </summary>
            [EnumMember(Value = "UpdateFulfillmentStatesConfiguration")]
            UpdateFulfillmentStatesConfiguration = 140,
            
            /// <summary>
            /// Enum DeleteFulfillmentStatesConfiguration for value: DeleteFulfillmentStatesConfiguration
            /// </summary>
            [EnumMember(Value = "DeleteFulfillmentStatesConfiguration")]
            DeleteFulfillmentStatesConfiguration = 141,
            
            /// <summary>
            /// Enum ViewPayouts for value: ViewPayouts
            /// </summary>
            [EnumMember(Value = "ViewPayouts")]
            ViewPayouts = 142,
            
            /// <summary>
            /// Enum ViewChannels for value: ViewChannels
            /// </summary>
            [EnumMember(Value = "ViewChannels")]
            ViewChannels = 143,
            
            /// <summary>
            /// Enum ViewOnboarding for value: ViewOnboarding
            /// </summary>
            [EnumMember(Value = "ViewOnboarding")]
            ViewOnboarding = 144,
            
            /// <summary>
            /// Enum UpdateOnboarding for value: UpdateOnboarding
            /// </summary>
            [EnumMember(Value = "UpdateOnboarding")]
            UpdateOnboarding = 145,
            
            /// <summary>
            /// Enum ViewClientDevices for value: ViewClientDevices
            /// </summary>
            [EnumMember(Value = "ViewClientDevices")]
            ViewClientDevices = 146,
            
            /// <summary>
            /// Enum UpdateClientDevices for value: UpdateClientDevices
            /// </summary>
            [EnumMember(Value = "UpdateClientDevices")]
            UpdateClientDevices = 147,
            
            /// <summary>
            /// Enum EnrollClientDevices for value: EnrollClientDevices
            /// </summary>
            [EnumMember(Value = "EnrollClientDevices")]
            EnrollClientDevices = 148,
            
            /// <summary>
            /// Enum AssignClientDevices for value: AssignClientDevices
            /// </summary>
            [EnumMember(Value = "AssignClientDevices")]
            AssignClientDevices = 149,
            
            /// <summary>
            /// Enum ViewClientAuditLogs for value: ViewClientAuditLogs
            /// </summary>
            [EnumMember(Value = "ViewClientAuditLogs")]
            ViewClientAuditLogs = 150,
            
            /// <summary>
            /// Enum CreateAppStoreAppConfiguration for value: CreateAppStoreAppConfiguration
            /// </summary>
            [EnumMember(Value = "CreateAppStoreAppConfiguration")]
            CreateAppStoreAppConfiguration = 151,
            
            /// <summary>
            /// Enum ViewAppStoreAppConfiguration for value: ViewAppStoreAppConfiguration
            /// </summary>
            [EnumMember(Value = "ViewAppStoreAppConfiguration")]
            ViewAppStoreAppConfiguration = 152,
            
            /// <summary>
            /// Enum UpdateAppStoreAppConfiguration for value: UpdateAppStoreAppConfiguration
            /// </summary>
            [EnumMember(Value = "UpdateAppStoreAppConfiguration")]
            UpdateAppStoreAppConfiguration = 153,
            
            /// <summary>
            /// Enum DeleteAppStoreAppConfiguration for value: DeleteAppStoreAppConfiguration
            /// </summary>
            [EnumMember(Value = "DeleteAppStoreAppConfiguration")]
            DeleteAppStoreAppConfiguration = 154,
            
            /// <summary>
            /// Enum UpdateAppStoreAppConfigurationSettings for value: UpdateAppStoreAppConfigurationSettings
            /// </summary>
            [EnumMember(Value = "UpdateAppStoreAppConfigurationSettings")]
            UpdateAppStoreAppConfigurationSettings = 155,
            
            /// <summary>
            /// Enum CreateAppStoreSubscription for value: CreateAppStoreSubscription
            /// </summary>
            [EnumMember(Value = "CreateAppStoreSubscription")]
            CreateAppStoreSubscription = 156,
            
            /// <summary>
            /// Enum UpdateAppStoreSubscription for value: UpdateAppStoreSubscription
            /// </summary>
            [EnumMember(Value = "UpdateAppStoreSubscription")]
            UpdateAppStoreSubscription = 157,
            
            /// <summary>
            /// Enum DeleteAppStoreSubscription for value: DeleteAppStoreSubscription
            /// </summary>
            [EnumMember(Value = "DeleteAppStoreSubscription")]
            DeleteAppStoreSubscription = 158,
            
            /// <summary>
            /// Enum ViewSalesChannels for value: ViewSalesChannels
            /// </summary>
            [EnumMember(Value = "ViewSalesChannels")]
            ViewSalesChannels = 159,
            
            /// <summary>
            /// Enum EditSalesChannels for value: EditSalesChannels
            /// </summary>
            [EnumMember(Value = "EditSalesChannels")]
            EditSalesChannels = 160,
            
            /// <summary>
            /// Enum ViewPayGreenWhiteLabelConfiguration for value: ViewPayGreenWhiteLabelConfiguration
            /// </summary>
            [EnumMember(Value = "ViewPayGreenWhiteLabelConfiguration")]
            ViewPayGreenWhiteLabelConfiguration = 161,
            
            /// <summary>
            /// Enum CreatePayGreenWhiteLabelConfiguration for value: CreatePayGreenWhiteLabelConfiguration
            /// </summary>
            [EnumMember(Value = "CreatePayGreenWhiteLabelConfiguration")]
            CreatePayGreenWhiteLabelConfiguration = 162,
            
            /// <summary>
            /// Enum UpdatePayGreenWhiteLabelConfiguration for value: UpdatePayGreenWhiteLabelConfiguration
            /// </summary>
            [EnumMember(Value = "UpdatePayGreenWhiteLabelConfiguration")]
            UpdatePayGreenWhiteLabelConfiguration = 163,
            
            /// <summary>
            /// Enum UpdatePayGreenStoreConfiguration for value: UpdatePayGreenStoreConfiguration
            /// </summary>
            [EnumMember(Value = "UpdatePayGreenStoreConfiguration")]
            UpdatePayGreenStoreConfiguration = 164,
            
            /// <summary>
            /// Enum ViewSubscriptions for value: ViewSubscriptions
            /// </summary>
            [EnumMember(Value = "ViewSubscriptions")]
            ViewSubscriptions = 165,
            
            /// <summary>
            /// Enum ViewInvoices for value: ViewInvoices
            /// </summary>
            [EnumMember(Value = "ViewInvoices")]
            ViewInvoices = 166
        }


        /// <summary>
        /// Constitutes a list of available resources
        /// </summary>
        /// <value>Constitutes a list of available resources</value>
        [DataMember(Name="AppResourceSet", EmitDefaultValue=false)]
        public List<AppResourceSetEnum> AppResourceSet { get; set; }
        /// <summary>
        /// Application Category
        /// </summary>
        /// <value>Application Category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationCategoryEnum
        {
            
            /// <summary>
            /// Enum Restaurant for value: Restaurant
            /// </summary>
            [EnumMember(Value = "Restaurant")]
            Restaurant = 1,
            
            /// <summary>
            /// Enum Cafe for value: Cafe
            /// </summary>
            [EnumMember(Value = "Cafe")]
            Cafe = 2,
            
            /// <summary>
            /// Enum Convenience for value: Convenience
            /// </summary>
            [EnumMember(Value = "Convenience")]
            Convenience = 3
        }

        /// <summary>
        /// Application Category
        /// </summary>
        /// <value>Application Category</value>
        [DataMember(Name="ApplicationCategory", EmitDefaultValue=false)]
        public ApplicationCategoryEnum? ApplicationCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        /// <param name="appId">App Identifier.</param>
        /// <param name="hasIosApp">Has iOS app in Apple App Store. This is readonly..</param>
        /// <param name="hasAndroidApp">Has Android app in Google Play Store. This is readonly..</param>
        /// <param name="logoImageUrl">Application Logo..</param>
        /// <param name="languages">Languages that have been selected to be available to customers..</param>
        /// <param name="availableAppLanguages">Lists all languages that are supported by Flipdish..</param>
        /// <param name="appAccessLevel">App access level for the logged in user.</param>
        /// <param name="appResourceSet">Constitutes a list of available resources.</param>
        /// <param name="features">Feature flags. These cannot be set by 3rd parties..</param>
        /// <param name="mapCenter">Center of the map coordinates. This is used to center the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App..</param>
        /// <param name="mapNorthEast">North East(Top Right) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App..</param>
        /// <param name="mapSouthWest">South West (Bottom Left) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App..</param>
        /// <param name="googleMapsApiKeyWeb">Key to be passed with Google Maps requests.</param>
        /// <param name="orgId">Org Id.</param>
        /// <param name="name">App name.   This is used in various places on the Apple App Store, Google Play Store, mobile apps and websites..</param>
        /// <param name="hostName">HostName on which the web-ordering system is allowed to be hosted or that a Flipdish website is hosted on..</param>
        /// <param name="mainColor">Main color of the web / Android / iOS applications.</param>
        /// <param name="kioskPrimaryColour">Primary colour used on the Kiosk.</param>
        /// <param name="applicationCategory">Application Category.</param>
        /// <param name="isPanaceaEnabled">Panacea is the term used for websites that are hosted on the my.flipdish.com domain. This value is true when the App&#39;s website is hosted on this domain.  The alternative to using Panacea websites is to use a custom domain..</param>
        /// <param name="panaceaVanityUrl">In case of IsPanaceaEnabled is true, the app can be accessed via https://my.flipdish.com/{PanaceaVanityUrl}.</param>
        /// <param name="cookieConsentPromptEnabled">Cookie Consent Prompt Enabled.</param>
        /// <param name="countryId">Country identifier in ISO 3166-1 alpha-2 format.   This code is set automatically based on the locations of the Stores in the App.     The App Country is used    - to determine how to parse mobile phone numbers that are entered in their local numbering format   - to determine if country specific payment methods should be offered   - in various fraud checks.</param>
        public App(string appId = default(string), bool? hasIosApp = default(bool?), bool? hasAndroidApp = default(bool?), string logoImageUrl = default(string), List<Language> languages = default(List<Language>), List<Language> availableAppLanguages = default(List<Language>), AppAccessLevelEnum? appAccessLevel = default(AppAccessLevelEnum?), List<AppResourceSetEnum> appResourceSet = default(List<AppResourceSetEnum>), List<string> features = default(List<string>), Coordinates mapCenter = default(Coordinates), Coordinates mapNorthEast = default(Coordinates), Coordinates mapSouthWest = default(Coordinates), string googleMapsApiKeyWeb = default(string), string orgId = default(string), string name = default(string), string hostName = default(string), string mainColor = default(string), string kioskPrimaryColour = default(string), ApplicationCategoryEnum? applicationCategory = default(ApplicationCategoryEnum?), bool? isPanaceaEnabled = default(bool?), string panaceaVanityUrl = default(string), bool? cookieConsentPromptEnabled = default(bool?), string countryId = default(string))
        {
            this.AppId = appId;
            this.HasIosApp = hasIosApp;
            this.HasAndroidApp = hasAndroidApp;
            this.LogoImageUrl = logoImageUrl;
            this.Languages = languages;
            this.AvailableAppLanguages = availableAppLanguages;
            this.AppAccessLevel = appAccessLevel;
            this.AppResourceSet = appResourceSet;
            this.Features = features;
            this.MapCenter = mapCenter;
            this.MapNorthEast = mapNorthEast;
            this.MapSouthWest = mapSouthWest;
            this.GoogleMapsApiKeyWeb = googleMapsApiKeyWeb;
            this.OrgId = orgId;
            this.Name = name;
            this.HostName = hostName;
            this.MainColor = mainColor;
            this.KioskPrimaryColour = kioskPrimaryColour;
            this.ApplicationCategory = applicationCategory;
            this.IsPanaceaEnabled = isPanaceaEnabled;
            this.PanaceaVanityUrl = panaceaVanityUrl;
            this.CookieConsentPromptEnabled = cookieConsentPromptEnabled;
            this.CountryId = countryId;
        }
        
        /// <summary>
        /// App Identifier
        /// </summary>
        /// <value>App Identifier</value>
        [DataMember(Name="AppId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Has iOS app in Apple App Store. This is readonly.
        /// </summary>
        /// <value>Has iOS app in Apple App Store. This is readonly.</value>
        [DataMember(Name="HasIosApp", EmitDefaultValue=false)]
        public bool? HasIosApp { get; set; }

        /// <summary>
        /// Has Android app in Google Play Store. This is readonly.
        /// </summary>
        /// <value>Has Android app in Google Play Store. This is readonly.</value>
        [DataMember(Name="HasAndroidApp", EmitDefaultValue=false)]
        public bool? HasAndroidApp { get; set; }

        /// <summary>
        /// Application Logo.
        /// </summary>
        /// <value>Application Logo.</value>
        [DataMember(Name="LogoImageUrl", EmitDefaultValue=false)]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Languages that have been selected to be available to customers.
        /// </summary>
        /// <value>Languages that have been selected to be available to customers.</value>
        [DataMember(Name="Languages", EmitDefaultValue=false)]
        public List<Language> Languages { get; set; }

        /// <summary>
        /// Lists all languages that are supported by Flipdish.
        /// </summary>
        /// <value>Lists all languages that are supported by Flipdish.</value>
        [DataMember(Name="AvailableAppLanguages", EmitDefaultValue=false)]
        public List<Language> AvailableAppLanguages { get; set; }



        /// <summary>
        /// Feature flags. These cannot be set by 3rd parties.
        /// </summary>
        /// <value>Feature flags. These cannot be set by 3rd parties.</value>
        [DataMember(Name="Features", EmitDefaultValue=false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Center of the map coordinates. This is used to center the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
        /// </summary>
        /// <value>Center of the map coordinates. This is used to center the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.</value>
        [DataMember(Name="MapCenter", EmitDefaultValue=false)]
        public Coordinates MapCenter { get; set; }

        /// <summary>
        /// North East(Top Right) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
        /// </summary>
        /// <value>North East(Top Right) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.</value>
        [DataMember(Name="MapNorthEast", EmitDefaultValue=false)]
        public Coordinates MapNorthEast { get; set; }

        /// <summary>
        /// South West (Bottom Left) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
        /// </summary>
        /// <value>South West (Bottom Left) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.</value>
        [DataMember(Name="MapSouthWest", EmitDefaultValue=false)]
        public Coordinates MapSouthWest { get; set; }

        /// <summary>
        /// Key to be passed with Google Maps requests
        /// </summary>
        /// <value>Key to be passed with Google Maps requests</value>
        [DataMember(Name="GoogleMapsApiKeyWeb", EmitDefaultValue=false)]
        public string GoogleMapsApiKeyWeb { get; set; }

        /// <summary>
        /// Org Id
        /// </summary>
        /// <value>Org Id</value>
        [DataMember(Name="OrgId", EmitDefaultValue=false)]
        public string OrgId { get; set; }

        /// <summary>
        /// App name.   This is used in various places on the Apple App Store, Google Play Store, mobile apps and websites.
        /// </summary>
        /// <value>App name.   This is used in various places on the Apple App Store, Google Play Store, mobile apps and websites.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// HostName on which the web-ordering system is allowed to be hosted or that a Flipdish website is hosted on.
        /// </summary>
        /// <value>HostName on which the web-ordering system is allowed to be hosted or that a Flipdish website is hosted on.</value>
        [DataMember(Name="HostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Main color of the web / Android / iOS applications
        /// </summary>
        /// <value>Main color of the web / Android / iOS applications</value>
        [DataMember(Name="MainColor", EmitDefaultValue=false)]
        public string MainColor { get; set; }

        /// <summary>
        /// Primary colour used on the Kiosk
        /// </summary>
        /// <value>Primary colour used on the Kiosk</value>
        [DataMember(Name="KioskPrimaryColour", EmitDefaultValue=false)]
        public string KioskPrimaryColour { get; set; }


        /// <summary>
        /// Panacea is the term used for websites that are hosted on the my.flipdish.com domain. This value is true when the App&#39;s website is hosted on this domain.  The alternative to using Panacea websites is to use a custom domain.
        /// </summary>
        /// <value>Panacea is the term used for websites that are hosted on the my.flipdish.com domain. This value is true when the App&#39;s website is hosted on this domain.  The alternative to using Panacea websites is to use a custom domain.</value>
        [DataMember(Name="IsPanaceaEnabled", EmitDefaultValue=false)]
        public bool? IsPanaceaEnabled { get; set; }

        /// <summary>
        /// In case of IsPanaceaEnabled is true, the app can be accessed via https://my.flipdish.com/{PanaceaVanityUrl}
        /// </summary>
        /// <value>In case of IsPanaceaEnabled is true, the app can be accessed via https://my.flipdish.com/{PanaceaVanityUrl}</value>
        [DataMember(Name="PanaceaVanityUrl", EmitDefaultValue=false)]
        public string PanaceaVanityUrl { get; set; }

        /// <summary>
        /// Cookie Consent Prompt Enabled
        /// </summary>
        /// <value>Cookie Consent Prompt Enabled</value>
        [DataMember(Name="CookieConsentPromptEnabled", EmitDefaultValue=false)]
        public bool? CookieConsentPromptEnabled { get; set; }

        /// <summary>
        /// Country identifier in ISO 3166-1 alpha-2 format.   This code is set automatically based on the locations of the Stores in the App.     The App Country is used    - to determine how to parse mobile phone numbers that are entered in their local numbering format   - to determine if country specific payment methods should be offered   - in various fraud checks
        /// </summary>
        /// <value>Country identifier in ISO 3166-1 alpha-2 format.   This code is set automatically based on the locations of the Stores in the App.     The App Country is used    - to determine how to parse mobile phone numbers that are entered in their local numbering format   - to determine if country specific payment methods should be offered   - in various fraud checks</value>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public string CountryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class App {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  HasIosApp: ").Append(HasIosApp).Append("\n");
            sb.Append("  HasAndroidApp: ").Append(HasAndroidApp).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  AvailableAppLanguages: ").Append(AvailableAppLanguages).Append("\n");
            sb.Append("  AppAccessLevel: ").Append(AppAccessLevel).Append("\n");
            sb.Append("  AppResourceSet: ").Append(AppResourceSet).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  MapCenter: ").Append(MapCenter).Append("\n");
            sb.Append("  MapNorthEast: ").Append(MapNorthEast).Append("\n");
            sb.Append("  MapSouthWest: ").Append(MapSouthWest).Append("\n");
            sb.Append("  GoogleMapsApiKeyWeb: ").Append(GoogleMapsApiKeyWeb).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  MainColor: ").Append(MainColor).Append("\n");
            sb.Append("  KioskPrimaryColour: ").Append(KioskPrimaryColour).Append("\n");
            sb.Append("  ApplicationCategory: ").Append(ApplicationCategory).Append("\n");
            sb.Append("  IsPanaceaEnabled: ").Append(IsPanaceaEnabled).Append("\n");
            sb.Append("  PanaceaVanityUrl: ").Append(PanaceaVanityUrl).Append("\n");
            sb.Append("  CookieConsentPromptEnabled: ").Append(CookieConsentPromptEnabled).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as App);
        }

        /// <summary>
        /// Returns true if App instances are equal
        /// </summary>
        /// <param name="input">Instance of App to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(App input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.HasIosApp == input.HasIosApp ||
                    (this.HasIosApp != null &&
                    this.HasIosApp.Equals(input.HasIosApp))
                ) && 
                (
                    this.HasAndroidApp == input.HasAndroidApp ||
                    (this.HasAndroidApp != null &&
                    this.HasAndroidApp.Equals(input.HasAndroidApp))
                ) && 
                (
                    this.LogoImageUrl == input.LogoImageUrl ||
                    (this.LogoImageUrl != null &&
                    this.LogoImageUrl.Equals(input.LogoImageUrl))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.AvailableAppLanguages == input.AvailableAppLanguages ||
                    this.AvailableAppLanguages != null &&
                    this.AvailableAppLanguages.SequenceEqual(input.AvailableAppLanguages)
                ) && 
                (
                    this.AppAccessLevel == input.AppAccessLevel ||
                    (this.AppAccessLevel != null &&
                    this.AppAccessLevel.Equals(input.AppAccessLevel))
                ) && 
                (
                    this.AppResourceSet == input.AppResourceSet ||
                    this.AppResourceSet != null &&
                    this.AppResourceSet.SequenceEqual(input.AppResourceSet)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.MapCenter == input.MapCenter ||
                    (this.MapCenter != null &&
                    this.MapCenter.Equals(input.MapCenter))
                ) && 
                (
                    this.MapNorthEast == input.MapNorthEast ||
                    (this.MapNorthEast != null &&
                    this.MapNorthEast.Equals(input.MapNorthEast))
                ) && 
                (
                    this.MapSouthWest == input.MapSouthWest ||
                    (this.MapSouthWest != null &&
                    this.MapSouthWest.Equals(input.MapSouthWest))
                ) && 
                (
                    this.GoogleMapsApiKeyWeb == input.GoogleMapsApiKeyWeb ||
                    (this.GoogleMapsApiKeyWeb != null &&
                    this.GoogleMapsApiKeyWeb.Equals(input.GoogleMapsApiKeyWeb))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.MainColor == input.MainColor ||
                    (this.MainColor != null &&
                    this.MainColor.Equals(input.MainColor))
                ) && 
                (
                    this.KioskPrimaryColour == input.KioskPrimaryColour ||
                    (this.KioskPrimaryColour != null &&
                    this.KioskPrimaryColour.Equals(input.KioskPrimaryColour))
                ) && 
                (
                    this.ApplicationCategory == input.ApplicationCategory ||
                    (this.ApplicationCategory != null &&
                    this.ApplicationCategory.Equals(input.ApplicationCategory))
                ) && 
                (
                    this.IsPanaceaEnabled == input.IsPanaceaEnabled ||
                    (this.IsPanaceaEnabled != null &&
                    this.IsPanaceaEnabled.Equals(input.IsPanaceaEnabled))
                ) && 
                (
                    this.PanaceaVanityUrl == input.PanaceaVanityUrl ||
                    (this.PanaceaVanityUrl != null &&
                    this.PanaceaVanityUrl.Equals(input.PanaceaVanityUrl))
                ) && 
                (
                    this.CookieConsentPromptEnabled == input.CookieConsentPromptEnabled ||
                    (this.CookieConsentPromptEnabled != null &&
                    this.CookieConsentPromptEnabled.Equals(input.CookieConsentPromptEnabled))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.HasIosApp != null)
                    hashCode = hashCode * 59 + this.HasIosApp.GetHashCode();
                if (this.HasAndroidApp != null)
                    hashCode = hashCode * 59 + this.HasAndroidApp.GetHashCode();
                if (this.LogoImageUrl != null)
                    hashCode = hashCode * 59 + this.LogoImageUrl.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.AvailableAppLanguages != null)
                    hashCode = hashCode * 59 + this.AvailableAppLanguages.GetHashCode();
                if (this.AppAccessLevel != null)
                    hashCode = hashCode * 59 + this.AppAccessLevel.GetHashCode();
                if (this.AppResourceSet != null)
                    hashCode = hashCode * 59 + this.AppResourceSet.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.MapCenter != null)
                    hashCode = hashCode * 59 + this.MapCenter.GetHashCode();
                if (this.MapNorthEast != null)
                    hashCode = hashCode * 59 + this.MapNorthEast.GetHashCode();
                if (this.MapSouthWest != null)
                    hashCode = hashCode * 59 + this.MapSouthWest.GetHashCode();
                if (this.GoogleMapsApiKeyWeb != null)
                    hashCode = hashCode * 59 + this.GoogleMapsApiKeyWeb.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.MainColor != null)
                    hashCode = hashCode * 59 + this.MainColor.GetHashCode();
                if (this.KioskPrimaryColour != null)
                    hashCode = hashCode * 59 + this.KioskPrimaryColour.GetHashCode();
                if (this.ApplicationCategory != null)
                    hashCode = hashCode * 59 + this.ApplicationCategory.GetHashCode();
                if (this.IsPanaceaEnabled != null)
                    hashCode = hashCode * 59 + this.IsPanaceaEnabled.GetHashCode();
                if (this.PanaceaVanityUrl != null)
                    hashCode = hashCode * 59 + this.PanaceaVanityUrl.GetHashCode();
                if (this.CookieConsentPromptEnabled != null)
                    hashCode = hashCode * 59 + this.CookieConsentPromptEnabled.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                return hashCode;
            }
        }
    }

}

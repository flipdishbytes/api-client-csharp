/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LocationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LocationApiTests
    {
        private LocationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LocationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LocationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LocationApi
            //Assert.IsInstanceOfType(typeof(LocationApi), instance, "instance is a LocationApi");
        }

        
        /// <summary>
        /// Test CreateLocation
        /// </summary>
        [Test]
        public void CreateLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CreateLocation> createLocationInput = null;
            //int? locationAreaId = null;
            //string appId = null;
            //int? storeId = null;
            //var response = instance.CreateLocation(createLocationInput, locationAreaId, appId, storeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteLocation
        /// </summary>
        [Test]
        public void DeleteLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? locationAreaId = null;
            //string appId = null;
            //int? storeId = null;
            //var response = instance.DeleteLocation(locationId, locationAreaId, appId, storeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test MapLocationToExternalId
        /// </summary>
        [Test]
        public void MapLocationToExternalIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? locationAreaId = null;
            //string appId = null;
            //int? storeId = null;
            //string externalLocationId = null;
            //var response = instance.MapLocationToExternalId(locationId, locationAreaId, appId, storeId, externalLocationId);
            //Assert.IsInstanceOf<RestApiResultMappedLocation> (response, "response is RestApiResultMappedLocation");
        }
        
        /// <summary>
        /// Test MoveLocation
        /// </summary>
        [Test]
        public void MoveLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? locationAreaId = null;
            //int? newLocationAreaId = null;
            //string appId = null;
            //int? storeId = null;
            //var response = instance.MoveLocation(locationId, locationAreaId, newLocationAreaId, appId, storeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateLocation
        /// </summary>
        [Test]
        public void UpdateLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateLocation updateLocationInput = null;
            //int? locationAreaId = null;
            //int? locationId = null;
            //string appId = null;
            //int? storeId = null;
            //var response = instance.UpdateLocation(updateLocationInput, locationAreaId, locationId, appId, storeId);
            //Assert.IsInstanceOf<RestApiResultLocationAreaLocation> (response, "response is RestApiResultLocationAreaLocation");
        }
        
    }

}

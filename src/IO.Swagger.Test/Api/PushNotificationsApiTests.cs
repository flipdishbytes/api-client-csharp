/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PushNotificationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PushNotificationsApiTests
    {
        private PushNotificationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PushNotificationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PushNotificationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PushNotificationsApi
            //Assert.IsInstanceOfType(typeof(PushNotificationsApi), instance, "instance is a PushNotificationsApi");
        }

        
        /// <summary>
        /// Test DeletePushNotification
        /// </summary>
        [Test]
        public void DeletePushNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? scheduledPushNotificationId = null;
            //instance.DeletePushNotification(appId, scheduledPushNotificationId);
            
        }
        
        /// <summary>
        /// Test GetPushNotifications
        /// </summary>
        [Test]
        public void GetPushNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetPushNotifications(appId, page, limit);
            //Assert.IsInstanceOf<RestApiPaginationResultPushNotificationResponse> (response, "response is RestApiPaginationResultPushNotificationResponse");
        }
        
        /// <summary>
        /// Test SchedulePushNotification
        /// </summary>
        [Test]
        public void SchedulePushNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //PushNotificationRequest notification = null;
            //var response = instance.SchedulePushNotification(appId, notification);
            //Assert.IsInstanceOf<RestApiResultPushNotificationResponse> (response, "response is RestApiResultPushNotificationResponse");
        }
        
        /// <summary>
        /// Test UpdatePushNotification
        /// </summary>
        [Test]
        public void UpdatePushNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? scheduledPushNotificationId = null;
            //PushNotificationRequest notification = null;
            //var response = instance.UpdatePushNotification(appId, scheduledPushNotificationId, notification);
            //Assert.IsInstanceOf<RestApiResultPushNotificationResponse> (response, "response is RestApiResultPushNotificationResponse");
        }
        
    }

}

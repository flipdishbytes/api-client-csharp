/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ChannelsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChannelsApiTests
    {
        private ChannelsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChannelsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChannelsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChannelsApi
            //Assert.IsInstanceOfType(typeof(ChannelsApi), instance, "instance is a ChannelsApi");
        }

        
        /// <summary>
        /// Test AssignAppIdToSalesChannel
        /// </summary>
        [Test]
        public void AssignAppIdToSalesChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //var response = instance.AssignAppIdToSalesChannel(appId, channelId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AssignStoreToChannel
        /// </summary>
        [Test]
        public void AssignStoreToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeId = null;
            //string appId = null;
            //int? channelId = null;
            //var response = instance.AssignStoreToChannel(storeId, appId, channelId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AttachStoreToSalesChannel
        /// </summary>
        [Test]
        public void AttachStoreToSalesChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //int? storeId = null;
            //var response = instance.AttachStoreToSalesChannel(appId, channelId, storeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DetachAllStoresFromSalesChannel
        /// </summary>
        [Test]
        public void DetachAllStoresFromSalesChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //var response = instance.DetachAllStoresFromSalesChannel(appId, channelId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DetachStoreFromSalesChannel
        /// </summary>
        [Test]
        public void DetachStoreFromSalesChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //int? storeId = null;
            //var response = instance.DetachStoreFromSalesChannel(appId, channelId, storeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAssignedChannels
        /// </summary>
        [Test]
        public void GetAssignedChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetAssignedChannels(appId);
            //Assert.IsInstanceOf<RestApiArrayResultChannel> (response, "response is RestApiArrayResultChannel");
        }
        
        /// <summary>
        /// Test GetAvailableChannels
        /// </summary>
        [Test]
        public void GetAvailableChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetAvailableChannels(appId);
            //Assert.IsInstanceOf<RestApiArrayResultChannel> (response, "response is RestApiArrayResultChannel");
        }
        
        /// <summary>
        /// Test GetChannel
        /// </summary>
        [Test]
        public void GetChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string appId = null;
            //var response = instance.GetChannel(id, appId);
            //Assert.IsInstanceOf<RestApiResultChannel> (response, "response is RestApiResultChannel");
        }
        
        /// <summary>
        /// Test GetChannels
        /// </summary>
        [Test]
        public void GetChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetChannels(appId);
            //Assert.IsInstanceOf<RestApiArrayResultChannel> (response, "response is RestApiArrayResultChannel");
        }
        
        /// <summary>
        /// Test GetStoresAssignedToChannel
        /// </summary>
        [Test]
        public void GetStoresAssignedToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //var response = instance.GetStoresAssignedToChannel(appId, channelId);
            //Assert.IsInstanceOf<RestApiArrayResultStoreChannelAssignment> (response, "response is RestApiArrayResultStoreChannelAssignment");
        }
        
        /// <summary>
        /// Test GetStoresBySalesChannel
        /// </summary>
        [Test]
        public void GetStoresBySalesChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? channelId = null;
            //var response = instance.GetStoresBySalesChannel(appId, channelId);
            //Assert.IsInstanceOf<Response> (response, "response is Response");
        }
        
        /// <summary>
        /// Test UnassignStoreFromChannel
        /// </summary>
        [Test]
        public void UnassignStoreFromChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeId = null;
            //string appId = null;
            //int? channelId = null;
            //var response = instance.UnassignStoreFromChannel(storeId, appId, channelId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}

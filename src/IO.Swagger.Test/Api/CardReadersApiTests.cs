/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CardReadersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CardReadersApiTests
    {
        private CardReadersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CardReadersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CardReadersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CardReadersApi
            //Assert.IsInstanceOfType(typeof(CardReadersApi), instance, "instance is a CardReadersApi");
        }

        
        /// <summary>
        /// Test AuthorizeStripeTerminal
        /// </summary>
        [Test]
        public void AuthorizeStripeTerminalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.AuthorizeStripeTerminal(appId);
            //Assert.IsInstanceOf<RestApiResultStripeTerminalPrivateKey> (response, "response is RestApiResultStripeTerminalPrivateKey");
        }
        
        /// <summary>
        /// Test CancelCurrentlyInitiatedBluetoothDeviceUpdate
        /// </summary>
        [Test]
        public void CancelCurrentlyInitiatedBluetoothDeviceUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //string terminalType = null;
            //instance.CancelCurrentlyInitiatedBluetoothDeviceUpdate(appId, deviceId, terminalType);
            
        }
        
        /// <summary>
        /// Test CancelReaderAction
        /// </summary>
        [Test]
        public void CancelReaderActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string readerId = null;
            //string appId = null;
            //var response = instance.CancelReaderAction(readerId, appId);
            //Assert.IsInstanceOf<RestApiResultCardReader> (response, "response is RestApiResultCardReader");
        }
        
        /// <summary>
        /// Test CardReadersGetReader
        /// </summary>
        [Test]
        public void CardReadersGetReaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string readerId = null;
            //string appId = null;
            //var response = instance.CardReadersGetReader(readerId, appId);
            //Assert.IsInstanceOf<RestApiResultCardReader> (response, "response is RestApiResultCardReader");
        }
        
        /// <summary>
        /// Test GenerateStripeTerminalLocation
        /// </summary>
        [Test]
        public void GenerateStripeTerminalLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GeoPointRequest geoPointRequest = null;
            //string appId = null;
            //var response = instance.GenerateStripeTerminalLocation(geoPointRequest, appId);
            //Assert.IsInstanceOf<RestApiResultStripeTerminalLocation> (response, "response is RestApiResultStripeTerminalLocation");
        }
        
        /// <summary>
        /// Test GetBluetoothTerminalStatus
        /// </summary>
        [Test]
        public void GetBluetoothTerminalStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //var response = instance.GetBluetoothTerminalStatus(appId, deviceId);
            //Assert.IsInstanceOf<RestApiResultBluetoothTerminalStatus> (response, "response is RestApiResultBluetoothTerminalStatus");
        }
        
        /// <summary>
        /// Test GetStripeConnectionToken
        /// </summary>
        [Test]
        public void GetStripeConnectionTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetStripeConnectionToken(appId);
            //Assert.IsInstanceOf<RestApiResultStripeTerminalConnectionToken> (response, "response is RestApiResultStripeTerminalConnectionToken");
        }
        
        /// <summary>
        /// Test InitiateBluetoothTerminalDeviceUpdateCheck
        /// </summary>
        [Test]
        public void InitiateBluetoothTerminalDeviceUpdateCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //string terminalType = null;
            //instance.InitiateBluetoothTerminalDeviceUpdateCheck(appId, deviceId, terminalType);
            
        }
        
        /// <summary>
        /// Test InitiateKioskBluetoothPairingMode
        /// </summary>
        [Test]
        public void InitiateKioskBluetoothPairingModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //string terminalType = null;
            //instance.InitiateKioskBluetoothPairingMode(appId, deviceId, terminalType);
            
        }
        
        /// <summary>
        /// Test InitiateKioskBluetoothUpdateInstall
        /// </summary>
        [Test]
        public void InitiateKioskBluetoothUpdateInstallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //string terminalType = null;
            //instance.InitiateKioskBluetoothUpdateInstall(appId, deviceId, terminalType);
            
        }
        
        /// <summary>
        /// Test InitiateReaderProcessPaymentIntent
        /// </summary>
        [Test]
        public void InitiateReaderProcessPaymentIntentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessPaymentIntentRequest request = null;
            //string readerId = null;
            //string appId = null;
            //var response = instance.InitiateReaderProcessPaymentIntent(request, readerId, appId);
            //Assert.IsInstanceOf<RestApiResultCardReader> (response, "response is RestApiResultCardReader");
        }
        
        /// <summary>
        /// Test RegisterStripeTerminal
        /// </summary>
        [Test]
        public void RegisterStripeTerminalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CardReaderRegistrationRequest request = null;
            //string appId = null;
            //var response = instance.RegisterStripeTerminal(request, appId);
            //Assert.IsInstanceOf<RestApiResultCardReader> (response, "response is RestApiResultCardReader");
        }
        
        /// <summary>
        /// Test UnRegisterTerminal
        /// </summary>
        [Test]
        public void UnRegisterTerminalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnRegisterCardReaderRequest request = null;
            //string appId = null;
            //var response = instance.UnRegisterTerminal(request, appId);
            //Assert.IsInstanceOf<RestApiResultCardReader> (response, "response is RestApiResultCardReader");
        }
        
        /// <summary>
        /// Test UnpairCurrentlyPairedBluetoothDevice
        /// </summary>
        [Test]
        public void UnpairCurrentlyPairedBluetoothDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string deviceId = null;
            //instance.UnpairCurrentlyPairedBluetoothDevice(appId, deviceId);
            
        }
        
    }

}

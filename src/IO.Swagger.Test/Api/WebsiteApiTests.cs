/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WebsiteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebsiteApiTests
    {
        private WebsiteApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WebsiteApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WebsiteApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebsiteApi
            //Assert.IsInstanceOfType(typeof(WebsiteApi), instance, "instance is a WebsiteApi");
        }

        
        /// <summary>
        /// Test AddTestimonial
        /// </summary>
        [Test]
        public void AddTestimonialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //WebsiteTestimonialBase testimonial = null;
            //var response = instance.AddTestimonial(appId, testimonial);
            //Assert.IsInstanceOf<RestApiResultWebsiteTestimonial> (response, "response is RestApiResultWebsiteTestimonial");
        }
        
        /// <summary>
        /// Test DeleteTestimonial
        /// </summary>
        [Test]
        public void DeleteTestimonialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? testimonialId = null;
            //instance.DeleteTestimonial(appId, testimonialId);
            
        }
        
        /// <summary>
        /// Test DeleteWebsiteImage
        /// </summary>
        [Test]
        public void DeleteWebsiteImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? imageId = null;
            //instance.DeleteWebsiteImage(appId, imageId);
            
        }
        
        /// <summary>
        /// Test EditTestimonial
        /// </summary>
        [Test]
        public void EditTestimonialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? testimonialId = null;
            //WebsiteTestimonialBase testimonial = null;
            //var response = instance.EditTestimonial(appId, testimonialId, testimonial);
            //Assert.IsInstanceOf<RestApiResultWebsiteTestimonial> (response, "response is RestApiResultWebsiteTestimonial");
        }
        
        /// <summary>
        /// Test GetIndexConfiguration
        /// </summary>
        [Test]
        public void GetIndexConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetIndexConfiguration(appId);
            //Assert.IsInstanceOf<RestApiResultIndexPage> (response, "response is RestApiResultIndexPage");
        }
        
        /// <summary>
        /// Test SetIndexConfiguration
        /// </summary>
        [Test]
        public void SetIndexConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //IndexPageBase indexPage = null;
            //var response = instance.SetIndexConfiguration(appId, indexPage);
            //Assert.IsInstanceOf<RestApiResultIndexPageBase> (response, "response is RestApiResultIndexPageBase");
        }
        
        /// <summary>
        /// Test UploadWebsiteImage
        /// </summary>
        [Test]
        public void UploadWebsiteImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string imageLocation = null;
            //System.IO.Stream image = null;
            //var response = instance.UploadWebsiteImage(appId, imageLocation, image);
            //Assert.IsInstanceOf<RestApiResultWebsiteImage> (response, "response is RestApiResultWebsiteImage");
        }
        
        /// <summary>
        /// Test WebsiteCheckNow
        /// </summary>
        [Test]
        public void WebsiteCheckNowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.WebsiteCheckNow(appId);
            
        }
        
    }

}

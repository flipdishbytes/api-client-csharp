/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AppStoreDeveloperApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AppStoreDeveloperApiTests
    {
        private AppStoreDeveloperApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AppStoreDeveloperApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AppStoreDeveloperApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AppStoreDeveloperApi
            //Assert.IsInstanceOfType(typeof(AppStoreDeveloperApi), instance, "instance is a AppStoreDeveloperApi");
        }

        
        /// <summary>
        /// Test AppVerificationUpdate
        /// </summary>
        [Test]
        public void AppVerificationUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oauthAppId = null;
            //string appStoreAppId = null;
            //string verificationStatus = null;
            //instance.AppVerificationUpdate(oauthAppId, appStoreAppId, verificationStatus);
            
        }
        
        /// <summary>
        /// Test CreateAppStoreApp
        /// </summary>
        [Test]
        public void CreateAppStoreAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oauthAppId = null;
            //CreateAppStoreApp createAppStoreApp = null;
            //var response = instance.CreateAppStoreApp(oauthAppId, createAppStoreApp);
            //Assert.IsInstanceOf<RestApiResultAppStoreApp> (response, "response is RestApiResultAppStoreApp");
        }
        
        /// <summary>
        /// Test DeleteAppStoreApp
        /// </summary>
        [Test]
        public void DeleteAppStoreAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oauthAppId = null;
            //string appStoreAppId = null;
            //var response = instance.DeleteAppStoreApp(oauthAppId, appStoreAppId);
            //Assert.IsInstanceOf<RestApiStringResult> (response, "response is RestApiStringResult");
        }
        
        /// <summary>
        /// Test UpdateAppStoreApp
        /// </summary>
        [Test]
        public void UpdateAppStoreAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oauthAppId = null;
            //string appStoreAppId = null;
            //UpdateAppStoreApp appStoreApp = null;
            //instance.UpdateAppStoreApp(oauthAppId, appStoreAppId, appStoreApp);
            
        }
        
        /// <summary>
        /// Test UploadAppStoreAppLogo
        /// </summary>
        [Test]
        public void UploadAppStoreAppLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oauthAppId = null;
            //string appStoreAppId = null;
            //System.IO.Stream image = null;
            //instance.UploadAppStoreAppLogo(oauthAppId, appStoreAppId, image);
            
        }
        
    }

}

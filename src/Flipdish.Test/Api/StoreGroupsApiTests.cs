/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flipdish.Client;
using Flipdish.Api;
using Flipdish.Model;

namespace Flipdish.Test
{
    /// <summary>
    ///  Class for testing StoreGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StoreGroupsApiTests
    {
        private StoreGroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StoreGroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StoreGroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StoreGroupsApi
            //Assert.IsInstanceOfType(typeof(StoreGroupsApi), instance, "instance is a StoreGroupsApi");
        }

        
        /// <summary>
        /// Test CreateStoreGroup
        /// </summary>
        [Test]
        public void CreateStoreGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appNameId = null;
            //StoreGroupBase storeGroup = null;
            //var response = instance.CreateStoreGroup(appNameId, storeGroup);
            //Assert.IsInstanceOf<RestApiResultStoreGroup> (response, "response is RestApiResultStoreGroup");
        }
        
        /// <summary>
        /// Test GetStoreGroup
        /// </summary>
        [Test]
        public void GetStoreGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeGroupId = null;
            //var response = instance.GetStoreGroup(storeGroupId);
            //Assert.IsInstanceOf<RestApiResultStoreGroup> (response, "response is RestApiResultStoreGroup");
        }
        
        /// <summary>
        /// Test GetStoreGroups
        /// </summary>
        [Test]
        public void GetStoreGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appNameId = null;
            //string searchQuery = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetStoreGroups(appNameId, searchQuery, page, limit);
            //Assert.IsInstanceOf<RestApiPaginationResultStoreGroup> (response, "response is RestApiPaginationResultStoreGroup");
        }
        
        /// <summary>
        /// Test GetStoreGroupsExtended
        /// </summary>
        [Test]
        public void GetStoreGroupsExtendedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appNameId = null;
            //string searchQuery = null;
            //int? page = null;
            //int? limit = null;
            //int? groupingRadius = null;
            //var response = instance.GetStoreGroupsExtended(appNameId, searchQuery, page, limit, groupingRadius);
            //Assert.IsInstanceOf<RestApiPaginationResultStoreGroupExtended> (response, "response is RestApiPaginationResultStoreGroupExtended");
        }
        
        /// <summary>
        /// Test RemoveStoreGroup
        /// </summary>
        [Test]
        public void RemoveStoreGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeGroupId = null;
            //instance.RemoveStoreGroup(storeGroupId);
            
        }
        
        /// <summary>
        /// Test UpdateStoreGroup
        /// </summary>
        [Test]
        public void UpdateStoreGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeGroupId = null;
            //StoreGroupBase storeGroup = null;
            //var response = instance.UpdateStoreGroup(storeGroupId, storeGroup);
            //Assert.IsInstanceOf<RestApiResultStoreGroupBase> (response, "response is RestApiResultStoreGroupBase");
        }
        
    }

}

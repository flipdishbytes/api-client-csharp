/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flipdish.Client;
using Flipdish.Api;
using Flipdish.Model;

namespace Flipdish.Test
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionsApiTests
    {
        private SubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionsApi
            //Assert.IsInstanceOfType(typeof(SubscriptionsApi), instance, "instance is a SubscriptionsApi");
        }

        
        /// <summary>
        /// Test SubscriptionsCancelSubscription
        /// </summary>
        [Test]
        public void SubscriptionsCancelSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //var response = instance.SubscriptionsCancelSubscription(subscriptionId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SubscriptionsGetCard
        /// </summary>
        [Test]
        public void SubscriptionsGetCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //var response = instance.SubscriptionsGetCard(subscriptionId);
            //Assert.IsInstanceOf<RestApiResultCard> (response, "response is RestApiResultCard");
        }
        
        /// <summary>
        /// Test SubscriptionsGetPlansByCurrency
        /// </summary>
        [Test]
        public void SubscriptionsGetPlansByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SubscriptionsGetPlansByCurrency();
            //Assert.IsInstanceOf<RestApiResultSubscriptionPlansResponse> (response, "response is RestApiResultSubscriptionPlansResponse");
        }
        
        /// <summary>
        /// Test SubscriptionsGetSubscription
        /// </summary>
        [Test]
        public void SubscriptionsGetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //var response = instance.SubscriptionsGetSubscription(subscriptionId);
            //Assert.IsInstanceOf<RestApiResultSubscription> (response, "response is RestApiResultSubscription");
        }
        
        /// <summary>
        /// Test SubscriptionsGetUserSubscriptionByAppId
        /// </summary>
        [Test]
        public void SubscriptionsGetUserSubscriptionByAppIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.SubscriptionsGetUserSubscriptionByAppId(appId);
            //Assert.IsInstanceOf<RestApiResultSubscription> (response, "response is RestApiResultSubscription");
        }
        
        /// <summary>
        /// Test SubscriptionsReplaceOldCardWithNewCard
        /// </summary>
        [Test]
        public void SubscriptionsReplaceOldCardWithNewCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //CardWithToken card = null;
            //var response = instance.SubscriptionsReplaceOldCardWithNewCard(subscriptionId, card);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SubscriptionsSubscribe
        /// </summary>
        [Test]
        public void SubscriptionsSubscribeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionWithToken subscription = null;
            //var response = instance.SubscriptionsSubscribe(subscription);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SubscriptionsUpdateCardExpiringDate
        /// </summary>
        [Test]
        public void SubscriptionsUpdateCardExpiringDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //CardBase card = null;
            //var response = instance.SubscriptionsUpdateCardExpiringDate(subscriptionId, card);
            //Assert.IsInstanceOf<RestApiResultCard> (response, "response is RestApiResultCard");
        }
        
        /// <summary>
        /// Test SubscriptionsUpdateSubscription
        /// </summary>
        [Test]
        public void SubscriptionsUpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? subscriptionId = null;
            //SubscriptionBase subscription = null;
            //var response = instance.SubscriptionsUpdateSubscription(subscriptionId, subscription);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}

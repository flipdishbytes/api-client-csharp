/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flipdish.Client;
using Flipdish.Api;
using Flipdish.Model;

namespace Flipdish.Test
{
    /// <summary>
    ///  Class for testing DeliveryTrackingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeliveryTrackingApiTests
    {
        private DeliveryTrackingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeliveryTrackingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeliveryTrackingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeliveryTrackingApi
            //Assert.IsInstanceOfType(typeof(DeliveryTrackingApi), instance, "instance is a DeliveryTrackingApi");
        }

        
        /// <summary>
        /// Test AssignDriverToOrder
        /// </summary>
        [Test]
        public void AssignDriverToOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? orderId = null;
            //int? driverId = null;
            //instance.AssignDriverToOrder(appId, orderId, driverId);
            
        }
        
        /// <summary>
        /// Test AssignDriverToOrders
        /// </summary>
        [Test]
        public void AssignDriverToOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? driverId = null;
            //List<OrderIdAndSequenceNumber> orderIdAndSequenceNumbers = null;
            //instance.AssignDriverToOrders(appId, driverId, orderIdAndSequenceNumbers);
            
        }
        
        /// <summary>
        /// Test GetDrivers
        /// </summary>
        [Test]
        public void GetDriversTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string name = null;
            //string phoneNumber = null;
            //int? storeId = null;
            //string presence = null;
            //var response = instance.GetDrivers(appId, name, phoneNumber, storeId, presence);
            //Assert.IsInstanceOf<RestApiArrayResultDriver> (response, "response is RestApiArrayResultDriver");
        }
        
        /// <summary>
        /// Test InviteDriverToApp
        /// </summary>
        [Test]
        public void InviteDriverToAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //DriverInvitation driverInvitation = null;
            //var response = instance.InviteDriverToApp(appId, driverInvitation);
            //Assert.IsInstanceOf<RestApiResultDriver> (response, "response is RestApiResultDriver");
        }
        
        /// <summary>
        /// Test RemoveDriverFromApp
        /// </summary>
        [Test]
        public void RemoveDriverFromAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? driverId = null;
            //instance.RemoveDriverFromApp(appId, driverId);
            
        }
        
        /// <summary>
        /// Test UnassignDriverFromOrder
        /// </summary>
        [Test]
        public void UnassignDriverFromOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? orderId = null;
            //instance.UnassignDriverFromOrder(appId, orderId);
            
        }
        
    }

}

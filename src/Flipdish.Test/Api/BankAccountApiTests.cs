/* 
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flipdish.Client;
using Flipdish.Api;
using Flipdish.Model;

namespace Flipdish.Test
{
    /// <summary>
    ///  Class for testing BankAccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BankAccountApiTests
    {
        private BankAccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BankAccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BankAccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BankAccountApi
            //Assert.IsInstanceOfType(typeof(BankAccountApi), instance, "instance is a BankAccountApi");
        }

        
        /// <summary>
        /// Test AttachBankAccountToStore
        /// </summary>
        [Test]
        public void AttachBankAccountToStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? accountId = null;
            //int? storeId = null;
            //instance.AttachBankAccountToStore(appId, accountId, storeId);
            
        }
        
        /// <summary>
        /// Test CreateBankAccount
        /// </summary>
        [Test]
        public void CreateBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //BankAccountCreate account = null;
            //var response = instance.CreateBankAccount(appId, account);
            //Assert.IsInstanceOf<RestApiResultBankAccountDetail> (response, "response is RestApiResultBankAccountDetail");
        }
        
        /// <summary>
        /// Test DeleteBankAccount
        /// </summary>
        [Test]
        public void DeleteBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? id = null;
            //instance.DeleteBankAccount(appId, id);
            
        }
        
        /// <summary>
        /// Test GetBankAccount
        /// </summary>
        [Test]
        public void GetBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string appId = null;
            //var response = instance.GetBankAccount(id, appId);
            //Assert.IsInstanceOf<RestApiResultBankAccountDetail> (response, "response is RestApiResultBankAccountDetail");
        }
        
        /// <summary>
        /// Test GetBankAccounts
        /// </summary>
        [Test]
        public void GetBankAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetBankAccounts(appId);
            //Assert.IsInstanceOf<RestApiArrayResultBankAccountSummary> (response, "response is RestApiArrayResultBankAccountSummary");
        }
        
        /// <summary>
        /// Test UpdateBankAccount
        /// </summary>
        [Test]
        public void UpdateBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? id = null;
            //BankAccountCreate account = null;
            //instance.UpdateBankAccount(appId, id, account);
            
        }
        
        /// <summary>
        /// Test UpdateBankAccountState
        /// </summary>
        [Test]
        public void UpdateBankAccountStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? accountId = null;
            //string state = null;
            //instance.UpdateBankAccountState(appId, accountId, state);
            
        }
        
    }

}
